
allears_EVK_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800ceac  0800ceac  0001ceac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d804  0800d804  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d804  0800d804  0001d804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d80c  0800d80c  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d80c  0800d80c  0001d80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d810  0800d810  0001d810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800d814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  200000f0  0800d904  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200006e0  0800d904  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000210ee  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050ea  00000000  00000000  0004120e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  000462f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001918  00000000  00000000  00047ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ac2  00000000  00000000  000497d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bf68  00000000  00000000  0007229a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e414e  00000000  00000000  0009e202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007670  00000000  00000000  001823a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce94 	.word	0x0800ce94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	0800ce94 	.word	0x0800ce94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <tdUsart1_handlerGet>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
UART_HandleTypeDef* tdUsart1_handlerGet(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	return &huart1;
 8000578:	4b02      	ldr	r3, [pc, #8]	; (8000584 <tdUsart1_handlerGet+0x10>)
}
 800057a:	4618      	mov	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	200003d8 	.word	0x200003d8

08000588 <USER_DMA_INIT>:

void USER_DMA_INIT(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2100      	movs	r1, #0
 8000590:	200e      	movs	r0, #14
 8000592:	f004 fc92 	bl	8004eba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000596:	200e      	movs	r0, #14
 8000598:	f004 fcab 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	200f      	movs	r0, #15
 80005a2:	f004 fc8a 	bl	8004eba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005a6:	200f      	movs	r0, #15
 80005a8:	f004 fca3 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_GPIO_EXTI_Callback>:

/*
 * STIM LIB :: EXTI CALLBACK
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Trigger Input External Interrupt Process
	 * */
	stimLib_trgInput_callback(GPIO_Pin);
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	4618      	mov	r0, r3
 80005be:	f009 fe03 	bl	800a1c8 <stimLib_trgInput_callback>

	/* Application Code */
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_TIM_ErrorCallback>:

/*
 * STIM LIB :: PULSE FINISH INTERRUPT
 * */
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	stimLib_timError_callback(htim);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f009 fe39 	bl	800a24c <stimLib_timError_callback>
	TD_DEBUG_PRINT(("HAL_TIM_ErrorCallback\n"));
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <HAL_TIM_ErrorCallback+0x1c>)
 80005dc:	f00b fc94 	bl	800bf08 <puts>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	0800ceac 	.word	0x0800ceac

080005ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	TD_DEBUG_PRINT(("HAL_TIM_PWM_PulseFinishedHalfCpltCallback\n"));
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 80005f6:	f00b fc87 	bl	800bf08 <puts>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	0800cec4 	.word	0x0800cec4

08000608 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	stimLib_timPwmPluseFinished_callback(htim);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f009 fe25 	bl	800a260 <stimLib_timPwmPluseFinished_callback>
	TD_DEBUG_PRINT(("HAL_TIM_PWM_PulseFinishedCallback\n"));
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000618:	f00b fc76 	bl	800bf08 <puts>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	0800cef0 	.word	0x0800cef0

08000628 <HAL_TIM_PeriodElapsedCallback>:

/*
 * TIMER INTERRUPT :: STEPUP SCHEDULER
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	stimLib_stepup_ctrlCallback(htim);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f009 fdb7 	bl	800a1a4 <stimLib_stepup_ctrlCallback>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <HAL_ADC_ErrorCallback>:

/*
 * STIM LIB :: ADC Error Callback
 * */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
	stimLib_adcError_callback();
 8000646:	f009 fda1 	bl	800a18c <stimLib_adcError_callback>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <HAL_ADC_LevelOutOfWindowCallback>:

/*
 * STIM LIB :: Ste-up ADC watchdog
 * */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	stimLib_adcWatchdoc_callback();
 800065a:	f009 fd87 	bl	800a16c <stimLib_adcWatchdoc_callback>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800066e:	f002 f87b 	bl	8002768 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000672:	f000 f821 	bl	80006b8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_USART3_UART_Init();
 8000676:	f000 f89f 	bl	80007b8 <MX_USART3_UART_Init>
	stimLib_stimInit();
 800067a:	f009 fb71 	bl	8009d60 <stimLib_stimInit>
	USER_DMA_INIT();
 800067e:	f7ff ff83 	bl	8000588 <USER_DMA_INIT>
	MX_USART1_UART_Init();
 8000682:	f000 f869 	bl	8000758 <MX_USART1_UART_Init>
	MX_ADC1_Init();
	MX_ADC2_Init();
	MX_USART1_UART_Init();
	/* USER CODE BEGIN 2 */
#endif
	TD_DEBUG_INIT();
 8000686:	f001 ffd5 	bl	8002634 <tdDebugInit>
	TD_DEBUG_PRINT(("main() starts\n"));
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <main+0x4c>)
 800068c:	f00b fc3c 	bl	800bf08 <puts>

	tdUart1_init();
 8000690:	f001 fd94 	bl	80021bc <tdUart1_init>
	btMsg_init();
 8000694:	f001 f90c 	bl	80018b0 <btMsg_init>

#if 1
	stim_signal_cfg_t pulse_data;

	pulse_data.freq = 10;
 8000698:	230a      	movs	r3, #10
 800069a:	713b      	strb	r3, [r7, #4]
	pulse_data.pulse_width = 1000;
 800069c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a0:	80fb      	strh	r3, [r7, #6]
	pulse_data.degree = 20;
 80006a2:	2314      	movs	r3, #20
 80006a4:	723b      	strb	r3, [r7, #8]
	stimLib_stimSignalConfig(&pulse_data);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f009 fb77 	bl	8009d9c <stimLib_stimSignalConfig>

		stimLib_stimPause();
		HAL_Delay(300);
		stimLib_stimSessionStop();
#endif
		td_Schedule();
 80006ae:	f000 fd59 	bl	8001164 <td_Schedule>
 80006b2:	e7fc      	b.n	80006ae <main+0x46>
 80006b4:	0800cf14 	.word	0x0800cf14

080006b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b096      	sub	sp, #88	; 0x58
 80006bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2244      	movs	r2, #68	; 0x44
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00b fb7a 	bl	800bdc0 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006de:	f005 f9d3 	bl	8005a88 <HAL_PWREx_ControlVoltageScaling>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x34>
	{
		Error_Handler();
 80006e8:	f000 f896 	bl	8000818 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ec:	2310      	movs	r3, #16
 80006ee:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f8:	2360      	movs	r3, #96	; 0x60
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000700:	2301      	movs	r3, #1
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000708:	2328      	movs	r3, #40	; 0x28
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4618      	mov	r0, r3
 800071a:	f005 fa0b 	bl	8005b34 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8000724:	f000 f878 	bl	8000818 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000728:	230f      	movs	r3, #15
 800072a:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2303      	movs	r3, #3
 800072e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	2104      	movs	r1, #4
 8000740:	4618      	mov	r0, r3
 8000742:	f005 fe59 	bl	80063f8 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800074c:	f000 f864 	bl	8000818 <Error_Handler>
	}
}
 8000750:	bf00      	nop
 8000752:	3758      	adds	r7, #88	; 0x58
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_USART1_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART1_UART_Init+0x58>)
 800079c:	f007 fffa 	bl	8008794 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80007a6:	f000 f837 	bl	8000818 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200003d8 	.word	0x200003d8
 80007b4:	40013800 	.word	0x40013800

080007b8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART3_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007be:	4a15      	ldr	r2, [pc, #84]	; (8000814 <MX_USART3_UART_Init+0x5c>)
 80007c0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART3_UART_Init+0x58>)
 80007fc:	f007 ffca 	bl	8008794 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8000806:	f000 f807 	bl	8000818 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000045c 	.word	0x2000045c
 8000814:	40004800 	.word	0x40004800

08000818 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	; 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	; 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a67      	ldr	r2, [pc, #412]	; (8000a28 <HAL_ADC_MspInit+0x1bc>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d161      	bne.n	8000952 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800088e:	4b67      	ldr	r3, [pc, #412]	; (8000a2c <HAL_ADC_MspInit+0x1c0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	4a65      	ldr	r2, [pc, #404]	; (8000a2c <HAL_ADC_MspInit+0x1c0>)
 8000896:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000898:	4b64      	ldr	r3, [pc, #400]	; (8000a2c <HAL_ADC_MspInit+0x1c0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10b      	bne.n	80008b8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008a0:	4b63      	ldr	r3, [pc, #396]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a4:	4a62      	ldr	r2, [pc, #392]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 80008a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ac:	4b60      	ldr	r3, [pc, #384]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 80008ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b5d      	ldr	r3, [pc, #372]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008bc:	4a5c      	ldr	r2, [pc, #368]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c4:	4b5a      	ldr	r3, [pc, #360]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STEP_UP_FEEDBACK_Pin;
 80008d0:	2310      	movs	r3, #16
 80008d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008d4:	230b      	movs	r3, #11
 80008d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_UP_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f004 fe35 	bl	8005554 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 80008ea:	4b52      	ldr	r3, [pc, #328]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 80008ec:	4a52      	ldr	r2, [pc, #328]	; (8000a38 <HAL_ADC_MspInit+0x1cc>)
 80008ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80008f0:	4b50      	ldr	r3, [pc, #320]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f6:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008fc:	4b4d      	ldr	r3, [pc, #308]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000908:	4b4a      	ldr	r3, [pc, #296]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 800090a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000910:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 8000912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000916:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000918:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 800091a:	2220      	movs	r2, #32
 800091c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000924:	4843      	ldr	r0, [pc, #268]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 8000926:	f004 fb0d 	bl	8004f44 <HAL_DMA_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000930:	f7ff ff72 	bl	8000818 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a3f      	ldr	r2, [pc, #252]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 8000938:	64da      	str	r2, [r3, #76]	; 0x4c
 800093a:	4a3e      	ldr	r2, [pc, #248]	; (8000a34 <HAL_ADC_MspInit+0x1c8>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	2012      	movs	r0, #18
 8000946:	f004 fab8 	bl	8004eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800094a:	2012      	movs	r0, #18
 800094c:	f004 fad1 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000950:	e065      	b.n	8000a1e <HAL_ADC_MspInit+0x1b2>
  else if(hadc->Instance==ADC2)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a39      	ldr	r2, [pc, #228]	; (8000a3c <HAL_ADC_MspInit+0x1d0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d160      	bne.n	8000a1e <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC_CLK_ENABLED++;
 800095c:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <HAL_ADC_MspInit+0x1c0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <HAL_ADC_MspInit+0x1c0>)
 8000964:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000966:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <HAL_ADC_MspInit+0x1c0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d10b      	bne.n	8000986 <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a2f      	ldr	r2, [pc, #188]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 8000974:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a29      	ldr	r2, [pc, #164]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <HAL_ADC_MspInit+0x1c4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PEAK_DETECTION_R_Pin|PEAK_DETECTION_L_Pin;
 800099e:	23c0      	movs	r3, #192	; 0xc0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009a2:	230b      	movs	r3, #11
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b4:	f004 fdce 	bl	8005554 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 80009ba:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <HAL_ADC_MspInit+0x1d8>)
 80009bc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 80009d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009dc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 80009e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 80009e8:	2220      	movs	r2, #32
 80009ea:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009f2:	4813      	ldr	r0, [pc, #76]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 80009f4:	f004 faa6 	bl	8004f44 <HAL_DMA_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_ADC_MspInit+0x196>
      Error_Handler();
 80009fe:	f7ff ff0b 	bl	8000818 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 8000a06:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <HAL_ADC_MspInit+0x1d4>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2101      	movs	r1, #1
 8000a12:	2012      	movs	r0, #18
 8000a14:	f004 fa51 	bl	8004eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a18:	2012      	movs	r0, #18
 8000a1a:	f004 fa6a 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	50040000 	.word	0x50040000
 8000a2c:	20000570 	.word	0x20000570
 8000a30:	40021000 	.word	0x40021000
 8000a34:	200001d4 	.word	0x200001d4
 8000a38:	40020430 	.word	0x40020430
 8000a3c:	50040100 	.word	0x50040100
 8000a40:	2000021c 	.word	0x2000021c
 8000a44:	4002001c 	.word	0x4002001c

08000a48 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <HAL_ADC_MspDeInit+0x8c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d119      	bne.n	8000a8e <HAL_ADC_MspDeInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_ADC_CLK_ENABLED--;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_ADC_MspDeInit+0x90>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <HAL_ADC_MspDeInit+0x90>)
 8000a62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==0){
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_ADC_MspDeInit+0x90>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d105      	bne.n	8000a78 <HAL_ADC_MspDeInit+0x30>
      __HAL_RCC_ADC_CLK_DISABLE();
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <HAL_ADC_MspDeInit+0x94>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	4a1a      	ldr	r2, [pc, #104]	; (8000adc <HAL_ADC_MspDeInit+0x94>)
 8000a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a76:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(STEP_UP_FEEDBACK_GPIO_Port, STEP_UP_FEEDBACK_Pin);
 8000a78:	2110      	movs	r1, #16
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7e:	f004 fedb 	bl	8005838 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4618      	mov	r0, r3
 8000a88:	f004 fb14 	bl	80050b4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8000a8c:	e01d      	b.n	8000aca <HAL_ADC_MspDeInit+0x82>
  else if(hadc->Instance==ADC2)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <HAL_ADC_MspDeInit+0x98>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d118      	bne.n	8000aca <HAL_ADC_MspDeInit+0x82>
    HAL_RCC_ADC_CLK_ENABLED--;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_ADC_MspDeInit+0x90>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_ADC_MspDeInit+0x90>)
 8000aa0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==0){
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_ADC_MspDeInit+0x90>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d105      	bne.n	8000ab6 <HAL_ADC_MspDeInit+0x6e>
      __HAL_RCC_ADC_CLK_DISABLE();
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_ADC_MspDeInit+0x94>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <HAL_ADC_MspDeInit+0x94>)
 8000ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOA, PEAK_DETECTION_R_Pin|PEAK_DETECTION_L_Pin);
 8000ab6:	21c0      	movs	r1, #192	; 0xc0
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abc:	f004 febc 	bl	8005838 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f004 faf5 	bl	80050b4 <HAL_DMA_DeInit>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	50040000 	.word	0x50040000
 8000ad8:	20000570 	.word	0x20000570
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	50040100 	.word	0x50040100

08000ae4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a49      	ldr	r2, [pc, #292]	; (8000c18 <HAL_TIM_PWM_MspInit+0x134>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d114      	bne.n	8000b20 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af6:	4b49      	ldr	r3, [pc, #292]	; (8000c1c <HAL_TIM_PWM_MspInit+0x138>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	4a48      	ldr	r2, [pc, #288]	; (8000c1c <HAL_TIM_PWM_MspInit+0x138>)
 8000afc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b00:	6613      	str	r3, [r2, #96]	; 0x60
 8000b02:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <HAL_TIM_PWM_MspInit+0x138>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2102      	movs	r1, #2
 8000b12:	2019      	movs	r0, #25
 8000b14:	f004 f9d1 	bl	8004eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b18:	2019      	movs	r0, #25
 8000b1a:	f004 f9ea 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b1e:	e076      	b.n	8000c0e <HAL_TIM_PWM_MspInit+0x12a>
  else if(htim_pwm->Instance==TIM2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d171      	bne.n	8000c0e <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2a:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <HAL_TIM_PWM_MspInit+0x138>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a3b      	ldr	r2, [pc, #236]	; (8000c1c <HAL_TIM_PWM_MspInit+0x138>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <HAL_TIM_PWM_MspInit+0x138>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000b42:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b44:	4a37      	ldr	r2, [pc, #220]	; (8000c24 <HAL_TIM_PWM_MspInit+0x140>)
 8000b46:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8000b48:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b4e:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b50:	2210      	movs	r2, #16
 8000b52:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b54:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b66:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b68:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b6e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b72:	2220      	movs	r2, #32
 8000b74:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b76:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b78:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000b7e:	4828      	ldr	r0, [pc, #160]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b80:	f004 f9e0 	bl	8004f44 <HAL_DMA_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 8000b8a:	f7ff fe45 	bl	8000818 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
 8000b94:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba0:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <HAL_TIM_PWM_MspInit+0x13c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000ba8:	4a20      	ldr	r2, [pc, #128]	; (8000c2c <HAL_TIM_PWM_MspInit+0x148>)
 8000baa:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bca:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000bdc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000be0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000be2:	4811      	ldr	r0, [pc, #68]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000be4:	f004 f9ae 	bl	8004f44 <HAL_DMA_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_TIM_PWM_MspInit+0x10e>
      Error_Handler();
 8000bee:	f7ff fe13 	bl	8000818 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_TIM_PWM_MspInit+0x144>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2102      	movs	r1, #2
 8000c02:	201c      	movs	r0, #28
 8000c04:	f004 f959 	bl	8004eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c08:	201c      	movs	r0, #28
 8000c0a:	f004 f972 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40012c00 	.word	0x40012c00
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	20000348 	.word	0x20000348
 8000c24:	40020080 	.word	0x40020080
 8000c28:	20000390 	.word	0x20000390
 8000c2c:	40020008 	.word	0x40020008

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d113      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_TIM_Base_MspInit+0x48>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <HAL_TIM_Base_MspInit+0x48>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_TIM_Base_MspInit+0x48>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	2036      	movs	r0, #54	; 0x36
 8000c60:	f004 f92b 	bl	8004eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000c64:	2036      	movs	r0, #54	; 0x36
 8000c66:	f004 f944 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40001000 	.word	0x40001000
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_TIM_PWM_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <HAL_TIM_PWM_MspDeInit+0x68>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d109      	bne.n	8000ca2 <HAL_TIM_PWM_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c98:	6613      	str	r3, [r2, #96]	; 0x60

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 8000c9a:	2019      	movs	r0, #25
 8000c9c:	f004 f937 	bl	8004f0e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 8000ca0:	e01c      	b.n	8000cdc <HAL_TIM_PWM_MspDeInit+0x60>
  else if(htim_pwm->Instance==TIM2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000caa:	d117      	bne.n	8000cdc <HAL_TIM_PWM_MspDeInit+0x60>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000cb2:	f023 0301 	bic.w	r3, r3, #1
 8000cb6:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC2]);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f004 f9f9 	bl	80050b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC4]);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 f9f4 	bl	80050b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC3]);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 f9ef 	bl	80050b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8000cd6:	201c      	movs	r0, #28
 8000cd8:	f004 f919 	bl	8004f0e <HAL_NVIC_DisableIRQ>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012c00 	.word	0x40012c00
 8000ce8:	40021000 	.word	0x40021000

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b098      	sub	sp, #96	; 0x60
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	2234      	movs	r2, #52	; 0x34
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f00b f857 	bl	800bdc0 <memset>
  if(huart->Instance==USART1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6b      	ldr	r2, [pc, #428]	; (8000ec4 <HAL_UART_MspInit+0x1d8>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	f040 8093 	bne.w	8000e44 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d26:	f107 0318 	add.w	r3, r7, #24
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f005 fd88 	bl	8006840 <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d36:	f7ff fd6f 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d3a:	4b63      	ldr	r3, [pc, #396]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3e:	4a62      	ldr	r2, [pc, #392]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6613      	str	r3, [r2, #96]	; 0x60
 8000d46:	4b60      	ldr	r3, [pc, #384]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a5c      	ldr	r2, [pc, #368]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b5a      	ldr	r3, [pc, #360]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_UART_TX_Pin|ST_UART_RX_Pin;
 8000d6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8a:	f004 fbe3 	bl	8005554 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000d90:	4a4f      	ldr	r2, [pc, #316]	; (8000ed0 <HAL_UART_MspInit+0x1e4>)
 8000d92:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000d94:	4b4d      	ldr	r3, [pc, #308]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da0:	4b4a      	ldr	r3, [pc, #296]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000da6:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dac:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db2:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000db8:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dbe:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dc4:	4841      	ldr	r0, [pc, #260]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000dc6:	f004 f8bd 	bl	8004f44 <HAL_DMA_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000dd0:	f7ff fd22 	bl	8000818 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a3d      	ldr	r2, [pc, #244]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000dd8:	671a      	str	r2, [r3, #112]	; 0x70
 8000dda:	4a3c      	ldr	r2, [pc, #240]	; (8000ecc <HAL_UART_MspInit+0x1e0>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000de0:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000de2:	4a3d      	ldr	r2, [pc, #244]	; (8000ed8 <HAL_UART_MspInit+0x1ec>)
 8000de4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dec:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000dee:	2210      	movs	r2, #16
 8000df0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfe:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e04:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000e0a:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000e16:	482f      	ldr	r0, [pc, #188]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000e18:	f004 f894 	bl	8004f44 <HAL_DMA_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000e22:	f7ff fcf9 	bl	8000818 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a2a      	ldr	r2, [pc, #168]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000e2a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e2c:	4a29      	ldr	r2, [pc, #164]	; (8000ed4 <HAL_UART_MspInit+0x1e8>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2025      	movs	r0, #37	; 0x25
 8000e38:	f004 f83f 	bl	8004eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e3c:	2025      	movs	r0, #37	; 0x25
 8000e3e:	f004 f858 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e42:	e03b      	b.n	8000ebc <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a24      	ldr	r2, [pc, #144]	; (8000edc <HAL_UART_MspInit+0x1f0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d136      	bne.n	8000ebc <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 fcf0 	bl	8006840 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8000e66:	f7ff fcd7 	bl	8000818 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e74:	6593      	str	r3, [r2, #88]	; 0x58
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_UART_MspInit+0x1dc>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eac:	2307      	movs	r3, #7
 8000eae:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <HAL_UART_MspInit+0x1f4>)
 8000eb8:	f004 fb4c 	bl	8005554 <HAL_GPIO_Init>
}
 8000ebc:	bf00      	nop
 8000ebe:	3760      	adds	r7, #96	; 0x60
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40013800 	.word	0x40013800
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	200004e0 	.word	0x200004e0
 8000ed0:	40020058 	.word	0x40020058
 8000ed4:	20000528 	.word	0x20000528
 8000ed8:	40020044 	.word	0x40020044
 8000edc:	40004800 	.word	0x40004800
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f001 fc76 	bl	8002820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STIM_TRIGGER_INPUT_Pin);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f004 fd7d 	bl	8005a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <DMA1_Channel1_IRQHandler+0x10>)
 8000f4e:	f004 fa22 	bl	8005396 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000390 	.word	0x20000390

08000f5c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <DMA1_Channel2_IRQHandler+0x10>)
 8000f62:	f004 fa18 	bl	8005396 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000021c 	.word	0x2000021c

08000f70 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <DMA1_Channel4_IRQHandler+0x10>)
 8000f76:	f004 fa0e 	bl	8005396 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000528 	.word	0x20000528

08000f84 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <DMA1_Channel5_IRQHandler+0x10>)
 8000f8a:	f004 fa04 	bl	8005396 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200004e0 	.word	0x200004e0

08000f98 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Channel7_IRQHandler+0x10>)
 8000f9e:	f004 f9fa 	bl	8005396 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000348 	.word	0x20000348

08000fac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <ADC1_2_IRQHandler+0x14>)
 8000fb2:	f002 fb1b 	bl	80035ec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000fb6:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <ADC1_2_IRQHandler+0x18>)
 8000fb8:	f002 fb18 	bl	80035ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000010c 	.word	0x2000010c
 8000fc4:	20000170 	.word	0x20000170

08000fc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fce:	f006 fc19 	bl	8007804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000264 	.word	0x20000264

08000fdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM2_IRQHandler+0x10>)
 8000fe2:	f006 fc0f 	bl	8007804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200002b0 	.word	0x200002b0

08000ff0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <USART1_IRQHandler+0x10>)
 8000ff6:	f007 fcab 	bl	8008950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200003d8 	.word	0x200003d8

08001004 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QCC_CTRL0_Pin);
 8001008:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800100c:	f004 fd16 	bl	8005a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QCC_CTRL1_Pin);
 8001010:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001014:	f004 fd12 	bl	8005a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM6_IRQHandler+0x10>)
 8001022:	f006 fbef 	bl	8007804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200002fc 	.word	0x200002fc

08001030 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e00a      	b.n	8001058 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001042:	f3af 8000 	nop.w
 8001046:	4601      	mov	r1, r0
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	b2ca      	uxtb	r2, r1
 8001050:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbf0      	blt.n	8001042 <_read+0x12>
  }

  return len;
 8001060:	687b      	ldr	r3, [r7, #4]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_close>:
  }
  return len;
}

int _close(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001092:	605a      	str	r2, [r3, #4]
  return 0;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_isatty>:

int _isatty(int file)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f00a fe24 	bl	800bd50 <__errno>
 8001108:	4603      	mov	r3, r0
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000a000 	.word	0x2000a000
 8001134:	000007ff 	.word	0x000007ff
 8001138:	20000574 	.word	0x20000574
 800113c:	200006e0 	.word	0x200006e0

08001140 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SystemInit+0x20>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <SystemInit+0x20>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <td_Schedule>:

/*
 * POLLING SCHEDULEER :: CALL BY MAIN.C
 * */
void td_Schedule(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

	btMsg_rcvData_handle();
 8001168:	f000 fba8 	bl	80018bc <btMsg_rcvData_handle>

	if (HAL_GetTick() - schdule_tick >= TD_SCHED_HANDLE_PERIOD)
 800116c:	f001 fb6c 	bl	8002848 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <td_Schedule+0x34>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b09      	cmp	r3, #9
 800117a:	d90a      	bls.n	8001192 <td_Schedule+0x2e>
	{
		td_Sys_FSM_State_Handle();
 800117c:	f000 f832 	bl	80011e4 <td_Sys_FSM_State_Handle>

		/* STIM */
		td_Stim_Param_Update_Handle();
 8001180:	f000 fada 	bl	8001738 <td_Stim_Param_Update_Handle>
		td_Stim_Timeout_Handle();
 8001184:	f000 fb5e 	bl	8001844 <td_Stim_Timeout_Handle>

		schdule_tick = HAL_GetTick();
 8001188:	f001 fb5e 	bl	8002848 <HAL_GetTick>
 800118c:	4603      	mov	r3, r0
 800118e:	4a02      	ldr	r2, [pc, #8]	; (8001198 <td_Schedule+0x34>)
 8001190:	6013      	str	r3, [r2, #0]
	}
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000578 	.word	0x20000578

0800119c <td_Get_Sys_FSM_State>:
	TD_CUR_SYS_STATE = TD_SYS_STATE_MAX;
	td_Set_Sys_FSM_State(TD_SYS_STATE_INIT);
}

td_sys_state_t td_Get_Sys_FSM_State(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	return TD_CUR_SYS_STATE;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <td_Get_Sys_FSM_State+0x14>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000057c 	.word	0x2000057c

080011b4 <td_Set_Sys_FSM_State_Start>:
	TD_CUR_SYS_STATE = TD_SYS_STATE_IDLE;
	cur_state = TD_SYS_STATE_IDLE;
}

void td_Set_Sys_FSM_State_Start()
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	cur_state = TD_SYS_STATE_RUN;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <td_Set_Sys_FSM_State_Start+0x14>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	2000057d 	.word	0x2000057d

080011cc <td_Set_Sys_FSM_State_Stop>:

void td_Set_Sys_FSM_State_Stop()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	cur_state = TD_SYS_STATE_IDLE;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <td_Set_Sys_FSM_State_Stop+0x14>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	2000057d 	.word	0x2000057d

080011e4 <td_Sys_FSM_State_Handle>:

void td_Sys_FSM_State_Handle(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
			cur_state = TD_SYS_STATE_IDLE;
		}
	}
#endif

	if (TD_CUR_SYS_STATE != cur_state)
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <td_Sys_FSM_State_Handle+0x20>)
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <td_Sys_FSM_State_Handle+0x24>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d004      	beq.n	80011fe <td_Sys_FSM_State_Handle+0x1a>
	{
		td_Set_Sys_FSM_State(cur_state);
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <td_Sys_FSM_State_Handle+0x24>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f807 	bl	800120c <td_Set_Sys_FSM_State>
#if 0
		td_Btn_Handled_Clear();
#endif
	}
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000057c 	.word	0x2000057c
 8001208:	2000057d 	.word	0x2000057d

0800120c <td_Set_Sys_FSM_State>:

void td_Set_Sys_FSM_State(td_sys_state_t state)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]

	if (TD_CUR_SYS_STATE == state || state >= TD_SYS_STATE_MAX)
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <td_Set_Sys_FSM_State+0x74>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	79fa      	ldrb	r2, [r7, #7]
 800121c:	429a      	cmp	r2, r3
 800121e:	d02b      	beq.n	8001278 <td_Set_Sys_FSM_State+0x6c>
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d828      	bhi.n	8001278 <td_Set_Sys_FSM_State+0x6c>
	{
		return;
	}

	switch (state)
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b03      	cmp	r3, #3
 800122a:	d81a      	bhi.n	8001262 <td_Set_Sys_FSM_State+0x56>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <td_Set_Sys_FSM_State+0x28>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001245 	.word	0x08001245
 8001238:	0800124d 	.word	0x0800124d
 800123c:	0800126f 	.word	0x0800126f
 8001240:	08001257 	.word	0x08001257
	case TD_SYS_STATE_INIT:
		break;
	case TD_SYS_STATE_IDLE:

		/* STIM PAUSE */
		stimLib_stimPause();
 8001244:	f008 fe5c 	bl	8009f00 <stimLib_stimPause>

		/* SESSION STOP */
		stimLib_stimSessionStop();
 8001248:	f008 fe16 	bl	8009e78 <stimLib_stimSessionStop>

	case TD_SYS_STATE_RUN:

		/* SESSION START */
		stimLib_stimSessionStart();
 800124c:	f008 fde8 	bl	8009e20 <stimLib_stimSessionStart>

		/* STIM START */
		stimLib_stimStart();
 8001250:	f008 fe45 	bl	8009ede <stimLib_stimStart>

		break;
 8001254:	e00c      	b.n	8001270 <td_Set_Sys_FSM_State+0x64>

	case TD_SYS_STATE_ERROR:
		TD_DEBUG_PRINT(("ERROR TD STATE: %d\n", state));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4619      	mov	r1, r3
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <td_Set_Sys_FSM_State+0x78>)
 800125c:	f00a fdb8 	bl	800bdd0 <iprintf>
		break;
 8001260:	e006      	b.n	8001270 <td_Set_Sys_FSM_State+0x64>

	default:
		/* Cannot be here */
		TD_DEBUG_PRINT(("UNKNOWN TD STATE: %d\n", state));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4619      	mov	r1, r3
 8001266:	4808      	ldr	r0, [pc, #32]	; (8001288 <td_Set_Sys_FSM_State+0x7c>)
 8001268:	f00a fdb2 	bl	800bdd0 <iprintf>
		break;
 800126c:	e000      	b.n	8001270 <td_Set_Sys_FSM_State+0x64>
		break;
 800126e:	bf00      	nop
	}
	TD_CUR_SYS_STATE = state;
 8001270:	4a03      	ldr	r2, [pc, #12]	; (8001280 <td_Set_Sys_FSM_State+0x74>)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	7013      	strb	r3, [r2, #0]
 8001276:	e000      	b.n	800127a <td_Set_Sys_FSM_State+0x6e>
		return;
 8001278:	bf00      	nop
}
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000057c 	.word	0x2000057c
 8001284:	0800cf24 	.word	0x0800cf24
 8001288:	0800cf38 	.word	0x0800cf38

0800128c <td_Stim_Is_Started>:

/*
 * PARAMETER CHECK FUNCTION :: PARAMETER
 * */
uint8_t td_Stim_Is_Started(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	return TD_STIM_ACTIVE;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <td_Stim_Is_Started+0x14>)
 8001292:	79db      	ldrb	r3, [r3, #7]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200005a8 	.word	0x200005a8

080012a4 <td_Stim_Cur_Mode_Get>:
uint8_t td_Stim_Cur_Mode_Get(void) // RETURN STIM STATE
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	return TD_STIM_CUR_MODE;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <td_Stim_Cur_Mode_Get+0x14>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200005a8 	.word	0x200005a8

080012bc <td_Stim_Cur_Level_Get>:
uint8_t td_Stim_Cur_Level_Get(void) // RETURN MODE LEVEL
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	return TD_STIM_CUR_LEVEL;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <td_Stim_Cur_Level_Get+0x14>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200005a8 	.word	0x200005a8

080012d4 <td_Stim_Cur_Voltage_Get>:
uint8_t td_Stim_Cur_Voltage_Get(void) // RETURN DAC LEVEL
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	return ex_pulse_data.degree;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <td_Stim_Cur_Voltage_Get+0x14>)
 80012da:	791b      	ldrb	r3, [r3, #4]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000580 	.word	0x20000580

080012ec <td_Stim_Cur_Detection_Level_Get>:

/*
 * STIM DETECTION LEVEL CHECK :: PARAMETER
 * */
uint8_t td_Stim_Cur_Detection_Level_Get(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return TD_STIM_CUR_DETECTOIN_LEVEL;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <td_Stim_Cur_Detection_Level_Get+0x14>)
 80012f2:	791b      	ldrb	r3, [r3, #4]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200005a8 	.word	0x200005a8

08001304 <td_Stim_Detection_LV_Check_Is_Active>:
#endif
	return 0;
}

uint8_t td_Stim_Detection_LV_Check_Is_Active(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	return (TD_STIM_CUR_DETECTOIN_LEVEL > 0);
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <td_Stim_Detection_LV_Check_Is_Active+0x1c>)
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf14      	ite	ne
 8001310:	2301      	movne	r3, #1
 8001312:	2300      	moveq	r3, #0
 8001314:	b2db      	uxtb	r3, r3
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	200005a8 	.word	0x200005a8

08001324 <td_Stim_Detection_Level>:

uint8_t td_Stim_Detection_Level(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return TD_STIM_DETECTION_LEVEL;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <td_Stim_Detection_Level+0x14>)
 800132a:	799b      	ldrb	r3, [r3, #6]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200005a8 	.word	0x200005a8

0800133c <td_Stim_Mode_Config_Update>:

/*
 * MODE CONFIG FUNCTION :: Action : BT_MODE_SET_REQ
 * */
void td_Stim_Mode_Config_Update(uint8_t mode)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	if (mode > TD_STIM_MODE_LAST || TD_STIM_CUR_MODE == mode)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b06      	cmp	r3, #6
 800134a:	d804      	bhi.n	8001356 <td_Stim_Mode_Config_Update+0x1a>
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <td_Stim_Mode_Config_Update+0xb8>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	79fa      	ldrb	r2, [r7, #7]
 8001352:	429a      	cmp	r2, r3
 8001354:	d105      	bne.n	8001362 <td_Stim_Mode_Config_Update+0x26>
	{
		TD_DEBUG_PRINT(("STIM MODE SET IS IGNORED: %d\r\n", mode));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4619      	mov	r1, r3
 800135a:	4827      	ldr	r0, [pc, #156]	; (80013f8 <td_Stim_Mode_Config_Update+0xbc>)
 800135c:	f00a fd38 	bl	800bdd0 <iprintf>
		return;
 8001360:	e044      	b.n	80013ec <td_Stim_Mode_Config_Update+0xb0>
	}

	/* CHANGE TO NEW MODE */
	TD_RAW_MODE_SET_F = TD_STIM_OP_NORMAL;
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <td_Stim_Mode_Config_Update+0xc0>)
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
	TD_RAW_STIM_MODE = mode;
 8001368:	4a24      	ldr	r2, [pc, #144]	; (80013fc <td_Stim_Mode_Config_Update+0xc0>)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	70d3      	strb	r3, [r2, #3]

	/* APPLY PULSE FREQ */
	ex_pulse_data.freq = TD_STIM_MODE_CFG_PULSE_FREQ_GET(mode);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	4a23      	ldr	r2, [pc, #140]	; (8001400 <td_Stim_Mode_Config_Update+0xc4>)
 8001372:	5cd2      	ldrb	r2, [r2, r3]
 8001374:	4b23      	ldr	r3, [pc, #140]	; (8001404 <td_Stim_Mode_Config_Update+0xc8>)
 8001376:	701a      	strb	r2, [r3, #0]

	/* APPLY GROUP PULSE DATA */
	TD_RAW_GROUP_PULSE_F = TD_STIM_MODE_CFG_GP_ENABLE_GET(mode);
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	4923      	ldr	r1, [pc, #140]	; (8001408 <td_Stim_Mode_Config_Update+0xcc>)
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	440b      	add	r3, r1
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <td_Stim_Mode_Config_Update+0xc0>)
 8001388:	715a      	strb	r2, [r3, #5]
	TD_RAW_GROUP_PULSE_DISABLE_TIME = TD_STIM_MODE_CFG_GP_OFF_TIME_GET(mode);
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	491e      	ldr	r1, [pc, #120]	; (8001408 <td_Stim_Mode_Config_Update+0xcc>)
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	440b      	add	r3, r1
 8001396:	3301      	adds	r3, #1
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b29a      	uxth	r2, r3
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <td_Stim_Mode_Config_Update+0xc0>)
 800139e:	80da      	strh	r2, [r3, #6]
	TD_RAW_GROUP_PULSE_ENABLE_TIME = TD_STIM_MODE_CFG_GP_ON_TIME_GET(mode);
 80013a0:	79fa      	ldrb	r2, [r7, #7]
 80013a2:	4919      	ldr	r1, [pc, #100]	; (8001408 <td_Stim_Mode_Config_Update+0xcc>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	3302      	adds	r3, #2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <td_Stim_Mode_Config_Update+0xc0>)
 80013b4:	811a      	strh	r2, [r3, #8]

	/* RESET STIM LEVEL */
	TD_STIM_STATE_LEVEL_UPDATE(0);
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <td_Stim_Mode_Config_Update+0xb8>)
 80013b8:	789a      	ldrb	r2, [r3, #2]
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <td_Stim_Mode_Config_Update+0xb8>)
 80013bc:	70da      	strb	r2, [r3, #3]
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <td_Stim_Mode_Config_Update+0xb8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	709a      	strb	r2, [r3, #2]
	ex_pulse_data.pulse_width = TD_STIM_LEVEL_CFG_PW_GET(0);
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <td_Stim_Mode_Config_Update+0xd0>)
 80013c6:	881a      	ldrh	r2, [r3, #0]
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <td_Stim_Mode_Config_Update+0xc8>)
 80013ca:	805a      	strh	r2, [r3, #2]

#ifdef STIM_LIB_EVKIT_CV
	ex_pulse_data.degree = TD_STIM_LEVEL_CFG_VOLT_GET(0);
#endif
#ifdef STIM_LIB_EVKIT_CC
	ex_pulse_data.degree = TD_STIM_LEVEL_CFG_DAC_GET(0);
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <td_Stim_Mode_Config_Update+0xd0>)
 80013ce:	78da      	ldrb	r2, [r3, #3]
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <td_Stim_Mode_Config_Update+0xc8>)
 80013d2:	711a      	strb	r2, [r3, #4]
#endif

	TD_RAW_STIM_LEVEL = 0;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <td_Stim_Mode_Config_Update+0xc0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	711a      	strb	r2, [r3, #4]

	/* UPDATE MODE */
	TD_STIM_STATE_MODE_UPDATE(mode);
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <td_Stim_Mode_Config_Update+0xb8>)
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <td_Stim_Mode_Config_Update+0xb8>)
 80013e0:	705a      	strb	r2, [r3, #1]
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <td_Stim_Mode_Config_Update+0xb8>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	7013      	strb	r3, [r2, #0]

	/* STIM STOP :: SYSTEM FSM */
	td_Set_Sys_FSM_State_Stop();
 80013e8:	f7ff fef0 	bl	80011cc <td_Set_Sys_FSM_State_Stop>
}
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200005a8 	.word	0x200005a8
 80013f8:	0800cf50 	.word	0x0800cf50
 80013fc:	20000594 	.word	0x20000594
 8001400:	20000004 	.word	0x20000004
 8001404:	20000580 	.word	0x20000580
 8001408:	2000000c 	.word	0x2000000c
 800140c:	20000024 	.word	0x20000024

08001410 <td_Stim_Level_Config_Update>:

/*
 * LEVEL CONFIG FUNCTION :: Action : BT_LEVEL_SET_REQ
 * */
void td_Stim_Level_Config_Update(uint8_t level)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	/* Level 0 means to activate stimulation voltage output */
	if (level != 0 && (level > TD_STIM_LEVEL_MAX || TD_STIM_CUR_LEVEL == level))
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00d      	beq.n	800143c <td_Stim_Level_Config_Update+0x2c>
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b17      	cmp	r3, #23
 8001424:	d804      	bhi.n	8001430 <td_Stim_Level_Config_Update+0x20>
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <td_Stim_Level_Config_Update+0x8c>)
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	79fa      	ldrb	r2, [r7, #7]
 800142c:	429a      	cmp	r2, r3
 800142e:	d105      	bne.n	800143c <td_Stim_Level_Config_Update+0x2c>
	{
		TD_DEBUG_PRINT(("STIM LEVEL SET IS IGNORED: %d\r\n", level));
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4619      	mov	r1, r3
 8001434:	481a      	ldr	r0, [pc, #104]	; (80014a0 <td_Stim_Level_Config_Update+0x90>)
 8001436:	f00a fccb 	bl	800bdd0 <iprintf>
		return;
 800143a:	e02c      	b.n	8001496 <td_Stim_Level_Config_Update+0x86>
	}
	TD_RAW_STIM_LEVEL = level;
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <td_Stim_Level_Config_Update+0x94>)
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	7113      	strb	r3, [r2, #4]
	ex_pulse_data.pulse_width = TD_STIM_LEVEL_CFG_PW_GET(level);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <td_Stim_Level_Config_Update+0x98>)
 8001446:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <td_Stim_Level_Config_Update+0x9c>)
 800144c:	805a      	strh	r2, [r3, #2]
#ifdef STIM_LIB_EVKIT_CV
	ex_pulse_data.degree = TD_STIM_LEVEL_CFG_VOLT_GET(level);
#endif

#ifdef STIM_LIB_EVKIT_CC
	ex_pulse_data.degree = TD_STIM_LEVEL_CFG_DAC_GET(level);
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <td_Stim_Level_Config_Update+0x98>)
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	78da      	ldrb	r2, [r3, #3]
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <td_Stim_Level_Config_Update+0x9c>)
 800145a:	711a      	strb	r2, [r3, #4]
#endif

	TD_RAW_PWM_CHANGE_F = 1;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <td_Stim_Level_Config_Update+0x94>)
 800145e:	2201      	movs	r2, #1
 8001460:	709a      	strb	r2, [r3, #2]
	TD_RAW_MODE_SET_F = TD_STIM_OP_NORMAL;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <td_Stim_Level_Config_Update+0x94>)
 8001464:	2201      	movs	r2, #1
 8001466:	705a      	strb	r2, [r3, #1]

	/* UPDATE LEVEL */
	TD_STIM_STATE_LEVEL_UPDATE(level);
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <td_Stim_Level_Config_Update+0x8c>)
 800146a:	789a      	ldrb	r2, [r3, #2]
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <td_Stim_Level_Config_Update+0x8c>)
 800146e:	70da      	strb	r2, [r3, #3]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <td_Stim_Level_Config_Update+0x8c>)
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	7093      	strb	r3, [r2, #2]
	 * 2. session Stop
	 * 3. STIM Parameter Update
	 * 4. session ReStart
	 * 5. stim ReStart
	 * */
	stimLib_stimPause();
 8001476:	f008 fd43 	bl	8009f00 <stimLib_stimPause>
	stimLib_stimSessionStop();
 800147a:	f008 fcfd 	bl	8009e78 <stimLib_stimSessionStop>

	stimLib_stimSignalConfig(&ex_pulse_data);
 800147e:	480b      	ldr	r0, [pc, #44]	; (80014ac <td_Stim_Level_Config_Update+0x9c>)
 8001480:	f008 fc8c 	bl	8009d9c <stimLib_stimSignalConfig>

	if (td_Get_Sys_FSM_State() == TD_SYS_STATE_RUN)
 8001484:	f7ff fe8a 	bl	800119c <td_Get_Sys_FSM_State>
 8001488:	4603      	mov	r3, r0
 800148a:	2b01      	cmp	r3, #1
 800148c:	d103      	bne.n	8001496 <td_Stim_Level_Config_Update+0x86>
	{
		stimLib_stimSessionStart();
 800148e:	f008 fcc7 	bl	8009e20 <stimLib_stimSessionStart>
		stimLib_stimStart();
 8001492:	f008 fd24 	bl	8009ede <stimLib_stimStart>
	}
}
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200005a8 	.word	0x200005a8
 80014a0:	0800cf70 	.word	0x0800cf70
 80014a4:	20000594 	.word	0x20000594
 80014a8:	20000024 	.word	0x20000024
 80014ac:	20000580 	.word	0x20000580

080014b0 <td_Stim_Detection_Check_Start>:

/*
 * STIM DETECTION LEVEL CHECK START
 * */
void td_Stim_Detection_Check_Start(uint8_t level)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	TD_DEBUG_PRINT(("td_Stim_Detection_Check_Start: %d\r\n", level));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4619      	mov	r1, r3
 80014be:	4826      	ldr	r0, [pc, #152]	; (8001558 <td_Stim_Detection_Check_Start+0xa8>)
 80014c0:	f00a fc86 	bl	800bdd0 <iprintf>

	/* Level 0 means stop electeric detect or reset parameters */
	if (level != 0 && (level > TD_STIM_ELDET_LEVEL_MAX || TD_STIM_CUR_DETECTOIN_LEVEL == level))
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00d      	beq.n	80014e6 <td_Stim_Detection_Check_Start+0x36>
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b10      	cmp	r3, #16
 80014ce:	d804      	bhi.n	80014da <td_Stim_Detection_Check_Start+0x2a>
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <td_Stim_Detection_Check_Start+0xac>)
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	79fa      	ldrb	r2, [r7, #7]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d105      	bne.n	80014e6 <td_Stim_Detection_Check_Start+0x36>
	{
		TD_DEBUG_PRINT(("STIM DETECTION IS IGNORED: %d\r\n", level));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4619      	mov	r1, r3
 80014de:	4820      	ldr	r0, [pc, #128]	; (8001560 <td_Stim_Detection_Check_Start+0xb0>)
 80014e0:	f00a fc76 	bl	800bdd0 <iprintf>
		return;
 80014e4:	e035      	b.n	8001552 <td_Stim_Detection_Check_Start+0xa2>
	}

	if (level == 0)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10d      	bne.n	8001508 <td_Stim_Detection_Check_Start+0x58>
	{
		td_Stim_Control(0);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 f8a5 	bl	800163c <td_Stim_Control>

		if (TD_STIM_PREV_ELDET_LEVEL != 0)
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <td_Stim_Detection_Check_Start+0xac>)
 80014f4:	795b      	ldrb	r3, [r3, #5]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d01e      	beq.n	8001538 <td_Stim_Detection_Check_Start+0x88>
		{
			TD_STIM_DETECTION_LEVEL = td_Stim_Cur_Voltage_Get();
 80014fa:	f7ff feeb 	bl	80012d4 <td_Stim_Cur_Voltage_Get>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <td_Stim_Detection_Check_Start+0xac>)
 8001504:	719a      	strb	r2, [r3, #6]
 8001506:	e017      	b.n	8001538 <td_Stim_Detection_Check_Start+0x88>
		}
	}
	else
	{
		TD_MANUAL_PULSE_FREQ = TD_STIM_ELDET_LEVEL_FREQ;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <td_Stim_Detection_Check_Start+0xb4>)
 800150a:	220a      	movs	r2, #10
 800150c:	701a      	strb	r2, [r3, #0]
		TD_MANUAL_PULSE_WIDTH = TD_STIM_ELDET_LEVEL_PW;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <td_Stim_Detection_Check_Start+0xb4>)
 8001510:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001514:	805a      	strh	r2, [r3, #2]
		TD_MANUAL_TARGET_VOLTAGE = TD_STIM_ELDET_LEVEL_VOLT;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <td_Stim_Detection_Check_Start+0xb4>)
 8001518:	2228      	movs	r2, #40	; 0x28
 800151a:	711a      	strb	r2, [r3, #4]
		TD_MANUAL_TARGET_DAC = TD_STIM_ELDET_LEVEL_DAC;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <td_Stim_Detection_Check_Start+0xb4>)
 800151e:	2201      	movs	r2, #1
 8001520:	715a      	strb	r2, [r3, #5]
		TD_MANUAL_GP_OFF_TIME = 0;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <td_Stim_Detection_Check_Start+0xb4>)
 8001524:	2200      	movs	r2, #0
 8001526:	719a      	strb	r2, [r3, #6]
		TD_MANUAL_GP_ON_TIME = 0;
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <td_Stim_Detection_Check_Start+0xb4>)
 800152a:	2200      	movs	r2, #0
 800152c:	71da      	strb	r2, [r3, #7]

		td_Stim_Manual_Mode_Start();
 800152e:	f000 f81d 	bl	800156c <td_Stim_Manual_Mode_Start>

		TD_STIM_DETECTION_LEVEL = 0;
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <td_Stim_Detection_Check_Start+0xac>)
 8001534:	2200      	movs	r2, #0
 8001536:	719a      	strb	r2, [r3, #6]
	}

	TD_STIM_STATE_ELDT_LEVEL_UPDATE(level);
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <td_Stim_Detection_Check_Start+0xac>)
 800153a:	791a      	ldrb	r2, [r3, #4]
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <td_Stim_Detection_Check_Start+0xac>)
 800153e:	715a      	strb	r2, [r3, #5]
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <td_Stim_Detection_Check_Start+0xac>)
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	7113      	strb	r3, [r2, #4]

	TD_DEBUG_PRINT(("STIM DETECTION LV: %d\r\n", TD_STIM_CUR_DETECTOIN_LEVEL));
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <td_Stim_Detection_Check_Start+0xac>)
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	4619      	mov	r1, r3
 800154c:	4806      	ldr	r0, [pc, #24]	; (8001568 <td_Stim_Detection_Check_Start+0xb8>)
 800154e:	f00a fc3f 	bl	800bdd0 <iprintf>
}
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	0800cf90 	.word	0x0800cf90
 800155c:	200005a8 	.word	0x200005a8
 8001560:	0800cfb4 	.word	0x0800cfb4
 8001564:	200005a0 	.word	0x200005a0
 8001568:	0800cfd4 	.word	0x0800cfd4

0800156c <td_Stim_Manual_Mode_Start>:

/*
 * MANUAL MODE START
 * */
void td_Stim_Manual_Mode_Start(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	/* Change to new mode */
	TD_RAW_MODE_SET_F = TD_STIM_OP_NORMAL;
 8001570:	4b28      	ldr	r3, [pc, #160]	; (8001614 <td_Stim_Manual_Mode_Start+0xa8>)
 8001572:	2201      	movs	r2, #1
 8001574:	705a      	strb	r2, [r3, #1]
	TD_RAW_STIM_MODE = TD_MANUAL_MODE;
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <td_Stim_Manual_Mode_Start+0xa8>)
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	70da      	strb	r2, [r3, #3]

	/* Apply group pulse */
	if (TD_MANUAL_GP_OFF_TIME == 0 || TD_MANUAL_GP_ON_TIME == 0)
 800157c:	4b26      	ldr	r3, [pc, #152]	; (8001618 <td_Stim_Manual_Mode_Start+0xac>)
 800157e:	799b      	ldrb	r3, [r3, #6]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <td_Stim_Manual_Mode_Start+0x20>
 8001584:	4b24      	ldr	r3, [pc, #144]	; (8001618 <td_Stim_Manual_Mode_Start+0xac>)
 8001586:	79db      	ldrb	r3, [r3, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <td_Stim_Manual_Mode_Start+0x34>
	{
		TD_RAW_GROUP_PULSE_F = 0;
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <td_Stim_Manual_Mode_Start+0xa8>)
 800158e:	2200      	movs	r2, #0
 8001590:	715a      	strb	r2, [r3, #5]
		TD_RAW_GROUP_PULSE_DISABLE_TIME = 0;
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <td_Stim_Manual_Mode_Start+0xa8>)
 8001594:	2200      	movs	r2, #0
 8001596:	80da      	strh	r2, [r3, #6]
		TD_RAW_GROUP_PULSE_ENABLE_TIME = 0;
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <td_Stim_Manual_Mode_Start+0xa8>)
 800159a:	2200      	movs	r2, #0
 800159c:	811a      	strh	r2, [r3, #8]
 800159e:	e00c      	b.n	80015ba <td_Stim_Manual_Mode_Start+0x4e>
	}
	else
	{
		TD_RAW_GROUP_PULSE_F = 1;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <td_Stim_Manual_Mode_Start+0xa8>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	715a      	strb	r2, [r3, #5]
		TD_RAW_GROUP_PULSE_DISABLE_TIME = TD_MANUAL_GP_OFF_TIME;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <td_Stim_Manual_Mode_Start+0xac>)
 80015a8:	799b      	ldrb	r3, [r3, #6]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <td_Stim_Manual_Mode_Start+0xa8>)
 80015ae:	80da      	strh	r2, [r3, #6]
		TD_RAW_GROUP_PULSE_ENABLE_TIME = TD_MANUAL_GP_ON_TIME;
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <td_Stim_Manual_Mode_Start+0xac>)
 80015b2:	79db      	ldrb	r3, [r3, #7]
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <td_Stim_Manual_Mode_Start+0xa8>)
 80015b8:	811a      	strh	r2, [r3, #8]
	}

	/* APPLY PWM FREQ, PULSE WIDTH, STEP UP TARGET VOLTAGE, TARGET CURRENT */
	ex_pulse_data.freq = TD_MANUAL_PULSE_FREQ;
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <td_Stim_Manual_Mode_Start+0xac>)
 80015bc:	781a      	ldrb	r2, [r3, #0]
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <td_Stim_Manual_Mode_Start+0xb0>)
 80015c0:	701a      	strb	r2, [r3, #0]
	ex_pulse_data.pulse_width = TD_MANUAL_PULSE_WIDTH;
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <td_Stim_Manual_Mode_Start+0xac>)
 80015c4:	885a      	ldrh	r2, [r3, #2]
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <td_Stim_Manual_Mode_Start+0xb0>)
 80015c8:	805a      	strh	r2, [r3, #2]
#ifdef STIM_LIB_EVKIT_CV
	ex_pulse_data.degree = TD_MANUAL_TARGET_VOLTAGE;
#endif

#ifdef STIM_LIB_EVKIT_CC
	ex_pulse_data.degree = TD_MANUAL_TARGET_DAC;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <td_Stim_Manual_Mode_Start+0xac>)
 80015cc:	795a      	ldrb	r2, [r3, #5]
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <td_Stim_Manual_Mode_Start+0xb0>)
 80015d0:	711a      	strb	r2, [r3, #4]
#endif
	stimLib_stimSignalConfig(&ex_pulse_data);
 80015d2:	4812      	ldr	r0, [pc, #72]	; (800161c <td_Stim_Manual_Mode_Start+0xb0>)
 80015d4:	f008 fbe2 	bl	8009d9c <stimLib_stimSignalConfig>

	TD_RAW_PWM_CHANGE_F = 1;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <td_Stim_Manual_Mode_Start+0xa8>)
 80015da:	2201      	movs	r2, #1
 80015dc:	709a      	strb	r2, [r3, #2]

	/* Update stimulation state */
	TD_STIM_ACTIVE_CHNAGE(TD_SYS_STATE_RUN);
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <td_Stim_Manual_Mode_Start+0xb4>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	71da      	strb	r2, [r3, #7]
 80015e4:	2001      	movs	r0, #1
 80015e6:	f000 f909 	bl	80017fc <td_Stim_Timeout_Ctrl>

	/* Reset current mode */
	TD_STIM_STATE_MODE_UPDATE(0);
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <td_Stim_Manual_Mode_Start+0xb4>)
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <td_Stim_Manual_Mode_Start+0xb4>)
 80015f0:	705a      	strb	r2, [r3, #1]
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <td_Stim_Manual_Mode_Start+0xb4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]

	/* Reset current level */
	TD_STIM_STATE_LEVEL_UPDATE(0);
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <td_Stim_Manual_Mode_Start+0xb4>)
 80015fa:	789a      	ldrb	r2, [r3, #2]
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <td_Stim_Manual_Mode_Start+0xb4>)
 80015fe:	70da      	strb	r2, [r3, #3]
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <td_Stim_Manual_Mode_Start+0xb4>)
 8001602:	2200      	movs	r2, #0
 8001604:	709a      	strb	r2, [r3, #2]
	TD_RAW_STIM_LEVEL = 0;
 8001606:	4b03      	ldr	r3, [pc, #12]	; (8001614 <td_Stim_Manual_Mode_Start+0xa8>)
 8001608:	2200      	movs	r2, #0
 800160a:	711a      	strb	r2, [r3, #4]

	/* STIM START :: SYSTEM FSM */
	td_Set_Sys_FSM_State_Start();
 800160c:	f7ff fdd2 	bl	80011b4 <td_Set_Sys_FSM_State_Start>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000594 	.word	0x20000594
 8001618:	200005a0 	.word	0x200005a0
 800161c:	20000580 	.word	0x20000580
 8001620:	200005a8 	.word	0x200005a8

08001624 <td_Stim_Trigger_Config_Update>:
 * Trigger MODE Setting
 * TODO:
 * Add in future
 * */
void td_Stim_Trigger_Config_Update(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	stimLib_stimTriggerConfig(&ex_trg_data);
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <td_Stim_Trigger_Config_Update+0x14>)
 800162a:	f008 fbd8 	bl	8009dde <stimLib_stimTriggerConfig>
	td_Set_Sys_FSM_State_Start();
 800162e:	f7ff fdc1 	bl	80011b4 <td_Set_Sys_FSM_State_Start>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000058c 	.word	0x2000058c

0800163c <td_Stim_Control>:

/*
 * BLE STIM PARAMETER CONTROL FUNCTION
 * */
void td_Stim_Control(uint8_t start)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	TD_DEBUG_PRINT(("td_Stim_Control: %d\r\n", start));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4619      	mov	r1, r3
 800164a:	4833      	ldr	r0, [pc, #204]	; (8001718 <td_Stim_Control+0xdc>)
 800164c:	f00a fbc0 	bl	800bdd0 <iprintf>

	/* IF STOPPING, ANYWAY STOP STIMUALTIONS */
	if (start != 0 && TD_STIM_ACTIVE == start)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <td_Stim_Control+0x32>
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <td_Stim_Control+0xe0>)
 8001658:	79db      	ldrb	r3, [r3, #7]
 800165a:	79fa      	ldrb	r2, [r7, #7]
 800165c:	429a      	cmp	r2, r3
 800165e:	d106      	bne.n	800166e <td_Stim_Control+0x32>
	{
		TD_DEBUG_PRINT(("THE SAME STIM The same STIM state: %d\r\n", TD_STIM_ACTIVE));
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <td_Stim_Control+0xe0>)
 8001662:	79db      	ldrb	r3, [r3, #7]
 8001664:	4619      	mov	r1, r3
 8001666:	482e      	ldr	r0, [pc, #184]	; (8001720 <td_Stim_Control+0xe4>)
 8001668:	f00a fbb2 	bl	800bdd0 <iprintf>
		return;
 800166c:	e051      	b.n	8001712 <td_Stim_Control+0xd6>
	}

	if (start == 0)
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d13f      	bne.n	80016f4 <td_Stim_Control+0xb8>
	{
		/* STOP ALL ACTIVITIES */
		TD_DEBUG_PRINT(("STOP\r\n"));
 8001674:	482b      	ldr	r0, [pc, #172]	; (8001724 <td_Stim_Control+0xe8>)
 8001676:	f00a fc47 	bl	800bf08 <puts>

		/* RESET ELECT DETECT */
		TD_STIM_DETECTION_LEVEL = 0; /* RESET CURRENT STIM LEVEL ALWAYS */
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <td_Stim_Control+0xe0>)
 800167c:	2200      	movs	r2, #0
 800167e:	719a      	strb	r2, [r3, #6]

		if (td_Stim_Detection_LV_Check_Is_Active() == true)
 8001680:	f7ff fe40 	bl	8001304 <td_Stim_Detection_LV_Check_Is_Active>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	d106      	bne.n	8001698 <td_Stim_Control+0x5c>
		{
			TD_STIM_STATE_ELDT_LEVEL_UPDATE(0);
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <td_Stim_Control+0xe0>)
 800168c:	791a      	ldrb	r2, [r3, #4]
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <td_Stim_Control+0xe0>)
 8001690:	715a      	strb	r2, [r3, #5]
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <td_Stim_Control+0xe0>)
 8001694:	2200      	movs	r2, #0
 8001696:	711a      	strb	r2, [r3, #4]
		}

		/* DEFAULT MODE SET IS 1 */
		TD_RAW_MODE_SET_F = TD_STIM_OP_NORMAL;
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <td_Stim_Control+0xec>)
 800169a:	2201      	movs	r2, #1
 800169c:	705a      	strb	r2, [r3, #1]

		/* RESET STIM LEVEL */
		TD_STIM_STATE_LEVEL_UPDATE(0);
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <td_Stim_Control+0xe0>)
 80016a0:	789a      	ldrb	r2, [r3, #2]
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <td_Stim_Control+0xe0>)
 80016a4:	70da      	strb	r2, [r3, #3]
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <td_Stim_Control+0xe0>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	709a      	strb	r2, [r3, #2]

		/* PARAMETER LOAD */
		ex_pulse_data.pulse_width = TD_STIM_LEVEL_CFG_PW_GET(0);
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <td_Stim_Control+0xf0>)
 80016ae:	881a      	ldrh	r2, [r3, #0]
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <td_Stim_Control+0xf4>)
 80016b2:	805a      	strh	r2, [r3, #2]
#ifdef STIM_LIB_EVKIT_CV
		ex_pulse_data.degree = TD_STIM_LEVEL_CFG_VOLT_GET(0);
#endif
#ifdef STIM_LIB_EVKIT_CC
		ex_pulse_data.degree = TD_STIM_LEVEL_CFG_DAC_GET(0);
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <td_Stim_Control+0xf0>)
 80016b6:	78da      	ldrb	r2, [r3, #3]
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <td_Stim_Control+0xf4>)
 80016ba:	711a      	strb	r2, [r3, #4]
#endif
		TD_RAW_STIM_LEVEL = 0;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <td_Stim_Control+0xec>)
 80016be:	2200      	movs	r2, #0
 80016c0:	711a      	strb	r2, [r3, #4]

		/* STIM STOP :: SYSTEM FSM */
		td_Set_Sys_FSM_State_Stop();
 80016c2:	f7ff fd83 	bl	80011cc <td_Set_Sys_FSM_State_Stop>
		stimLib_stimSignalConfig(&ex_pulse_data);
 80016c6:	481a      	ldr	r0, [pc, #104]	; (8001730 <td_Stim_Control+0xf4>)
 80016c8:	f008 fb68 	bl	8009d9c <stimLib_stimSignalConfig>

		/* GROUP PULSE SETTING */
		TD_RAW_GROUP_PULSE_F = 0;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <td_Stim_Control+0xec>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	715a      	strb	r2, [r3, #5]
		TD_RAW_GROUP_PULSE_DISABLE_TIME = 0;
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <td_Stim_Control+0xec>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	80da      	strh	r2, [r3, #6]
		TD_RAW_GROUP_PULSE_ENABLE_TIME = 0;
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <td_Stim_Control+0xec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	811a      	strh	r2, [r3, #8]

		TD_RAW_STIM_MODE = 0;
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <td_Stim_Control+0xec>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	70da      	strb	r2, [r3, #3]
		TD_STIM_STATE_MODE_UPDATE(0);
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <td_Stim_Control+0xe0>)
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <td_Stim_Control+0xe0>)
 80016ea:	705a      	strb	r2, [r3, #1]
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <td_Stim_Control+0xe0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e007      	b.n	8001704 <td_Stim_Control+0xc8>
	}

	else if (start == 1)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d104      	bne.n	8001704 <td_Stim_Control+0xc8>
	{
		TD_DEBUG_PRINT(("START\r\n"));
 80016fa:	480e      	ldr	r0, [pc, #56]	; (8001734 <td_Stim_Control+0xf8>)
 80016fc:	f00a fc04 	bl	800bf08 <puts>
#endif

		stimLib_stimSignalConfig(&ex_pulse_data);
#endif
		/* STIM STOP :: SYSTEM FSM */
		td_Set_Sys_FSM_State_Start();
 8001700:	f7ff fd58 	bl	80011b4 <td_Set_Sys_FSM_State_Start>
	}
	TD_STIM_ACTIVE_CHNAGE(start);
 8001704:	4a05      	ldr	r2, [pc, #20]	; (800171c <td_Stim_Control+0xe0>)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	71d3      	strb	r3, [r2, #7]
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f875 	bl	80017fc <td_Stim_Timeout_Ctrl>
}
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	0800cfec 	.word	0x0800cfec
 800171c:	200005a8 	.word	0x200005a8
 8001720:	0800d004 	.word	0x0800d004
 8001724:	0800d02c 	.word	0x0800d02c
 8001728:	20000594 	.word	0x20000594
 800172c:	20000024 	.word	0x20000024
 8001730:	20000580 	.word	0x20000580
 8001734:	0800d034 	.word	0x0800d034

08001738 <td_Stim_Param_Update_Handle>:

/*
 * PARAMETER CONTROL FUNCTION
 * */
void td_Stim_Param_Update_Handle(void)
{
 8001738:	b598      	push	{r3, r4, r7, lr}
 800173a:	af00      	add	r7, sp, #0
	/* Send state change ind */
	if (TD_STIM_ACTIVE != td_Get_Sys_FSM_State() || TD_STIM_CUR_MODE != TD_RAW_STIM_MODE || TD_STIM_CUR_LEVEL != TD_RAW_STIM_LEVEL /*|| ElecDetEndFlag == 1*/)
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 800173e:	79dc      	ldrb	r4, [r3, #7]
 8001740:	f7ff fd2c 	bl	800119c <td_Get_Sys_FSM_State>
 8001744:	4603      	mov	r3, r0
 8001746:	429c      	cmp	r4, r3
 8001748:	d10b      	bne.n	8001762 <td_Stim_Param_Update_Handle+0x2a>
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 800174c:	781a      	ldrb	r2, [r3, #0]
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <td_Stim_Param_Update_Handle+0xb0>)
 8001750:	78db      	ldrb	r3, [r3, #3]
 8001752:	429a      	cmp	r2, r3
 8001754:	d105      	bne.n	8001762 <td_Stim_Param_Update_Handle+0x2a>
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 8001758:	789a      	ldrb	r2, [r3, #2]
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <td_Stim_Param_Update_Handle+0xb0>)
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d03d      	beq.n	80017de <td_Stim_Param_Update_Handle+0xa6>
	{
		TD_DEBUG_PRINT(("STIM STATE CHANGE\r\n"));
 8001762:	4822      	ldr	r0, [pc, #136]	; (80017ec <td_Stim_Param_Update_Handle+0xb4>)
 8001764:	f00a fbd0 	bl	800bf08 <puts>

		TD_DEBUG_PRINT(("START: %d >> %d\r\n", TD_STIM_ACTIVE, td_Get_Sys_FSM_State()));
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 800176a:	79db      	ldrb	r3, [r3, #7]
 800176c:	461c      	mov	r4, r3
 800176e:	f7ff fd15 	bl	800119c <td_Get_Sys_FSM_State>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4621      	mov	r1, r4
 8001778:	481d      	ldr	r0, [pc, #116]	; (80017f0 <td_Stim_Param_Update_Handle+0xb8>)
 800177a:	f00a fb29 	bl	800bdd0 <iprintf>
		TD_DEBUG_PRINT(("MODE: %d >> %d\r\n", TD_STIM_CUR_MODE, TD_RAW_STIM_MODE));
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4619      	mov	r1, r3
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <td_Stim_Param_Update_Handle+0xb0>)
 8001786:	78db      	ldrb	r3, [r3, #3]
 8001788:	461a      	mov	r2, r3
 800178a:	481a      	ldr	r0, [pc, #104]	; (80017f4 <td_Stim_Param_Update_Handle+0xbc>)
 800178c:	f00a fb20 	bl	800bdd0 <iprintf>
		TD_DEBUG_PRINT(("LEVLE: %d >> %d\r\n", TD_STIM_CUR_LEVEL, TD_RAW_STIM_LEVEL));
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 8001792:	789b      	ldrb	r3, [r3, #2]
 8001794:	4619      	mov	r1, r3
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <td_Stim_Param_Update_Handle+0xb0>)
 8001798:	791b      	ldrb	r3, [r3, #4]
 800179a:	461a      	mov	r2, r3
 800179c:	4816      	ldr	r0, [pc, #88]	; (80017f8 <td_Stim_Param_Update_Handle+0xc0>)
 800179e:	f00a fb17 	bl	800bdd0 <iprintf>
		/* TD_DEBUG_PRINT(("El Det: %d\n", ElecDetFlag)); */

		TD_STIM_ACTIVE_CHNAGE(td_Get_Sys_FSM_State());
 80017a2:	f7ff fcfb 	bl	800119c <td_Get_Sys_FSM_State>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 80017ac:	71da      	strb	r2, [r3, #7]
 80017ae:	f7ff fcf5 	bl	800119c <td_Get_Sys_FSM_State>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f821 	bl	80017fc <td_Stim_Timeout_Ctrl>
		TD_STIM_STATE_MODE_UPDATE(TD_RAW_STIM_MODE);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 80017c0:	705a      	strb	r2, [r3, #1]
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <td_Stim_Param_Update_Handle+0xb0>)
 80017c4:	78da      	ldrb	r2, [r3, #3]
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 80017c8:	701a      	strb	r2, [r3, #0]
		TD_STIM_STATE_LEVEL_UPDATE(TD_RAW_STIM_LEVEL);
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 80017cc:	789a      	ldrb	r2, [r3, #2]
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 80017d0:	70da      	strb	r2, [r3, #3]
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <td_Stim_Param_Update_Handle+0xb0>)
 80017d4:	791a      	ldrb	r2, [r3, #4]
 80017d6:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <td_Stim_Param_Update_Handle+0xac>)
 80017d8:	709a      	strb	r2, [r3, #2]
		 if (ElecDetEndFlag == 1)
		 {
		 TD_STIM_STATE_ELDT_LEVEL_UPDATE(0);
		 }
		 */
		bt_state_ind();
 80017da:	f000 fcc5 	bl	8002168 <bt_state_ind>
	}
}
 80017de:	bf00      	nop
 80017e0:	bd98      	pop	{r3, r4, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200005a8 	.word	0x200005a8
 80017e8:	20000594 	.word	0x20000594
 80017ec:	0800d03c 	.word	0x0800d03c
 80017f0:	0800d050 	.word	0x0800d050
 80017f4:	0800d064 	.word	0x0800d064
 80017f8:	0800d078 	.word	0x0800d078

080017fc <td_Stim_Timeout_Ctrl>:
	td_Stim_Control(0);
	bt_state_ind();
}

void td_Stim_Timeout_Ctrl(uint8_t start)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
	if (TD_STIM_TIMEOUT_STARTED != start)
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <td_Stim_Timeout_Ctrl+0x40>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	429a      	cmp	r2, r3
 8001810:	d010      	beq.n	8001834 <td_Stim_Timeout_Ctrl+0x38>
	{
		TD_STIM_TIMEOUT_CNT = 0;
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <td_Stim_Timeout_Ctrl+0x40>)
 8001814:	2200      	movs	r2, #0
 8001816:	805a      	strh	r2, [r3, #2]
		TD_STIM_TIMEOUT_STARTED = start;
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <td_Stim_Timeout_Ctrl+0x40>)
 8001826:	701a      	strb	r2, [r3, #0]
		TD_DEBUG_PRINT(("STIM TIMEOUT: %d\r\n", TD_STIM_TIMEOUT_STARTED));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <td_Stim_Timeout_Ctrl+0x40>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4804      	ldr	r0, [pc, #16]	; (8001840 <td_Stim_Timeout_Ctrl+0x44>)
 8001830:	f00a face 	bl	800bdd0 <iprintf>
	}
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200005b0 	.word	0x200005b0
 8001840:	0800d08c 	.word	0x0800d08c

08001844 <td_Stim_Timeout_Handle>:

void td_Stim_Timeout_Handle(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	if (TD_STIM_TIMEOUT_STARTED == true && TD_STIM_TIMEOUT_CNT <= TD_STIM_TIMEOUT_THRESHOLD_VALUE)
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <td_Stim_Timeout_Handle+0x24>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <td_Stim_Timeout_Handle+0x18>
	{
		TD_STIM_TIMEOUT_CNT++;
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <td_Stim_Timeout_Handle+0x24>)
 8001852:	885b      	ldrh	r3, [r3, #2]
 8001854:	3301      	adds	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <td_Stim_Timeout_Handle+0x24>)
 800185a:	805a      	strh	r2, [r3, #2]
		{
			TD_DEBUG_PRINT(("STIM TIMEOUT: STOP\r\n"));
			td_Stim_Force_Stop();
		}
	}
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	200005b0 	.word	0x200005b0

0800186c <bt_msg_rcv_data_init_INLINE>:
} bt_msg_rcv_state_t;

bt_msg_rcv_state_t gBtMsgState;

static __INLINE void bt_msg_rcv_data_init_INLINE(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	for (BT_MSG_RCV_IX = 0; BT_MSG_RCV_IX < BT_MSG_SIZE_MAX; BT_MSG_RCV_IX++)
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <bt_msg_rcv_data_init_INLINE+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e00c      	b.n	8001892 <bt_msg_rcv_data_init_INLINE+0x26>
	{
		BT_MSG_RCV_BUF[BT_MSG_RCV_IX] = 0;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <bt_msg_rcv_data_init_INLINE+0x40>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <bt_msg_rcv_data_init_INLINE+0x40>)
 8001880:	4413      	add	r3, r2
 8001882:	2200      	movs	r2, #0
 8001884:	705a      	strb	r2, [r3, #1]
	for (BT_MSG_RCV_IX = 0; BT_MSG_RCV_IX < BT_MSG_SIZE_MAX; BT_MSG_RCV_IX++)
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <bt_msg_rcv_data_init_INLINE+0x40>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <bt_msg_rcv_data_init_INLINE+0x40>)
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <bt_msg_rcv_data_init_INLINE+0x40>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b13      	cmp	r3, #19
 8001898:	d9ee      	bls.n	8001878 <bt_msg_rcv_data_init_INLINE+0xc>
	}

	BT_MSG_RCV_IX = 0;
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <bt_msg_rcv_data_init_INLINE+0x40>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	200005b4 	.word	0x200005b4

080018b0 <btMsg_init>:

static void bt_msg_handle(uint8 *msg);

void btMsg_init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	bt_msg_rcv_data_init_INLINE();
 80018b4:	f7ff ffda 	bl	800186c <bt_msg_rcv_data_init_INLINE>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <btMsg_rcvData_handle>:

void btMsg_rcvData_handle(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
	static uint8 st_msg_rcv_data_len;
	uint8 i;

	do
	{
		st_msg_rcv_data_len = tdUart1Q_getData(st_msg_rcv_data,
 80018c2:	2114      	movs	r1, #20
 80018c4:	482f      	ldr	r0, [pc, #188]	; (8001984 <btMsg_rcvData_handle+0xc8>)
 80018c6:	f000 fe57 	bl	8002578 <tdUart1Q_getData>
 80018ca:	4603      	mov	r3, r0
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <btMsg_rcvData_handle+0xcc>)
 80018d0:	701a      	strb	r2, [r3, #0]
		BT_MSG_RCV_BUF_SIZE);
		i = BT_MSG_RCV_BUF_SIZE;
 80018d2:	2314      	movs	r3, #20
 80018d4:	71fb      	strb	r3, [r7, #7]

		if (st_msg_rcv_data_len > 0)
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <btMsg_rcvData_handle+0xcc>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d02b      	beq.n	8001936 <btMsg_rcvData_handle+0x7a>
		{
			i = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	71fb      	strb	r3, [r7, #7]

			/* Refresh buffer flush timeout */
			BT_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 80018e2:	f000 ffb1 	bl	8002848 <HAL_GetTick>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a28      	ldr	r2, [pc, #160]	; (800198c <btMsg_rcvData_handle+0xd0>)
 80018ea:	6193      	str	r3, [r2, #24]
		}

		while (st_msg_rcv_data_len > i)
 80018ec:	e023      	b.n	8001936 <btMsg_rcvData_handle+0x7a>
		{
			if ((st_msg_rcv_data[i] == BT_MSG_START_CODE) || BT_MSG_RCV_IX != 0)
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <btMsg_rcvData_handle+0xc8>)
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	2bef      	cmp	r3, #239	; 0xef
 80018f6:	d003      	beq.n	8001900 <btMsg_rcvData_handle+0x44>
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <btMsg_rcvData_handle+0xd0>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01a      	beq.n	8001936 <btMsg_rcvData_handle+0x7a>
			{
				BT_MSG_RCV_BUF[BT_MSG_RCV_IX] = st_msg_rcv_data[i];
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4a22      	ldr	r2, [pc, #136]	; (800198c <btMsg_rcvData_handle+0xd0>)
 8001904:	7812      	ldrb	r2, [r2, #0]
 8001906:	4611      	mov	r1, r2
 8001908:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <btMsg_rcvData_handle+0xc8>)
 800190a:	5cd2      	ldrb	r2, [r2, r3]
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <btMsg_rcvData_handle+0xd0>)
 800190e:	440b      	add	r3, r1
 8001910:	705a      	strb	r2, [r3, #1]
				BT_MSG_RCV_IX++;
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <btMsg_rcvData_handle+0xd0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <btMsg_rcvData_handle+0xd0>)
 800191c:	701a      	strb	r2, [r3, #0]
				i++;
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	3301      	adds	r3, #1
 8001922:	71fb      	strb	r3, [r7, #7]

				if (BT_MSG_RCV_IX == BT_MSG_RCV_BUF_SIZE)
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <btMsg_rcvData_handle+0xd0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b14      	cmp	r3, #20
 800192a:	d104      	bne.n	8001936 <btMsg_rcvData_handle+0x7a>
				{
					bt_msg_handle(BT_MSG_RCV_BUF);
 800192c:	4818      	ldr	r0, [pc, #96]	; (8001990 <btMsg_rcvData_handle+0xd4>)
 800192e:	f000 f833 	bl	8001998 <bt_msg_handle>

					bt_msg_rcv_data_init_INLINE();
 8001932:	f7ff ff9b 	bl	800186c <bt_msg_rcv_data_init_INLINE>
		while (st_msg_rcv_data_len > i)
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <btMsg_rcvData_handle+0xcc>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	429a      	cmp	r2, r3
 800193e:	d3d6      	bcc.n	80018ee <btMsg_rcvData_handle+0x32>
				}
			}
		}

	} while (st_msg_rcv_data_len > 0);
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <btMsg_rcvData_handle+0xcc>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1bc      	bne.n	80018c2 <btMsg_rcvData_handle+0x6>

	if (BT_MSG_RCV_IX > 0)
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <btMsg_rcvData_handle+0xd0>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d015      	beq.n	800197c <btMsg_rcvData_handle+0xc0>
	{
		/* Check flush timeout */
		if (HAL_GetTick() - BT_MSG_RCV_FLUSH_CHK_TIME > BT_MSG_RCV_FLUSH_TIMEOUT)
 8001950:	f000 ff7a 	bl	8002848 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <btMsg_rcvData_handle+0xd0>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d90b      	bls.n	800197c <btMsg_rcvData_handle+0xc0>
		{
			TD_DEBUG_PRINT(("BT_MSG: Flush timeout\n"));
 8001964:	480b      	ldr	r0, [pc, #44]	; (8001994 <btMsg_rcvData_handle+0xd8>)
 8001966:	f00a facf 	bl	800bf08 <puts>
			TD_DEBUG_PRINT_DATA_HEX(BT_MSG_RCV_BUF, BT_MSG_RCV_IX);
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <btMsg_rcvData_handle+0xd0>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4619      	mov	r1, r3
 8001972:	4807      	ldr	r0, [pc, #28]	; (8001990 <btMsg_rcvData_handle+0xd4>)
 8001974:	f000 fe66 	bl	8002644 <tdDebugPrintHex>

			bt_msg_rcv_data_init_INLINE();
 8001978:	f7ff ff78 	bl	800186c <bt_msg_rcv_data_init_INLINE>
		}
	}

}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200005d4 	.word	0x200005d4
 8001988:	200005e8 	.word	0x200005e8
 800198c:	200005b4 	.word	0x200005b4
 8001990:	200005b5 	.word	0x200005b5
 8001994:	0800d0a0 	.word	0x0800d0a0

08001998 <bt_msg_handle>:

static void bt_msg_handle(uint8 *msg)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	if (msg == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d079      	beq.n	8001a9a <bt_msg_handle+0x102>
		return;

	switch (msg[BT_MSG_TYPE_IX])
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3301      	adds	r3, #1
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	2b0b      	cmp	r3, #11
 80019b0:	d863      	bhi.n	8001a7a <bt_msg_handle+0xe2>
 80019b2:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <bt_msg_handle+0x20>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	080019e9 	.word	0x080019e9
 80019bc:	08001a7b 	.word	0x08001a7b
 80019c0:	080019f7 	.word	0x080019f7
 80019c4:	08001a05 	.word	0x08001a05
 80019c8:	08001a13 	.word	0x08001a13
 80019cc:	08001a21 	.word	0x08001a21
 80019d0:	08001a2f 	.word	0x08001a2f
 80019d4:	08001a3d 	.word	0x08001a3d
 80019d8:	08001a49 	.word	0x08001a49
 80019dc:	08001a55 	.word	0x08001a55
 80019e0:	08001a61 	.word	0x08001a61
 80019e4:	08001a6d 	.word	0x08001a6d
	{
	case BT_STATE_REQ:
		TD_DEBUG_PRINT(("BT_STATE_REQ\n"));
 80019e8:	482e      	ldr	r0, [pc, #184]	; (8001aa4 <bt_msg_handle+0x10c>)
 80019ea:	f00a fa8d 	bl	800bf08 <puts>
		bt_state_req(msg);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f870 	bl	8001ad4 <bt_state_req>
		break;
 80019f4:	e052      	b.n	8001a9c <bt_msg_handle+0x104>

	case BT_MODE_SET_REQ:
		TD_DEBUG_PRINT(("BT_MODE_SET_REQ\n"));
 80019f6:	482c      	ldr	r0, [pc, #176]	; (8001aa8 <bt_msg_handle+0x110>)
 80019f8:	f00a fa86 	bl	800bf08 <puts>
		bt_mode_set_req(msg);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f879 	bl	8001af4 <bt_mode_set_req>
		break;
 8001a02:	e04b      	b.n	8001a9c <bt_msg_handle+0x104>

	case BT_LEVEL_SET_REQ:
		TD_DEBUG_PRINT(("BT_LEVEL_SET_REQ\n"));
 8001a04:	4829      	ldr	r0, [pc, #164]	; (8001aac <bt_msg_handle+0x114>)
 8001a06:	f00a fa7f 	bl	800bf08 <puts>
		bt_level_set_req(msg);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f89c 	bl	8001b48 <bt_level_set_req>
		break;
 8001a10:	e044      	b.n	8001a9c <bt_msg_handle+0x104>

	case BT_STIMUL_REQ:
		TD_DEBUG_PRINT(("BT_STIMUL_REQ\n"));
 8001a12:	4827      	ldr	r0, [pc, #156]	; (8001ab0 <bt_msg_handle+0x118>)
 8001a14:	f00a fa78 	bl	800bf08 <puts>
		bt_stimul_req(msg);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f8cf 	bl	8001bbc <bt_stimul_req>
		break;
 8001a1e:	e03d      	b.n	8001a9c <bt_msg_handle+0x104>

	case BT_ELECT_DETECT_REQ:
		TD_DEBUG_PRINT(("BT_ELECT_DETECT_REQ\n"));
 8001a20:	4824      	ldr	r0, [pc, #144]	; (8001ab4 <bt_msg_handle+0x11c>)
 8001a22:	f00a fa71 	bl	800bf08 <puts>
		bt_elect_detect_req(msg);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f906 	bl	8001c38 <bt_elect_detect_req>
		break;
 8001a2c:	e036      	b.n	8001a9c <bt_msg_handle+0x104>

	case BT_MAN_MODE_REQ:
		TD_DEBUG_PRINT(("BT_MAN_MODE_REQ\n"));
 8001a2e:	4822      	ldr	r0, [pc, #136]	; (8001ab8 <bt_msg_handle+0x120>)
 8001a30:	f00a fa6a 	bl	800bf08 <puts>
		bt_man_mode_req(msg);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f937 	bl	8001ca8 <bt_man_mode_req>
		break;
 8001a3a:	e02f      	b.n	8001a9c <bt_msg_handle+0x104>

	case BT_FW_VER_REQ:
		TD_DEBUG_PRINT(("BT_FW_VER_REQ\n"));
 8001a3c:	481f      	ldr	r0, [pc, #124]	; (8001abc <bt_msg_handle+0x124>)
 8001a3e:	f00a fa63 	bl	800bf08 <puts>
		bt_fw_ver_req();
 8001a42:	f000 fa17 	bl	8001e74 <bt_fw_ver_req>
		break;
 8001a46:	e029      	b.n	8001a9c <bt_msg_handle+0x104>

	case BT_STIM_LIB_VER_REQ:
		TD_DEBUG_PRINT(("BT_STIM_LIB_VER_REQ\n"));
 8001a48:	481d      	ldr	r0, [pc, #116]	; (8001ac0 <bt_msg_handle+0x128>)
 8001a4a:	f00a fa5d 	bl	800bf08 <puts>
		bt_stim_lib_ver_req();
 8001a4e:	f000 fa1d 	bl	8001e8c <bt_stim_lib_ver_req>
		break;
 8001a52:	e023      	b.n	8001a9c <bt_msg_handle+0x104>

	case BT_STIM_STIMUL_TYPE_REQ:
		TD_DEBUG_PRINT(("BT_STIM_STIMUL_TYPE_REQ\n"));
 8001a54:	481b      	ldr	r0, [pc, #108]	; (8001ac4 <bt_msg_handle+0x12c>)
 8001a56:	f00a fa57 	bl	800bf08 <puts>
		bt_stim_stimul_type_req();
 8001a5a:	f000 fa23 	bl	8001ea4 <bt_stim_stimul_type_req>
		break;
 8001a5e:	e01d      	b.n	8001a9c <bt_msg_handle+0x104>

	case BT_STIM_SYS_RESET_REQ:
		TD_DEBUG_PRINT(("BT_STIM_SYS_RESET_REQ\n"));
 8001a60:	4819      	ldr	r0, [pc, #100]	; (8001ac8 <bt_msg_handle+0x130>)
 8001a62:	f00a fa51 	bl	800bf08 <puts>
		bt_stim_sys_reset_req();
 8001a66:	f000 fa2c 	bl	8001ec2 <bt_stim_sys_reset_req>
		break;
 8001a6a:	e017      	b.n	8001a9c <bt_msg_handle+0x104>

	case BT_STIM_TRG_CFG_REQ:
		TD_DEBUG_PRINT(("BT_STIM_TRG_CFG_REQ\n"));
 8001a6c:	4817      	ldr	r0, [pc, #92]	; (8001acc <bt_msg_handle+0x134>)
 8001a6e:	f00a fa4b 	bl	800bf08 <puts>
		bt_stim_trg_cfg_req(msg);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fa30 	bl	8001ed8 <bt_stim_trg_cfg_req>
		break;
 8001a78:	e010      	b.n	8001a9c <bt_msg_handle+0x104>

	default:
		TD_DEBUG_PRINT(("Unknown BT MSG: %d\n", msg[BT_MSG_TYPE_IX]));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4813      	ldr	r0, [pc, #76]	; (8001ad0 <bt_msg_handle+0x138>)
 8001a84:	f00a f9a4 	bl	800bdd0 <iprintf>
		bt_msg_res(msg[BT_MSG_TYPE_IX], BT_MSG_RES_UNKNOWN_MSG, NULL, 0);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	7818      	ldrb	r0, [r3, #0]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2200      	movs	r2, #0
 8001a92:	2103      	movs	r1, #3
 8001a94:	f000 fb26 	bl	80020e4 <bt_msg_res>
		break;
 8001a98:	e000      	b.n	8001a9c <bt_msg_handle+0x104>
		return;
 8001a9a:	bf00      	nop
	}
}
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	0800d0b8 	.word	0x0800d0b8
 8001aa8:	0800d0c8 	.word	0x0800d0c8
 8001aac:	0800d0d8 	.word	0x0800d0d8
 8001ab0:	0800d0ec 	.word	0x0800d0ec
 8001ab4:	0800d0fc 	.word	0x0800d0fc
 8001ab8:	0800d110 	.word	0x0800d110
 8001abc:	0800d120 	.word	0x0800d120
 8001ac0:	0800d130 	.word	0x0800d130
 8001ac4:	0800d144 	.word	0x0800d144
 8001ac8:	0800d15c 	.word	0x0800d15c
 8001acc:	0800d174 	.word	0x0800d174
 8001ad0:	0800d188 	.word	0x0800d188

08001ad4 <bt_state_req>:
#include "stim_lib_type.h"

#include "td_debug.h"

void bt_state_req(uint8 *msg)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	bt_msg_res(BT_STATE_REQ, BT_MSG_RES_OK, NULL, 0);
 8001adc:	2300      	movs	r3, #0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f000 fafe 	bl	80020e4 <bt_msg_res>

	bt_state_ind();
 8001ae8:	f000 fb3e 	bl	8002168 <bt_state_ind>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <bt_mode_set_req>:

void bt_mode_set_req(uint8 *msg)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	bt_msg_res_t rsp_code;
	uint8 mode;

	rsp_code = BT_MSG_RES_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]

	if (msg == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d01a      	beq.n	8001b3c <bt_mode_set_req+0x48>
		return;

	mode = msg[BT_MSG_DATA_IX];
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	78db      	ldrb	r3, [r3, #3]
 8001b0a:	73bb      	strb	r3, [r7, #14]

	TD_DEBUG_PRINT(("mode = %d\n", mode));
 8001b0c:	7bbb      	ldrb	r3, [r7, #14]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <bt_mode_set_req+0x50>)
 8001b12:	f00a f95d 	bl	800bdd0 <iprintf>

	if (msg[BT_MSG_LEN_IX] == 1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3302      	adds	r3, #2
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d104      	bne.n	8001b2a <bt_mode_set_req+0x36>
	{
		/* Handle MSG */
		td_Stim_Mode_Config_Update(mode);
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fc0a 	bl	800133c <td_Stim_Mode_Config_Update>
 8001b28:	e001      	b.n	8001b2e <bt_mode_set_req+0x3a>
	}
	else
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	73fb      	strb	r3, [r7, #15]
	}

	bt_msg_res(BT_MODE_SET_REQ, rsp_code, NULL, 0);
 8001b2e:	7bf9      	ldrb	r1, [r7, #15]
 8001b30:	2300      	movs	r3, #0
 8001b32:	2200      	movs	r2, #0
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 fad5 	bl	80020e4 <bt_msg_res>
 8001b3a:	e000      	b.n	8001b3e <bt_mode_set_req+0x4a>
		return;
 8001b3c:	bf00      	nop
}
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	0800d19c 	.word	0x0800d19c

08001b48 <bt_level_set_req>:

void bt_level_set_req(uint8 *msg)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	bt_msg_res_t rsp_code;
	uint8 level;

	rsp_code = BT_MSG_RES_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]

	if (msg == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d029      	beq.n	8001bae <bt_level_set_req+0x66>
		return;

	level = msg[BT_MSG_DATA_IX];
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	78db      	ldrb	r3, [r3, #3]
 8001b5e:	73bb      	strb	r3, [r7, #14]

	TD_DEBUG_PRINT(("level = %d\n", level));
 8001b60:	7bbb      	ldrb	r3, [r7, #14]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <bt_level_set_req+0x70>)
 8001b66:	f00a f933 	bl	800bdd0 <iprintf>

	if (td_Stim_Cur_Mode_Get() == 0)
 8001b6a:	f7ff fb9b 	bl	80012a4 <td_Stim_Cur_Mode_Get>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <bt_level_set_req+0x32>
	{
		rsp_code = BT_MSG_RES_INVALID_STATUS;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e012      	b.n	8001ba0 <bt_level_set_req+0x58>
	}
	else if (msg[BT_MSG_LEN_IX] == 1 && (TD_BT_MSG_LEVEL_MIN <= (int8) level && level <= TD_BT_MSG_LEVEL_MAX))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10b      	bne.n	8001b9c <bt_level_set_req+0x54>
 8001b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db07      	blt.n	8001b9c <bt_level_set_req+0x54>
 8001b8c:	7bbb      	ldrb	r3, [r7, #14]
 8001b8e:	2b17      	cmp	r3, #23
 8001b90:	d804      	bhi.n	8001b9c <bt_level_set_req+0x54>
	{
		/* Handle MSG */
		td_Stim_Level_Config_Update(level);
 8001b92:	7bbb      	ldrb	r3, [r7, #14]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fc3b 	bl	8001410 <td_Stim_Level_Config_Update>
 8001b9a:	e001      	b.n	8001ba0 <bt_level_set_req+0x58>
	}
	else
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	73fb      	strb	r3, [r7, #15]
	}

	bt_msg_res(BT_LEVEL_SET_REQ, rsp_code, NULL, 0);
 8001ba0:	7bf9      	ldrb	r1, [r7, #15]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f000 fa9c 	bl	80020e4 <bt_msg_res>
 8001bac:	e000      	b.n	8001bb0 <bt_level_set_req+0x68>
		return;
 8001bae:	bf00      	nop

}
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	0800d1a8 	.word	0x0800d1a8

08001bbc <bt_stimul_req>:

void bt_stimul_req(uint8 *msg)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	bt_msg_res_t rsp_code;
	uint8 req;

	rsp_code = BT_MSG_RES_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]

	if (msg == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d02d      	beq.n	8001c2a <bt_stimul_req+0x6e>
		return;

	req = msg[BT_MSG_DATA_IX];
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	78db      	ldrb	r3, [r3, #3]
 8001bd2:	73bb      	strb	r3, [r7, #14]

	TD_DEBUG_PRINT(("req = %d\n", req));
 8001bd4:	7bbb      	ldrb	r3, [r7, #14]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4816      	ldr	r0, [pc, #88]	; (8001c34 <bt_stimul_req+0x78>)
 8001bda:	f00a f8f9 	bl	800bdd0 <iprintf>

	if (td_Stim_Cur_Mode_Get() == 0 && td_Stim_Cur_Detection_Level_Get() == 0)
 8001bde:	f7ff fb61 	bl	80012a4 <td_Stim_Cur_Mode_Get>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <bt_stimul_req+0x3c>
 8001be8:	f7ff fb80 	bl	80012ec <td_Stim_Cur_Detection_Level_Get>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <bt_stimul_req+0x3c>
	{
		rsp_code = BT_MSG_RES_INVALID_STATUS;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	e011      	b.n	8001c1c <bt_stimul_req+0x60>
	}
	else if (msg[BT_MSG_LEN_IX] == 1 && (AUL_BT_MSG_STIMUL_STOP == req || req == AUL_BT_MSG_STIMUL_START))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10a      	bne.n	8001c18 <bt_stimul_req+0x5c>
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <bt_stimul_req+0x52>
 8001c08:	7bbb      	ldrb	r3, [r7, #14]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d104      	bne.n	8001c18 <bt_stimul_req+0x5c>
	{
		/* Handle MSG */
		td_Stim_Control(req);
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fd13 	bl	800163c <td_Stim_Control>
 8001c16:	e001      	b.n	8001c1c <bt_stimul_req+0x60>
	}
	else
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	73fb      	strb	r3, [r7, #15]
	}

	bt_msg_res(BT_STIMUL_REQ, rsp_code, NULL, 0);
 8001c1c:	7bf9      	ldrb	r1, [r7, #15]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2200      	movs	r2, #0
 8001c22:	2005      	movs	r0, #5
 8001c24:	f000 fa5e 	bl	80020e4 <bt_msg_res>
 8001c28:	e000      	b.n	8001c2c <bt_stimul_req+0x70>
		return;
 8001c2a:	bf00      	nop

}
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	0800d1b4 	.word	0x0800d1b4

08001c38 <bt_elect_detect_req>:

void bt_elect_detect_req(uint8 *msg)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	bt_msg_res_t rsp_code;
	uint8 level;

	rsp_code = BT_MSG_RES_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]

	if (msg == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d029      	beq.n	8001c9e <bt_elect_detect_req+0x66>
		return;

	level = msg[BT_MSG_DATA_IX];
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	78db      	ldrb	r3, [r3, #3]
 8001c4e:	73bb      	strb	r3, [r7, #14]
	(void) level;

	if (td_Stim_Detection_LV_Check_Is_Active() == false && td_Stim_Is_Started())
 8001c50:	f7ff fb58 	bl	8001304 <td_Stim_Detection_LV_Check_Is_Active>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <bt_elect_detect_req+0x32>
 8001c5a:	f7ff fb17 	bl	800128c <td_Stim_Is_Started>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <bt_elect_detect_req+0x32>
	{
		rsp_code = BT_MSG_RES_INVALID_STATUS;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e012      	b.n	8001c90 <bt_elect_detect_req+0x58>
	}
	else if (msg[BT_MSG_LEN_IX] == 1 && (TD_BT_MSG_STIM_DETECTION_LEVEL_MIN <= (int8) level && level <= TD_BT_MSG_STIM_DETECTION_LEVEL_MAX))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10b      	bne.n	8001c8c <bt_elect_detect_req+0x54>
 8001c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db07      	blt.n	8001c8c <bt_elect_detect_req+0x54>
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d804      	bhi.n	8001c8c <bt_elect_detect_req+0x54>
	{
		/* Handle MSG */
		td_Stim_Detection_Check_Start(level);
 8001c82:	7bbb      	ldrb	r3, [r7, #14]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fc13 	bl	80014b0 <td_Stim_Detection_Check_Start>
 8001c8a:	e001      	b.n	8001c90 <bt_elect_detect_req+0x58>
	}
	else
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	73fb      	strb	r3, [r7, #15]
	}

	bt_msg_res(BT_ELECT_DETECT_REQ, rsp_code, NULL, 0);
 8001c90:	7bf9      	ldrb	r1, [r7, #15]
 8001c92:	2300      	movs	r3, #0
 8001c94:	2200      	movs	r2, #0
 8001c96:	2006      	movs	r0, #6
 8001c98:	f000 fa24 	bl	80020e4 <bt_msg_res>
 8001c9c:	e000      	b.n	8001ca0 <bt_elect_detect_req+0x68>
		return;
 8001c9e:	bf00      	nop

}
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <bt_man_mode_req>:

void bt_man_mode_req(uint8 *msg)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	(void) msg;

	bt_msg_res_t rsp_code;
	uint8 i;

	if (msg == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80c8 	beq.w	8001e48 <bt_man_mode_req+0x1a0>
	}

	/* Check paramters */
	do
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	73fb      	strb	r3, [r7, #15]

		TD_MANUAL_PULSE_FREQ = 0;
 8001cbc:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
		TD_MANUAL_PULSE_WIDTH = 0;
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	805a      	strh	r2, [r3, #2]
		TD_MANUAL_TARGET_VOLTAGE = 0;
 8001cc8:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	711a      	strb	r2, [r3, #4]
		TD_MANUAL_TARGET_DAC = 0;
 8001cce:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	715a      	strb	r2, [r3, #5]
		TD_MANUAL_GP_OFF_TIME = 0;
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	719a      	strb	r2, [r3, #6]
		TD_MANUAL_GP_ON_TIME = 0;
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	71da      	strb	r2, [r3, #7]

		/* Length */
		if (msg[BT_MSG_LEN_IX] != 6)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	f040 8086 	bne.w	8001df8 <bt_man_mode_req+0x150>
		{
			break;
		}

		i = BT_MSG_DATA_IX;
 8001cec:	2303      	movs	r3, #3
 8001cee:	73bb      	strb	r3, [r7, #14]

		/* Frequency: 1byt. Range: 1 ~ 50.  Step: 1, 10, 20, ... 50 */
		TD_MANUAL_PULSE_FREQ = msg[i];
 8001cf0:	7bbb      	ldrb	r3, [r7, #14]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781a      	ldrb	r2, [r3, #0]
 8001cf8:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001cfa:	701a      	strb	r2, [r3, #0]

		if (1 > TD_MANUAL_PULSE_FREQ || TD_MANUAL_PULSE_FREQ > 50)
 8001cfc:	4b54      	ldr	r3, [pc, #336]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d07a      	beq.n	8001dfa <bt_man_mode_req+0x152>
 8001d04:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b32      	cmp	r3, #50	; 0x32
 8001d0a:	d876      	bhi.n	8001dfa <bt_man_mode_req+0x152>
		{
			break;
		}

		if (TD_MANUAL_PULSE_FREQ >= 10)
 8001d0c:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b09      	cmp	r3, #9
 8001d12:	d90d      	bls.n	8001d30 <bt_man_mode_req+0x88>
		{
			TD_MANUAL_PULSE_FREQ = (TD_MANUAL_PULSE_FREQ / 10) * 10;
 8001d14:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4a4e      	ldr	r2, [pc, #312]	; (8001e54 <bt_man_mode_req+0x1ac>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	0092      	lsls	r2, r2, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001d2e:	701a      	strb	r2, [r3, #0]
		}
		i++;
 8001d30:	7bbb      	ldrb	r3, [r7, #14]
 8001d32:	3301      	adds	r3, #1
 8001d34:	73bb      	strb	r3, [r7, #14]

		/* Pulse width: size 2. Range: 100 ~ 1000. Step: 100 */
		TD_MANUAL_PULSE_WIDTH = msg[i] | ((uint16) msg[i + 1] << 8);
 8001d36:	7bbb      	ldrb	r3, [r7, #14]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	7bbb      	ldrb	r3, [r7, #14]
 8001d42:	3301      	adds	r3, #1
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	440b      	add	r3, r1
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001d56:	805a      	strh	r2, [r3, #2]

		if (100 > TD_MANUAL_PULSE_WIDTH || TD_MANUAL_PULSE_WIDTH > 1000)
 8001d58:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001d5a:	885b      	ldrh	r3, [r3, #2]
 8001d5c:	2b63      	cmp	r3, #99	; 0x63
 8001d5e:	d94c      	bls.n	8001dfa <bt_man_mode_req+0x152>
 8001d60:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001d62:	885b      	ldrh	r3, [r3, #2]
 8001d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d68:	d847      	bhi.n	8001dfa <bt_man_mode_req+0x152>
		{
			break;
		}

		TD_MANUAL_PULSE_WIDTH = (TD_MANUAL_PULSE_WIDTH / 100) * 100;
 8001d6a:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001d6c:	885b      	ldrh	r3, [r3, #2]
 8001d6e:	4a3a      	ldr	r2, [pc, #232]	; (8001e58 <bt_man_mode_req+0x1b0>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	461a      	mov	r2, r3
 8001d80:	0091      	lsls	r1, r2, #2
 8001d82:	461a      	mov	r2, r3
 8001d84:	460b      	mov	r3, r1
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001d8e:	805a      	strh	r2, [r3, #2]

		i += 2;
 8001d90:	7bbb      	ldrb	r3, [r7, #14]
 8001d92:	3302      	adds	r3, #2
 8001d94:	73bb      	strb	r3, [r7, #14]
			break;
		}
		TD_MANUAL_TARGET_VOLTAGE = (TD_MANUAL_TARGET_VOLTAGE / 5) * 5;
#endif
#ifdef STIM_LIB_EVKIT_CC
		TD_MANUAL_TARGET_DAC = msg[i];
 8001d96:	7bbb      	ldrb	r3, [r7, #14]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001da0:	715a      	strb	r2, [r3, #5]
		if (TD_MANUAL_TARGET_DAC > 255)
		{
			break;
		}
#endif
		i++;
 8001da2:	7bbb      	ldrb	r3, [r7, #14]
 8001da4:	3301      	adds	r3, #1
 8001da6:	73bb      	strb	r3, [r7, #14]

		/* Group pulse: on/off each 1 size. Range: 1 ~ 60. Step: 1 */
		TD_MANUAL_GP_OFF_TIME = msg[i];
 8001da8:	7bbb      	ldrb	r3, [r7, #14]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001db2:	719a      	strb	r2, [r3, #6]
		i++;
 8001db4:	7bbb      	ldrb	r3, [r7, #14]
 8001db6:	3301      	adds	r3, #1
 8001db8:	73bb      	strb	r3, [r7, #14]
		TD_MANUAL_GP_ON_TIME = msg[i];
 8001dba:	7bbb      	ldrb	r3, [r7, #14]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001dc4:	71da      	strb	r2, [r3, #7]

		if (TD_MANUAL_GP_OFF_TIME > 60 || TD_MANUAL_GP_ON_TIME > 60)
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001dc8:	799b      	ldrb	r3, [r3, #6]
 8001dca:	2b3c      	cmp	r3, #60	; 0x3c
 8001dcc:	d815      	bhi.n	8001dfa <bt_man_mode_req+0x152>
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001dd0:	79db      	ldrb	r3, [r3, #7]
 8001dd2:	2b3c      	cmp	r3, #60	; 0x3c
 8001dd4:	d811      	bhi.n	8001dfa <bt_man_mode_req+0x152>
		{
			break;
		}

		if (TD_MANUAL_GP_OFF_TIME == 0 || TD_MANUAL_GP_ON_TIME == 0)
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001dd8:	799b      	ldrb	r3, [r3, #6]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <bt_man_mode_req+0x13e>
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001de0:	79db      	ldrb	r3, [r3, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <bt_man_mode_req+0x14a>
		{
			/* Group pulse is disabled */
			TD_MANUAL_GP_OFF_TIME = 0;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	719a      	strb	r2, [r3, #6]
			TD_MANUAL_GP_ON_TIME = 0;
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	71da      	strb	r2, [r3, #7]
		}

		rsp_code = BT_MSG_RES_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e000      	b.n	8001dfa <bt_man_mode_req+0x152>
			break;
 8001df8:	bf00      	nop

	} while (false);

	if (rsp_code == BT_MSG_RES_OK)
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <bt_man_mode_req+0x15e>
	{
		TD_DEBUG_PRINT(("Params OK\n"));
 8001e00:	4816      	ldr	r0, [pc, #88]	; (8001e5c <bt_man_mode_req+0x1b4>)
 8001e02:	f00a f881 	bl	800bf08 <puts>
	}

	TD_DEBUG_PRINT(("PULSE FREQ: %d\r\n", TD_MANUAL_PULSE_FREQ));
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4814      	ldr	r0, [pc, #80]	; (8001e60 <bt_man_mode_req+0x1b8>)
 8001e0e:	f009 ffdf 	bl	800bdd0 <iprintf>
	TD_DEBUG_PRINT(("PULSE WIDTH: %d\r\n", TD_MANUAL_PULSE_WIDTH));
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001e14:	885b      	ldrh	r3, [r3, #2]
 8001e16:	4619      	mov	r1, r3
 8001e18:	4812      	ldr	r0, [pc, #72]	; (8001e64 <bt_man_mode_req+0x1bc>)
 8001e1a:	f009 ffd9 	bl	800bdd0 <iprintf>
#ifdef STIM_LIB_EVKIT_CV
	TD_DEBUG_PRINT(("TARGET VOLTAGE: %d\r\n", TD_MANUAL_TARGET_VOLTAGE));
#else
	TD_DEBUG_PRINT(("TARGET DAC: %d\r\n", TD_MANUAL_TARGET_DAC));
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001e20:	795b      	ldrb	r3, [r3, #5]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4810      	ldr	r0, [pc, #64]	; (8001e68 <bt_man_mode_req+0x1c0>)
 8001e26:	f009 ffd3 	bl	800bdd0 <iprintf>
#endif
	TD_DEBUG_PRINT(("GO IFF TIME: %d\r\n", TD_MANUAL_GP_OFF_TIME));
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001e2c:	799b      	ldrb	r3, [r3, #6]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480e      	ldr	r0, [pc, #56]	; (8001e6c <bt_man_mode_req+0x1c4>)
 8001e32:	f009 ffcd 	bl	800bdd0 <iprintf>
	TD_DEBUG_PRINT(("GP ON TIME: %d\r\n", TD_MANUAL_GP_ON_TIME));
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <bt_man_mode_req+0x1a8>)
 8001e38:	79db      	ldrb	r3, [r3, #7]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <bt_man_mode_req+0x1c8>)
 8001e3e:	f009 ffc7 	bl	800bdd0 <iprintf>

	td_Stim_Manual_Mode_Start();
 8001e42:	f7ff fb93 	bl	800156c <td_Stim_Manual_Mode_Start>
 8001e46:	e000      	b.n	8001e4a <bt_man_mode_req+0x1a2>
		return;
 8001e48:	bf00      	nop
}
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200005a0 	.word	0x200005a0
 8001e54:	cccccccd 	.word	0xcccccccd
 8001e58:	51eb851f 	.word	0x51eb851f
 8001e5c:	0800d1c0 	.word	0x0800d1c0
 8001e60:	0800d1cc 	.word	0x0800d1cc
 8001e64:	0800d1e0 	.word	0x0800d1e0
 8001e68:	0800d1f4 	.word	0x0800d1f4
 8001e6c:	0800d208 	.word	0x0800d208
 8001e70:	0800d21c 	.word	0x0800d21c

08001e74 <bt_fw_ver_req>:

void bt_fw_ver_req(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	bt_msg_res(BT_FW_VER_REQ, BT_MSG_RES_OK, (uint8*) "FW_TEST_VER", strlen("FW_TEST_VER"));
 8001e78:	230b      	movs	r3, #11
 8001e7a:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <bt_fw_ver_req+0x14>)
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2008      	movs	r0, #8
 8001e80:	f000 f930 	bl	80020e4 <bt_msg_res>
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	0800d230 	.word	0x0800d230

08001e8c <bt_stim_lib_ver_req>:

void bt_stim_lib_ver_req(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	bt_msg_res(BT_STIM_LIB_VER_REQ, BT_MSG_RES_OK, (uint8*) "LIB_TEST_VER", strlen("LIB_TEST_VER"));
 8001e90:	230c      	movs	r3, #12
 8001e92:	4a03      	ldr	r2, [pc, #12]	; (8001ea0 <bt_stim_lib_ver_req+0x14>)
 8001e94:	2100      	movs	r1, #0
 8001e96:	2009      	movs	r0, #9
 8001e98:	f000 f924 	bl	80020e4 <bt_msg_res>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	0800d23c 	.word	0x0800d23c

08001ea4 <bt_stim_stimul_type_req>:

void bt_stim_stimul_type_req(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
	uint8 type;
#ifdef STIM_LIB_EVKIT_CC
	type = BT_MSG_STIMUL_TYPE_CONST_CURR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef STIM_LIB_EVKIT_CV
	type = BT_MSG_STIMUL_TYPE_CONST_VOLT;
#endif
	bt_msg_res(BT_STIM_STIMUL_TYPE_REQ, BT_MSG_RES_OK, &type, 1);
 8001eae:	1dfa      	adds	r2, r7, #7
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	200a      	movs	r0, #10
 8001eb6:	f000 f915 	bl	80020e4 <bt_msg_res>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <bt_stim_sys_reset_req>:

void bt_stim_sys_reset_req(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
	bt_msg_res(BT_STIM_SYS_RESET_REQ, BT_MSG_RES_OK, NULL, 0);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	200b      	movs	r0, #11
 8001ece:	f000 f909 	bl	80020e4 <bt_msg_res>
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <bt_stim_trg_cfg_req>:

void bt_stim_trg_cfg_req(uint8 *msg)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	 * CHECK PLS
	 * */
	bt_msg_res_t rsp_code;
	uint8 i;

	if (msg == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 80dc 	beq.w	80020a0 <bt_stim_trg_cfg_req+0x1c8>
	}

	/* Check paramters */
	do
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	73fb      	strb	r3, [r7, #15]

		ex_trg_data.volt_prestart = false;
 8001eec:	4b6e      	ldr	r3, [pc, #440]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
		ex_trg_data.trg_out_enable = false;
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
		ex_trg_data.trg_out_active_pol = 1;
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	709a      	strb	r2, [r3, #2]
		ex_trg_data.trg_in_enable = false;
 8001efe:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	70da      	strb	r2, [r3, #3]
		ex_trg_data.trg_in_active_pol = 1;
 8001f04:	4b68      	ldr	r3, [pc, #416]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	711a      	strb	r2, [r3, #4]
		ex_trg_data.trg_in_toggled = false;
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	715a      	strb	r2, [r3, #5]

		/* Length */
		if (msg[BT_MSG_LEN_IX] != 6)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3302      	adds	r3, #2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	f040 8088 	bne.w	800202c <bt_stim_trg_cfg_req+0x154>
		{
			break;
		}

		i = BT_MSG_DATA_IX;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	73bb      	strb	r3, [r7, #14]

		/* Voltage pre-start: 1byt. true : pre-start / false : do not pre-start :: 0 */
		ex_trg_data.volt_prestart = msg[i];
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b5d      	ldr	r3, [pc, #372]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f34:	701a      	strb	r2, [r3, #0]
		if (true != ex_trg_data.volt_prestart && false != ex_trg_data.volt_prestart)
 8001f36:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f083 0301 	eor.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <bt_stim_trg_cfg_req+0x74>
 8001f44:	4b58      	ldr	r3, [pc, #352]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d171      	bne.n	8002030 <bt_stim_trg_cfg_req+0x158>
		{
			break;
		}
		i++;
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	73bb      	strb	r3, [r7, #14]

		/* Trigger Output Enable :: 1 */
		ex_trg_data.trg_out_enable = msg[i];
 8001f52:	7bbb      	ldrb	r3, [r7, #14]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f66:	705a      	strb	r2, [r3, #1]
		if (true != ex_trg_data.trg_out_enable && false != ex_trg_data.trg_out_enable)
 8001f68:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f6a:	785b      	ldrb	r3, [r3, #1]
 8001f6c:	f083 0301 	eor.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <bt_stim_trg_cfg_req+0xa6>
 8001f76:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f78:	785b      	ldrb	r3, [r3, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d15a      	bne.n	8002034 <bt_stim_trg_cfg_req+0x15c>
		{
			break;
		}
		i++;
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	3301      	adds	r3, #1
 8001f82:	73bb      	strb	r3, [r7, #14]

		/* Trigger Output Active Pol Setting :: 2 */
		ex_trg_data.trg_out_active_pol = msg[i];
 8001f84:	7bbb      	ldrb	r3, [r7, #14]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f8e:	709a      	strb	r2, [r3, #2]
		if (0 != ex_trg_data.trg_out_active_pol && 1 != ex_trg_data.trg_out_active_pol)
 8001f90:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f92:	789b      	ldrb	r3, [r3, #2]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <bt_stim_trg_cfg_req+0xc8>
 8001f98:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001f9a:	789b      	ldrb	r3, [r3, #2]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d14b      	bne.n	8002038 <bt_stim_trg_cfg_req+0x160>
		{
			break;
		}
		i++;
 8001fa0:	7bbb      	ldrb	r3, [r7, #14]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	73bb      	strb	r3, [r7, #14]

		/* Trigger Input Enable :: 3*/
		ex_trg_data.trg_in_enable = msg[i];
 8001fa6:	7bbb      	ldrb	r3, [r7, #14]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf14      	ite	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	2300      	moveq	r3, #0
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001fba:	70da      	strb	r2, [r3, #3]
		if (true != ex_trg_data.trg_in_enable && false != ex_trg_data.trg_in_enable)
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001fbe:	78db      	ldrb	r3, [r3, #3]
 8001fc0:	f083 0301 	eor.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <bt_stim_trg_cfg_req+0xfa>
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001fcc:	78db      	ldrb	r3, [r3, #3]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d134      	bne.n	800203c <bt_stim_trg_cfg_req+0x164>
		{
			break;
		}
		i++;
 8001fd2:	7bbb      	ldrb	r3, [r7, #14]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	73bb      	strb	r3, [r7, #14]

		/* Trigger Input Active Pol Setting :: 4 */
		ex_trg_data.trg_in_active_pol = msg[i];
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001fe2:	711a      	strb	r2, [r3, #4]
		if (0 != ex_trg_data.trg_in_active_pol && 1 != ex_trg_data.trg_in_active_pol)
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001fe6:	791b      	ldrb	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <bt_stim_trg_cfg_req+0x11c>
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8001fee:	791b      	ldrb	r3, [r3, #4]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d125      	bne.n	8002040 <bt_stim_trg_cfg_req+0x168>
		{
			break;
		}
		i++;
 8001ff4:	7bbb      	ldrb	r3, [r7, #14]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	73bb      	strb	r3, [r7, #14]

		/* Trigger Input Toggle Active Setting :: 5 */
		ex_trg_data.trg_in_toggled = msg[i];
 8001ffa:	7bbb      	ldrb	r3, [r7, #14]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 800200e:	715a      	strb	r2, [r3, #5]
		if (true != ex_trg_data.trg_in_toggled && false != ex_trg_data.trg_in_toggled)
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8002012:	795b      	ldrb	r3, [r3, #5]
 8002014:	f083 0301 	eor.w	r3, r3, #1
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <bt_stim_trg_cfg_req+0x14e>
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8002020:	795b      	ldrb	r3, [r3, #5]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10e      	bne.n	8002044 <bt_stim_trg_cfg_req+0x16c>
		{
			break;
		}

		rsp_code = BT_MSG_RES_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e00c      	b.n	8002046 <bt_stim_trg_cfg_req+0x16e>
			break;
 800202c:	bf00      	nop
 800202e:	e00a      	b.n	8002046 <bt_stim_trg_cfg_req+0x16e>
			break;
 8002030:	bf00      	nop
 8002032:	e008      	b.n	8002046 <bt_stim_trg_cfg_req+0x16e>
			break;
 8002034:	bf00      	nop
 8002036:	e006      	b.n	8002046 <bt_stim_trg_cfg_req+0x16e>
			break;
 8002038:	bf00      	nop
 800203a:	e004      	b.n	8002046 <bt_stim_trg_cfg_req+0x16e>
			break;
 800203c:	bf00      	nop
 800203e:	e002      	b.n	8002046 <bt_stim_trg_cfg_req+0x16e>
			break;
 8002040:	bf00      	nop
 8002042:	e000      	b.n	8002046 <bt_stim_trg_cfg_req+0x16e>
			break;
 8002044:	bf00      	nop

	} while (false);

	if (rsp_code == BT_MSG_RES_OK)
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <bt_stim_trg_cfg_req+0x17a>
	{
		TD_DEBUG_PRINT(("Params OK\n"));
 800204c:	4817      	ldr	r0, [pc, #92]	; (80020ac <bt_stim_trg_cfg_req+0x1d4>)
 800204e:	f009 ff5b 	bl	800bf08 <puts>
	}

	TD_DEBUG_PRINT(("Pre-Start: %d\r\n", ex_trg_data.volt_prestart));
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	4815      	ldr	r0, [pc, #84]	; (80020b0 <bt_stim_trg_cfg_req+0x1d8>)
 800205a:	f009 feb9 	bl	800bdd0 <iprintf>
	TD_DEBUG_PRINT(("Trigger Output ENA: %d\r\n", ex_trg_data.trg_out_enable));
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8002060:	785b      	ldrb	r3, [r3, #1]
 8002062:	4619      	mov	r1, r3
 8002064:	4813      	ldr	r0, [pc, #76]	; (80020b4 <bt_stim_trg_cfg_req+0x1dc>)
 8002066:	f009 feb3 	bl	800bdd0 <iprintf>
	TD_DEBUG_PRINT(("Trigger Output Act POL: %d\r\n", ex_trg_data.trg_out_active_pol));
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 800206c:	789b      	ldrb	r3, [r3, #2]
 800206e:	4619      	mov	r1, r3
 8002070:	4811      	ldr	r0, [pc, #68]	; (80020b8 <bt_stim_trg_cfg_req+0x1e0>)
 8002072:	f009 fead 	bl	800bdd0 <iprintf>
	TD_DEBUG_PRINT(("Trigger Input ENA: %d\r\n", ex_trg_data.trg_in_enable));
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8002078:	78db      	ldrb	r3, [r3, #3]
 800207a:	4619      	mov	r1, r3
 800207c:	480f      	ldr	r0, [pc, #60]	; (80020bc <bt_stim_trg_cfg_req+0x1e4>)
 800207e:	f009 fea7 	bl	800bdd0 <iprintf>
	TD_DEBUG_PRINT(("Trigger Input Act POL: %d\r\n", ex_trg_data.trg_in_active_pol));
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8002084:	791b      	ldrb	r3, [r3, #4]
 8002086:	4619      	mov	r1, r3
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <bt_stim_trg_cfg_req+0x1e8>)
 800208a:	f009 fea1 	bl	800bdd0 <iprintf>
	TD_DEBUG_PRINT(("Trigger Input Toggled : %d\r\n", ex_trg_data.trg_in_toggled));
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <bt_stim_trg_cfg_req+0x1d0>)
 8002090:	795b      	ldrb	r3, [r3, #5]
 8002092:	4619      	mov	r1, r3
 8002094:	480b      	ldr	r0, [pc, #44]	; (80020c4 <bt_stim_trg_cfg_req+0x1ec>)
 8002096:	f009 fe9b 	bl	800bdd0 <iprintf>

	td_Stim_Trigger_Config_Update();
 800209a:	f7ff fac3 	bl	8001624 <td_Stim_Trigger_Config_Update>
 800209e:	e000      	b.n	80020a2 <bt_stim_trg_cfg_req+0x1ca>
		return;
 80020a0:	bf00      	nop
}
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2000058c 	.word	0x2000058c
 80020ac:	0800d1c0 	.word	0x0800d1c0
 80020b0:	0800d24c 	.word	0x0800d24c
 80020b4:	0800d25c 	.word	0x0800d25c
 80020b8:	0800d278 	.word	0x0800d278
 80020bc:	0800d298 	.word	0x0800d298
 80020c0:	0800d2b0 	.word	0x0800d2b0
 80020c4:	0800d2cc 	.word	0x0800d2cc

080020c8 <bt_msg_send_init_INLINE>:
#define BT_MSG_SEND()						tdUart1_sendData(BT_MSG_SEND_BUF, BT_MSG_SIZE_MAX)

uint8 gBtMsg_sendBuf[BT_MSG_SIZE_MAX];

static inline void bt_msg_send_init_INLINE(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	memset(BT_MSG_SEND_BUF, 0x00, BT_MSG_SIZE_MAX);
 80020cc:	2214      	movs	r2, #20
 80020ce:	2100      	movs	r1, #0
 80020d0:	4803      	ldr	r0, [pc, #12]	; (80020e0 <bt_msg_send_init_INLINE+0x18>)
 80020d2:	f009 fe75 	bl	800bdc0 <memset>

	BT_MSG_SEND_BUF[BT_MSG_START_CODE_IX] = BT_MSG_START_CODE;
 80020d6:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <bt_msg_send_init_INLINE+0x18>)
 80020d8:	22ef      	movs	r2, #239	; 0xef
 80020da:	701a      	strb	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200005ec 	.word	0x200005ec

080020e4 <bt_msg_res>:

void bt_msg_res(bt_msg_type_t type, bt_msg_res_t res, uint8 *data, uint8 data_len)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	603a      	str	r2, [r7, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
 80020f2:	460b      	mov	r3, r1
 80020f4:	71bb      	strb	r3, [r7, #6]
 80020f6:	4613      	mov	r3, r2
 80020f8:	717b      	strb	r3, [r7, #5]
	if (type >= BT_MSG_TYPE_MAX || res >= BT_MSG_RES_MAX)
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d82b      	bhi.n	8002158 <bt_msg_res+0x74>
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	2b04      	cmp	r3, #4
 8002104:	d828      	bhi.n	8002158 <bt_msg_res+0x74>
		return;

	if (data == NULL)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <bt_msg_res+0x2e>
		data_len = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	717b      	strb	r3, [r7, #5]
 8002110:	e004      	b.n	800211c <bt_msg_res+0x38>
	else if (data_len > BT_MSG_RES_DATA_LEN_MAX)
 8002112:	797b      	ldrb	r3, [r7, #5]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d901      	bls.n	800211c <bt_msg_res+0x38>
		data_len = BT_MSG_RES_DATA_LEN_MAX;
 8002118:	230f      	movs	r3, #15
 800211a:	717b      	strb	r3, [r7, #5]

	bt_msg_send_init_INLINE();
 800211c:	f7ff ffd4 	bl	80020c8 <bt_msg_send_init_INLINE>

	BT_MSG_SEND_BUF[BT_MSG_TYPE_IX] = BT_MSG_RES;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <bt_msg_res+0x7c>)
 8002122:	2200      	movs	r2, #0
 8002124:	705a      	strb	r2, [r3, #1]
	BT_MSG_SEND_BUF[BT_MSG_LEN_IX] = BT_MSG_RES_LEN_DEFAULT + data_len;
 8002126:	797b      	ldrb	r3, [r7, #5]
 8002128:	3302      	adds	r3, #2
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <bt_msg_res+0x7c>)
 800212e:	709a      	strb	r2, [r3, #2]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX] = type;
 8002130:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <bt_msg_res+0x7c>)
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	70d3      	strb	r3, [r2, #3]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX + 1] = res;
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <bt_msg_res+0x7c>)
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	7113      	strb	r3, [r2, #4]

	if (data_len > 0)
 800213c:	797b      	ldrb	r3, [r7, #5]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <bt_msg_res+0x6a>
	{
		memcpy(&BT_MSG_SEND_BUF[BT_MSG_DATA_IX + BT_MSG_RES_LEN_DEFAULT], data, data_len);
 8002142:	797b      	ldrb	r3, [r7, #5]
 8002144:	461a      	mov	r2, r3
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	4806      	ldr	r0, [pc, #24]	; (8002164 <bt_msg_res+0x80>)
 800214a:	f009 fe2b 	bl	800bda4 <memcpy>
	}

	BT_MSG_SEND();
 800214e:	2114      	movs	r1, #20
 8002150:	4803      	ldr	r0, [pc, #12]	; (8002160 <bt_msg_res+0x7c>)
 8002152:	f000 f849 	bl	80021e8 <tdUart1_sendData>
 8002156:	e000      	b.n	800215a <bt_msg_res+0x76>
		return;
 8002158:	bf00      	nop
}
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200005ec 	.word	0x200005ec
 8002164:	200005f1 	.word	0x200005f1

08002168 <bt_state_ind>:

void bt_state_ind(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	bt_msg_send_init_INLINE();
 800216c:	f7ff ffac 	bl	80020c8 <bt_msg_send_init_INLINE>

#if 1
	BT_MSG_SEND_BUF[BT_MSG_TYPE_IX] = BT_STATE_IND;
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <bt_state_ind+0x50>)
 8002172:	2202      	movs	r2, #2
 8002174:	705a      	strb	r2, [r3, #1]
	BT_MSG_SEND_BUF[BT_MSG_LEN_IX] = 4;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <bt_state_ind+0x50>)
 8002178:	2204      	movs	r2, #4
 800217a:	709a      	strb	r2, [r3, #2]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX] = td_Stim_Is_Started(); /* stimul start */
 800217c:	f7ff f886 	bl	800128c <td_Stim_Is_Started>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <bt_state_ind+0x50>)
 8002186:	70da      	strb	r2, [r3, #3]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX + 1] = td_Stim_Cur_Mode_Get(); /* mode */
 8002188:	f7ff f88c 	bl	80012a4 <td_Stim_Cur_Mode_Get>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <bt_state_ind+0x50>)
 8002192:	711a      	strb	r2, [r3, #4]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX + 2] = td_Stim_Cur_Level_Get(); /* level */
 8002194:	f7ff f892 	bl	80012bc <td_Stim_Cur_Level_Get>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <bt_state_ind+0x50>)
 800219e:	715a      	strb	r2, [r3, #5]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX + 3] = td_Stim_Detection_Level(); /* elect detect */
 80021a0:	f7ff f8c0 	bl	8001324 <td_Stim_Detection_Level>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <bt_state_ind+0x50>)
 80021aa:	719a      	strb	r2, [r3, #6]
#endif

	BT_MSG_SEND();
 80021ac:	2114      	movs	r1, #20
 80021ae:	4802      	ldr	r0, [pc, #8]	; (80021b8 <bt_state_ind+0x50>)
 80021b0:	f000 f81a 	bl	80021e8 <tdUart1_sendData>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200005ec 	.word	0x200005ec

080021bc <tdUart1_init>:

uint8_t gTdUart1_dmaTxBuf[TD_UART1_DMA_TX_BUF_SIZE];
uint8_t gTdUart1_dmaRxBuf[TD_UART1_DMA_RX_BUF_SIZE];

void tdUart1_init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	tdUart1Q_init();
 80021c0:	f000 f970 	bl	80024a4 <tdUart1Q_init>

	memset(TD_UART1_DMA_TX_BUF, 0, TD_UART1_DMA_TX_BUF_SIZE);
 80021c4:	2214      	movs	r2, #20
 80021c6:	2100      	movs	r1, #0
 80021c8:	4805      	ldr	r0, [pc, #20]	; (80021e0 <tdUart1_init+0x24>)
 80021ca:	f009 fdf9 	bl	800bdc0 <memset>
	memset(TD_UART1_DMA_RX_BUF, 0, TD_UART1_DMA_RX_BUF_SIZE);
 80021ce:	2214      	movs	r2, #20
 80021d0:	2100      	movs	r1, #0
 80021d2:	4804      	ldr	r0, [pc, #16]	; (80021e4 <tdUart1_init+0x28>)
 80021d4:	f009 fdf4 	bl	800bdc0 <memset>

	tdUart1_receiveData();
 80021d8:	f000 f85e 	bl	8002298 <tdUart1_receiveData>
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000600 	.word	0x20000600
 80021e4:	20000614 	.word	0x20000614

080021e8 <tdUart1_sendData>:

void tdUart1_sendData(uint8_t *data, uint8_t size)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
	uint32 i;
	UART_HandleTypeDef *uart_h = tdUsart1_handlerGet();
 80021f4:	f7fe f9be 	bl	8000574 <tdUsart1_handlerGet>
 80021f8:	60b8      	str	r0, [r7, #8]

	if (data == NULL || size == 0 || uart_h == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <tdUart1_sendData+0x24>
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <tdUart1_sendData+0x24>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <tdUart1_sendData+0x2c>
	{
		TD_DEBUG_PRINT(("tdUart1_sendData() ERR: PARAM\n"));
 800220c:	481f      	ldr	r0, [pc, #124]	; (800228c <tdUart1_sendData+0xa4>)
 800220e:	f009 fe7b 	bl	800bf08 <puts>
		return;
 8002212:	e038      	b.n	8002286 <tdUart1_sendData+0x9e>
		TD_DEBUG_PRINT(("tdUart1_sendData() ERR: BUSY\n"));
		return;
	}
#else
	/* To be used in interrupt handler also */
	for (i = 0; (i < TD_UART1_DMA_TX_WAIT_TIME) && (uart_h->gState != HAL_UART_STATE_READY); i++)
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e002      	b.n	8002220 <tdUart1_sendData+0x38>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3301      	adds	r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002226:	4293      	cmp	r3, r2
 8002228:	d803      	bhi.n	8002232 <tdUart1_sendData+0x4a>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800222e:	2b20      	cmp	r3, #32
 8002230:	d1f3      	bne.n	800221a <tdUart1_sendData+0x32>
		;

	if (i >= TD_UART1_DMA_TX_WAIT_TIME)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002238:	4293      	cmp	r3, r2
 800223a:	d903      	bls.n	8002244 <tdUart1_sendData+0x5c>
	{
		TD_DEBUG_PRINT(("tdUart1_sendData() ERR: BUSY\n"));
 800223c:	4814      	ldr	r0, [pc, #80]	; (8002290 <tdUart1_sendData+0xa8>)
 800223e:	f009 fe63 	bl	800bf08 <puts>
		return;
 8002242:	e020      	b.n	8002286 <tdUart1_sendData+0x9e>
	}
#endif

	TD_UART_DMA_TX_BUF_CLEAR();
 8002244:	2214      	movs	r2, #20
 8002246:	2100      	movs	r1, #0
 8002248:	4812      	ldr	r0, [pc, #72]	; (8002294 <tdUart1_sendData+0xac>)
 800224a:	f009 fdb9 	bl	800bdc0 <memset>

	if (size > TD_UART1_DMA_TX_BUF_SIZE)
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	2b14      	cmp	r3, #20
 8002252:	d901      	bls.n	8002258 <tdUart1_sendData+0x70>
		size = TD_UART1_DMA_TX_BUF_SIZE;
 8002254:	2314      	movs	r3, #20
 8002256:	70fb      	strb	r3, [r7, #3]

	memcpy(TD_UART1_DMA_TX_BUF, data, size);
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	461a      	mov	r2, r3
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	480d      	ldr	r0, [pc, #52]	; (8002294 <tdUart1_sendData+0xac>)
 8002260:	f009 fda0 	bl	800bda4 <memcpy>

	HAL_UART_Transmit_DMA(uart_h, TD_UART1_DMA_TX_BUF, size);
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	490a      	ldr	r1, [pc, #40]	; (8002294 <tdUart1_sendData+0xac>)
 800226c:	68b8      	ldr	r0, [r7, #8]
 800226e:	f006 fadf 	bl	8008830 <HAL_UART_Transmit_DMA>
	__HAL_DMA_DISABLE_IT(uart_h->hdmatx, DMA_IT_HT);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0204 	bic.w	r2, r2, #4
 8002284:	601a      	str	r2, [r3, #0]

}
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	0800d2ec 	.word	0x0800d2ec
 8002290:	0800d30c 	.word	0x0800d30c
 8002294:	20000600 	.word	0x20000600

08002298 <tdUart1_receiveData>:

void tdUart1_receiveData(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
	UART_HandleTypeDef *uart_h = tdUsart1_handlerGet();
 800229e:	f7fe f969 	bl	8000574 <tdUsart1_handlerGet>
 80022a2:	6078      	str	r0, [r7, #4]

	if (uart_h == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d103      	bne.n	80022b2 <tdUart1_receiveData+0x1a>
	{
		TD_DEBUG_PRINT(("tdUart1_receiveData() ERR: PARAM\n"));
 80022aa:	4811      	ldr	r0, [pc, #68]	; (80022f0 <tdUart1_receiveData+0x58>)
 80022ac:	f009 fe2c 	bl	800bf08 <puts>
		return;
 80022b0:	e01b      	b.n	80022ea <tdUart1_receiveData+0x52>
	}

	if (uart_h->RxState != HAL_UART_STATE_READY)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d003      	beq.n	80022c2 <tdUart1_receiveData+0x2a>
	{
		TD_DEBUG_PRINT(("tdUart1_receiveData() ERR: BUSY\n"));
 80022ba:	480e      	ldr	r0, [pc, #56]	; (80022f4 <tdUart1_receiveData+0x5c>)
 80022bc:	f009 fe24 	bl	800bf08 <puts>
		return;
 80022c0:	e013      	b.n	80022ea <tdUart1_receiveData+0x52>
	}

	TD_UART_DMA_RX_BUF_CLEAR();
 80022c2:	2214      	movs	r2, #20
 80022c4:	2100      	movs	r1, #0
 80022c6:	480c      	ldr	r0, [pc, #48]	; (80022f8 <tdUart1_receiveData+0x60>)
 80022c8:	f009 fd7a 	bl	800bdc0 <memset>

	HAL_UARTEx_ReceiveToIdle_DMA(uart_h, TD_UART1_DMA_RX_BUF, TD_UART1_DMA_RX_BUF_SIZE);
 80022cc:	2214      	movs	r2, #20
 80022ce:	490a      	ldr	r1, [pc, #40]	; (80022f8 <tdUart1_receiveData+0x60>)
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f007 fce9 	bl	8009ca8 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(uart_h->hdmarx, DMA_IT_HT);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0204 	bic.w	r2, r2, #4
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	0800d32c 	.word	0x0800d32c
 80022f4:	0800d350 	.word	0x0800d350
 80022f8:	20000614 	.word	0x20000614

080022fc <HAL_UARTEx_RxEventCallback>:

/* Rx complete when Idle */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a15      	ldr	r2, [pc, #84]	; (8002364 <HAL_UARTEx_RxEventCallback+0x68>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d123      	bne.n	800235a <HAL_UARTEx_RxEventCallback+0x5e>
	{
		TD_DEBUG_PRINT(("USART1 Rx event\n"));
 8002312:	4815      	ldr	r0, [pc, #84]	; (8002368 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002314:	f009 fdf8 	bl	800bf08 <puts>
		memcpy(TD_UART1_DMA_RX_BUF, huart->pRxBuffPtr, Size);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	887a      	ldrh	r2, [r7, #2]
 800231e:	4619      	mov	r1, r3
 8002320:	4812      	ldr	r0, [pc, #72]	; (800236c <HAL_UARTEx_RxEventCallback+0x70>)
 8002322:	f009 fd3f 	bl	800bda4 <memcpy>

		HAL_UARTEx_ReceiveToIdle_DMA(huart, TD_UART1_DMA_RX_BUF, TD_UART1_DMA_RX_BUF_SIZE);
 8002326:	2214      	movs	r2, #20
 8002328:	4910      	ldr	r1, [pc, #64]	; (800236c <HAL_UARTEx_RxEventCallback+0x70>)
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f007 fcbc 	bl	8009ca8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0204 	bic.w	r2, r2, #4
 8002342:	601a      	str	r2, [r3, #0]

		tdUart1Q_putData(TD_UART1_DMA_RX_BUF, Size);
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4619      	mov	r1, r3
 800234a:	4808      	ldr	r0, [pc, #32]	; (800236c <HAL_UARTEx_RxEventCallback+0x70>)
 800234c:	f000 f8cc 	bl	80024e8 <tdUart1Q_putData>

		TD_UART_DMA_RX_BUF_CLEAR();
 8002350:	2214      	movs	r2, #20
 8002352:	2100      	movs	r1, #0
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_UARTEx_RxEventCallback+0x70>)
 8002356:	f009 fd33 	bl	800bdc0 <memset>
	}
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40013800 	.word	0x40013800
 8002368:	0800d370 	.word	0x0800d370
 800236c:	20000614 	.word	0x20000614

08002370 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <HAL_UART_RxCpltCallback+0x28>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d105      	bne.n	800238e <HAL_UART_RxCpltCallback+0x1e>
	{
		TD_DEBUG_PRINT(("USART1 Rx comlete\n"));
 8002382:	4806      	ldr	r0, [pc, #24]	; (800239c <HAL_UART_RxCpltCallback+0x2c>)
 8002384:	f009 fdc0 	bl	800bf08 <puts>
		TD_DEBUG_PRINT(("Something wrong\n"));
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <HAL_UART_RxCpltCallback+0x30>)
 800238a:	f009 fdbd 	bl	800bf08 <puts>
	}
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40013800 	.word	0x40013800
 800239c:	0800d380 	.word	0x0800d380
 80023a0:	0800d394 	.word	0x0800d394

080023a4 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <HAL_UART_RxHalfCpltCallback+0x28>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d105      	bne.n	80023c2 <HAL_UART_RxHalfCpltCallback+0x1e>
	{
		TD_DEBUG_PRINT(("USART1 Rx Half comlete\n"));
 80023b6:	4806      	ldr	r0, [pc, #24]	; (80023d0 <HAL_UART_RxHalfCpltCallback+0x2c>)
 80023b8:	f009 fda6 	bl	800bf08 <puts>
		TD_DEBUG_PRINT(("Something wrong\n"));
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <HAL_UART_RxHalfCpltCallback+0x30>)
 80023be:	f009 fda3 	bl	800bf08 <puts>
	}
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40013800 	.word	0x40013800
 80023d0:	0800d3a4 	.word	0x0800d3a4
 80023d4:	0800d394 	.word	0x0800d394

080023d8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_UART_TxCpltCallback+0x20>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d102      	bne.n	80023f0 <HAL_UART_TxCpltCallback+0x18>
	{
		TD_DEBUG_PRINT(("USART1 Tx comlete\n"));
 80023ea:	4804      	ldr	r0, [pc, #16]	; (80023fc <HAL_UART_TxCpltCallback+0x24>)
 80023ec:	f009 fd8c 	bl	800bf08 <puts>
	}
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40013800 	.word	0x40013800
 80023fc:	0800d3bc 	.word	0x0800d3bc

08002400 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a06      	ldr	r2, [pc, #24]	; (8002428 <HAL_UART_TxHalfCpltCallback+0x28>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d105      	bne.n	800241e <HAL_UART_TxHalfCpltCallback+0x1e>
	{
		TD_DEBUG_PRINT(("USART1 Tx Half comlete\n"));
 8002412:	4806      	ldr	r0, [pc, #24]	; (800242c <HAL_UART_TxHalfCpltCallback+0x2c>)
 8002414:	f009 fd78 	bl	800bf08 <puts>
		TD_DEBUG_PRINT(("Something wrong\n"));
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_UART_TxHalfCpltCallback+0x30>)
 800241a:	f009 fd75 	bl	800bf08 <puts>
	}
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40013800 	.word	0x40013800
 800242c:	0800d3d0 	.word	0x0800d3d0
 8002430:	0800d394 	.word	0x0800d394

08002434 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a06      	ldr	r2, [pc, #24]	; (800245c <HAL_UART_ErrorCallback+0x28>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d106      	bne.n	8002454 <HAL_UART_ErrorCallback+0x20>
	{
		TD_DEBUG_PRINT(("USART1 Error: %lx\n", huart->ErrorCode));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800244c:	4619      	mov	r1, r3
 800244e:	4804      	ldr	r0, [pc, #16]	; (8002460 <HAL_UART_ErrorCallback+0x2c>)
 8002450:	f009 fcbe 	bl	800bdd0 <iprintf>
	}
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40013800 	.word	0x40013800
 8002460:	0800d3e8 	.word	0x0800d3e8

08002464 <td_uart1_q_buf_clear>:
} td_uart1_q_state_data_t;

td_uart1_q_state_data_t gTdUart1QState;

static inline void td_uart1_q_buf_clear(uint8 i)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
	if (i < TD_UART1_Q_BUF_NUM)
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d811      	bhi.n	8002498 <td_uart1_q_buf_clear+0x34>
	{
		memset(TD_UART1_Q_STATE_BUF(i), 0x00, TD_UART1_Q_BUF_SIZE);
 8002474:	79fa      	ldrb	r2, [r7, #7]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <td_uart1_q_buf_clear+0x3c>)
 8002480:	4413      	add	r3, r2
 8002482:	2214      	movs	r2, #20
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f009 fc9a 	bl	800bdc0 <memset>
		TD_UART1_Q_STATE_BUF_LEN(i)= 0;
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <td_uart1_q_buf_clear+0x3c>)
 8002490:	4413      	add	r3, r2
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000628 	.word	0x20000628

080024a4 <tdUart1Q_init>:

void tdUart1Q_init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
	uint8 i;

	for (i = 0; i < TD_UART1_Q_BUF_NUM; i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	71fb      	strb	r3, [r7, #7]
 80024ae:	e006      	b.n	80024be <tdUart1Q_init+0x1a>
	{
		td_uart1_q_buf_clear(i);
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ffd6 	bl	8002464 <td_uart1_q_buf_clear>
	for (i = 0; i < TD_UART1_Q_BUF_NUM; i++)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	3301      	adds	r3, #1
 80024bc:	71fb      	strb	r3, [r7, #7]
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d9f5      	bls.n	80024b0 <tdUart1Q_init+0xc>
	}

	TD_UART1_Q_FRONT = 0;
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <tdUart1Q_init+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	TD_UART1_Q_REAR = 0;
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <tdUart1Q_init+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	TD_UART1_Q_ITEM_NUM = 0;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <tdUart1Q_init+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000628 	.word	0x20000628

080024e8 <tdUart1Q_putData>:

uint8 tdUart1Q_putData(uint8 *data, uint8 data_len)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
	if (data == NULL || data_len == 0)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <tdUart1Q_putData+0x18>
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <tdUart1Q_putData+0x1c>
		return 0;
 8002500:	2300      	movs	r3, #0
 8002502:	e032      	b.n	800256a <tdUart1Q_putData+0x82>

	if (data_len > TD_UART1_Q_BUF_SIZE)
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	2b14      	cmp	r3, #20
 8002508:	d901      	bls.n	800250e <tdUart1Q_putData+0x26>
		data_len = TD_UART1_Q_BUF_SIZE;
 800250a:	2314      	movs	r3, #20
 800250c:	70fb      	strb	r3, [r7, #3]

	TD_UART1_Q_REAR = (TD_UART1_Q_REAR + 1) % TD_UART1_Q_BUF_NUM;
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <tdUart1Q_putData+0x8c>)
 8002510:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002514:	3301      	adds	r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	bfb8      	it	lt
 800251e:	425b      	neglt	r3, r3
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <tdUart1Q_putData+0x8c>)
 8002524:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	memcpy(TD_UART1_Q_STATE_BUF(TD_UART1_Q_REAR), data, data_len);
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <tdUart1Q_putData+0x8c>)
 800252a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800252e:	461a      	mov	r2, r3
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <tdUart1Q_putData+0x8c>)
 800253a:	4413      	add	r3, r2
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f009 fc2f 	bl	800bda4 <memcpy>
	TD_UART1_Q_STATE_BUF_LEN(TD_UART1_Q_REAR)= data_len;
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <tdUart1Q_putData+0x8c>)
 8002548:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800254c:	461a      	mov	r2, r3
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <tdUart1Q_putData+0x8c>)
 8002550:	4413      	add	r3, r2
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	TD_UART1_Q_ITEM_NUM++;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <tdUart1Q_putData+0x8c>)
 800255a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800255e:	3301      	adds	r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <tdUart1Q_putData+0x8c>)
 8002564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	return data_len;
 8002568:	78fb      	ldrb	r3, [r7, #3]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000628 	.word	0x20000628

08002578 <tdUart1Q_getData>:

uint8 tdUart1Q_getData(uint8 *data, uint8 data_len)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	70fb      	strb	r3, [r7, #3]
	if (data == NULL || data_len == 0 || TD_UART1_Q_ITEM_NUM == 0)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <tdUart1Q_getData+0x22>
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <tdUart1Q_getData+0x22>
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <tdUart1Q_getData+0xb8>)
 8002592:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <tdUart1Q_getData+0x26>
		return 0;
 800259a:	2300      	movs	r3, #0
 800259c:	e044      	b.n	8002628 <tdUart1Q_getData+0xb0>

	TD_UART1_Q_FRONT = (TD_UART1_Q_FRONT + 1) % TD_UART1_Q_BUF_NUM;
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <tdUart1Q_getData+0xb8>)
 80025a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80025a4:	3301      	adds	r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	bfb8      	it	lt
 80025ae:	425b      	neglt	r3, r3
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <tdUart1Q_getData+0xb8>)
 80025b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	if (TD_UART1_Q_STATE_BUF_LEN(TD_UART1_Q_FRONT)< data_len)
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <tdUart1Q_getData+0xb8>)
 80025ba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80025be:	461a      	mov	r2, r3
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <tdUart1Q_getData+0xb8>)
 80025c2:	4413      	add	r3, r2
 80025c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d908      	bls.n	80025e0 <tdUart1Q_getData+0x68>
	data_len = TD_UART1_Q_STATE_BUF_LEN(TD_UART1_Q_FRONT);
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <tdUart1Q_getData+0xb8>)
 80025d0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <tdUart1Q_getData+0xb8>)
 80025d8:	4413      	add	r3, r2
 80025da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025de:	70fb      	strb	r3, [r7, #3]

	memcpy(data, TD_UART1_Q_STATE_BUF(TD_UART1_Q_FRONT), data_len);
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <tdUart1Q_getData+0xb8>)
 80025e2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80025e6:	461a      	mov	r2, r3
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4a0f      	ldr	r2, [pc, #60]	; (8002630 <tdUart1Q_getData+0xb8>)
 80025f2:	4413      	add	r3, r2
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f009 fbd3 	bl	800bda4 <memcpy>

	TD_USART1_MUTEX_LOCK();
 80025fe:	200e      	movs	r0, #14
 8002600:	f002 fc85 	bl	8004f0e <HAL_NVIC_DisableIRQ>

	TD_UART1_Q_ITEM_NUM--;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <tdUart1Q_getData+0xb8>)
 8002606:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800260a:	3b01      	subs	r3, #1
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <tdUart1Q_getData+0xb8>)
 8002610:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	TD_USART1_MUTEX_UNLOCK();
 8002614:	200e      	movs	r0, #14
 8002616:	f002 fc6c 	bl	8004ef2 <HAL_NVIC_EnableIRQ>

	td_uart1_q_buf_clear(TD_UART1_Q_FRONT);
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <tdUart1Q_getData+0xb8>)
 800261c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff1f 	bl	8002464 <td_uart1_q_buf_clear>

	return data_len;
 8002626:	78fb      	ldrb	r3, [r7, #3]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000628 	.word	0x20000628

08002634 <tdDebugInit>:
#include "td_debug.h"

#ifdef	TD_DEBUG_ENABLED

void tdDebugInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <tdDebugPrintHex>:

	TD_DEBUG_PRINT(("\n"));
}

void tdDebugPrintHex(uint8_t *data, uint16_t len)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
	uint16_t i;

	if (len == 0)
 8002650:	887b      	ldrh	r3, [r7, #2]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d015      	beq.n	8002682 <tdDebugPrintHex+0x3e>
	{
		return;
	}

	for (i = 0; i < len; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	81fb      	strh	r3, [r7, #14]
 800265a:	e00a      	b.n	8002672 <tdDebugPrintHex+0x2e>
	{
		TD_DEBUG_PRINT(("%02x ", data[i]));
 800265c:	89fb      	ldrh	r3, [r7, #14]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	4809      	ldr	r0, [pc, #36]	; (800268c <tdDebugPrintHex+0x48>)
 8002668:	f009 fbb2 	bl	800bdd0 <iprintf>
	for (i = 0; i < len; i++)
 800266c:	89fb      	ldrh	r3, [r7, #14]
 800266e:	3301      	adds	r3, #1
 8002670:	81fb      	strh	r3, [r7, #14]
 8002672:	89fa      	ldrh	r2, [r7, #14]
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	429a      	cmp	r2, r3
 8002678:	d3f0      	bcc.n	800265c <tdDebugPrintHex+0x18>
	}

	TD_DEBUG_PRINT(("\n"));
 800267a:	200a      	movs	r0, #10
 800267c:	f009 fbc0 	bl	800be00 <putchar>
 8002680:	e000      	b.n	8002684 <tdDebugPrintHex+0x40>
		return;
 8002682:	bf00      	nop
}
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	0800d3fc 	.word	0x0800d3fc

08002690 <_write>:

int __io_putchar(int ch);

/* With GCC, printf calls _write() */
int _write(int file, char *ptr, int len)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e009      	b.n	80026b6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	60ba      	str	r2, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f80c 	bl	80026c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	dbf1      	blt.n	80026a2 <_write+0x12>
	}
	return len;
 80026be:	687b      	ldr	r3, [r7, #4]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <__io_putchar>:
FILE __stdin;

int fputc(int ch, FILE *f)

#endif /* __GNUC__ */
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b0a      	cmp	r3, #10
 80026d4:	d109      	bne.n	80026ea <__io_putchar+0x22>
	{
		/* output CR  */
		while (!(TD_RETARGET_UART->ISR & UART_FLAG_TXE))
 80026d6:	bf00      	nop
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <__io_putchar+0x48>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f9      	beq.n	80026d8 <__io_putchar+0x10>
			;

		TD_RETARGET_UART->TDR = '\r';
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <__io_putchar+0x48>)
 80026e6:	220d      	movs	r2, #13
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
	}

	while (!(TD_RETARGET_UART->ISR & UART_FLAG_TXE))
 80026ea:	bf00      	nop
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <__io_putchar+0x48>)
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f9      	beq.n	80026ec <__io_putchar+0x24>
		;

	TD_RETARGET_UART->TDR = (uint8_t) ch;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <__io_putchar+0x48>)
 80026fe:	b292      	uxth	r2, r2
 8002700:	851a      	strh	r2, [r3, #40]	; 0x28

	return ch;
 8002702:	687b      	ldr	r3, [r7, #4]
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40004800 	.word	0x40004800

08002714 <Reset_Handler>:
 8002714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800274c <LoopForever+0x2>
 8002718:	f7fe fd12 	bl	8001140 <SystemInit>
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <LoopForever+0x6>)
 800271e:	490d      	ldr	r1, [pc, #52]	; (8002754 <LoopForever+0xa>)
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <LoopForever+0xe>)
 8002722:	2300      	movs	r3, #0
 8002724:	e002      	b.n	800272c <LoopCopyDataInit>

08002726 <CopyDataInit>:
 8002726:	58d4      	ldr	r4, [r2, r3]
 8002728:	50c4      	str	r4, [r0, r3]
 800272a:	3304      	adds	r3, #4

0800272c <LoopCopyDataInit>:
 800272c:	18c4      	adds	r4, r0, r3
 800272e:	428c      	cmp	r4, r1
 8002730:	d3f9      	bcc.n	8002726 <CopyDataInit>
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <LoopForever+0x12>)
 8002734:	4c0a      	ldr	r4, [pc, #40]	; (8002760 <LoopForever+0x16>)
 8002736:	2300      	movs	r3, #0
 8002738:	e001      	b.n	800273e <LoopFillZerobss>

0800273a <FillZerobss>:
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	3204      	adds	r2, #4

0800273e <LoopFillZerobss>:
 800273e:	42a2      	cmp	r2, r4
 8002740:	d3fb      	bcc.n	800273a <FillZerobss>
 8002742:	f009 fb0b 	bl	800bd5c <__libc_init_array>
 8002746:	f7fd ff8f 	bl	8000668 <main>

0800274a <LoopForever>:
 800274a:	e7fe      	b.n	800274a <LoopForever>
 800274c:	2000a000 	.word	0x2000a000
 8002750:	20000000 	.word	0x20000000
 8002754:	200000f0 	.word	0x200000f0
 8002758:	0800d814 	.word	0x0800d814
 800275c:	200000f0 	.word	0x200000f0
 8002760:	200006e0 	.word	0x200006e0

08002764 <COMP_IRQHandler>:
 8002764:	e7fe      	b.n	8002764 <COMP_IRQHandler>
	...

08002768 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <HAL_Init+0x3c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <HAL_Init+0x3c>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277e:	2003      	movs	r0, #3
 8002780:	f002 fb90 	bl	8004ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002784:	2000      	movs	r0, #0
 8002786:	f000 f80f 	bl	80027a8 <HAL_InitTick>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	71fb      	strb	r3, [r7, #7]
 8002794:	e001      	b.n	800279a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002796:	f7fe f845 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800279a:	79fb      	ldrb	r3, [r7, #7]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40022000 	.word	0x40022000

080027a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_InitTick+0x6c>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d023      	beq.n	8002804 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <HAL_InitTick+0x70>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_InitTick+0x6c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fba9 	bl	8004f2a <HAL_SYSTICK_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b0f      	cmp	r3, #15
 80027e2:	d809      	bhi.n	80027f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e4:	2200      	movs	r2, #0
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f002 fb65 	bl	8004eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_InitTick+0x74>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e007      	b.n	8002808 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e004      	b.n	8002808 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	e001      	b.n	8002808 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000088 	.word	0x20000088
 8002818:	20000000 	.word	0x20000000
 800281c:	20000084 	.word	0x20000084

08002820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x20>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x24>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <HAL_IncTick+0x24>)
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000088 	.word	0x20000088
 8002844:	20000658 	.word	0x20000658

08002848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000658 	.word	0x20000658

08002860 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	609a      	str	r2, [r3, #8]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3360      	adds	r3, #96	; 0x60
 80028da:	461a      	mov	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <LL_ADC_SetOffset+0x44>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002900:	bf00      	nop
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	03fff000 	.word	0x03fff000

08002910 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3360      	adds	r3, #96	; 0x60
 800291e:	461a      	mov	r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3360      	adds	r3, #96	; 0x60
 800294c:	461a      	mov	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	431a      	orrs	r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	615a      	str	r2, [r3, #20]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029be:	b480      	push	{r7}
 80029c0:	b087      	sub	sp, #28
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3330      	adds	r3, #48	; 0x30
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	4413      	add	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	211f      	movs	r1, #31
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	f003 011f 	and.w	r1, r3, #31
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	431a      	orrs	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3314      	adds	r3, #20
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0e5b      	lsrs	r3, r3, #25
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	0d1b      	lsrs	r3, r3, #20
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2107      	movs	r1, #7
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	401a      	ands	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	0d1b      	lsrs	r3, r3, #20
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aac:	43db      	mvns	r3, r3
 8002aae:	401a      	ands	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 0318 	and.w	r3, r3, #24
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ab8:	40d9      	lsrs	r1, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	400b      	ands	r3, r1
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	0007ffff 	.word	0x0007ffff

08002adc <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	330c      	adds	r3, #12
 8002aec:	4618      	mov	r0, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	0d1b      	lsrs	r3, r3, #20
 8002af2:	f003 0103 	and.w	r1, r3, #3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 0201 	and.w	r2, r3, #1
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4403      	add	r3, r0
 8002b0a:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8002b16:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	400b      	ands	r3, r1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b087      	sub	sp, #28
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3320      	adds	r3, #32
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	0d1b      	lsrs	r3, r3, #20
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	4413      	add	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	0419      	lsls	r1, r3, #16
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	430b      	orrs	r3, r1
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 031f 	and.w	r3, r3, #31
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002bc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6093      	str	r3, [r2, #8]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bea:	d101      	bne.n	8002bf0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c3a:	d101      	bne.n	8002c40 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c8a:	f043 0202 	orr.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <LL_ADC_IsEnabled+0x18>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <LL_ADC_IsEnabled+0x1a>
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d101      	bne.n	8002cdc <LL_ADC_IsDisableOngoing+0x18>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <LL_ADC_IsDisableOngoing+0x1a>
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d26:	f043 0210 	orr.w	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d101      	bne.n	8002d52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d101      	bne.n	8002da0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	601a      	str	r2, [r3, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dd6:	601a      	str	r2, [r3, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	605a      	str	r2, [r3, #4]
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	605a      	str	r2, [r3, #4]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	605a      	str	r2, [r3, #4]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	605a      	str	r2, [r3, #4]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e131      	b.n	800313e <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7fd fcbf 	bl	800086c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fe68 	bl	8002bd6 <LL_ADC_IsDeepPowerDownEnabled>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fe4e 	bl	8002bb2 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fe83 	bl	8002c26 <LL_ADC_IsInternalRegulatorEnabled>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d115      	bne.n	8002f52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fe67 	bl	8002bfe <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f30:	4b85      	ldr	r3, [pc, #532]	; (8003148 <HAL_ADC_Init+0x288>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	099b      	lsrs	r3, r3, #6
 8002f36:	4a85      	ldr	r2, [pc, #532]	; (800314c <HAL_ADC_Init+0x28c>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	3301      	adds	r3, #1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f44:	e002      	b.n	8002f4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f9      	bne.n	8002f46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fe65 	bl	8002c26 <LL_ADC_IsInternalRegulatorEnabled>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	f043 0210 	orr.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f043 0201 	orr.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fed9 	bl	8002d3a <LL_ADC_REG_IsConversionOngoing>
 8002f88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f040 80ca 	bne.w	800312c <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 80c6 	bne.w	800312c <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fa8:	f043 0202 	orr.w	r2, r3, #2
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fe72 	bl	8002c9e <LL_ADC_IsEnabled>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d110      	bne.n	8002fe2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc0:	4863      	ldr	r0, [pc, #396]	; (8003150 <HAL_ADC_Init+0x290>)
 8002fc2:	f7ff fe6c 	bl	8002c9e <LL_ADC_IsEnabled>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	4862      	ldr	r0, [pc, #392]	; (8003154 <HAL_ADC_Init+0x294>)
 8002fca:	f7ff fe68 	bl	8002c9e <LL_ADC_IsEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4323      	orrs	r3, r4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d105      	bne.n	8002fe2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	485e      	ldr	r0, [pc, #376]	; (8003158 <HAL_ADC_Init+0x298>)
 8002fde:	f7ff fc3f 	bl	8002860 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7e5b      	ldrb	r3, [r3, #25]
 8002fe6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fec:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ff2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ff8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003000:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d106      	bne.n	800301e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	3b01      	subs	r3, #1
 8003016:	045b      	lsls	r3, r3, #17
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_ADC_Init+0x29c>)
 8003042:	4013      	ands	r3, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	69b9      	ldr	r1, [r7, #24]
 800304a:	430b      	orrs	r3, r1
 800304c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fe71 	bl	8002d3a <LL_ADC_REG_IsConversionOngoing>
 8003058:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fe92 	bl	8002d88 <LL_ADC_INJ_IsConversionOngoing>
 8003064:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d13d      	bne.n	80030e8 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d13a      	bne.n	80030e8 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003076:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800307e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800308e:	f023 0302 	bic.w	r3, r3, #2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	430b      	orrs	r3, r1
 800309a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d118      	bne.n	80030d8 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030b0:	f023 0304 	bic.w	r3, r3, #4
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030c8:	430a      	orrs	r2, r1
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	611a      	str	r2, [r3, #16]
 80030d6:	e007      	b.n	80030e8 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d10c      	bne.n	800310a <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f023 010f 	bic.w	r1, r3, #15
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	1e5a      	subs	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
 8003108:	e007      	b.n	800311a <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 020f 	bic.w	r2, r2, #15
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
 800312a:	e007      	b.n	800313c <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	f043 0210 	orr.w	r2, r3, #16
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800313c:	7ffb      	ldrb	r3, [r7, #31]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd90      	pop	{r4, r7, pc}
 8003146:	bf00      	nop
 8003148:	20000000 	.word	0x20000000
 800314c:	053e2d63 	.word	0x053e2d63
 8003150:	50040000 	.word	0x50040000
 8003154:	50040100 	.word	0x50040100
 8003158:	50040300 	.word	0x50040300
 800315c:	fff0c007 	.word	0xfff0c007

08003160 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e111      	b.n	8003396 <HAL_ADC_DeInit+0x236>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f043 0202 	orr.w	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800317e:	2103      	movs	r1, #3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f001 fa69 	bl	8004658 <ADC_ConversionStop>
 8003186:	4603      	mov	r3, r0
 8003188:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003198:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f001 fb9b 	bl	80048dc <ADC_Disable>
 80031a6:	4603      	mov	r3, r0
 80031a8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031c4:	f023 0307 	bic.w	r3, r3, #7
 80031c8:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80031d2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 80031e2:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80031f2:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68d9      	ldr	r1, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b68      	ldr	r3, [pc, #416]	; (80033a0 <HAL_ADC_DeInit+0x240>)
 8003200:	400b      	ands	r3, r1
 8003202:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003212:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003222:	f023 0307 	bic.w	r3, r3, #7
 8003226:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003236:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8003246:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6a1a      	ldr	r2, [r3, #32]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003256:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003276:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b48      	ldr	r3, [pc, #288]	; (80033a4 <HAL_ADC_DeInit+0x244>)
 8003284:	400b      	ands	r3, r1
 8003286:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b45      	ldr	r3, [pc, #276]	; (80033a8 <HAL_ADC_DeInit+0x248>)
 8003294:	400b      	ands	r3, r1
 8003296:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <HAL_ADC_DeInit+0x248>)
 80032a4:	400b      	ands	r3, r1
 80032a6:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 80032b6:	f023 0307 	bic.w	r3, r3, #7
 80032ba:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b39      	ldr	r3, [pc, #228]	; (80033ac <HAL_ADC_DeInit+0x24c>)
 80032c8:	400b      	ands	r3, r1
 80032ca:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b35      	ldr	r3, [pc, #212]	; (80033ac <HAL_ADC_DeInit+0x24c>)
 80032d8:	400b      	ands	r3, r1
 80032da:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <HAL_ADC_DeInit+0x24c>)
 80032e8:	400b      	ands	r3, r1
 80032ea:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <HAL_ADC_DeInit+0x24c>)
 80032f8:	400b      	ands	r3, r1
 80032fa:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	0cdb      	lsrs	r3, r3, #19
 800330a:	04db      	lsls	r3, r3, #19
 800330c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	0cdb      	lsrs	r3, r3, #19
 800331e:	04db      	lsls	r3, r3, #19
 8003320:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	0cdb      	lsrs	r3, r3, #19
 8003332:	04db      	lsls	r3, r3, #19
 8003334:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8003348:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800334c:	4818      	ldr	r0, [pc, #96]	; (80033b0 <HAL_ADC_DeInit+0x250>)
 800334e:	f7ff fca6 	bl	8002c9e <LL_ADC_IsEnabled>
 8003352:	4604      	mov	r4, r0
 8003354:	4817      	ldr	r0, [pc, #92]	; (80033b4 <HAL_ADC_DeInit+0x254>)
 8003356:	f7ff fca2 	bl	8002c9e <LL_ADC_IsEnabled>
 800335a:	4603      	mov	r3, r0
 800335c:	4323      	orrs	r3, r4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <HAL_ADC_DeInit+0x214>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <HAL_ADC_DeInit+0x258>)
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	4914      	ldr	r1, [pc, #80]	; (80033b8 <HAL_ADC_DeInit+0x258>)
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <HAL_ADC_DeInit+0x25c>)
 800336a:	4013      	ands	r3, r2
 800336c:	608b      	str	r3, [r1, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd fb6a 	bl	8000a48 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	65da      	str	r2, [r3, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	bf00      	nop
 80033a0:	80008004 	.word	0x80008004
 80033a4:	e0820830 	.word	0xe0820830
 80033a8:	e0820820 	.word	0xe0820820
 80033ac:	03fff000 	.word	0x03fff000
 80033b0:	50040000 	.word	0x50040000
 80033b4:	50040100 	.word	0x50040100
 80033b8:	50040300 	.word	0x50040300
 80033bc:	fe0010e0 	.word	0xfe0010e0

080033c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033cc:	4850      	ldr	r0, [pc, #320]	; (8003510 <HAL_ADC_Start_DMA+0x150>)
 80033ce:	f7ff fbd4 	bl	8002b7a <LL_ADC_GetMultimode>
 80033d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fcae 	bl	8002d3a <LL_ADC_REG_IsConversionOngoing>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 808e 	bne.w	8003502 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_Start_DMA+0x34>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e089      	b.n	8003508 <HAL_ADC_Start_DMA+0x148>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b05      	cmp	r3, #5
 8003406:	d002      	beq.n	800340e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	2b09      	cmp	r3, #9
 800340c:	d172      	bne.n	80034f4 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f001 f9de 	bl	80047d0 <ADC_Enable>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d165      	bne.n	80034ea <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a37      	ldr	r2, [pc, #220]	; (8003514 <HAL_ADC_Start_DMA+0x154>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d002      	beq.n	8003442 <HAL_ADC_Start_DMA+0x82>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	e000      	b.n	8003444 <HAL_ADC_Start_DMA+0x84>
 8003442:	4b35      	ldr	r3, [pc, #212]	; (8003518 <HAL_ADC_Start_DMA+0x158>)
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	4293      	cmp	r3, r2
 800344a:	d002      	beq.n	8003452 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	f023 0206 	bic.w	r2, r3, #6
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	659a      	str	r2, [r3, #88]	; 0x58
 8003476:	e002      	b.n	800347e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003482:	4a26      	ldr	r2, [pc, #152]	; (800351c <HAL_ADC_Start_DMA+0x15c>)
 8003484:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	4a25      	ldr	r2, [pc, #148]	; (8003520 <HAL_ADC_Start_DMA+0x160>)
 800348c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	4a24      	ldr	r2, [pc, #144]	; (8003524 <HAL_ADC_Start_DMA+0x164>)
 8003494:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	221c      	movs	r2, #28
 800349c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0210 	orr.w	r2, r2, #16
 80034b4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0201 	orr.w	r2, r2, #1
 80034c4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3340      	adds	r3, #64	; 0x40
 80034d0:	4619      	mov	r1, r3
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f001 fe7f 	bl	80051d8 <HAL_DMA_Start_IT>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff fc01 	bl	8002cea <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80034e8:	e00d      	b.n	8003506 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80034f2:	e008      	b.n	8003506 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003500:	e001      	b.n	8003506 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003502:	2302      	movs	r3, #2
 8003504:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003506:	7dfb      	ldrb	r3, [r7, #23]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	50040300 	.word	0x50040300
 8003514:	50040100 	.word	0x50040100
 8003518:	50040000 	.word	0x50040000
 800351c:	0800499b 	.word	0x0800499b
 8003520:	08004a73 	.word	0x08004a73
 8003524:	08004a8f 	.word	0x08004a8f

08003528 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_ADC_Stop_DMA+0x16>
 800353a:	2302      	movs	r3, #2
 800353c:	e051      	b.n	80035e2 <HAL_ADC_Stop_DMA+0xba>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003546:	2103      	movs	r1, #3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f001 f885 	bl	8004658 <ADC_ConversionStop>
 800354e:	4603      	mov	r3, r0
 8003550:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d13f      	bne.n	80035d8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d10f      	bne.n	8003596 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fe8c 	bl	8005298 <HAL_DMA_Abort>
 8003580:	4603      	mov	r3, r0
 8003582:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0210 	bic.w	r2, r2, #16
 80035a4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f001 f995 	bl	80048dc <ADC_Disable>
 80035b2:	4603      	mov	r3, r0
 80035b4:	73fb      	strb	r3, [r7, #15]
 80035b6:	e002      	b.n	80035be <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f001 f98f 	bl	80048dc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	f043 0201 	orr.w	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80035f4:	2300      	movs	r3, #0
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003608:	4882      	ldr	r0, [pc, #520]	; (8003814 <HAL_ADC_IRQHandler+0x228>)
 800360a:	f7ff fab6 	bl	8002b7a <LL_ADC_GetMultimode>
 800360e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d017      	beq.n	800364a <HAL_ADC_IRQHandler+0x5e>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d012      	beq.n	800364a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	d105      	bne.n	800363c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f001 fa8e 	bl	8004b5e <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2202      	movs	r2, #2
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <HAL_ADC_IRQHandler+0x72>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8083 	beq.w	8003770 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d07d      	beq.n	8003770 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff f981 	bl	8002998 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d062      	beq.n	8003762 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a5d      	ldr	r2, [pc, #372]	; (8003818 <HAL_ADC_IRQHandler+0x22c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d002      	beq.n	80036ac <HAL_ADC_IRQHandler+0xc0>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	e000      	b.n	80036ae <HAL_ADC_IRQHandler+0xc2>
 80036ac:	4b5b      	ldr	r3, [pc, #364]	; (800381c <HAL_ADC_IRQHandler+0x230>)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d008      	beq.n	80036c8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d002      	beq.n	80036c8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b09      	cmp	r3, #9
 80036c6:	d104      	bne.n	80036d2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	e00c      	b.n	80036ec <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a50      	ldr	r2, [pc, #320]	; (8003818 <HAL_ADC_IRQHandler+0x22c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d002      	beq.n	80036e2 <HAL_ADC_IRQHandler+0xf6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	e000      	b.n	80036e4 <HAL_ADC_IRQHandler+0xf8>
 80036e2:	4b4e      	ldr	r3, [pc, #312]	; (800381c <HAL_ADC_IRQHandler+0x230>)
 80036e4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d135      	bne.n	8003762 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b08      	cmp	r3, #8
 8003702:	d12e      	bne.n	8003762 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fb16 	bl	8002d3a <LL_ADC_REG_IsConversionOngoing>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d11a      	bne.n	800374a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 020c 	bic.w	r2, r2, #12
 8003722:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d112      	bne.n	8003762 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	f043 0201 	orr.w	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	655a      	str	r2, [r3, #84]	; 0x54
 8003748:	e00b      	b.n	8003762 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	f043 0210 	orr.w	r2, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f95c 	bl	8003a20 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	220c      	movs	r2, #12
 800376e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <HAL_ADC_IRQHandler+0x198>
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 809f 	beq.w	80038ce <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8099 	beq.w	80038ce <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff f92c 	bl	8002a16 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80037be:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff f8e7 	bl	8002998 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037ca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a11      	ldr	r2, [pc, #68]	; (8003818 <HAL_ADC_IRQHandler+0x22c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d002      	beq.n	80037dc <HAL_ADC_IRQHandler+0x1f0>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	e000      	b.n	80037de <HAL_ADC_IRQHandler+0x1f2>
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <HAL_ADC_IRQHandler+0x230>)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d008      	beq.n	80037f8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b06      	cmp	r3, #6
 80037f0:	d002      	beq.n	80037f8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d104      	bne.n	8003802 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	623b      	str	r3, [r7, #32]
 8003800:	e013      	b.n	800382a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_ADC_IRQHandler+0x22c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_ADC_IRQHandler+0x234>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	e007      	b.n	8003822 <HAL_ADC_IRQHandler+0x236>
 8003812:	bf00      	nop
 8003814:	50040300 	.word	0x50040300
 8003818:	50040100 	.word	0x50040100
 800381c:	50040000 	.word	0x50040000
 8003820:	4b7d      	ldr	r3, [pc, #500]	; (8003a18 <HAL_ADC_IRQHandler+0x42c>)
 8003822:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d047      	beq.n	80038c0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_ADC_IRQHandler+0x25e>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d03f      	beq.n	80038c0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	d13a      	bne.n	80038c0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d133      	bne.n	80038c0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d12e      	bne.n	80038c0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fa8e 	bl	8002d88 <LL_ADC_INJ_IsConversionOngoing>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d11a      	bne.n	80038a8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003880:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d112      	bne.n	80038c0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f043 0201 	orr.w	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
 80038a6:	e00b      	b.n	80038c0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f043 0210 	orr.w	r2, r3, #16
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f001 f924 	bl	8004b0e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2260      	movs	r2, #96	; 0x60
 80038cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d011      	beq.n	80038fc <HAL_ADC_IRQHandler+0x310>
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00c      	beq.n	80038fc <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fc feaf 	bl	8000652 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2280      	movs	r2, #128	; 0x80
 80038fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d012      	beq.n	800392c <HAL_ADC_IRQHandler+0x340>
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f001 f90a 	bl	8004b36 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800392a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003932:	2b00      	cmp	r3, #0
 8003934:	d012      	beq.n	800395c <HAL_ADC_IRQHandler+0x370>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f001 f8fc 	bl	8004b4a <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d036      	beq.n	80039d4 <HAL_ADC_IRQHandler+0x3e8>
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d031      	beq.n	80039d4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003978:	2301      	movs	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
 800397c:	e014      	b.n	80039a8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003984:	4825      	ldr	r0, [pc, #148]	; (8003a1c <HAL_ADC_IRQHandler+0x430>)
 8003986:	f7ff f906 	bl	8002b96 <LL_ADC_GetMultiDMATransfer>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003990:	2301      	movs	r3, #1
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
 8003994:	e008      	b.n	80039a8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80039a4:	2301      	movs	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d10e      	bne.n	80039cc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	f043 0202 	orr.w	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fc fe39 	bl	800063e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2210      	movs	r2, #16
 80039d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d018      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x424>
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	f043 0208 	orr.w	r2, r3, #8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a08:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f001 f889 	bl	8004b22 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003a10:	bf00      	nop
 8003a12:	3728      	adds	r7, #40	; 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	50040000 	.word	0x50040000
 8003a1c:	50040300 	.word	0x50040300

08003a20 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b0b6      	sub	sp, #216	; 0xd8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x22>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e3d5      	b.n	8004216 <HAL_ADC_ConfigChannel+0x7ce>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff f95f 	bl	8002d3a <LL_ADC_REG_IsConversionOngoing>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f040 83ba 	bne.w	80041f8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d824      	bhi.n	8003ad6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	3b02      	subs	r3, #2
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d81b      	bhi.n	8003ace <HAL_ADC_ConfigChannel+0x86>
 8003a96:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <HAL_ADC_ConfigChannel+0x54>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003aad 	.word	0x08003aad
 8003aa0:	08003ab5 	.word	0x08003ab5
 8003aa4:	08003abd 	.word	0x08003abd
 8003aa8:	08003ac5 	.word	0x08003ac5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	220c      	movs	r2, #12
 8003ab0:	605a      	str	r2, [r3, #4]
          break;
 8003ab2:	e011      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2212      	movs	r2, #18
 8003ab8:	605a      	str	r2, [r3, #4]
          break;
 8003aba:	e00d      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2218      	movs	r2, #24
 8003ac0:	605a      	str	r2, [r3, #4]
          break;
 8003ac2:	e009      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aca:	605a      	str	r2, [r3, #4]
          break;
 8003acc:	e004      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2206      	movs	r2, #6
 8003ad2:	605a      	str	r2, [r3, #4]
          break;
 8003ad4:	e000      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003ad6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f7fe ff6a 	bl	80029be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f923 	bl	8002d3a <LL_ADC_REG_IsConversionOngoing>
 8003af4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff f943 	bl	8002d88 <LL_ADC_INJ_IsConversionOngoing>
 8003b02:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 81c1 	bne.w	8003e92 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f040 81bc 	bne.w	8003e92 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b22:	d10f      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4619      	mov	r1, r3
 8003b30:	f7fe ff84 	bl	8002a3c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe ff18 	bl	8002972 <LL_ADC_SetSamplingTimeCommonConfig>
 8003b42:	e00e      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6819      	ldr	r1, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	461a      	mov	r2, r3
 8003b52:	f7fe ff73 	bl	8002a3c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe ff08 	bl	8002972 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	08db      	lsrs	r3, r3, #3
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d00a      	beq.n	8003b9a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	6919      	ldr	r1, [r3, #16]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b94:	f7fe fe98 	bl	80028c8 <LL_ADC_SetOffset>
 8003b98:	e17b      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe feb5 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x17e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe feaa 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	0e9b      	lsrs	r3, r3, #26
 8003bc0:	f003 021f 	and.w	r2, r3, #31
 8003bc4:	e01e      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x1bc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe fe9f 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003be4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	e004      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003bf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bfc:	fab3 f383 	clz	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x1d4>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	e018      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x206>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003c38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e004      	b.n	8003c4e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003c44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d106      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fe6e 	bl	800293c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fe52 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x244>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fe fe47 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003c82:	4603      	mov	r3, r0
 8003c84:	0e9b      	lsrs	r3, r3, #26
 8003c86:	f003 021f 	and.w	r2, r3, #31
 8003c8a:	e01e      	b.n	8003cca <HAL_ADC_ConfigChannel+0x282>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe fe3c 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003cba:	2320      	movs	r3, #32
 8003cbc:	e004      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003cbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x29a>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	0e9b      	lsrs	r3, r3, #26
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	e018      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x2cc>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003cf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003cfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003d06:	2320      	movs	r3, #32
 8003d08:	e004      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d106      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fe0b 	bl	800293c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe fdef 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x30a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2102      	movs	r1, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fde4 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	0e9b      	lsrs	r3, r3, #26
 8003d4c:	f003 021f 	and.w	r2, r3, #31
 8003d50:	e01e      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x348>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2102      	movs	r1, #2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fdd9 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d68:	fa93 f3a3 	rbit	r3, r3
 8003d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003d80:	2320      	movs	r3, #32
 8003d82:	e004      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d88:	fab3 f383 	clz	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x360>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	0e9b      	lsrs	r3, r3, #26
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	e016      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x38e>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003dba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003dc8:	2320      	movs	r3, #32
 8003dca:	e004      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dd0:	fab3 f383 	clz	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d106      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	2102      	movs	r1, #2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe fdaa 	bl	800293c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2103      	movs	r1, #3
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fd8e 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x3cc>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2103      	movs	r1, #3
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fd83 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	0e9b      	lsrs	r3, r3, #26
 8003e0e:	f003 021f 	and.w	r2, r3, #31
 8003e12:	e017      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x3fc>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2103      	movs	r1, #3
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe fd78 	bl	8002910 <LL_ADC_GetOffsetChannel>
 8003e20:	4603      	mov	r3, r0
 8003e22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e2e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003e36:	2320      	movs	r3, #32
 8003e38:	e003      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x414>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	0e9b      	lsrs	r3, r3, #26
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	e011      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x438>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003e6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003e74:	2320      	movs	r3, #32
 8003e76:	e003      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d106      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fd55 	bl	800293c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe ff01 	bl	8002c9e <LL_ADC_IsEnabled>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 8140 	bne.w	8004124 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f7fe fdef 	bl	8002a94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	4a8f      	ldr	r2, [pc, #572]	; (80040f8 <HAL_ADC_ConfigChannel+0x6b0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	f040 8131 	bne.w	8004124 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x4a2>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	0e9b      	lsrs	r3, r3, #26
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2b09      	cmp	r3, #9
 8003ee0:	bf94      	ite	ls
 8003ee2:	2301      	movls	r3, #1
 8003ee4:	2300      	movhi	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e019      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x4d6>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003ef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003efa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003efc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003f02:	2320      	movs	r3, #32
 8003f04:	e003      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2b09      	cmp	r3, #9
 8003f16:	bf94      	ite	ls
 8003f18:	2301      	movls	r3, #1
 8003f1a:	2300      	movhi	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d079      	beq.n	8004016 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d107      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x4f6>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	0e9b      	lsrs	r3, r3, #26
 8003f34:	3301      	adds	r3, #1
 8003f36:	069b      	lsls	r3, r3, #26
 8003f38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f3c:	e015      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x522>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003f56:	2320      	movs	r3, #32
 8003f58:	e003      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	3301      	adds	r3, #1
 8003f64:	069b      	lsls	r3, r3, #26
 8003f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x542>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	0e9b      	lsrs	r3, r3, #26
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2101      	movs	r1, #1
 8003f84:	fa01 f303 	lsl.w	r3, r1, r3
 8003f88:	e017      	b.n	8003fba <HAL_ADC_ConfigChannel+0x572>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	e003      	b.n	8003fae <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	ea42 0103 	orr.w	r1, r2, r3
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x598>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	0e9b      	lsrs	r3, r3, #26
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f003 021f 	and.w	r2, r3, #31
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	051b      	lsls	r3, r3, #20
 8003fde:	e018      	b.n	8004012 <HAL_ADC_ConfigChannel+0x5ca>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	fa93 f3a3 	rbit	r3, r3
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	e003      	b.n	8004004 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	3301      	adds	r3, #1
 8004006:	f003 021f 	and.w	r2, r3, #31
 800400a:	4613      	mov	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4413      	add	r3, r2
 8004010:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004012:	430b      	orrs	r3, r1
 8004014:	e081      	b.n	800411a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x5ea>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	0e9b      	lsrs	r3, r3, #26
 8004028:	3301      	adds	r3, #1
 800402a:	069b      	lsls	r3, r3, #26
 800402c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004030:	e015      	b.n	800405e <HAL_ADC_ConfigChannel+0x616>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800404a:	2320      	movs	r3, #32
 800404c:	e003      	b.n	8004056 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	fab3 f383 	clz	r3, r3
 8004054:	b2db      	uxtb	r3, r3
 8004056:	3301      	adds	r3, #1
 8004058:	069b      	lsls	r3, r3, #26
 800405a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_ADC_ConfigChannel+0x636>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	0e9b      	lsrs	r3, r3, #26
 8004070:	3301      	adds	r3, #1
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2101      	movs	r1, #1
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	e017      	b.n	80040ae <HAL_ADC_ConfigChannel+0x666>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	fa93 f3a3 	rbit	r3, r3
 800408a:	61fb      	str	r3, [r7, #28]
  return result;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004096:	2320      	movs	r3, #32
 8004098:	e003      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	3301      	adds	r3, #1
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	ea42 0103 	orr.w	r1, r2, r3
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10d      	bne.n	80040da <HAL_ADC_ConfigChannel+0x692>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	0e9b      	lsrs	r3, r3, #26
 80040c4:	3301      	adds	r3, #1
 80040c6:	f003 021f 	and.w	r2, r3, #31
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	3b1e      	subs	r3, #30
 80040d2:	051b      	lsls	r3, r3, #20
 80040d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040d8:	e01e      	b.n	8004118 <HAL_ADC_ConfigChannel+0x6d0>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	613b      	str	r3, [r7, #16]
  return result;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80040f2:	2320      	movs	r3, #32
 80040f4:	e006      	b.n	8004104 <HAL_ADC_ConfigChannel+0x6bc>
 80040f6:	bf00      	nop
 80040f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	fab3 f383 	clz	r3, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	3301      	adds	r3, #1
 8004106:	f003 021f 	and.w	r2, r3, #31
 800410a:	4613      	mov	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4413      	add	r3, r2
 8004110:	3b1e      	subs	r3, #30
 8004112:	051b      	lsls	r3, r3, #20
 8004114:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004118:	430b      	orrs	r3, r1
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	6892      	ldr	r2, [r2, #8]
 800411e:	4619      	mov	r1, r3
 8004120:	f7fe fc8c 	bl	8002a3c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <HAL_ADC_ConfigChannel+0x7d8>)
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d06c      	beq.n	800420a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004130:	483c      	ldr	r0, [pc, #240]	; (8004224 <HAL_ADC_ConfigChannel+0x7dc>)
 8004132:	f7fe fbbb 	bl	80028ac <LL_ADC_GetCommonPathInternalCh>
 8004136:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a3a      	ldr	r2, [pc, #232]	; (8004228 <HAL_ADC_ConfigChannel+0x7e0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d127      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d121      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a35      	ldr	r2, [pc, #212]	; (800422c <HAL_ADC_ConfigChannel+0x7e4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d157      	bne.n	800420a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800415a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800415e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004162:	4619      	mov	r1, r3
 8004164:	482f      	ldr	r0, [pc, #188]	; (8004224 <HAL_ADC_ConfigChannel+0x7dc>)
 8004166:	f7fe fb8e 	bl	8002886 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800416a:	4b31      	ldr	r3, [pc, #196]	; (8004230 <HAL_ADC_ConfigChannel+0x7e8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	4a30      	ldr	r2, [pc, #192]	; (8004234 <HAL_ADC_ConfigChannel+0x7ec>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	099b      	lsrs	r3, r3, #6
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004184:	e002      	b.n	800418c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3b01      	subs	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f9      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004192:	e03a      	b.n	800420a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a27      	ldr	r2, [pc, #156]	; (8004238 <HAL_ADC_ConfigChannel+0x7f0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d113      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x77e>
 800419e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <HAL_ADC_ConfigChannel+0x7e4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d12a      	bne.n	800420a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041bc:	4619      	mov	r1, r3
 80041be:	4819      	ldr	r0, [pc, #100]	; (8004224 <HAL_ADC_ConfigChannel+0x7dc>)
 80041c0:	f7fe fb61 	bl	8002886 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041c4:	e021      	b.n	800420a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1c      	ldr	r2, [pc, #112]	; (800423c <HAL_ADC_ConfigChannel+0x7f4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d11c      	bne.n	800420a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d116      	bne.n	800420a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a12      	ldr	r2, [pc, #72]	; (800422c <HAL_ADC_ConfigChannel+0x7e4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d111      	bne.n	800420a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041ee:	4619      	mov	r1, r3
 80041f0:	480c      	ldr	r0, [pc, #48]	; (8004224 <HAL_ADC_ConfigChannel+0x7dc>)
 80041f2:	f7fe fb48 	bl	8002886 <LL_ADC_SetCommonPathInternalCh>
 80041f6:	e008      	b.n	800420a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004212:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004216:	4618      	mov	r0, r3
 8004218:	37d8      	adds	r7, #216	; 0xd8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	80080000 	.word	0x80080000
 8004224:	50040300 	.word	0x50040300
 8004228:	c7520000 	.word	0xc7520000
 800422c:	50040000 	.word	0x50040000
 8004230:	20000000 	.word	0x20000000
 8004234:	053e2d63 	.word	0x053e2d63
 8004238:	cb840000 	.word	0xcb840000
 800423c:	80000001 	.word	0x80000001

08004240 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08e      	sub	sp, #56	; 0x38
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004258:	d003      	beq.n	8004262 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800425e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_ADC_AnalogWDGConfig+0x30>
 800426c:	2302      	movs	r3, #2
 800426e:	e1ec      	b.n	800464a <HAL_ADC_AnalogWDGConfig+0x40a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe fd5c 	bl	8002d3a <LL_ADC_REG_IsConversionOngoing>
 8004282:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7fe fd7d 	bl	8002d88 <LL_ADC_INJ_IsConversionOngoing>
 800428e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	2b00      	cmp	r3, #0
 8004294:	f040 81ca 	bne.w	800462c <HAL_ADC_AnalogWDGConfig+0x3ec>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 81c6 	bne.w	800462c <HAL_ADC_AnalogWDGConfig+0x3ec>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a9b      	ldr	r2, [pc, #620]	; (8004514 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	f040 80a2 	bne.w	80043f0 <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80042b4:	d034      	beq.n	8004320 <HAL_ADC_AnalogWDGConfig+0xe0>
 80042b6:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80042ba:	d856      	bhi.n	800436a <HAL_ADC_AnalogWDGConfig+0x12a>
 80042bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c0:	d04b      	beq.n	800435a <HAL_ADC_AnalogWDGConfig+0x11a>
 80042c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c6:	d850      	bhi.n	800436a <HAL_ADC_AnalogWDGConfig+0x12a>
 80042c8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80042cc:	d01b      	beq.n	8004306 <HAL_ADC_AnalogWDGConfig+0xc6>
 80042ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80042d2:	d84a      	bhi.n	800436a <HAL_ADC_AnalogWDGConfig+0x12a>
 80042d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042d8:	d037      	beq.n	800434a <HAL_ADC_AnalogWDGConfig+0x10a>
 80042da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042de:	d844      	bhi.n	800436a <HAL_ADC_AnalogWDGConfig+0x12a>
 80042e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042e4:	d029      	beq.n	800433a <HAL_ADC_AnalogWDGConfig+0xfa>
 80042e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ea:	d13e      	bne.n	800436a <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80042f8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80042fc:	461a      	mov	r2, r3
 80042fe:	4985      	ldr	r1, [pc, #532]	; (8004514 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8004300:	f7fe fbec 	bl	8002adc <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8004304:	e039      	b.n	800437a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004312:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8004316:	461a      	mov	r2, r3
 8004318:	497e      	ldr	r1, [pc, #504]	; (8004514 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800431a:	f7fe fbdf 	bl	8002adc <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 800431e:	e02c      	b.n	800437a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800432c:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8004330:	461a      	mov	r2, r3
 8004332:	4978      	ldr	r1, [pc, #480]	; (8004514 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8004334:	f7fe fbd2 	bl	8002adc <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8004338:	e01f      	b.n	800437a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a76      	ldr	r2, [pc, #472]	; (8004518 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8004340:	4974      	ldr	r1, [pc, #464]	; (8004514 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fbca 	bl	8002adc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004348:	e017      	b.n	800437a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a73      	ldr	r2, [pc, #460]	; (800451c <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8004350:	4970      	ldr	r1, [pc, #448]	; (8004514 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fbc2 	bl	8002adc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004358:	e00f      	b.n	800437a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a70      	ldr	r2, [pc, #448]	; (8004520 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8004360:	496c      	ldr	r1, [pc, #432]	; (8004514 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fbba 	bl	8002adc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004368:	e007      	b.n	800437a <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	4968      	ldr	r1, [pc, #416]	; (8004514 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe fbb2 	bl	8002adc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004378:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	08db      	lsrs	r3, r3, #3
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	08db      	lsrs	r3, r3, #3
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043b6:	f7fe fbbe 	bl	8002b36 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fcef 	bl	8002dae <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	7b1b      	ldrb	r3, [r3, #12]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe fd0f 	bl	8002e00 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80043e2:	e12c      	b.n	800463e <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe fd39 	bl	8002e60 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80043ee:	e126      	b.n	800463e <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80043f8:	d01d      	beq.n	8004436 <HAL_ADC_AnalogWDGConfig+0x1f6>
 80043fa:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80043fe:	f200 8093 	bhi.w	8004528 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8004402:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004406:	d07b      	beq.n	8004500 <HAL_ADC_AnalogWDGConfig+0x2c0>
 8004408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800440c:	f200 808c 	bhi.w	8004528 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8004410:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004414:	d00f      	beq.n	8004436 <HAL_ADC_AnalogWDGConfig+0x1f6>
 8004416:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800441a:	f200 8085 	bhi.w	8004528 <HAL_ADC_AnalogWDGConfig+0x2e8>
 800441e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004422:	d06d      	beq.n	8004500 <HAL_ADC_AnalogWDGConfig+0x2c0>
 8004424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004428:	d87e      	bhi.n	8004528 <HAL_ADC_AnalogWDGConfig+0x2e8>
 800442a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800442e:	d067      	beq.n	8004500 <HAL_ADC_AnalogWDGConfig+0x2c0>
 8004430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004434:	d178      	bne.n	8004528 <HAL_ADC_AnalogWDGConfig+0x2e8>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3a      	ldr	r2, [pc, #232]	; (8004524 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d12f      	bne.n	80044a0 <HAL_ADC_AnalogWDGConfig+0x260>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004448:	2b00      	cmp	r3, #0
 800444a:	d108      	bne.n	800445e <HAL_ADC_AnalogWDGConfig+0x21e>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	0e9b      	lsrs	r3, r3, #26
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	2201      	movs	r2, #1
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	e016      	b.n	800448c <HAL_ADC_AnalogWDGConfig+0x24c>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	61bb      	str	r3, [r7, #24]
  return result;
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_ADC_AnalogWDGConfig+0x23a>
    return 32U;
 8004476:	2320      	movs	r3, #32
 8004478:	e003      	b.n	8004482 <HAL_ADC_AnalogWDGConfig+0x242>
  return __builtin_clz(value);
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	fab3 f383 	clz	r3, r3
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2201      	movs	r2, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	430b      	orrs	r3, r1
 800449a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 800449e:	e04c      	b.n	800453a <HAL_ADC_AnalogWDGConfig+0x2fa>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d108      	bne.n	80044be <HAL_ADC_AnalogWDGConfig+0x27e>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	0e9b      	lsrs	r3, r3, #26
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2201      	movs	r2, #1
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	e016      	b.n	80044ec <HAL_ADC_AnalogWDGConfig+0x2ac>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	60fb      	str	r3, [r7, #12]
  return result;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_ADC_AnalogWDGConfig+0x29a>
    return 32U;
 80044d6:	2320      	movs	r3, #32
 80044d8:	e003      	b.n	80044e2 <HAL_ADC_AnalogWDGConfig+0x2a2>
  return __builtin_clz(value);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fab3 f383 	clz	r3, r3
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2201      	movs	r2, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	430b      	orrs	r3, r1
 80044fa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80044fe:	e01c      	b.n	800453a <HAL_ADC_AnalogWDGConfig+0x2fa>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a05      	ldr	r2, [pc, #20]	; (8004520 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 800450a:	4619      	mov	r1, r3
 800450c:	f7fe fae6 	bl	8002adc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004510:	e013      	b.n	800453a <HAL_ADC_AnalogWDGConfig+0x2fa>
 8004512:	bf00      	nop
 8004514:	7dc00000 	.word	0x7dc00000
 8004518:	0087ffff 	.word	0x0087ffff
 800451c:	0107ffff 	.word	0x0107ffff
 8004520:	0187ffff 	.word	0x0187ffff
 8004524:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2200      	movs	r2, #0
 8004532:	4619      	mov	r1, r3
 8004534:	f7fe fad2 	bl	8002adc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004538:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0318 	and.w	r3, r3, #24
 8004544:	2b18      	cmp	r3, #24
 8004546:	d00f      	beq.n	8004568 <HAL_ADC_AnalogWDGConfig+0x328>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	08db      	lsrs	r3, r3, #3
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	f1c3 0302 	rsb	r3, r3, #2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	f003 031e 	and.w	r3, r3, #30
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	e002      	b.n	800456e <HAL_ADC_AnalogWDGConfig+0x32e>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0318 	and.w	r3, r3, #24
 800457a:	2b18      	cmp	r3, #24
 800457c:	d00f      	beq.n	800459e <HAL_ADC_AnalogWDGConfig+0x35e>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	08db      	lsrs	r3, r3, #3
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	f1c3 0302 	rsb	r3, r3, #2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	f003 031e 	and.w	r3, r3, #30
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
 800459c:	e002      	b.n	80045a4 <HAL_ADC_AnalogWDGConfig+0x364>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6819      	ldr	r1, [r3, #0]
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045b2:	f7fe fac0 	bl	8002b36 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a26      	ldr	r2, [pc, #152]	; (8004654 <HAL_ADC_AnalogWDGConfig+0x414>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d11a      	bne.n	80045f6 <HAL_ADC_AnalogWDGConfig+0x3b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe fbf9 	bl	8002dc8 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	7b1b      	ldrb	r3, [r3, #12]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d105      	bne.n	80045ea <HAL_ADC_AnalogWDGConfig+0x3aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe fc1c 	bl	8002e20 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80045e8:	e029      	b.n	800463e <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fc46 	bl	8002e80 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80045f4:	e023      	b.n	800463e <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe fbec 	bl	8002de4 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	7b1b      	ldrb	r3, [r3, #12]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_ADC_AnalogWDGConfig+0x3e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe fc11 	bl	8002e40 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800461e:	e00e      	b.n	800463e <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fc3b 	bl	8002ea0 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800462a:	e008      	b.n	800463e <HAL_ADC_AnalogWDGConfig+0x3fe>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004646:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800464a:	4618      	mov	r0, r3
 800464c:	3738      	adds	r7, #56	; 0x38
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	0017ffff 	.word	0x0017ffff

08004658 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fb63 	bl	8002d3a <LL_ADC_REG_IsConversionOngoing>
 8004674:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe fb84 	bl	8002d88 <LL_ADC_INJ_IsConversionOngoing>
 8004680:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8098 	beq.w	80047c0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d02a      	beq.n	80046f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7e5b      	ldrb	r3, [r3, #25]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d126      	bne.n	80046f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	7e1b      	ldrb	r3, [r3, #24]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d122      	bne.n	80046f4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80046b2:	e014      	b.n	80046de <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4a45      	ldr	r2, [pc, #276]	; (80047cc <ADC_ConversionStop+0x174>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d90d      	bls.n	80046d8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c0:	f043 0210 	orr.w	r2, r3, #16
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	f043 0201 	orr.w	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e074      	b.n	80047c2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	3301      	adds	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d1e3      	bne.n	80046b4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2240      	movs	r2, #64	; 0x40
 80046f2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d014      	beq.n	8004724 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe fb1b 	bl	8002d3a <LL_ADC_REG_IsConversionOngoing>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe fad8 	bl	8002cc4 <LL_ADC_IsDisableOngoing>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d104      	bne.n	8004724 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe faf7 	bl	8002d12 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d014      	beq.n	8004754 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe fb2a 	bl	8002d88 <LL_ADC_INJ_IsConversionOngoing>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fac0 	bl	8002cc4 <LL_ADC_IsDisableOngoing>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fb06 	bl	8002d60 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d005      	beq.n	8004766 <ADC_ConversionStop+0x10e>
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d105      	bne.n	800476c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004760:	230c      	movs	r3, #12
 8004762:	617b      	str	r3, [r7, #20]
        break;
 8004764:	e005      	b.n	8004772 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004766:	2308      	movs	r3, #8
 8004768:	617b      	str	r3, [r7, #20]
        break;
 800476a:	e002      	b.n	8004772 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800476c:	2304      	movs	r3, #4
 800476e:	617b      	str	r3, [r7, #20]
        break;
 8004770:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004772:	f7fe f869 	bl	8002848 <HAL_GetTick>
 8004776:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004778:	e01b      	b.n	80047b2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800477a:	f7fe f865 	bl	8002848 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b05      	cmp	r3, #5
 8004786:	d914      	bls.n	80047b2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00d      	beq.n	80047b2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	f043 0210 	orr.w	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	f043 0201 	orr.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e007      	b.n	80047c2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1dc      	bne.n	800477a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	a33fffff 	.word	0xa33fffff

080047d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047d8:	2300      	movs	r3, #0
 80047da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fe fa5c 	bl	8002c9e <LL_ADC_IsEnabled>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d169      	bne.n	80048c0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	4b36      	ldr	r3, [pc, #216]	; (80048cc <ADC_Enable+0xfc>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	f043 0210 	orr.w	r2, r3, #16
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f043 0201 	orr.w	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e055      	b.n	80048c2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fa17 	bl	8002c4e <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004820:	482b      	ldr	r0, [pc, #172]	; (80048d0 <ADC_Enable+0x100>)
 8004822:	f7fe f843 	bl	80028ac <LL_ADC_GetCommonPathInternalCh>
 8004826:	4603      	mov	r3, r0
 8004828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004830:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <ADC_Enable+0x104>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	099b      	lsrs	r3, r3, #6
 8004836:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <ADC_Enable+0x108>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	4613      	mov	r3, r2
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800484a:	e002      	b.n	8004852 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3b01      	subs	r3, #1
 8004850:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f9      	bne.n	800484c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004858:	f7fd fff6 	bl	8002848 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800485e:	e028      	b.n	80048b2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe fa1a 	bl	8002c9e <LL_ADC_IsEnabled>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe f9ea 	bl	8002c4e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800487a:	f7fd ffe5 	bl	8002848 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d914      	bls.n	80048b2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d00d      	beq.n	80048b2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	f043 0210 	orr.w	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	f043 0201 	orr.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e007      	b.n	80048c2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d1cf      	bne.n	8004860 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	8000003f 	.word	0x8000003f
 80048d0:	50040300 	.word	0x50040300
 80048d4:	20000000 	.word	0x20000000
 80048d8:	053e2d63 	.word	0x053e2d63

080048dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe f9eb 	bl	8002cc4 <LL_ADC_IsDisableOngoing>
 80048ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fe f9d2 	bl	8002c9e <LL_ADC_IsEnabled>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d047      	beq.n	8004990 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d144      	bne.n	8004990 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 030d 	and.w	r3, r3, #13
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10c      	bne.n	800492e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f7fe f9ac 	bl	8002c76 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2203      	movs	r2, #3
 8004924:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004926:	f7fd ff8f 	bl	8002848 <HAL_GetTick>
 800492a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800492c:	e029      	b.n	8004982 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f043 0210 	orr.w	r2, r3, #16
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e023      	b.n	8004992 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800494a:	f7fd ff7d 	bl	8002848 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d914      	bls.n	8004982 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00d      	beq.n	8004982 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	f043 0210 	orr.w	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e007      	b.n	8004992 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1dc      	bne.n	800494a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d14b      	bne.n	8004a4c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d021      	beq.n	8004a12 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd ffe0 	bl	8002998 <LL_ADC_REG_IsTriggerSourceSWStart>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d032      	beq.n	8004a44 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d12b      	bne.n	8004a44 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d11f      	bne.n	8004a44 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	f043 0201 	orr.w	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
 8004a10:	e018      	b.n	8004a44 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d111      	bne.n	8004a44 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	f043 0201 	orr.w	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7fe ffeb 	bl	8003a20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a4a:	e00e      	b.n	8004a6a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7fb fdf0 	bl	800063e <HAL_ADC_ErrorCallback>
}
 8004a5e:	e004      	b.n	8004a6a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	4798      	blx	r3
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7fe ffd7 	bl	8003a34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aac:	f043 0204 	orr.w	r2, r3, #4
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7fb fdc2 	bl	800063e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <LL_ADC_IsEnabled>:
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <LL_ADC_IsEnabled+0x18>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <LL_ADC_IsEnabled+0x1a>
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d101      	bne.n	8004b00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b09f      	sub	sp, #124	; 0x7c
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e089      	b.n	8004ca6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a42      	ldr	r2, [pc, #264]	; (8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d102      	bne.n	8004bb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bac:	4b41      	ldr	r3, [pc, #260]	; (8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	e001      	b.n	8004bb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc0:	f043 0220 	orr.w	r2, r3, #32
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e068      	b.n	8004ca6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff ff86 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 8004bdc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff ff80 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d14a      	bne.n	8004c84 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d147      	bne.n	8004c84 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bf4:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004bf6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d027      	beq.n	8004c50 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c12:	035b      	lsls	r3, r3, #13
 8004c14:	430b      	orrs	r3, r1
 8004c16:	431a      	orrs	r2, r3
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c1c:	4824      	ldr	r0, [pc, #144]	; (8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004c1e:	f7ff ff50 	bl	8004ac2 <LL_ADC_IsEnabled>
 8004c22:	4604      	mov	r4, r0
 8004c24:	4823      	ldr	r0, [pc, #140]	; (8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c26:	f7ff ff4c 	bl	8004ac2 <LL_ADC_IsEnabled>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4323      	orrs	r3, r4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d132      	bne.n	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c3a:	f023 030f 	bic.w	r3, r3, #15
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	6811      	ldr	r1, [r2, #0]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	6892      	ldr	r2, [r2, #8]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c4e:	e023      	b.n	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c5c:	4814      	ldr	r0, [pc, #80]	; (8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004c5e:	f7ff ff30 	bl	8004ac2 <LL_ADC_IsEnabled>
 8004c62:	4604      	mov	r4, r0
 8004c64:	4813      	ldr	r0, [pc, #76]	; (8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c66:	f7ff ff2c 	bl	8004ac2 <LL_ADC_IsEnabled>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4323      	orrs	r3, r4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d112      	bne.n	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c7a:	f023 030f 	bic.w	r3, r3, #15
 8004c7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c80:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c82:	e009      	b.n	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004c96:	e000      	b.n	8004c9a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ca2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	377c      	adds	r7, #124	; 0x7c
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd90      	pop	{r4, r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	50040000 	.word	0x50040000
 8004cb4:	50040100 	.word	0x50040100
 8004cb8:	50040300 	.word	0x50040300

08004cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <__NVIC_SetPriorityGrouping+0x44>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cee:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	60d3      	str	r3, [r2, #12]
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	e000ed00 	.word	0xe000ed00

08004d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d08:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <__NVIC_GetPriorityGrouping+0x18>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	0a1b      	lsrs	r3, r3, #8
 8004d0e:	f003 0307 	and.w	r3, r3, #7
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	e000ed00 	.word	0xe000ed00

08004d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	db0b      	blt.n	8004d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	f003 021f 	and.w	r2, r3, #31
 8004d38:	4907      	ldr	r1, [pc, #28]	; (8004d58 <__NVIC_EnableIRQ+0x38>)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	2001      	movs	r0, #1
 8004d42:	fa00 f202 	lsl.w	r2, r0, r2
 8004d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	e000e100 	.word	0xe000e100

08004d5c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	db12      	blt.n	8004d94 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	f003 021f 	and.w	r2, r3, #31
 8004d74:	490a      	ldr	r1, [pc, #40]	; (8004da0 <__NVIC_DisableIRQ+0x44>)
 8004d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d82:	3320      	adds	r3, #32
 8004d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d88:	f3bf 8f4f 	dsb	sy
}
 8004d8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d8e:	f3bf 8f6f 	isb	sy
}
 8004d92:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	e000e100 	.word	0xe000e100

08004da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	6039      	str	r1, [r7, #0]
 8004dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	db0a      	blt.n	8004dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	490c      	ldr	r1, [pc, #48]	; (8004df0 <__NVIC_SetPriority+0x4c>)
 8004dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc2:	0112      	lsls	r2, r2, #4
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dcc:	e00a      	b.n	8004de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	4908      	ldr	r1, [pc, #32]	; (8004df4 <__NVIC_SetPriority+0x50>)
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	3b04      	subs	r3, #4
 8004ddc:	0112      	lsls	r2, r2, #4
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	440b      	add	r3, r1
 8004de2:	761a      	strb	r2, [r3, #24]
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	e000e100 	.word	0xe000e100
 8004df4:	e000ed00 	.word	0xe000ed00

08004df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b089      	sub	sp, #36	; 0x24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f1c3 0307 	rsb	r3, r3, #7
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	bf28      	it	cs
 8004e16:	2304      	movcs	r3, #4
 8004e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	2b06      	cmp	r3, #6
 8004e20:	d902      	bls.n	8004e28 <NVIC_EncodePriority+0x30>
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3b03      	subs	r3, #3
 8004e26:	e000      	b.n	8004e2a <NVIC_EncodePriority+0x32>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43da      	mvns	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e40:	f04f 31ff 	mov.w	r1, #4294967295
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	43d9      	mvns	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e50:	4313      	orrs	r3, r2
         );
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3724      	adds	r7, #36	; 0x24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
	...

08004e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e70:	d301      	bcc.n	8004e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e72:	2301      	movs	r3, #1
 8004e74:	e00f      	b.n	8004e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <SysTick_Config+0x40>)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e7e:	210f      	movs	r1, #15
 8004e80:	f04f 30ff 	mov.w	r0, #4294967295
 8004e84:	f7ff ff8e 	bl	8004da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <SysTick_Config+0x40>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e8e:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <SysTick_Config+0x40>)
 8004e90:	2207      	movs	r2, #7
 8004e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	e000e010 	.word	0xe000e010

08004ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ff05 	bl	8004cbc <__NVIC_SetPriorityGrouping>
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b086      	sub	sp, #24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ecc:	f7ff ff1a 	bl	8004d04 <__NVIC_GetPriorityGrouping>
 8004ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	6978      	ldr	r0, [r7, #20]
 8004ed8:	f7ff ff8e 	bl	8004df8 <NVIC_EncodePriority>
 8004edc:	4602      	mov	r2, r0
 8004ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff ff5d 	bl	8004da4 <__NVIC_SetPriority>
}
 8004eea:	bf00      	nop
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	4603      	mov	r3, r0
 8004efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff ff0d 	bl	8004d20 <__NVIC_EnableIRQ>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	4603      	mov	r3, r0
 8004f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff ff1d 	bl	8004d5c <__NVIC_DisableIRQ>
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff ff94 	bl	8004e60 <SysTick_Config>
 8004f38:	4603      	mov	r3, r0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e098      	b.n	8005088 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4b4d      	ldr	r3, [pc, #308]	; (8005094 <HAL_DMA_Init+0x150>)
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d80f      	bhi.n	8004f82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <HAL_DMA_Init+0x154>)
 8004f6a:	4413      	add	r3, r2
 8004f6c:	4a4b      	ldr	r2, [pc, #300]	; (800509c <HAL_DMA_Init+0x158>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	009a      	lsls	r2, r3, #2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a48      	ldr	r2, [pc, #288]	; (80050a0 <HAL_DMA_Init+0x15c>)
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40
 8004f80:	e00e      	b.n	8004fa0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	4b46      	ldr	r3, [pc, #280]	; (80050a4 <HAL_DMA_Init+0x160>)
 8004f8a:	4413      	add	r3, r2
 8004f8c:	4a43      	ldr	r2, [pc, #268]	; (800509c <HAL_DMA_Init+0x158>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	009a      	lsls	r2, r3, #2
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a42      	ldr	r2, [pc, #264]	; (80050a8 <HAL_DMA_Init+0x164>)
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ffa:	d039      	beq.n	8005070 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <HAL_DMA_Init+0x15c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d11a      	bne.n	800503c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005006:	4b29      	ldr	r3, [pc, #164]	; (80050ac <HAL_DMA_Init+0x168>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	f003 031c 	and.w	r3, r3, #28
 8005012:	210f      	movs	r1, #15
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	43db      	mvns	r3, r3
 800501a:	4924      	ldr	r1, [pc, #144]	; (80050ac <HAL_DMA_Init+0x168>)
 800501c:	4013      	ands	r3, r2
 800501e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005020:	4b22      	ldr	r3, [pc, #136]	; (80050ac <HAL_DMA_Init+0x168>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	f003 031c 	and.w	r3, r3, #28
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	491d      	ldr	r1, [pc, #116]	; (80050ac <HAL_DMA_Init+0x168>)
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]
 800503a:	e019      	b.n	8005070 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800503c:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <HAL_DMA_Init+0x16c>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	f003 031c 	and.w	r3, r3, #28
 8005048:	210f      	movs	r1, #15
 800504a:	fa01 f303 	lsl.w	r3, r1, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	4917      	ldr	r1, [pc, #92]	; (80050b0 <HAL_DMA_Init+0x16c>)
 8005052:	4013      	ands	r3, r2
 8005054:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <HAL_DMA_Init+0x16c>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6859      	ldr	r1, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f003 031c 	and.w	r3, r3, #28
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	4911      	ldr	r1, [pc, #68]	; (80050b0 <HAL_DMA_Init+0x16c>)
 800506c:	4313      	orrs	r3, r2
 800506e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40020407 	.word	0x40020407
 8005098:	bffdfff8 	.word	0xbffdfff8
 800509c:	cccccccd 	.word	0xcccccccd
 80050a0:	40020000 	.word	0x40020000
 80050a4:	bffdfbf8 	.word	0xbffdfbf8
 80050a8:	40020400 	.word	0x40020400
 80050ac:	400200a8 	.word	0x400200a8
 80050b0:	400204a8 	.word	0x400204a8

080050b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e072      	b.n	80051ac <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <HAL_DMA_DeInit+0x104>)
 80050de:	429a      	cmp	r2, r3
 80050e0:	d80f      	bhi.n	8005102 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	4b34      	ldr	r3, [pc, #208]	; (80051bc <HAL_DMA_DeInit+0x108>)
 80050ea:	4413      	add	r3, r2
 80050ec:	4a34      	ldr	r2, [pc, #208]	; (80051c0 <HAL_DMA_DeInit+0x10c>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	009a      	lsls	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a31      	ldr	r2, [pc, #196]	; (80051c4 <HAL_DMA_DeInit+0x110>)
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40
 8005100:	e00e      	b.n	8005120 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <HAL_DMA_DeInit+0x114>)
 800510a:	4413      	add	r3, r2
 800510c:	4a2c      	ldr	r2, [pc, #176]	; (80051c0 <HAL_DMA_DeInit+0x10c>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	009a      	lsls	r2, r3, #2
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2b      	ldr	r2, [pc, #172]	; (80051cc <HAL_DMA_DeInit+0x118>)
 800511e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512c:	f003 021c 	and.w	r2, r3, #28
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	2101      	movs	r1, #1
 8005136:	fa01 f202 	lsl.w	r2, r1, r2
 800513a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <HAL_DMA_DeInit+0x110>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d10d      	bne.n	8005162 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005146:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <HAL_DMA_DeInit+0x11c>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	f003 031c 	and.w	r3, r3, #28
 8005152:	210f      	movs	r1, #15
 8005154:	fa01 f303 	lsl.w	r3, r1, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	491d      	ldr	r1, [pc, #116]	; (80051d0 <HAL_DMA_DeInit+0x11c>)
 800515c:	4013      	ands	r3, r2
 800515e:	600b      	str	r3, [r1, #0]
 8005160:	e00c      	b.n	800517c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005162:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <HAL_DMA_DeInit+0x120>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	f003 031c 	and.w	r3, r3, #28
 800516e:	210f      	movs	r1, #15
 8005170:	fa01 f303 	lsl.w	r3, r1, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	4917      	ldr	r1, [pc, #92]	; (80051d4 <HAL_DMA_DeInit+0x120>)
 8005178:	4013      	ands	r3, r2
 800517a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	40020407 	.word	0x40020407
 80051bc:	bffdfff8 	.word	0xbffdfff8
 80051c0:	cccccccd 	.word	0xcccccccd
 80051c4:	40020000 	.word	0x40020000
 80051c8:	bffdfbf8 	.word	0xbffdfbf8
 80051cc:	40020400 	.word	0x40020400
 80051d0:	400200a8 	.word	0x400200a8
 80051d4:	400204a8 	.word	0x400204a8

080051d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_DMA_Start_IT+0x20>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e04b      	b.n	8005290 <HAL_DMA_Start_IT+0xb8>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d13a      	bne.n	8005282 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f95f 	bl	80054f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 020e 	orr.w	r2, r2, #14
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	e00f      	b.n	8005270 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0204 	bic.w	r2, r2, #4
 800525e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 020a 	orr.w	r2, r2, #10
 800526e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	e005      	b.n	800528e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800528a:	2302      	movs	r3, #2
 800528c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800528e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d008      	beq.n	80052c2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2204      	movs	r2, #4
 80052b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e022      	b.n	8005308 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 020e 	bic.w	r2, r2, #14
 80052d0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	f003 021c 	and.w	r2, r3, #28
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2101      	movs	r1, #1
 80052f0:	fa01 f202 	lsl.w	r2, r1, r2
 80052f4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d005      	beq.n	8005338 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2204      	movs	r2, #4
 8005330:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
 8005336:	e029      	b.n	800538c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 020e 	bic.w	r2, r2, #14
 8005346:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535c:	f003 021c 	and.w	r2, r3, #28
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	2101      	movs	r1, #1
 8005366:	fa01 f202 	lsl.w	r2, r1, r2
 800536a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	4798      	blx	r3
    }
  }
  return status;
 800538c:	7bfb      	ldrb	r3, [r7, #15]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	f003 031c 	and.w	r3, r3, #28
 80053b6:	2204      	movs	r2, #4
 80053b8:	409a      	lsls	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4013      	ands	r3, r2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d026      	beq.n	8005410 <HAL_DMA_IRQHandler+0x7a>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d021      	beq.n	8005410 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d107      	bne.n	80053ea <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0204 	bic.w	r2, r2, #4
 80053e8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	f003 021c 	and.w	r2, r3, #28
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	2104      	movs	r1, #4
 80053f8:	fa01 f202 	lsl.w	r2, r1, r2
 80053fc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	2b00      	cmp	r3, #0
 8005404:	d071      	beq.n	80054ea <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800540e:	e06c      	b.n	80054ea <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005414:	f003 031c 	and.w	r3, r3, #28
 8005418:	2202      	movs	r2, #2
 800541a:	409a      	lsls	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4013      	ands	r3, r2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d02e      	beq.n	8005482 <HAL_DMA_IRQHandler+0xec>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d029      	beq.n	8005482 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 020a 	bic.w	r2, r2, #10
 800544a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005458:	f003 021c 	and.w	r2, r3, #28
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	2102      	movs	r1, #2
 8005462:	fa01 f202 	lsl.w	r2, r1, r2
 8005466:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d038      	beq.n	80054ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005480:	e033      	b.n	80054ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005486:	f003 031c 	and.w	r3, r3, #28
 800548a:	2208      	movs	r2, #8
 800548c:	409a      	lsls	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4013      	ands	r3, r2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d02a      	beq.n	80054ec <HAL_DMA_IRQHandler+0x156>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d025      	beq.n	80054ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 020e 	bic.w	r2, r2, #14
 80054ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b4:	f003 021c 	and.w	r2, r3, #28
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	2101      	movs	r1, #1
 80054be:	fa01 f202 	lsl.w	r2, r1, r2
 80054c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
}
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005506:	f003 021c 	and.w	r2, r3, #28
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	2101      	movs	r1, #1
 8005510:	fa01 f202 	lsl.w	r2, r1, r2
 8005514:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2b10      	cmp	r3, #16
 8005524:	d108      	bne.n	8005538 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005536:	e007      	b.n	8005548 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	60da      	str	r2, [r3, #12]
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005562:	e14e      	b.n	8005802 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	2101      	movs	r1, #1
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	4013      	ands	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 8140 	beq.w	80057fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d005      	beq.n	8005594 <HAL_GPIO_Init+0x40>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d130      	bne.n	80055f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	2203      	movs	r2, #3
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4013      	ands	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055ca:	2201      	movs	r2, #1
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	43db      	mvns	r3, r3
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4013      	ands	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	f003 0201 	and.w	r2, r3, #1
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d017      	beq.n	8005632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	2203      	movs	r2, #3
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4013      	ands	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d123      	bne.n	8005686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	08da      	lsrs	r2, r3, #3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3208      	adds	r2, #8
 8005646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	220f      	movs	r2, #15
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43db      	mvns	r3, r3
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4013      	ands	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	08da      	lsrs	r2, r3, #3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3208      	adds	r2, #8
 8005680:	6939      	ldr	r1, [r7, #16]
 8005682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	2203      	movs	r2, #3
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4013      	ands	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 0203 	and.w	r2, r3, #3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 809a 	beq.w	80057fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056c8:	4b55      	ldr	r3, [pc, #340]	; (8005820 <HAL_GPIO_Init+0x2cc>)
 80056ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056cc:	4a54      	ldr	r2, [pc, #336]	; (8005820 <HAL_GPIO_Init+0x2cc>)
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	6613      	str	r3, [r2, #96]	; 0x60
 80056d4:	4b52      	ldr	r3, [pc, #328]	; (8005820 <HAL_GPIO_Init+0x2cc>)
 80056d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80056e0:	4a50      	ldr	r2, [pc, #320]	; (8005824 <HAL_GPIO_Init+0x2d0>)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	089b      	lsrs	r3, r3, #2
 80056e6:	3302      	adds	r3, #2
 80056e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	220f      	movs	r2, #15
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4013      	ands	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800570a:	d013      	beq.n	8005734 <HAL_GPIO_Init+0x1e0>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a46      	ldr	r2, [pc, #280]	; (8005828 <HAL_GPIO_Init+0x2d4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00d      	beq.n	8005730 <HAL_GPIO_Init+0x1dc>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a45      	ldr	r2, [pc, #276]	; (800582c <HAL_GPIO_Init+0x2d8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <HAL_GPIO_Init+0x1d8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a44      	ldr	r2, [pc, #272]	; (8005830 <HAL_GPIO_Init+0x2dc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d101      	bne.n	8005728 <HAL_GPIO_Init+0x1d4>
 8005724:	2303      	movs	r3, #3
 8005726:	e006      	b.n	8005736 <HAL_GPIO_Init+0x1e2>
 8005728:	2307      	movs	r3, #7
 800572a:	e004      	b.n	8005736 <HAL_GPIO_Init+0x1e2>
 800572c:	2302      	movs	r3, #2
 800572e:	e002      	b.n	8005736 <HAL_GPIO_Init+0x1e2>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_GPIO_Init+0x1e2>
 8005734:	2300      	movs	r3, #0
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	f002 0203 	and.w	r2, r2, #3
 800573c:	0092      	lsls	r2, r2, #2
 800573e:	4093      	lsls	r3, r2
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005746:	4937      	ldr	r1, [pc, #220]	; (8005824 <HAL_GPIO_Init+0x2d0>)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	3302      	adds	r3, #2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005754:	4b37      	ldr	r3, [pc, #220]	; (8005834 <HAL_GPIO_Init+0x2e0>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	43db      	mvns	r3, r3
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005778:	4a2e      	ldr	r2, [pc, #184]	; (8005834 <HAL_GPIO_Init+0x2e0>)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800577e:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <HAL_GPIO_Init+0x2e0>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	43db      	mvns	r3, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057a2:	4a24      	ldr	r2, [pc, #144]	; (8005834 <HAL_GPIO_Init+0x2e0>)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80057a8:	4b22      	ldr	r3, [pc, #136]	; (8005834 <HAL_GPIO_Init+0x2e0>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4013      	ands	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057cc:	4a19      	ldr	r2, [pc, #100]	; (8005834 <HAL_GPIO_Init+0x2e0>)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80057d2:	4b18      	ldr	r3, [pc, #96]	; (8005834 <HAL_GPIO_Init+0x2e0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	43db      	mvns	r3, r3
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4013      	ands	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057f6:	4a0f      	ldr	r2, [pc, #60]	; (8005834 <HAL_GPIO_Init+0x2e0>)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	3301      	adds	r3, #1
 8005800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	f47f aea9 	bne.w	8005564 <HAL_GPIO_Init+0x10>
  }
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	40021000 	.word	0x40021000
 8005824:	40010000 	.word	0x40010000
 8005828:	48000400 	.word	0x48000400
 800582c:	48000800 	.word	0x48000800
 8005830:	48000c00 	.word	0x48000c00
 8005834:	40010400 	.word	0x40010400

08005838 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005846:	e0b1      	b.n	80059ac <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005848:	2201      	movs	r2, #1
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	4013      	ands	r3, r2
 8005854:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80a4 	beq.w	80059a6 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800585e:	4a5a      	ldr	r2, [pc, #360]	; (80059c8 <HAL_GPIO_DeInit+0x190>)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	089b      	lsrs	r3, r3, #2
 8005864:	3302      	adds	r3, #2
 8005866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800586a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	220f      	movs	r2, #15
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4013      	ands	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005886:	d013      	beq.n	80058b0 <HAL_GPIO_DeInit+0x78>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a50      	ldr	r2, [pc, #320]	; (80059cc <HAL_GPIO_DeInit+0x194>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00d      	beq.n	80058ac <HAL_GPIO_DeInit+0x74>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a4f      	ldr	r2, [pc, #316]	; (80059d0 <HAL_GPIO_DeInit+0x198>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <HAL_GPIO_DeInit+0x70>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a4e      	ldr	r2, [pc, #312]	; (80059d4 <HAL_GPIO_DeInit+0x19c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d101      	bne.n	80058a4 <HAL_GPIO_DeInit+0x6c>
 80058a0:	2303      	movs	r3, #3
 80058a2:	e006      	b.n	80058b2 <HAL_GPIO_DeInit+0x7a>
 80058a4:	2307      	movs	r3, #7
 80058a6:	e004      	b.n	80058b2 <HAL_GPIO_DeInit+0x7a>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e002      	b.n	80058b2 <HAL_GPIO_DeInit+0x7a>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <HAL_GPIO_DeInit+0x7a>
 80058b0:	2300      	movs	r3, #0
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	f002 0203 	and.w	r2, r2, #3
 80058b8:	0092      	lsls	r2, r2, #2
 80058ba:	4093      	lsls	r3, r2
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d132      	bne.n	8005928 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80058c2:	4b45      	ldr	r3, [pc, #276]	; (80059d8 <HAL_GPIO_DeInit+0x1a0>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	4943      	ldr	r1, [pc, #268]	; (80059d8 <HAL_GPIO_DeInit+0x1a0>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80058d0:	4b41      	ldr	r3, [pc, #260]	; (80059d8 <HAL_GPIO_DeInit+0x1a0>)
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	43db      	mvns	r3, r3
 80058d8:	493f      	ldr	r1, [pc, #252]	; (80059d8 <HAL_GPIO_DeInit+0x1a0>)
 80058da:	4013      	ands	r3, r2
 80058dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80058de:	4b3e      	ldr	r3, [pc, #248]	; (80059d8 <HAL_GPIO_DeInit+0x1a0>)
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	43db      	mvns	r3, r3
 80058e6:	493c      	ldr	r1, [pc, #240]	; (80059d8 <HAL_GPIO_DeInit+0x1a0>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80058ec:	4b3a      	ldr	r3, [pc, #232]	; (80059d8 <HAL_GPIO_DeInit+0x1a0>)
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	43db      	mvns	r3, r3
 80058f4:	4938      	ldr	r1, [pc, #224]	; (80059d8 <HAL_GPIO_DeInit+0x1a0>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f003 0303 	and.w	r3, r3, #3
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	220f      	movs	r2, #15
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800590a:	4a2f      	ldr	r2, [pc, #188]	; (80059c8 <HAL_GPIO_DeInit+0x190>)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	089b      	lsrs	r3, r3, #2
 8005910:	3302      	adds	r3, #2
 8005912:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	43da      	mvns	r2, r3
 800591a:	482b      	ldr	r0, [pc, #172]	; (80059c8 <HAL_GPIO_DeInit+0x190>)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	089b      	lsrs	r3, r3, #2
 8005920:	400a      	ands	r2, r1
 8005922:	3302      	adds	r3, #2
 8005924:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	2103      	movs	r1, #3
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	08da      	lsrs	r2, r3, #3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3208      	adds	r2, #8
 8005944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	220f      	movs	r2, #15
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	08d2      	lsrs	r2, r2, #3
 800595c:	4019      	ands	r1, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3208      	adds	r2, #8
 8005962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	2103      	movs	r1, #3
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	2101      	movs	r1, #1
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	401a      	ands	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	2103      	movs	r1, #3
 800599a:	fa01 f303 	lsl.w	r3, r1, r3
 800599e:	43db      	mvns	r3, r3
 80059a0:	401a      	ands	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	3301      	adds	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f47f af47 	bne.w	8005848 <HAL_GPIO_DeInit+0x10>
  }
}
 80059ba:	bf00      	nop
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	40010000 	.word	0x40010000
 80059cc:	48000400 	.word	0x48000400
 80059d0:	48000800 	.word	0x48000800
 80059d4:	48000c00 	.word	0x48000c00
 80059d8:	40010400 	.word	0x40010400

080059dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059f4:	2301      	movs	r3, #1
 80059f6:	73fb      	strb	r3, [r7, #15]
 80059f8:	e001      	b.n	80059fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	807b      	strh	r3, [r7, #2]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a1c:	787b      	ldrb	r3, [r7, #1]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a22:	887a      	ldrh	r2, [r7, #2]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a28:	e002      	b.n	8005a30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a2a:	887a      	ldrh	r2, [r7, #2]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a48:	695a      	ldr	r2, [r3, #20]
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d006      	beq.n	8005a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a52:	4a05      	ldr	r2, [pc, #20]	; (8005a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a54:	88fb      	ldrh	r3, [r7, #6]
 8005a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fa fda8 	bl	80005b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40010400 	.word	0x40010400

08005a6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40007000 	.word	0x40007000

08005a88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a96:	d130      	bne.n	8005afa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a98:	4b23      	ldr	r3, [pc, #140]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa4:	d038      	beq.n	8005b18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005aa6:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005aae:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ab4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ab6:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2232      	movs	r2, #50	; 0x32
 8005abc:	fb02 f303 	mul.w	r3, r2, r3
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	0c9b      	lsrs	r3, r3, #18
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005acc:	e002      	b.n	8005ad4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ad4:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae0:	d102      	bne.n	8005ae8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f2      	bne.n	8005ace <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af4:	d110      	bne.n	8005b18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e00f      	b.n	8005b1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b06:	d007      	beq.n	8005b18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b08:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b10:	4a05      	ldr	r2, [pc, #20]	; (8005b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40007000 	.word	0x40007000
 8005b2c:	20000000 	.word	0x20000000
 8005b30:	431bde83 	.word	0x431bde83

08005b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08a      	sub	sp, #40	; 0x28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f000 bc4f 	b.w	80063e6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b48:	4b97      	ldr	r3, [pc, #604]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b52:	4b95      	ldr	r3, [pc, #596]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80e6 	beq.w	8005d36 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <HAL_RCC_OscConfig+0x4c>
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	2b0c      	cmp	r3, #12
 8005b74:	f040 808d 	bne.w	8005c92 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	f040 8089 	bne.w	8005c92 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b80:	4b89      	ldr	r3, [pc, #548]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d006      	beq.n	8005b9a <HAL_RCC_OscConfig+0x66>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f000 bc26 	b.w	80063e6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b9e:	4b82      	ldr	r3, [pc, #520]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d004      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x80>
 8005baa:	4b7f      	ldr	r3, [pc, #508]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb2:	e005      	b.n	8005bc0 <HAL_RCC_OscConfig+0x8c>
 8005bb4:	4b7c      	ldr	r3, [pc, #496]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d224      	bcs.n	8005c0e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fdd9 	bl	8006780 <RCC_SetFlashLatencyFromMSIRange>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	f000 bc06 	b.w	80063e6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bda:	4b73      	ldr	r3, [pc, #460]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a72      	ldr	r2, [pc, #456]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005be0:	f043 0308 	orr.w	r3, r3, #8
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	4b70      	ldr	r3, [pc, #448]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	496d      	ldr	r1, [pc, #436]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bf8:	4b6b      	ldr	r3, [pc, #428]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	4968      	ldr	r1, [pc, #416]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	604b      	str	r3, [r1, #4]
 8005c0c:	e025      	b.n	8005c5a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c0e:	4b66      	ldr	r3, [pc, #408]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a65      	ldr	r2, [pc, #404]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005c14:	f043 0308 	orr.w	r3, r3, #8
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	4b63      	ldr	r3, [pc, #396]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	4960      	ldr	r1, [pc, #384]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c2c:	4b5e      	ldr	r3, [pc, #376]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	495b      	ldr	r1, [pc, #364]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fd98 	bl	8006780 <RCC_SetFlashLatencyFromMSIRange>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e3c5      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c5a:	f000 fccd 	bl	80065f8 <HAL_RCC_GetSysClockFreq>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	4b51      	ldr	r3, [pc, #324]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	091b      	lsrs	r3, r3, #4
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	4950      	ldr	r1, [pc, #320]	; (8005dac <HAL_RCC_OscConfig+0x278>)
 8005c6c:	5ccb      	ldrb	r3, [r1, r3]
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	fa22 f303 	lsr.w	r3, r2, r3
 8005c76:	4a4e      	ldr	r2, [pc, #312]	; (8005db0 <HAL_RCC_OscConfig+0x27c>)
 8005c78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c7a:	4b4e      	ldr	r3, [pc, #312]	; (8005db4 <HAL_RCC_OscConfig+0x280>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fc fd92 	bl	80027a8 <HAL_InitTick>
 8005c84:	4603      	mov	r3, r0
 8005c86:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005c88:	7dfb      	ldrb	r3, [r7, #23]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d052      	beq.n	8005d34 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	e3a9      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d032      	beq.n	8005d00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c9a:	4b43      	ldr	r3, [pc, #268]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a42      	ldr	r2, [pc, #264]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ca6:	f7fc fdcf 	bl	8002848 <HAL_GetTick>
 8005caa:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cae:	f7fc fdcb 	bl	8002848 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e392      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cc0:	4b39      	ldr	r3, [pc, #228]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f0      	beq.n	8005cae <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ccc:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a35      	ldr	r2, [pc, #212]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005cd2:	f043 0308 	orr.w	r3, r3, #8
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	4b33      	ldr	r3, [pc, #204]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	4930      	ldr	r1, [pc, #192]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cea:	4b2f      	ldr	r3, [pc, #188]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	492b      	ldr	r1, [pc, #172]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	604b      	str	r3, [r1, #4]
 8005cfe:	e01a      	b.n	8005d36 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d00:	4b29      	ldr	r3, [pc, #164]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a28      	ldr	r2, [pc, #160]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d0c:	f7fc fd9c 	bl	8002848 <HAL_GetTick>
 8005d10:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d14:	f7fc fd98 	bl	8002848 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e35f      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d26:	4b20      	ldr	r3, [pc, #128]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x1e0>
 8005d32:	e000      	b.n	8005d36 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d073      	beq.n	8005e2a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_OscConfig+0x220>
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	2b0c      	cmp	r3, #12
 8005d4c:	d10e      	bne.n	8005d6c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d10b      	bne.n	8005d6c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d54:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d063      	beq.n	8005e28 <HAL_RCC_OscConfig+0x2f4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d15f      	bne.n	8005e28 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e33c      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d74:	d106      	bne.n	8005d84 <HAL_RCC_OscConfig+0x250>
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a0b      	ldr	r2, [pc, #44]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	e025      	b.n	8005dd0 <HAL_RCC_OscConfig+0x29c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d8c:	d114      	bne.n	8005db8 <HAL_RCC_OscConfig+0x284>
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a05      	ldr	r2, [pc, #20]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a02      	ldr	r2, [pc, #8]	; (8005da8 <HAL_RCC_OscConfig+0x274>)
 8005da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e013      	b.n	8005dd0 <HAL_RCC_OscConfig+0x29c>
 8005da8:	40021000 	.word	0x40021000
 8005dac:	0800d5bc 	.word	0x0800d5bc
 8005db0:	20000000 	.word	0x20000000
 8005db4:	20000084 	.word	0x20000084
 8005db8:	4b8f      	ldr	r3, [pc, #572]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a8e      	ldr	r2, [pc, #568]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4b8c      	ldr	r3, [pc, #560]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a8b      	ldr	r2, [pc, #556]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d013      	beq.n	8005e00 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fc fd36 	bl	8002848 <HAL_GetTick>
 8005ddc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fc fd32 	bl	8002848 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e2f9      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005df2:	4b81      	ldr	r3, [pc, #516]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0x2ac>
 8005dfe:	e014      	b.n	8005e2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fc fd22 	bl	8002848 <HAL_GetTick>
 8005e04:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e08:	f7fc fd1e 	bl	8002848 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	; 0x64
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e2e5      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e1a:	4b77      	ldr	r3, [pc, #476]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x2d4>
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d060      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d005      	beq.n	8005e48 <HAL_RCC_OscConfig+0x314>
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	2b0c      	cmp	r3, #12
 8005e40:	d119      	bne.n	8005e76 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d116      	bne.n	8005e76 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e48:	4b6b      	ldr	r3, [pc, #428]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_RCC_OscConfig+0x32c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e2c2      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e60:	4b65      	ldr	r3, [pc, #404]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	4962      	ldr	r1, [pc, #392]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e74:	e040      	b.n	8005ef8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d023      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e7e:	4b5e      	ldr	r3, [pc, #376]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a5d      	ldr	r2, [pc, #372]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fc fcdd 	bl	8002848 <HAL_GetTick>
 8005e8e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e92:	f7fc fcd9 	bl	8002848 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e2a0      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ea4:	4b54      	ldr	r3, [pc, #336]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb0:	4b51      	ldr	r3, [pc, #324]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	494e      	ldr	r1, [pc, #312]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]
 8005ec4:	e018      	b.n	8005ef8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ec6:	4b4c      	ldr	r3, [pc, #304]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a4b      	ldr	r2, [pc, #300]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed2:	f7fc fcb9 	bl	8002848 <HAL_GetTick>
 8005ed6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eda:	f7fc fcb5 	bl	8002848 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e27c      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eec:	4b42      	ldr	r3, [pc, #264]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f0      	bne.n	8005eda <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8082 	beq.w	800600a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d05f      	beq.n	8005fce <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8005f0e:	4b3a      	ldr	r3, [pc, #232]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f14:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d037      	beq.n	8005f94 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e254      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01b      	beq.n	8005f7e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8005f46:	4b2c      	ldr	r3, [pc, #176]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4c:	4a2a      	ldr	r2, [pc, #168]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f56:	f7fc fc77 	bl	8002848 <HAL_GetTick>
 8005f5a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f5e:	f7fc fc73 	bl	8002848 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b11      	cmp	r3, #17
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e23a      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f70:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1ef      	bne.n	8005f5e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005f7e:	4b1e      	ldr	r3, [pc, #120]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f84:	f023 0210 	bic.w	r2, r3, #16
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	491a      	ldr	r1, [pc, #104]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f94:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f9a:	4a17      	ldr	r2, [pc, #92]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7fc fc50 	bl	8002848 <HAL_GetTick>
 8005fa8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fac:	f7fc fc4c 	bl	8002848 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b11      	cmp	r3, #17
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e213      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fbe:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0ef      	beq.n	8005fac <HAL_RCC_OscConfig+0x478>
 8005fcc:	e01d      	b.n	800600a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fce:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd4:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <HAL_RCC_OscConfig+0x4c4>)
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fde:	f7fc fc33 	bl	8002848 <HAL_GetTick>
 8005fe2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe6:	f7fc fc2f 	bl	8002848 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b11      	cmp	r3, #17
 8005ff2:	d903      	bls.n	8005ffc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e1f6      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
 8005ff8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ffc:	4ba9      	ldr	r3, [pc, #676]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8005ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1ed      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 80bd 	beq.w	8006192 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800601e:	4ba1      	ldr	r3, [pc, #644]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10e      	bne.n	8006048 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800602a:	4b9e      	ldr	r3, [pc, #632]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	4a9d      	ldr	r2, [pc, #628]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006034:	6593      	str	r3, [r2, #88]	; 0x58
 8006036:	4b9b      	ldr	r3, [pc, #620]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006048:	4b97      	ldr	r3, [pc, #604]	; (80062a8 <HAL_RCC_OscConfig+0x774>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d118      	bne.n	8006086 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006054:	4b94      	ldr	r3, [pc, #592]	; (80062a8 <HAL_RCC_OscConfig+0x774>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a93      	ldr	r2, [pc, #588]	; (80062a8 <HAL_RCC_OscConfig+0x774>)
 800605a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006060:	f7fc fbf2 	bl	8002848 <HAL_GetTick>
 8006064:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006068:	f7fc fbee 	bl	8002848 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e1b5      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800607a:	4b8b      	ldr	r3, [pc, #556]	; (80062a8 <HAL_RCC_OscConfig+0x774>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f0      	beq.n	8006068 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d02c      	beq.n	80060ec <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8006092:	4b84      	ldr	r3, [pc, #528]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006098:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a4:	497f      	ldr	r1, [pc, #508]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d010      	beq.n	80060da <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80060b8:	4b7a      	ldr	r3, [pc, #488]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060be:	4a79      	ldr	r2, [pc, #484]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80060c0:	f043 0304 	orr.w	r3, r3, #4
 80060c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060c8:	4b76      	ldr	r3, [pc, #472]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ce:	4a75      	ldr	r2, [pc, #468]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80060d0:	f043 0301 	orr.w	r3, r3, #1
 80060d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060d8:	e018      	b.n	800610c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060da:	4b72      	ldr	r3, [pc, #456]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	4a70      	ldr	r2, [pc, #448]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060ea:	e00f      	b.n	800610c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060ec:	4b6d      	ldr	r3, [pc, #436]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f2:	4a6c      	ldr	r2, [pc, #432]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80060fc:	4b69      	ldr	r3, [pc, #420]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006102:	4a68      	ldr	r2, [pc, #416]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006104:	f023 0304 	bic.w	r3, r3, #4
 8006108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d016      	beq.n	8006142 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006114:	f7fc fb98 	bl	8002848 <HAL_GetTick>
 8006118:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800611a:	e00a      	b.n	8006132 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611c:	f7fc fb94 	bl	8002848 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	; 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e159      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006132:	4b5c      	ldr	r3, [pc, #368]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0ed      	beq.n	800611c <HAL_RCC_OscConfig+0x5e8>
 8006140:	e01d      	b.n	800617e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006142:	f7fc fb81 	bl	8002848 <HAL_GetTick>
 8006146:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006148:	e00a      	b.n	8006160 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614a:	f7fc fb7d 	bl	8002848 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f241 3288 	movw	r2, #5000	; 0x1388
 8006158:	4293      	cmp	r3, r2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e142      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006160:	4b50      	ldr	r3, [pc, #320]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1ed      	bne.n	800614a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800616e:	4b4d      	ldr	r3, [pc, #308]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	4a4b      	ldr	r2, [pc, #300]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800617e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006182:	2b01      	cmp	r3, #1
 8006184:	d105      	bne.n	8006192 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006186:	4b47      	ldr	r3, [pc, #284]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618a:	4a46      	ldr	r2, [pc, #280]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 800618c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006190:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d03c      	beq.n	8006218 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01c      	beq.n	80061e0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061a6:	4b3f      	ldr	r3, [pc, #252]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80061a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061ac:	4a3d      	ldr	r2, [pc, #244]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80061ae:	f043 0301 	orr.w	r3, r3, #1
 80061b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b6:	f7fc fb47 	bl	8002848 <HAL_GetTick>
 80061ba:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061be:	f7fc fb43 	bl	8002848 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e10a      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061d0:	4b34      	ldr	r3, [pc, #208]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80061d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0ef      	beq.n	80061be <HAL_RCC_OscConfig+0x68a>
 80061de:	e01b      	b.n	8006218 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061e0:	4b30      	ldr	r3, [pc, #192]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80061e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061e6:	4a2f      	ldr	r2, [pc, #188]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fc fb2a 	bl	8002848 <HAL_GetTick>
 80061f4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f8:	f7fc fb26 	bl	8002848 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e0ed      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800620a:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 800620c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1ef      	bne.n	80061f8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80e1 	beq.w	80063e4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	2b02      	cmp	r3, #2
 8006228:	f040 80b5 	bne.w	8006396 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800622c:	4b1d      	ldr	r3, [pc, #116]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	f003 0203 	and.w	r2, r3, #3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	429a      	cmp	r2, r3
 800623e:	d124      	bne.n	800628a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624a:	3b01      	subs	r3, #1
 800624c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800624e:	429a      	cmp	r2, r3
 8006250:	d11b      	bne.n	800628a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800625e:	429a      	cmp	r2, r3
 8006260:	d113      	bne.n	800628a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	3b01      	subs	r3, #1
 8006270:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006272:	429a      	cmp	r2, r3
 8006274:	d109      	bne.n	800628a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	085b      	lsrs	r3, r3, #1
 8006282:	3b01      	subs	r3, #1
 8006284:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006286:	429a      	cmp	r2, r3
 8006288:	d05f      	beq.n	800634a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	2b0c      	cmp	r3, #12
 800628e:	d05a      	beq.n	8006346 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a03      	ldr	r2, [pc, #12]	; (80062a4 <HAL_RCC_OscConfig+0x770>)
 8006296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800629a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800629c:	f7fc fad4 	bl	8002848 <HAL_GetTick>
 80062a0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062a2:	e00c      	b.n	80062be <HAL_RCC_OscConfig+0x78a>
 80062a4:	40021000 	.word	0x40021000
 80062a8:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ac:	f7fc facc 	bl	8002848 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e093      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062be:	4b4c      	ldr	r3, [pc, #304]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062ca:	4b49      	ldr	r3, [pc, #292]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	4b49      	ldr	r3, [pc, #292]	; (80063f4 <HAL_RCC_OscConfig+0x8c0>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062da:	3a01      	subs	r2, #1
 80062dc:	0112      	lsls	r2, r2, #4
 80062de:	4311      	orrs	r1, r2
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062e4:	0212      	lsls	r2, r2, #8
 80062e6:	4311      	orrs	r1, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062ec:	0852      	lsrs	r2, r2, #1
 80062ee:	3a01      	subs	r2, #1
 80062f0:	0552      	lsls	r2, r2, #21
 80062f2:	4311      	orrs	r1, r2
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80062f8:	0852      	lsrs	r2, r2, #1
 80062fa:	3a01      	subs	r2, #1
 80062fc:	0652      	lsls	r2, r2, #25
 80062fe:	430a      	orrs	r2, r1
 8006300:	493b      	ldr	r1, [pc, #236]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 8006302:	4313      	orrs	r3, r2
 8006304:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006306:	4b3a      	ldr	r3, [pc, #232]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a39      	ldr	r2, [pc, #228]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 800630c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006310:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006312:	4b37      	ldr	r3, [pc, #220]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	4a36      	ldr	r2, [pc, #216]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 8006318:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800631c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800631e:	f7fc fa93 	bl	8002848 <HAL_GetTick>
 8006322:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006324:	e008      	b.n	8006338 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006326:	f7fc fa8f 	bl	8002848 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e056      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006338:	4b2d      	ldr	r3, [pc, #180]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0f0      	beq.n	8006326 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006344:	e04e      	b.n	80063e4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e04d      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800634a:	4b29      	ldr	r3, [pc, #164]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d146      	bne.n	80063e4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006356:	4b26      	ldr	r3, [pc, #152]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 800635c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006360:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006362:	4b23      	ldr	r3, [pc, #140]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	4a22      	ldr	r2, [pc, #136]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 8006368:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800636c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800636e:	f7fc fa6b 	bl	8002848 <HAL_GetTick>
 8006372:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006376:	f7fc fa67 	bl	8002848 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e02e      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006388:	4b19      	ldr	r3, [pc, #100]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0f0      	beq.n	8006376 <HAL_RCC_OscConfig+0x842>
 8006394:	e026      	b.n	80063e4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	2b0c      	cmp	r3, #12
 800639a:	d021      	beq.n	80063e0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800639c:	4b14      	ldr	r3, [pc, #80]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 80063a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7fc fa4e 	bl	8002848 <HAL_GetTick>
 80063ac:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063b0:	f7fc fa4a 	bl	8002848 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e011      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f0      	bne.n	80063b0 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80063ce:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	4a07      	ldr	r2, [pc, #28]	; (80063f0 <HAL_RCC_OscConfig+0x8bc>)
 80063d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80063d8:	f023 0303 	bic.w	r3, r3, #3
 80063dc:	60d3      	str	r3, [r2, #12]
 80063de:	e001      	b.n	80063e4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3728      	adds	r7, #40	; 0x28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40021000 	.word	0x40021000
 80063f4:	f99f808c 	.word	0xf99f808c

080063f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0e7      	b.n	80065dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800640c:	4b75      	ldr	r3, [pc, #468]	; (80065e4 <HAL_RCC_ClockConfig+0x1ec>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d910      	bls.n	800643c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641a:	4b72      	ldr	r3, [pc, #456]	; (80065e4 <HAL_RCC_ClockConfig+0x1ec>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f023 0207 	bic.w	r2, r3, #7
 8006422:	4970      	ldr	r1, [pc, #448]	; (80065e4 <HAL_RCC_ClockConfig+0x1ec>)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	4313      	orrs	r3, r2
 8006428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800642a:	4b6e      	ldr	r3, [pc, #440]	; (80065e4 <HAL_RCC_ClockConfig+0x1ec>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d001      	beq.n	800643c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e0cf      	b.n	80065dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d010      	beq.n	800646a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	4b66      	ldr	r3, [pc, #408]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006454:	429a      	cmp	r2, r3
 8006456:	d908      	bls.n	800646a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006458:	4b63      	ldr	r3, [pc, #396]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	4960      	ldr	r1, [pc, #384]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006466:	4313      	orrs	r3, r2
 8006468:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d04c      	beq.n	8006510 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b03      	cmp	r3, #3
 800647c:	d107      	bne.n	800648e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800647e:	4b5a      	ldr	r3, [pc, #360]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d121      	bne.n	80064ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e0a6      	b.n	80065dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d107      	bne.n	80064a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006496:	4b54      	ldr	r3, [pc, #336]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d115      	bne.n	80064ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e09a      	b.n	80065dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d107      	bne.n	80064be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064ae:	4b4e      	ldr	r3, [pc, #312]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e08e      	b.n	80065dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064be:	4b4a      	ldr	r3, [pc, #296]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e086      	b.n	80065dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064ce:	4b46      	ldr	r3, [pc, #280]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f023 0203 	bic.w	r2, r3, #3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	4943      	ldr	r1, [pc, #268]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064e0:	f7fc f9b2 	bl	8002848 <HAL_GetTick>
 80064e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e6:	e00a      	b.n	80064fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e8:	f7fc f9ae 	bl	8002848 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e06e      	b.n	80065dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fe:	4b3a      	ldr	r3, [pc, #232]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 020c 	and.w	r2, r3, #12
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	429a      	cmp	r2, r3
 800650e:	d1eb      	bne.n	80064e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d010      	beq.n	800653e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	4b31      	ldr	r3, [pc, #196]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006528:	429a      	cmp	r2, r3
 800652a:	d208      	bcs.n	800653e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800652c:	4b2e      	ldr	r3, [pc, #184]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	492b      	ldr	r1, [pc, #172]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 800653a:	4313      	orrs	r3, r2
 800653c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800653e:	4b29      	ldr	r3, [pc, #164]	; (80065e4 <HAL_RCC_ClockConfig+0x1ec>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d210      	bcs.n	800656e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654c:	4b25      	ldr	r3, [pc, #148]	; (80065e4 <HAL_RCC_ClockConfig+0x1ec>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f023 0207 	bic.w	r2, r3, #7
 8006554:	4923      	ldr	r1, [pc, #140]	; (80065e4 <HAL_RCC_ClockConfig+0x1ec>)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	4313      	orrs	r3, r2
 800655a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800655c:	4b21      	ldr	r3, [pc, #132]	; (80065e4 <HAL_RCC_ClockConfig+0x1ec>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d001      	beq.n	800656e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e036      	b.n	80065dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d008      	beq.n	800658c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800657a:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	4918      	ldr	r1, [pc, #96]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 8006588:	4313      	orrs	r3, r2
 800658a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d009      	beq.n	80065ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006598:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	4910      	ldr	r1, [pc, #64]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065ac:	f000 f824 	bl	80065f8 <HAL_RCC_GetSysClockFreq>
 80065b0:	4602      	mov	r2, r0
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <HAL_RCC_ClockConfig+0x1f0>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	490b      	ldr	r1, [pc, #44]	; (80065ec <HAL_RCC_ClockConfig+0x1f4>)
 80065be:	5ccb      	ldrb	r3, [r1, r3]
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	fa22 f303 	lsr.w	r3, r2, r3
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <HAL_RCC_ClockConfig+0x1f8>)
 80065ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80065cc:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <HAL_RCC_ClockConfig+0x1fc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fc f8e9 	bl	80027a8 <HAL_InitTick>
 80065d6:	4603      	mov	r3, r0
 80065d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80065da:	7afb      	ldrb	r3, [r7, #11]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40022000 	.word	0x40022000
 80065e8:	40021000 	.word	0x40021000
 80065ec:	0800d5bc 	.word	0x0800d5bc
 80065f0:	20000000 	.word	0x20000000
 80065f4:	20000084 	.word	0x20000084

080065f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b089      	sub	sp, #36	; 0x24
 80065fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	61fb      	str	r3, [r7, #28]
 8006602:	2300      	movs	r3, #0
 8006604:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006606:	4b3e      	ldr	r3, [pc, #248]	; (8006700 <HAL_RCC_GetSysClockFreq+0x108>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 030c 	and.w	r3, r3, #12
 800660e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006610:	4b3b      	ldr	r3, [pc, #236]	; (8006700 <HAL_RCC_GetSysClockFreq+0x108>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_RCC_GetSysClockFreq+0x34>
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2b0c      	cmp	r3, #12
 8006624:	d121      	bne.n	800666a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d11e      	bne.n	800666a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800662c:	4b34      	ldr	r3, [pc, #208]	; (8006700 <HAL_RCC_GetSysClockFreq+0x108>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d107      	bne.n	8006648 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006638:	4b31      	ldr	r3, [pc, #196]	; (8006700 <HAL_RCC_GetSysClockFreq+0x108>)
 800663a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800663e:	0a1b      	lsrs	r3, r3, #8
 8006640:	f003 030f 	and.w	r3, r3, #15
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	e005      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006648:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <HAL_RCC_GetSysClockFreq+0x108>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	091b      	lsrs	r3, r3, #4
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006654:	4a2b      	ldr	r2, [pc, #172]	; (8006704 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10d      	bne.n	8006680 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006668:	e00a      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b04      	cmp	r3, #4
 800666e:	d102      	bne.n	8006676 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006670:	4b25      	ldr	r3, [pc, #148]	; (8006708 <HAL_RCC_GetSysClockFreq+0x110>)
 8006672:	61bb      	str	r3, [r7, #24]
 8006674:	e004      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d101      	bne.n	8006680 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800667c:	4b23      	ldr	r3, [pc, #140]	; (800670c <HAL_RCC_GetSysClockFreq+0x114>)
 800667e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2b0c      	cmp	r3, #12
 8006684:	d134      	bne.n	80066f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006686:	4b1e      	ldr	r3, [pc, #120]	; (8006700 <HAL_RCC_GetSysClockFreq+0x108>)
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d003      	beq.n	800669e <HAL_RCC_GetSysClockFreq+0xa6>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b03      	cmp	r3, #3
 800669a:	d003      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0xac>
 800669c:	e005      	b.n	80066aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800669e:	4b1a      	ldr	r3, [pc, #104]	; (8006708 <HAL_RCC_GetSysClockFreq+0x110>)
 80066a0:	617b      	str	r3, [r7, #20]
      break;
 80066a2:	e005      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80066a4:	4b19      	ldr	r3, [pc, #100]	; (800670c <HAL_RCC_GetSysClockFreq+0x114>)
 80066a6:	617b      	str	r3, [r7, #20]
      break;
 80066a8:	e002      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	617b      	str	r3, [r7, #20]
      break;
 80066ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066b0:	4b13      	ldr	r3, [pc, #76]	; (8006700 <HAL_RCC_GetSysClockFreq+0x108>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	091b      	lsrs	r3, r3, #4
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	3301      	adds	r3, #1
 80066bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80066be:	4b10      	ldr	r3, [pc, #64]	; (8006700 <HAL_RCC_GetSysClockFreq+0x108>)
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	fb03 f202 	mul.w	r2, r3, r2
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <HAL_RCC_GetSysClockFreq+0x108>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	0e5b      	lsrs	r3, r3, #25
 80066dc:	f003 0303 	and.w	r3, r3, #3
 80066e0:	3301      	adds	r3, #1
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80066f0:	69bb      	ldr	r3, [r7, #24]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3724      	adds	r7, #36	; 0x24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40021000 	.word	0x40021000
 8006704:	0800d5d4 	.word	0x0800d5d4
 8006708:	00f42400 	.word	0x00f42400
 800670c:	007a1200 	.word	0x007a1200

08006710 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006714:	4b03      	ldr	r3, [pc, #12]	; (8006724 <HAL_RCC_GetHCLKFreq+0x14>)
 8006716:	681b      	ldr	r3, [r3, #0]
}
 8006718:	4618      	mov	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000000 	.word	0x20000000

08006728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800672c:	f7ff fff0 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 8006730:	4602      	mov	r2, r0
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	0a1b      	lsrs	r3, r3, #8
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	4904      	ldr	r1, [pc, #16]	; (8006750 <HAL_RCC_GetPCLK1Freq+0x28>)
 800673e:	5ccb      	ldrb	r3, [r1, r3]
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006748:	4618      	mov	r0, r3
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40021000 	.word	0x40021000
 8006750:	0800d5cc 	.word	0x0800d5cc

08006754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006758:	f7ff ffda 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800675c:	4602      	mov	r2, r0
 800675e:	4b06      	ldr	r3, [pc, #24]	; (8006778 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	0adb      	lsrs	r3, r3, #11
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	4904      	ldr	r1, [pc, #16]	; (800677c <HAL_RCC_GetPCLK2Freq+0x28>)
 800676a:	5ccb      	ldrb	r3, [r1, r3]
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006774:	4618      	mov	r0, r3
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40021000 	.word	0x40021000
 800677c:	0800d5cc 	.word	0x0800d5cc

08006780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800678c:	4b2a      	ldr	r3, [pc, #168]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800678e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006798:	f7ff f968 	bl	8005a6c <HAL_PWREx_GetVoltageRange>
 800679c:	6178      	str	r0, [r7, #20]
 800679e:	e014      	b.n	80067ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80067a0:	4b25      	ldr	r3, [pc, #148]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a4:	4a24      	ldr	r2, [pc, #144]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067aa:	6593      	str	r3, [r2, #88]	; 0x58
 80067ac:	4b22      	ldr	r3, [pc, #136]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80067b8:	f7ff f958 	bl	8005a6c <HAL_PWREx_GetVoltageRange>
 80067bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80067be:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c2:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d0:	d10b      	bne.n	80067ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b80      	cmp	r3, #128	; 0x80
 80067d6:	d919      	bls.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2ba0      	cmp	r3, #160	; 0xa0
 80067dc:	d902      	bls.n	80067e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80067de:	2302      	movs	r3, #2
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	e013      	b.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80067e4:	2301      	movs	r3, #1
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	e010      	b.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b80      	cmp	r3, #128	; 0x80
 80067ee:	d902      	bls.n	80067f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80067f0:	2303      	movs	r3, #3
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	e00a      	b.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b80      	cmp	r3, #128	; 0x80
 80067fa:	d102      	bne.n	8006802 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80067fc:	2302      	movs	r3, #2
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	e004      	b.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b70      	cmp	r3, #112	; 0x70
 8006806:	d101      	bne.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006808:	2301      	movs	r3, #1
 800680a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f023 0207 	bic.w	r2, r3, #7
 8006814:	4909      	ldr	r1, [pc, #36]	; (800683c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800681c:	4b07      	ldr	r3, [pc, #28]	; (800683c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	429a      	cmp	r2, r3
 8006828:	d001      	beq.n	800682e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40021000 	.word	0x40021000
 800683c:	40022000 	.word	0x40022000

08006840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006848:	2300      	movs	r3, #0
 800684a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800684c:	2300      	movs	r3, #0
 800684e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 809e 	beq.w	800699a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800685e:	2300      	movs	r3, #0
 8006860:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006862:	4b46      	ldr	r3, [pc, #280]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006872:	2300      	movs	r3, #0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00d      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006878:	4b40      	ldr	r3, [pc, #256]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800687a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687c:	4a3f      	ldr	r2, [pc, #252]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800687e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006882:	6593      	str	r3, [r2, #88]	; 0x58
 8006884:	4b3d      	ldr	r3, [pc, #244]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006890:	2301      	movs	r3, #1
 8006892:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006894:	4b3a      	ldr	r3, [pc, #232]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a39      	ldr	r2, [pc, #228]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800689a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068a0:	f7fb ffd2 	bl	8002848 <HAL_GetTick>
 80068a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068a6:	e009      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a8:	f7fb ffce 	bl	8002848 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d902      	bls.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	74fb      	strb	r3, [r7, #19]
        break;
 80068ba:	e005      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068bc:	4b30      	ldr	r3, [pc, #192]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0ef      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80068c8:	7cfb      	ldrb	r3, [r7, #19]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d15a      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068ce:	4b2b      	ldr	r3, [pc, #172]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80068d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01e      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d019      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068ea:	4b24      	ldr	r3, [pc, #144]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80068ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068f6:	4b21      	ldr	r3, [pc, #132]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80068f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fc:	4a1f      	ldr	r2, [pc, #124]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80068fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006906:	4b1d      	ldr	r3, [pc, #116]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690c:	4a1b      	ldr	r2, [pc, #108]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800690e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006916:	4a19      	ldr	r2, [pc, #100]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d016      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006928:	f7fb ff8e 	bl	8002848 <HAL_GetTick>
 800692c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800692e:	e00b      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006930:	f7fb ff8a 	bl	8002848 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f241 3288 	movw	r2, #5000	; 0x1388
 800693e:	4293      	cmp	r3, r2
 8006940:	d902      	bls.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	74fb      	strb	r3, [r7, #19]
            break;
 8006946:	e006      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0ec      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006956:	7cfb      	ldrb	r3, [r7, #19]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800695c:	4b07      	ldr	r3, [pc, #28]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006962:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	4904      	ldr	r1, [pc, #16]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006972:	e009      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006974:	7cfb      	ldrb	r3, [r7, #19]
 8006976:	74bb      	strb	r3, [r7, #18]
 8006978:	e006      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800697a:	bf00      	nop
 800697c:	40021000 	.word	0x40021000
 8006980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006984:	7cfb      	ldrb	r3, [r7, #19]
 8006986:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006988:	7c7b      	ldrb	r3, [r7, #17]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d105      	bne.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800698e:	4b6e      	ldr	r3, [pc, #440]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006992:	4a6d      	ldr	r2, [pc, #436]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006998:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069a6:	4b68      	ldr	r3, [pc, #416]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ac:	f023 0203 	bic.w	r2, r3, #3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4964      	ldr	r1, [pc, #400]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069c8:	4b5f      	ldr	r3, [pc, #380]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ce:	f023 020c 	bic.w	r2, r3, #12
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	495c      	ldr	r1, [pc, #368]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069ea:	4b57      	ldr	r3, [pc, #348]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	4953      	ldr	r1, [pc, #332]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a0c:	4b4e      	ldr	r3, [pc, #312]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	494b      	ldr	r1, [pc, #300]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a2e:	4b46      	ldr	r3, [pc, #280]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	4942      	ldr	r1, [pc, #264]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a50:	4b3d      	ldr	r3, [pc, #244]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	493a      	ldr	r1, [pc, #232]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a72:	4b35      	ldr	r3, [pc, #212]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	4931      	ldr	r1, [pc, #196]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00a      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a94:	4b2c      	ldr	r3, [pc, #176]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	4929      	ldr	r1, [pc, #164]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ab6:	4b24      	ldr	r3, [pc, #144]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	4920      	ldr	r1, [pc, #128]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d015      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ad8:	4b1b      	ldr	r3, [pc, #108]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ade:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	4918      	ldr	r1, [pc, #96]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006af6:	d105      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006af8:	4b13      	ldr	r3, [pc, #76]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	4a12      	ldr	r2, [pc, #72]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b02:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d015      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b10:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	490a      	ldr	r1, [pc, #40]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b2e:	d105      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b30:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4a04      	ldr	r2, [pc, #16]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40021000 	.word	0x40021000

08006b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e049      	b.n	8006bf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fa f85c 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f001 f9fe 	bl	8007f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6a1a      	ldr	r2, [r3, #32]
 8006c08:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10f      	bne.n	8006c32 <HAL_TIM_Base_Stop+0x38>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6a1a      	ldr	r2, [r3, #32]
 8006c18:	f240 4344 	movw	r3, #1092	; 0x444
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d107      	bne.n	8006c32 <HAL_TIM_Base_Stop+0x38>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0201 	bic.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d001      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e03b      	b.n	8006cd8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a19      	ldr	r2, [pc, #100]	; (8006ce4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d009      	beq.n	8006c96 <HAL_TIM_Base_Start_IT+0x4e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8a:	d004      	beq.n	8006c96 <HAL_TIM_Base_Start_IT+0x4e>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a15      	ldr	r2, [pc, #84]	; (8006ce8 <HAL_TIM_Base_Start_IT+0xa0>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d115      	bne.n	8006cc2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	4b13      	ldr	r3, [pc, #76]	; (8006cec <HAL_TIM_Base_Start_IT+0xa4>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b06      	cmp	r3, #6
 8006ca6:	d015      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x8c>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cae:	d011      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc0:	e008      	b.n	8006cd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 0201 	orr.w	r2, r2, #1
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	e000      	b.n	8006cd6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40014000 	.word	0x40014000
 8006cec:	00010007 	.word	0x00010007

08006cf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0201 	bic.w	r2, r2, #1
 8006d06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6a1a      	ldr	r2, [r3, #32]
 8006d0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10f      	bne.n	8006d38 <HAL_TIM_Base_Stop_IT+0x48>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6a1a      	ldr	r2, [r3, #32]
 8006d1e:	f240 4344 	movw	r3, #1092	; 0x444
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d107      	bne.n	8006d38 <HAL_TIM_Base_Stop_IT+0x48>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e049      	b.n	8006df4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d106      	bne.n	8006d7a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f841 	bl	8006dfc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f001 f8fd 	bl	8007f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIM_OC_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                       uint16_t Length)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <HAL_TIM_OC_Start_DMA+0x2c>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	bf0c      	ite	eq
 8006e34:	2301      	moveq	r3, #1
 8006e36:	2300      	movne	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	e03c      	b.n	8006eb6 <HAL_TIM_OC_Start_DMA+0xa6>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d109      	bne.n	8006e56 <HAL_TIM_OC_Start_DMA+0x46>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	bf0c      	ite	eq
 8006e4e:	2301      	moveq	r3, #1
 8006e50:	2300      	movne	r3, #0
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	e02f      	b.n	8006eb6 <HAL_TIM_OC_Start_DMA+0xa6>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d109      	bne.n	8006e70 <HAL_TIM_OC_Start_DMA+0x60>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	bf0c      	ite	eq
 8006e68:	2301      	moveq	r3, #1
 8006e6a:	2300      	movne	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	e022      	b.n	8006eb6 <HAL_TIM_OC_Start_DMA+0xa6>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b0c      	cmp	r3, #12
 8006e74:	d109      	bne.n	8006e8a <HAL_TIM_OC_Start_DMA+0x7a>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	bf0c      	ite	eq
 8006e82:	2301      	moveq	r3, #1
 8006e84:	2300      	movne	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	e015      	b.n	8006eb6 <HAL_TIM_OC_Start_DMA+0xa6>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b10      	cmp	r3, #16
 8006e8e:	d109      	bne.n	8006ea4 <HAL_TIM_OC_Start_DMA+0x94>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	bf0c      	ite	eq
 8006e9c:	2301      	moveq	r3, #1
 8006e9e:	2300      	movne	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	e008      	b.n	8006eb6 <HAL_TIM_OC_Start_DMA+0xa6>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	bf0c      	ite	eq
 8006eb0:	2301      	moveq	r3, #1
 8006eb2:	2300      	movne	r3, #0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <HAL_TIM_OC_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e18d      	b.n	80071da <HAL_TIM_OC_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <HAL_TIM_OC_Start_DMA+0xc8>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	bf0c      	ite	eq
 8006ed0:	2301      	moveq	r3, #1
 8006ed2:	2300      	movne	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	e03c      	b.n	8006f52 <HAL_TIM_OC_Start_DMA+0x142>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d109      	bne.n	8006ef2 <HAL_TIM_OC_Start_DMA+0xe2>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	bf0c      	ite	eq
 8006eea:	2301      	moveq	r3, #1
 8006eec:	2300      	movne	r3, #0
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	e02f      	b.n	8006f52 <HAL_TIM_OC_Start_DMA+0x142>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d109      	bne.n	8006f0c <HAL_TIM_OC_Start_DMA+0xfc>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	bf0c      	ite	eq
 8006f04:	2301      	moveq	r3, #1
 8006f06:	2300      	movne	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	e022      	b.n	8006f52 <HAL_TIM_OC_Start_DMA+0x142>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b0c      	cmp	r3, #12
 8006f10:	d109      	bne.n	8006f26 <HAL_TIM_OC_Start_DMA+0x116>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	bf0c      	ite	eq
 8006f1e:	2301      	moveq	r3, #1
 8006f20:	2300      	movne	r3, #0
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	e015      	b.n	8006f52 <HAL_TIM_OC_Start_DMA+0x142>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d109      	bne.n	8006f40 <HAL_TIM_OC_Start_DMA+0x130>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	bf0c      	ite	eq
 8006f38:	2301      	moveq	r3, #1
 8006f3a:	2300      	movne	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	e008      	b.n	8006f52 <HAL_TIM_OC_Start_DMA+0x142>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d034      	beq.n	8006fc0 <HAL_TIM_OC_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <HAL_TIM_OC_Start_DMA+0x152>
 8006f5c:	887b      	ldrh	r3, [r7, #2]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_TIM_OC_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e139      	b.n	80071da <HAL_TIM_OC_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <HAL_TIM_OC_Start_DMA+0x166>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f74:	e026      	b.n	8006fc4 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_OC_Start_DMA+0x176>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f84:	e01e      	b.n	8006fc4 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d104      	bne.n	8006f96 <HAL_TIM_OC_Start_DMA+0x186>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f94:	e016      	b.n	8006fc4 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b0c      	cmp	r3, #12
 8006f9a:	d104      	bne.n	8006fa6 <HAL_TIM_OC_Start_DMA+0x196>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fa4:	e00e      	b.n	8006fc4 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b10      	cmp	r3, #16
 8006faa:	d104      	bne.n	8006fb6 <HAL_TIM_OC_Start_DMA+0x1a6>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fb4:	e006      	b.n	8006fc4 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fbe:	e001      	b.n	8006fc4 <HAL_TIM_OC_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e10a      	b.n	80071da <HAL_TIM_OC_Start_DMA+0x3ca>
  }

  switch (Channel)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b0c      	cmp	r3, #12
 8006fc8:	f200 80ae 	bhi.w	8007128 <HAL_TIM_OC_Start_DMA+0x318>
 8006fcc:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <HAL_TIM_OC_Start_DMA+0x1c4>)
 8006fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08007009 	.word	0x08007009
 8006fd8:	08007129 	.word	0x08007129
 8006fdc:	08007129 	.word	0x08007129
 8006fe0:	08007129 	.word	0x08007129
 8006fe4:	08007051 	.word	0x08007051
 8006fe8:	08007129 	.word	0x08007129
 8006fec:	08007129 	.word	0x08007129
 8006ff0:	08007129 	.word	0x08007129
 8006ff4:	08007099 	.word	0x08007099
 8006ff8:	08007129 	.word	0x08007129
 8006ffc:	08007129 	.word	0x08007129
 8007000:	08007129 	.word	0x08007129
 8007004:	080070e1 	.word	0x080070e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	4a75      	ldr	r2, [pc, #468]	; (80071e4 <HAL_TIM_OC_Start_DMA+0x3d4>)
 800700e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	4a74      	ldr	r2, [pc, #464]	; (80071e8 <HAL_TIM_OC_Start_DMA+0x3d8>)
 8007016:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	4a73      	ldr	r2, [pc, #460]	; (80071ec <HAL_TIM_OC_Start_DMA+0x3dc>)
 800701e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3334      	adds	r3, #52	; 0x34
 800702c:	461a      	mov	r2, r3
 800702e:	887b      	ldrh	r3, [r7, #2]
 8007030:	f7fe f8d2 	bl	80051d8 <HAL_DMA_Start_IT>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <HAL_TIM_OC_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e0cd      	b.n	80071da <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800704c:	60da      	str	r2, [r3, #12]
      break;
 800704e:	e06e      	b.n	800712e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	4a63      	ldr	r2, [pc, #396]	; (80071e4 <HAL_TIM_OC_Start_DMA+0x3d4>)
 8007056:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705c:	4a62      	ldr	r2, [pc, #392]	; (80071e8 <HAL_TIM_OC_Start_DMA+0x3d8>)
 800705e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	4a61      	ldr	r2, [pc, #388]	; (80071ec <HAL_TIM_OC_Start_DMA+0x3dc>)
 8007066:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3338      	adds	r3, #56	; 0x38
 8007074:	461a      	mov	r2, r3
 8007076:	887b      	ldrh	r3, [r7, #2]
 8007078:	f7fe f8ae 	bl	80051d8 <HAL_DMA_Start_IT>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <HAL_TIM_OC_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e0a9      	b.n	80071da <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007094:	60da      	str	r2, [r3, #12]
      break;
 8007096:	e04a      	b.n	800712e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	4a51      	ldr	r2, [pc, #324]	; (80071e4 <HAL_TIM_OC_Start_DMA+0x3d4>)
 800709e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	4a50      	ldr	r2, [pc, #320]	; (80071e8 <HAL_TIM_OC_Start_DMA+0x3d8>)
 80070a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	4a4f      	ldr	r2, [pc, #316]	; (80071ec <HAL_TIM_OC_Start_DMA+0x3dc>)
 80070ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	333c      	adds	r3, #60	; 0x3c
 80070bc:	461a      	mov	r2, r3
 80070be:	887b      	ldrh	r3, [r7, #2]
 80070c0:	f7fe f88a 	bl	80051d8 <HAL_DMA_Start_IT>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <HAL_TIM_OC_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e085      	b.n	80071da <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070dc:	60da      	str	r2, [r3, #12]
      break;
 80070de:	e026      	b.n	800712e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e4:	4a3f      	ldr	r2, [pc, #252]	; (80071e4 <HAL_TIM_OC_Start_DMA+0x3d4>)
 80070e6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ec:	4a3e      	ldr	r2, [pc, #248]	; (80071e8 <HAL_TIM_OC_Start_DMA+0x3d8>)
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	4a3d      	ldr	r2, [pc, #244]	; (80071ec <HAL_TIM_OC_Start_DMA+0x3dc>)
 80070f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3340      	adds	r3, #64	; 0x40
 8007104:	461a      	mov	r2, r3
 8007106:	887b      	ldrh	r3, [r7, #2]
 8007108:	f7fe f866 	bl	80051d8 <HAL_DMA_Start_IT>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <HAL_TIM_OC_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e061      	b.n	80071da <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007124:	60da      	str	r2, [r3, #12]
      break;
 8007126:	e002      	b.n	800712e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
      break;
 800712c:	bf00      	nop
  }

  if (status == HAL_OK)
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d151      	bne.n	80071d8 <HAL_TIM_OC_Start_DMA+0x3c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2201      	movs	r2, #1
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	4618      	mov	r0, r3
 800713e:	f001 fa07 	bl	8008550 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a2a      	ldr	r2, [pc, #168]	; (80071f0 <HAL_TIM_OC_Start_DMA+0x3e0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_TIM_OC_Start_DMA+0x350>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a28      	ldr	r2, [pc, #160]	; (80071f4 <HAL_TIM_OC_Start_DMA+0x3e4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_TIM_OC_Start_DMA+0x350>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a27      	ldr	r2, [pc, #156]	; (80071f8 <HAL_TIM_OC_Start_DMA+0x3e8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <HAL_TIM_OC_Start_DMA+0x354>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <HAL_TIM_OC_Start_DMA+0x356>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <HAL_TIM_OC_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007178:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a1c      	ldr	r2, [pc, #112]	; (80071f0 <HAL_TIM_OC_Start_DMA+0x3e0>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d009      	beq.n	8007198 <HAL_TIM_OC_Start_DMA+0x388>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718c:	d004      	beq.n	8007198 <HAL_TIM_OC_Start_DMA+0x388>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a18      	ldr	r2, [pc, #96]	; (80071f4 <HAL_TIM_OC_Start_DMA+0x3e4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d115      	bne.n	80071c4 <HAL_TIM_OC_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	4b17      	ldr	r3, [pc, #92]	; (80071fc <HAL_TIM_OC_Start_DMA+0x3ec>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b06      	cmp	r3, #6
 80071a8:	d015      	beq.n	80071d6 <HAL_TIM_OC_Start_DMA+0x3c6>
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b0:	d011      	beq.n	80071d6 <HAL_TIM_OC_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0201 	orr.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c2:	e008      	b.n	80071d6 <HAL_TIM_OC_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e000      	b.n	80071d8 <HAL_TIM_OC_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	08007e7d 	.word	0x08007e7d
 80071e8:	08007f25 	.word	0x08007f25
 80071ec:	08007deb 	.word	0x08007deb
 80071f0:	40012c00 	.word	0x40012c00
 80071f4:	40014000 	.word	0x40014000
 80071f8:	40014400 	.word	0x40014400
 80071fc:	00010007 	.word	0x00010007

08007200 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b0c      	cmp	r3, #12
 8007212:	d855      	bhi.n	80072c0 <HAL_TIM_OC_Stop_DMA+0xc0>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <HAL_TIM_OC_Stop_DMA+0x1c>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007251 	.word	0x08007251
 8007220:	080072c1 	.word	0x080072c1
 8007224:	080072c1 	.word	0x080072c1
 8007228:	080072c1 	.word	0x080072c1
 800722c:	0800726d 	.word	0x0800726d
 8007230:	080072c1 	.word	0x080072c1
 8007234:	080072c1 	.word	0x080072c1
 8007238:	080072c1 	.word	0x080072c1
 800723c:	08007289 	.word	0x08007289
 8007240:	080072c1 	.word	0x080072c1
 8007244:	080072c1 	.word	0x080072c1
 8007248:	080072c1 	.word	0x080072c1
 800724c:	080072a5 	.word	0x080072a5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800725e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe f855 	bl	8005314 <HAL_DMA_Abort_IT>
      break;
 800726a:	e02c      	b.n	80072c6 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800727a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	4618      	mov	r0, r3
 8007282:	f7fe f847 	bl	8005314 <HAL_DMA_Abort_IT>
      break;
 8007286:	e01e      	b.n	80072c6 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007296:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe f839 	bl	8005314 <HAL_DMA_Abort_IT>
      break;
 80072a2:	e010      	b.n	80072c6 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fe f82b 	bl	8005314 <HAL_DMA_Abort_IT>
      break;
 80072be:	e002      	b.n	80072c6 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	73fb      	strb	r3, [r7, #15]
      break;
 80072c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d176      	bne.n	80073ba <HAL_TIM_OC_Stop_DMA+0x1ba>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2200      	movs	r2, #0
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 f93b 	bl	8008550 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a39      	ldr	r2, [pc, #228]	; (80073c4 <HAL_TIM_OC_Stop_DMA+0x1c4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d009      	beq.n	80072f8 <HAL_TIM_OC_Stop_DMA+0xf8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a37      	ldr	r2, [pc, #220]	; (80073c8 <HAL_TIM_OC_Stop_DMA+0x1c8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d004      	beq.n	80072f8 <HAL_TIM_OC_Stop_DMA+0xf8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a36      	ldr	r2, [pc, #216]	; (80073cc <HAL_TIM_OC_Stop_DMA+0x1cc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d101      	bne.n	80072fc <HAL_TIM_OC_Stop_DMA+0xfc>
 80072f8:	2301      	movs	r3, #1
 80072fa:	e000      	b.n	80072fe <HAL_TIM_OC_Stop_DMA+0xfe>
 80072fc:	2300      	movs	r3, #0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d017      	beq.n	8007332 <HAL_TIM_OC_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6a1a      	ldr	r2, [r3, #32]
 8007308:	f241 1311 	movw	r3, #4369	; 0x1111
 800730c:	4013      	ands	r3, r2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10f      	bne.n	8007332 <HAL_TIM_OC_Stop_DMA+0x132>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6a1a      	ldr	r2, [r3, #32]
 8007318:	f240 4344 	movw	r3, #1092	; 0x444
 800731c:	4013      	ands	r3, r2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <HAL_TIM_OC_Stop_DMA+0x132>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007330:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6a1a      	ldr	r2, [r3, #32]
 8007338:	f241 1311 	movw	r3, #4369	; 0x1111
 800733c:	4013      	ands	r3, r2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10f      	bne.n	8007362 <HAL_TIM_OC_Stop_DMA+0x162>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a1a      	ldr	r2, [r3, #32]
 8007348:	f240 4344 	movw	r3, #1092	; 0x444
 800734c:	4013      	ands	r3, r2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d107      	bne.n	8007362 <HAL_TIM_OC_Stop_DMA+0x162>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0201 	bic.w	r2, r2, #1
 8007360:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d104      	bne.n	8007372 <HAL_TIM_OC_Stop_DMA+0x172>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007370:	e023      	b.n	80073ba <HAL_TIM_OC_Stop_DMA+0x1ba>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b04      	cmp	r3, #4
 8007376:	d104      	bne.n	8007382 <HAL_TIM_OC_Stop_DMA+0x182>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007380:	e01b      	b.n	80073ba <HAL_TIM_OC_Stop_DMA+0x1ba>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b08      	cmp	r3, #8
 8007386:	d104      	bne.n	8007392 <HAL_TIM_OC_Stop_DMA+0x192>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007390:	e013      	b.n	80073ba <HAL_TIM_OC_Stop_DMA+0x1ba>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b0c      	cmp	r3, #12
 8007396:	d104      	bne.n	80073a2 <HAL_TIM_OC_Stop_DMA+0x1a2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073a0:	e00b      	b.n	80073ba <HAL_TIM_OC_Stop_DMA+0x1ba>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d104      	bne.n	80073b2 <HAL_TIM_OC_Stop_DMA+0x1b2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073b0:	e003      	b.n	80073ba <HAL_TIM_OC_Stop_DMA+0x1ba>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40014000 	.word	0x40014000
 80073cc:	40014400 	.word	0x40014400

080073d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e049      	b.n	8007476 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d106      	bne.n	80073fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7f9 fb74 	bl	8000ae4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3304      	adds	r3, #4
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f000 fdbc 	bl	8007f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2202      	movs	r2, #2
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6a1a      	ldr	r2, [r3, #32]
 8007494:	f241 1311 	movw	r3, #4369	; 0x1111
 8007498:	4013      	ands	r3, r2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10f      	bne.n	80074be <HAL_TIM_PWM_DeInit+0x40>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6a1a      	ldr	r2, [r3, #32]
 80074a4:	f240 4344 	movw	r3, #1092	; 0x444
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d107      	bne.n	80074be <HAL_TIM_PWM_DeInit+0x40>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0201 	bic.w	r2, r2, #1
 80074bc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7f9 fbdc 	bl	8000c7c <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d109      	bne.n	800755c <HAL_TIM_PWM_Start+0x24>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b01      	cmp	r3, #1
 8007552:	bf14      	ite	ne
 8007554:	2301      	movne	r3, #1
 8007556:	2300      	moveq	r3, #0
 8007558:	b2db      	uxtb	r3, r3
 800755a:	e03c      	b.n	80075d6 <HAL_TIM_PWM_Start+0x9e>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b04      	cmp	r3, #4
 8007560:	d109      	bne.n	8007576 <HAL_TIM_PWM_Start+0x3e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b01      	cmp	r3, #1
 800756c:	bf14      	ite	ne
 800756e:	2301      	movne	r3, #1
 8007570:	2300      	moveq	r3, #0
 8007572:	b2db      	uxtb	r3, r3
 8007574:	e02f      	b.n	80075d6 <HAL_TIM_PWM_Start+0x9e>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b08      	cmp	r3, #8
 800757a:	d109      	bne.n	8007590 <HAL_TIM_PWM_Start+0x58>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	bf14      	ite	ne
 8007588:	2301      	movne	r3, #1
 800758a:	2300      	moveq	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	e022      	b.n	80075d6 <HAL_TIM_PWM_Start+0x9e>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b0c      	cmp	r3, #12
 8007594:	d109      	bne.n	80075aa <HAL_TIM_PWM_Start+0x72>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	bf14      	ite	ne
 80075a2:	2301      	movne	r3, #1
 80075a4:	2300      	moveq	r3, #0
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	e015      	b.n	80075d6 <HAL_TIM_PWM_Start+0x9e>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d109      	bne.n	80075c4 <HAL_TIM_PWM_Start+0x8c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	bf14      	ite	ne
 80075bc:	2301      	movne	r3, #1
 80075be:	2300      	moveq	r3, #0
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	e008      	b.n	80075d6 <HAL_TIM_PWM_Start+0x9e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	bf14      	ite	ne
 80075d0:	2301      	movne	r3, #1
 80075d2:	2300      	moveq	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e07e      	b.n	80076dc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <HAL_TIM_PWM_Start+0xb6>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ec:	e023      	b.n	8007636 <HAL_TIM_PWM_Start+0xfe>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d104      	bne.n	80075fe <HAL_TIM_PWM_Start+0xc6>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075fc:	e01b      	b.n	8007636 <HAL_TIM_PWM_Start+0xfe>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b08      	cmp	r3, #8
 8007602:	d104      	bne.n	800760e <HAL_TIM_PWM_Start+0xd6>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800760c:	e013      	b.n	8007636 <HAL_TIM_PWM_Start+0xfe>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b0c      	cmp	r3, #12
 8007612:	d104      	bne.n	800761e <HAL_TIM_PWM_Start+0xe6>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800761c:	e00b      	b.n	8007636 <HAL_TIM_PWM_Start+0xfe>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b10      	cmp	r3, #16
 8007622:	d104      	bne.n	800762e <HAL_TIM_PWM_Start+0xf6>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800762c:	e003      	b.n	8007636 <HAL_TIM_PWM_Start+0xfe>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2202      	movs	r2, #2
 8007632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2201      	movs	r2, #1
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 ff86 	bl	8008550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a26      	ldr	r2, [pc, #152]	; (80076e4 <HAL_TIM_PWM_Start+0x1ac>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_TIM_PWM_Start+0x12a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a25      	ldr	r2, [pc, #148]	; (80076e8 <HAL_TIM_PWM_Start+0x1b0>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_TIM_PWM_Start+0x12a>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a23      	ldr	r2, [pc, #140]	; (80076ec <HAL_TIM_PWM_Start+0x1b4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d101      	bne.n	8007666 <HAL_TIM_PWM_Start+0x12e>
 8007662:	2301      	movs	r3, #1
 8007664:	e000      	b.n	8007668 <HAL_TIM_PWM_Start+0x130>
 8007666:	2300      	movs	r3, #0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d007      	beq.n	800767c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800767a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <HAL_TIM_PWM_Start+0x1ac>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_TIM_PWM_Start+0x162>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768e:	d004      	beq.n	800769a <HAL_TIM_PWM_Start+0x162>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <HAL_TIM_PWM_Start+0x1b0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d115      	bne.n	80076c6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	4b13      	ldr	r3, [pc, #76]	; (80076f0 <HAL_TIM_PWM_Start+0x1b8>)
 80076a2:	4013      	ands	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b06      	cmp	r3, #6
 80076aa:	d015      	beq.n	80076d8 <HAL_TIM_PWM_Start+0x1a0>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b2:	d011      	beq.n	80076d8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c4:	e008      	b.n	80076d8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0201 	orr.w	r2, r2, #1
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	e000      	b.n	80076da <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40014000 	.word	0x40014000
 80076ec:	40014400 	.word	0x40014400
 80076f0:	00010007 	.word	0x00010007

080076f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2200      	movs	r2, #0
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 ff22 	bl	8008550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a39      	ldr	r2, [pc, #228]	; (80077f8 <HAL_TIM_PWM_Stop+0x104>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d009      	beq.n	800772a <HAL_TIM_PWM_Stop+0x36>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a38      	ldr	r2, [pc, #224]	; (80077fc <HAL_TIM_PWM_Stop+0x108>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d004      	beq.n	800772a <HAL_TIM_PWM_Stop+0x36>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a36      	ldr	r2, [pc, #216]	; (8007800 <HAL_TIM_PWM_Stop+0x10c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d101      	bne.n	800772e <HAL_TIM_PWM_Stop+0x3a>
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <HAL_TIM_PWM_Stop+0x3c>
 800772e:	2300      	movs	r3, #0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d017      	beq.n	8007764 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6a1a      	ldr	r2, [r3, #32]
 800773a:	f241 1311 	movw	r3, #4369	; 0x1111
 800773e:	4013      	ands	r3, r2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10f      	bne.n	8007764 <HAL_TIM_PWM_Stop+0x70>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6a1a      	ldr	r2, [r3, #32]
 800774a:	f240 4344 	movw	r3, #1092	; 0x444
 800774e:	4013      	ands	r3, r2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d107      	bne.n	8007764 <HAL_TIM_PWM_Stop+0x70>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007762:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	f241 1311 	movw	r3, #4369	; 0x1111
 800776e:	4013      	ands	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10f      	bne.n	8007794 <HAL_TIM_PWM_Stop+0xa0>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6a1a      	ldr	r2, [r3, #32]
 800777a:	f240 4344 	movw	r3, #1092	; 0x444
 800777e:	4013      	ands	r3, r2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d107      	bne.n	8007794 <HAL_TIM_PWM_Stop+0xa0>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0201 	bic.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <HAL_TIM_PWM_Stop+0xb0>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077a2:	e023      	b.n	80077ec <HAL_TIM_PWM_Stop+0xf8>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d104      	bne.n	80077b4 <HAL_TIM_PWM_Stop+0xc0>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077b2:	e01b      	b.n	80077ec <HAL_TIM_PWM_Stop+0xf8>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b08      	cmp	r3, #8
 80077b8:	d104      	bne.n	80077c4 <HAL_TIM_PWM_Stop+0xd0>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077c2:	e013      	b.n	80077ec <HAL_TIM_PWM_Stop+0xf8>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b0c      	cmp	r3, #12
 80077c8:	d104      	bne.n	80077d4 <HAL_TIM_PWM_Stop+0xe0>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077d2:	e00b      	b.n	80077ec <HAL_TIM_PWM_Stop+0xf8>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d104      	bne.n	80077e4 <HAL_TIM_PWM_Stop+0xf0>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077e2:	e003      	b.n	80077ec <HAL_TIM_PWM_Stop+0xf8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	40012c00 	.word	0x40012c00
 80077fc:	40014000 	.word	0x40014000
 8007800:	40014400 	.word	0x40014400

08007804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b02      	cmp	r3, #2
 8007818:	d122      	bne.n	8007860 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b02      	cmp	r3, #2
 8007826:	d11b      	bne.n	8007860 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0202 	mvn.w	r2, #2
 8007830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fabb 	bl	8007dc2 <HAL_TIM_IC_CaptureCallback>
 800784c:	e005      	b.n	800785a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 faad 	bl	8007dae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7f8 fed7 	bl	8000608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f003 0304 	and.w	r3, r3, #4
 800786a:	2b04      	cmp	r3, #4
 800786c:	d122      	bne.n	80078b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b04      	cmp	r3, #4
 800787a:	d11b      	bne.n	80078b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0204 	mvn.w	r2, #4
 8007884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2202      	movs	r2, #2
 800788a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa91 	bl	8007dc2 <HAL_TIM_IC_CaptureCallback>
 80078a0:	e005      	b.n	80078ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa83 	bl	8007dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7f8 fead 	bl	8000608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	f003 0308 	and.w	r3, r3, #8
 80078be:	2b08      	cmp	r3, #8
 80078c0:	d122      	bne.n	8007908 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d11b      	bne.n	8007908 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0208 	mvn.w	r2, #8
 80078d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2204      	movs	r2, #4
 80078de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa67 	bl	8007dc2 <HAL_TIM_IC_CaptureCallback>
 80078f4:	e005      	b.n	8007902 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa59 	bl	8007dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7f8 fe83 	bl	8000608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	2b10      	cmp	r3, #16
 8007914:	d122      	bne.n	800795c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b10      	cmp	r3, #16
 8007922:	d11b      	bne.n	800795c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f06f 0210 	mvn.w	r2, #16
 800792c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2208      	movs	r2, #8
 8007932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa3d 	bl	8007dc2 <HAL_TIM_IC_CaptureCallback>
 8007948:	e005      	b.n	8007956 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fa2f 	bl	8007dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7f8 fe59 	bl	8000608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b01      	cmp	r3, #1
 8007968:	d10e      	bne.n	8007988 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b01      	cmp	r3, #1
 8007976:	d107      	bne.n	8007988 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f06f 0201 	mvn.w	r2, #1
 8007980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7f8 fe50 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007992:	2b80      	cmp	r3, #128	; 0x80
 8007994:	d10e      	bne.n	80079b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a0:	2b80      	cmp	r3, #128	; 0x80
 80079a2:	d107      	bne.n	80079b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fedc 	bl	800876c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c2:	d10e      	bne.n	80079e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ce:	2b80      	cmp	r3, #128	; 0x80
 80079d0:	d107      	bne.n	80079e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fecf 	bl	8008780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d10e      	bne.n	8007a0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fa:	2b40      	cmp	r3, #64	; 0x40
 80079fc:	d107      	bne.n	8007a0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f9e4 	bl	8007dd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d10e      	bne.n	8007a3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d107      	bne.n	8007a3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f06f 0220 	mvn.w	r2, #32
 8007a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fe8f 	bl	8008758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d101      	bne.n	8007a62 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e066      	b.n	8007b30 <HAL_TIM_OC_ConfigChannel+0xec>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b14      	cmp	r3, #20
 8007a6e:	d857      	bhi.n	8007b20 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007a70:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007acd 	.word	0x08007acd
 8007a7c:	08007b21 	.word	0x08007b21
 8007a80:	08007b21 	.word	0x08007b21
 8007a84:	08007b21 	.word	0x08007b21
 8007a88:	08007adb 	.word	0x08007adb
 8007a8c:	08007b21 	.word	0x08007b21
 8007a90:	08007b21 	.word	0x08007b21
 8007a94:	08007b21 	.word	0x08007b21
 8007a98:	08007ae9 	.word	0x08007ae9
 8007a9c:	08007b21 	.word	0x08007b21
 8007aa0:	08007b21 	.word	0x08007b21
 8007aa4:	08007b21 	.word	0x08007b21
 8007aa8:	08007af7 	.word	0x08007af7
 8007aac:	08007b21 	.word	0x08007b21
 8007ab0:	08007b21 	.word	0x08007b21
 8007ab4:	08007b21 	.word	0x08007b21
 8007ab8:	08007b05 	.word	0x08007b05
 8007abc:	08007b21 	.word	0x08007b21
 8007ac0:	08007b21 	.word	0x08007b21
 8007ac4:	08007b21 	.word	0x08007b21
 8007ac8:	08007b13 	.word	0x08007b13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68b9      	ldr	r1, [r7, #8]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 fabe 	bl	8008054 <TIM_OC1_SetConfig>
      break;
 8007ad8:	e025      	b.n	8007b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fb33 	bl	800814c <TIM_OC2_SetConfig>
      break;
 8007ae6:	e01e      	b.n	8007b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fba6 	bl	8008240 <TIM_OC3_SetConfig>
      break;
 8007af4:	e017      	b.n	8007b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fc17 	bl	8008330 <TIM_OC4_SetConfig>
      break;
 8007b02:	e010      	b.n	8007b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68b9      	ldr	r1, [r7, #8]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fc6e 	bl	80083ec <TIM_OC5_SetConfig>
      break;
 8007b10:	e009      	b.n	8007b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 fcbf 	bl	800849c <TIM_OC6_SetConfig>
      break;
 8007b1e:	e002      	b.n	8007b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	75fb      	strb	r3, [r7, #23]
      break;
 8007b24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d101      	bne.n	8007b56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b52:	2302      	movs	r3, #2
 8007b54:	e0ff      	b.n	8007d56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b14      	cmp	r3, #20
 8007b62:	f200 80f0 	bhi.w	8007d46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007bc1 	.word	0x08007bc1
 8007b70:	08007d47 	.word	0x08007d47
 8007b74:	08007d47 	.word	0x08007d47
 8007b78:	08007d47 	.word	0x08007d47
 8007b7c:	08007c01 	.word	0x08007c01
 8007b80:	08007d47 	.word	0x08007d47
 8007b84:	08007d47 	.word	0x08007d47
 8007b88:	08007d47 	.word	0x08007d47
 8007b8c:	08007c43 	.word	0x08007c43
 8007b90:	08007d47 	.word	0x08007d47
 8007b94:	08007d47 	.word	0x08007d47
 8007b98:	08007d47 	.word	0x08007d47
 8007b9c:	08007c83 	.word	0x08007c83
 8007ba0:	08007d47 	.word	0x08007d47
 8007ba4:	08007d47 	.word	0x08007d47
 8007ba8:	08007d47 	.word	0x08007d47
 8007bac:	08007cc5 	.word	0x08007cc5
 8007bb0:	08007d47 	.word	0x08007d47
 8007bb4:	08007d47 	.word	0x08007d47
 8007bb8:	08007d47 	.word	0x08007d47
 8007bbc:	08007d05 	.word	0x08007d05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68b9      	ldr	r1, [r7, #8]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fa44 	bl	8008054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f042 0208 	orr.w	r2, r2, #8
 8007bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0204 	bic.w	r2, r2, #4
 8007bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6999      	ldr	r1, [r3, #24]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	691a      	ldr	r2, [r3, #16]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	619a      	str	r2, [r3, #24]
      break;
 8007bfe:	e0a5      	b.n	8007d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 faa0 	bl	800814c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6999      	ldr	r1, [r3, #24]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	021a      	lsls	r2, r3, #8
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	619a      	str	r2, [r3, #24]
      break;
 8007c40:	e084      	b.n	8007d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68b9      	ldr	r1, [r7, #8]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 faf9 	bl	8008240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69da      	ldr	r2, [r3, #28]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f042 0208 	orr.w	r2, r2, #8
 8007c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69da      	ldr	r2, [r3, #28]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0204 	bic.w	r2, r2, #4
 8007c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69d9      	ldr	r1, [r3, #28]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	61da      	str	r2, [r3, #28]
      break;
 8007c80:	e064      	b.n	8007d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68b9      	ldr	r1, [r7, #8]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 fb51 	bl	8008330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69d9      	ldr	r1, [r3, #28]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	021a      	lsls	r2, r3, #8
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	61da      	str	r2, [r3, #28]
      break;
 8007cc2:	e043      	b.n	8007d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fb8e 	bl	80083ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0208 	orr.w	r2, r2, #8
 8007cde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 0204 	bic.w	r2, r2, #4
 8007cee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	691a      	ldr	r2, [r3, #16]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d02:	e023      	b.n	8007d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fbc6 	bl	800849c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	021a      	lsls	r2, r3, #8
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d44:	e002      	b.n	8007d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	75fb      	strb	r3, [r7, #23]
      break;
 8007d4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop

08007d60 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_TIM_GenerateEvent+0x18>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e014      	b.n	8007da2 <HAL_TIM_GenerateEvent+0x42>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d107      	bne.n	8007e12 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2201      	movs	r2, #1
 8007e06:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e10:	e02a      	b.n	8007e68 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d107      	bne.n	8007e2c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e2a:	e01d      	b.n	8007e68 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d107      	bne.n	8007e46 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2204      	movs	r2, #4
 8007e3a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e44:	e010      	b.n	8007e68 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d107      	bne.n	8007e60 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2208      	movs	r2, #8
 8007e54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e5e:	e003      	b.n	8007e68 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7f8 fbaf 	bl	80005cc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	771a      	strb	r2, [r3, #28]
}
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e88:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d10b      	bne.n	8007eac <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2201      	movs	r2, #1
 8007e98:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d136      	bne.n	8007f10 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eaa:	e031      	b.n	8007f10 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d10b      	bne.n	8007ece <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d125      	bne.n	8007f10 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ecc:	e020      	b.n	8007f10 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d10b      	bne.n	8007ef0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2204      	movs	r2, #4
 8007edc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d114      	bne.n	8007f10 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eee:	e00f      	b.n	8007f10 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d10a      	bne.n	8007f10 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2208      	movs	r2, #8
 8007efe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d103      	bne.n	8007f10 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7f8 fb79 	bl	8000608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	771a      	strb	r2, [r3, #28]
}
 8007f1c:	bf00      	nop
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d103      	bne.n	8007f44 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	771a      	strb	r2, [r3, #28]
 8007f42:	e019      	b.n	8007f78 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d103      	bne.n	8007f56 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2202      	movs	r2, #2
 8007f52:	771a      	strb	r2, [r3, #28]
 8007f54:	e010      	b.n	8007f78 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d103      	bne.n	8007f68 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2204      	movs	r2, #4
 8007f64:	771a      	strb	r2, [r3, #28]
 8007f66:	e007      	b.n	8007f78 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d102      	bne.n	8007f78 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2208      	movs	r2, #8
 8007f76:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7f8 fb37 	bl	80005ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	771a      	strb	r2, [r3, #28]
}
 8007f84:	bf00      	nop
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a2a      	ldr	r2, [pc, #168]	; (8008048 <TIM_Base_SetConfig+0xbc>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d003      	beq.n	8007fac <TIM_Base_SetConfig+0x20>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007faa:	d108      	bne.n	8007fbe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a21      	ldr	r2, [pc, #132]	; (8008048 <TIM_Base_SetConfig+0xbc>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00b      	beq.n	8007fde <TIM_Base_SetConfig+0x52>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fcc:	d007      	beq.n	8007fde <TIM_Base_SetConfig+0x52>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a1e      	ldr	r2, [pc, #120]	; (800804c <TIM_Base_SetConfig+0xc0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d003      	beq.n	8007fde <TIM_Base_SetConfig+0x52>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a1d      	ldr	r2, [pc, #116]	; (8008050 <TIM_Base_SetConfig+0xc4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d108      	bne.n	8007ff0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a0c      	ldr	r2, [pc, #48]	; (8008048 <TIM_Base_SetConfig+0xbc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d007      	beq.n	800802c <TIM_Base_SetConfig+0xa0>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a0b      	ldr	r2, [pc, #44]	; (800804c <TIM_Base_SetConfig+0xc0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d003      	beq.n	800802c <TIM_Base_SetConfig+0xa0>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a0a      	ldr	r2, [pc, #40]	; (8008050 <TIM_Base_SetConfig+0xc4>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d103      	bne.n	8008034 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	691a      	ldr	r2, [r3, #16]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	615a      	str	r2, [r3, #20]
}
 800803a:	bf00      	nop
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40012c00 	.word	0x40012c00
 800804c:	40014000 	.word	0x40014000
 8008050:	40014400 	.word	0x40014400

08008054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f023 0201 	bic.w	r2, r3, #1
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0303 	bic.w	r3, r3, #3
 800808e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f023 0302 	bic.w	r3, r3, #2
 80080a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a24      	ldr	r2, [pc, #144]	; (8008140 <TIM_OC1_SetConfig+0xec>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d007      	beq.n	80080c4 <TIM_OC1_SetConfig+0x70>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a23      	ldr	r2, [pc, #140]	; (8008144 <TIM_OC1_SetConfig+0xf0>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d003      	beq.n	80080c4 <TIM_OC1_SetConfig+0x70>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a22      	ldr	r2, [pc, #136]	; (8008148 <TIM_OC1_SetConfig+0xf4>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d10c      	bne.n	80080de <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f023 0308 	bic.w	r3, r3, #8
 80080ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f023 0304 	bic.w	r3, r3, #4
 80080dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a17      	ldr	r2, [pc, #92]	; (8008140 <TIM_OC1_SetConfig+0xec>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d007      	beq.n	80080f6 <TIM_OC1_SetConfig+0xa2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a16      	ldr	r2, [pc, #88]	; (8008144 <TIM_OC1_SetConfig+0xf0>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d003      	beq.n	80080f6 <TIM_OC1_SetConfig+0xa2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a15      	ldr	r2, [pc, #84]	; (8008148 <TIM_OC1_SetConfig+0xf4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d111      	bne.n	800811a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	4313      	orrs	r3, r2
 800810e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4313      	orrs	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	621a      	str	r2, [r3, #32]
}
 8008134:	bf00      	nop
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	40012c00 	.word	0x40012c00
 8008144:	40014000 	.word	0x40014000
 8008148:	40014400 	.word	0x40014400

0800814c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	f023 0210 	bic.w	r2, r3, #16
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800817a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800817e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f023 0320 	bic.w	r3, r3, #32
 800819a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a22      	ldr	r2, [pc, #136]	; (8008234 <TIM_OC2_SetConfig+0xe8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d10d      	bne.n	80081cc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a19      	ldr	r2, [pc, #100]	; (8008234 <TIM_OC2_SetConfig+0xe8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d007      	beq.n	80081e4 <TIM_OC2_SetConfig+0x98>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a18      	ldr	r2, [pc, #96]	; (8008238 <TIM_OC2_SetConfig+0xec>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_OC2_SetConfig+0x98>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a17      	ldr	r2, [pc, #92]	; (800823c <TIM_OC2_SetConfig+0xf0>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d113      	bne.n	800820c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	4313      	orrs	r3, r2
 800820a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40014000 	.word	0x40014000
 800823c:	40014400 	.word	0x40014400

08008240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800826e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0303 	bic.w	r3, r3, #3
 800827a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800828c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	021b      	lsls	r3, r3, #8
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a21      	ldr	r2, [pc, #132]	; (8008324 <TIM_OC3_SetConfig+0xe4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d10d      	bne.n	80082be <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a18      	ldr	r2, [pc, #96]	; (8008324 <TIM_OC3_SetConfig+0xe4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d007      	beq.n	80082d6 <TIM_OC3_SetConfig+0x96>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a17      	ldr	r2, [pc, #92]	; (8008328 <TIM_OC3_SetConfig+0xe8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_OC3_SetConfig+0x96>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a16      	ldr	r2, [pc, #88]	; (800832c <TIM_OC3_SetConfig+0xec>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d113      	bne.n	80082fe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	621a      	str	r2, [r3, #32]
}
 8008318:	bf00      	nop
 800831a:	371c      	adds	r7, #28
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	40012c00 	.word	0x40012c00
 8008328:	40014000 	.word	0x40014000
 800832c:	40014400 	.word	0x40014400

08008330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800835e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800836a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4313      	orrs	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800837e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	031b      	lsls	r3, r3, #12
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	4313      	orrs	r3, r2
 800838a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <TIM_OC4_SetConfig+0xb0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d007      	beq.n	80083a4 <TIM_OC4_SetConfig+0x74>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a13      	ldr	r2, [pc, #76]	; (80083e4 <TIM_OC4_SetConfig+0xb4>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d003      	beq.n	80083a4 <TIM_OC4_SetConfig+0x74>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a12      	ldr	r2, [pc, #72]	; (80083e8 <TIM_OC4_SetConfig+0xb8>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d109      	bne.n	80083b8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	019b      	lsls	r3, r3, #6
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	621a      	str	r2, [r3, #32]
}
 80083d2:	bf00      	nop
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	40012c00 	.word	0x40012c00
 80083e4:	40014000 	.word	0x40014000
 80083e8:	40014400 	.word	0x40014400

080083ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b087      	sub	sp, #28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800841a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	041b      	lsls	r3, r3, #16
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	4313      	orrs	r3, r2
 800843c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a13      	ldr	r2, [pc, #76]	; (8008490 <TIM_OC5_SetConfig+0xa4>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d007      	beq.n	8008456 <TIM_OC5_SetConfig+0x6a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a12      	ldr	r2, [pc, #72]	; (8008494 <TIM_OC5_SetConfig+0xa8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_OC5_SetConfig+0x6a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a11      	ldr	r2, [pc, #68]	; (8008498 <TIM_OC5_SetConfig+0xac>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d109      	bne.n	800846a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800845c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	021b      	lsls	r3, r3, #8
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	621a      	str	r2, [r3, #32]
}
 8008484:	bf00      	nop
 8008486:	371c      	adds	r7, #28
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	40012c00 	.word	0x40012c00
 8008494:	40014000 	.word	0x40014000
 8008498:	40014400 	.word	0x40014400

0800849c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	051b      	lsls	r3, r3, #20
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a14      	ldr	r2, [pc, #80]	; (8008544 <TIM_OC6_SetConfig+0xa8>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d007      	beq.n	8008508 <TIM_OC6_SetConfig+0x6c>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a13      	ldr	r2, [pc, #76]	; (8008548 <TIM_OC6_SetConfig+0xac>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d003      	beq.n	8008508 <TIM_OC6_SetConfig+0x6c>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a12      	ldr	r2, [pc, #72]	; (800854c <TIM_OC6_SetConfig+0xb0>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d109      	bne.n	800851c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800850e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	029b      	lsls	r3, r3, #10
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	4313      	orrs	r3, r2
 800851a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	621a      	str	r2, [r3, #32]
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	40012c00 	.word	0x40012c00
 8008548:	40014000 	.word	0x40014000
 800854c:	40014400 	.word	0x40014400

08008550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 031f 	and.w	r3, r3, #31
 8008562:	2201      	movs	r2, #1
 8008564:	fa02 f303 	lsl.w	r3, r2, r3
 8008568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a1a      	ldr	r2, [r3, #32]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	43db      	mvns	r3, r3
 8008572:	401a      	ands	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6a1a      	ldr	r2, [r3, #32]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f003 031f 	and.w	r3, r3, #31
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	fa01 f303 	lsl.w	r3, r1, r3
 8008588:	431a      	orrs	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	621a      	str	r2, [r3, #32]
}
 800858e:	bf00      	nop
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
	...

0800859c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d101      	bne.n	80085b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085b0:	2302      	movs	r3, #2
 80085b2:	e04f      	b.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a21      	ldr	r2, [pc, #132]	; (8008660 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d108      	bne.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a14      	ldr	r2, [pc, #80]	; (8008660 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d009      	beq.n	8008628 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861c:	d004      	beq.n	8008628 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a10      	ldr	r2, [pc, #64]	; (8008664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d10c      	bne.n	8008642 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800862e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	4313      	orrs	r3, r2
 8008638:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	40012c00 	.word	0x40012c00
 8008664:	40014000 	.word	0x40014000

08008668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008680:	2302      	movs	r3, #2
 8008682:	e060      	b.n	8008746 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	4313      	orrs	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a14      	ldr	r2, [pc, #80]	; (8008754 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d115      	bne.n	8008734 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	051b      	lsls	r3, r3, #20
 8008714:	4313      	orrs	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40012c00 	.word	0x40012c00

08008758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e040      	b.n	8008828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d106      	bne.n	80087bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7f8 fa98 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2224      	movs	r2, #36	; 0x24
 80087c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0201 	bic.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fb9e 	bl	8008f14 <UART_SetConfig>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d101      	bne.n	80087e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e022      	b.n	8008828 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fdec 	bl	80093c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800880e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f042 0201 	orr.w	r2, r2, #1
 800881e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fe73 	bl	800950c <UART_CheckIdleState>
 8008826:	4603      	mov	r3, r0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	; 0x28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	4613      	mov	r3, r2
 800883c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008842:	2b20      	cmp	r3, #32
 8008844:	d178      	bne.n	8008938 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <HAL_UART_Transmit_DMA+0x22>
 800884c:	88fb      	ldrh	r3, [r7, #6]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e071      	b.n	800893a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_UART_Transmit_DMA+0x34>
 8008860:	2302      	movs	r3, #2
 8008862:	e06a      	b.n	800893a <HAL_UART_Transmit_DMA+0x10a>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	88fa      	ldrh	r2, [r7, #6]
 8008876:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	88fa      	ldrh	r2, [r7, #6]
 800887e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2221      	movs	r2, #33	; 0x21
 800888e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008894:	2b00      	cmp	r3, #0
 8008896:	d02b      	beq.n	80088f0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889c:	4a29      	ldr	r2, [pc, #164]	; (8008944 <HAL_UART_Transmit_DMA+0x114>)
 800889e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a4:	4a28      	ldr	r2, [pc, #160]	; (8008948 <HAL_UART_Transmit_DMA+0x118>)
 80088a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ac:	4a27      	ldr	r2, [pc, #156]	; (800894c <HAL_UART_Transmit_DMA+0x11c>)
 80088ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b4:	2200      	movs	r2, #0
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c0:	4619      	mov	r1, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3328      	adds	r3, #40	; 0x28
 80088c8:	461a      	mov	r2, r3
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	f7fc fc84 	bl	80051d8 <HAL_DMA_Start_IT>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00c      	beq.n	80088f0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2210      	movs	r2, #16
 80088da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2220      	movs	r2, #32
 80088ea:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e024      	b.n	800893a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2240      	movs	r2, #64	; 0x40
 80088f6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3308      	adds	r3, #8
 8008906:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	613b      	str	r3, [r7, #16]
   return(result);
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3308      	adds	r3, #8
 800891e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008920:	623a      	str	r2, [r7, #32]
 8008922:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	69f9      	ldr	r1, [r7, #28]
 8008926:	6a3a      	ldr	r2, [r7, #32]
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	61bb      	str	r3, [r7, #24]
   return(result);
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e5      	bne.n	8008900 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	e000      	b.n	800893a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008938:	2302      	movs	r3, #2
  }
}
 800893a:	4618      	mov	r0, r3
 800893c:	3728      	adds	r7, #40	; 0x28
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	08009987 	.word	0x08009987
 8008948:	08009a21 	.word	0x08009a21
 800894c:	08009b99 	.word	0x08009b99

08008950 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b0ba      	sub	sp, #232	; 0xe8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008976:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800897a:	f640 030f 	movw	r3, #2063	; 0x80f
 800897e:	4013      	ands	r3, r2
 8008980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008988:	2b00      	cmp	r3, #0
 800898a:	d115      	bne.n	80089b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800898c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008990:	f003 0320 	and.w	r3, r3, #32
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00f      	beq.n	80089b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d009      	beq.n	80089b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 82a6 	beq.w	8008efa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
      }
      return;
 80089b6:	e2a0      	b.n	8008efa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80089b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 8117 	beq.w	8008bf0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80089c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d106      	bne.n	80089dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80089ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80089d2:	4b85      	ldr	r3, [pc, #532]	; (8008be8 <HAL_UART_IRQHandler+0x298>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 810a 	beq.w	8008bf0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d011      	beq.n	8008a0c <HAL_UART_IRQHandler+0xbc>
 80089e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2201      	movs	r2, #1
 80089fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a02:	f043 0201 	orr.w	r2, r3, #1
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a10:	f003 0302 	and.w	r3, r3, #2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d011      	beq.n	8008a3c <HAL_UART_IRQHandler+0xec>
 8008a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00b      	beq.n	8008a3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a32:	f043 0204 	orr.w	r2, r3, #4
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d011      	beq.n	8008a6c <HAL_UART_IRQHandler+0x11c>
 8008a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00b      	beq.n	8008a6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2204      	movs	r2, #4
 8008a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a62:	f043 0202 	orr.w	r2, r3, #2
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a70:	f003 0308 	and.w	r3, r3, #8
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d017      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a7c:	f003 0320 	and.w	r3, r3, #32
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d105      	bne.n	8008a90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2208      	movs	r2, #8
 8008a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a9e:	f043 0208 	orr.w	r2, r3, #8
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d012      	beq.n	8008ada <HAL_UART_IRQHandler+0x18a>
 8008ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ab8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00c      	beq.n	8008ada <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ac8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ad0:	f043 0220 	orr.w	r2, r3, #32
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 820c 	beq.w	8008efe <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aea:	f003 0320 	and.w	r3, r3, #32
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00d      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af6:	f003 0320 	and.w	r3, r3, #32
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b22:	2b40      	cmp	r3, #64	; 0x40
 8008b24:	d005      	beq.n	8008b32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d04f      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fec4 	bl	80098c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b42:	2b40      	cmp	r3, #64	; 0x40
 8008b44:	d141      	bne.n	8008bca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1d9      	bne.n	8008b46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d013      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9e:	4a13      	ldr	r2, [pc, #76]	; (8008bec <HAL_UART_IRQHandler+0x29c>)
 8008ba0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fc fbb4 	bl	8005314 <HAL_DMA_Abort_IT>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d017      	beq.n	8008be2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc0:	e00f      	b.n	8008be2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7f9 fc36 	bl	8002434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc8:	e00b      	b.n	8008be2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7f9 fc32 	bl	8002434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd0:	e007      	b.n	8008be2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7f9 fc2e 	bl	8002434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008be0:	e18d      	b.n	8008efe <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be2:	bf00      	nop
    return;
 8008be4:	e18b      	b.n	8008efe <HAL_UART_IRQHandler+0x5ae>
 8008be6:	bf00      	nop
 8008be8:	04000120 	.word	0x04000120
 8008bec:	08009c15 	.word	0x08009c15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	f040 8146 	bne.w	8008e86 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bfe:	f003 0310 	and.w	r3, r3, #16
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 813f 	beq.w	8008e86 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c0c:	f003 0310 	and.w	r3, r3, #16
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 8138 	beq.w	8008e86 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2210      	movs	r2, #16
 8008c1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c28:	2b40      	cmp	r3, #64	; 0x40
 8008c2a:	f040 80b4 	bne.w	8008d96 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 815f 	beq.w	8008f02 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	f080 8157 	bcs.w	8008f02 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f040 8085 	bne.w	8008d7a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ca6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1da      	bne.n	8008c70 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3308      	adds	r3, #8
 8008cc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ccc:	f023 0301 	bic.w	r3, r3, #1
 8008cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ce6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e1      	bne.n	8008cba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3308      	adds	r3, #8
 8008d16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e3      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d4a:	f023 0310 	bic.w	r3, r3, #16
 8008d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e4      	bne.n	8008d3a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fc fa8f 	bl	8005298 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7f9 fab4 	bl	80022fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d94:	e0b5      	b.n	8008f02 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 80a7 	beq.w	8008f06 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80a2 	beq.w	8008f06 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	e853 3f00 	ldrex	r3, [r3]
 8008dce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008de4:	647b      	str	r3, [r7, #68]	; 0x44
 8008de6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dec:	e841 2300 	strex	r3, r2, [r1]
 8008df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1e4      	bne.n	8008dc2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	e853 3f00 	ldrex	r3, [r3]
 8008e06:	623b      	str	r3, [r7, #32]
   return(result);
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	f023 0301 	bic.w	r3, r3, #1
 8008e0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3308      	adds	r3, #8
 8008e18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e1c:	633a      	str	r2, [r7, #48]	; 0x30
 8008e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e24:	e841 2300 	strex	r3, r2, [r1]
 8008e28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e3      	bne.n	8008df8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2220      	movs	r2, #32
 8008e34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	e853 3f00 	ldrex	r3, [r3]
 8008e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 0310 	bic.w	r3, r3, #16
 8008e56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e68:	69b9      	ldr	r1, [r7, #24]
 8008e6a:	69fa      	ldr	r2, [r7, #28]
 8008e6c:	e841 2300 	strex	r3, r2, [r1]
 8008e70:	617b      	str	r3, [r7, #20]
   return(result);
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e4      	bne.n	8008e42 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7f9 fa3c 	bl	80022fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e84:	e03f      	b.n	8008f06 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00e      	beq.n	8008eb0 <HAL_UART_IRQHandler+0x560>
 8008e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d008      	beq.n	8008eb0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008ea6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fef3 	bl	8009c94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008eae:	e02d      	b.n	8008f0c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00e      	beq.n	8008eda <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d008      	beq.n	8008eda <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d01c      	beq.n	8008f0a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	4798      	blx	r3
    }
    return;
 8008ed8:	e017      	b.n	8008f0a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d012      	beq.n	8008f0c <HAL_UART_IRQHandler+0x5bc>
 8008ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00c      	beq.n	8008f0c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fea4 	bl	8009c40 <UART_EndTransmit_IT>
    return;
 8008ef8:	e008      	b.n	8008f0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8008efa:	bf00      	nop
 8008efc:	e006      	b.n	8008f0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8008efe:	bf00      	nop
 8008f00:	e004      	b.n	8008f0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8008f02:	bf00      	nop
 8008f04:	e002      	b.n	8008f0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8008f06:	bf00      	nop
 8008f08:	e000      	b.n	8008f0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8008f0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008f0c:	37e8      	adds	r7, #232	; 0xe8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop

08008f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f18:	b08a      	sub	sp, #40	; 0x28
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	431a      	orrs	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	4b9e      	ldr	r3, [pc, #632]	; (80091bc <UART_SetConfig+0x2a8>)
 8008f44:	4013      	ands	r3, r2
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	6812      	ldr	r2, [r2, #0]
 8008f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a93      	ldr	r2, [pc, #588]	; (80091c0 <UART_SetConfig+0x2ac>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d004      	beq.n	8008f80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f90:	430a      	orrs	r2, r1
 8008f92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a8a      	ldr	r2, [pc, #552]	; (80091c4 <UART_SetConfig+0x2b0>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d126      	bne.n	8008fec <UART_SetConfig+0xd8>
 8008f9e:	4b8a      	ldr	r3, [pc, #552]	; (80091c8 <UART_SetConfig+0x2b4>)
 8008fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa4:	f003 0303 	and.w	r3, r3, #3
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d81b      	bhi.n	8008fe4 <UART_SetConfig+0xd0>
 8008fac:	a201      	add	r2, pc, #4	; (adr r2, 8008fb4 <UART_SetConfig+0xa0>)
 8008fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb2:	bf00      	nop
 8008fb4:	08008fc5 	.word	0x08008fc5
 8008fb8:	08008fd5 	.word	0x08008fd5
 8008fbc:	08008fcd 	.word	0x08008fcd
 8008fc0:	08008fdd 	.word	0x08008fdd
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fca:	e0ab      	b.n	8009124 <UART_SetConfig+0x210>
 8008fcc:	2302      	movs	r3, #2
 8008fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fd2:	e0a7      	b.n	8009124 <UART_SetConfig+0x210>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fda:	e0a3      	b.n	8009124 <UART_SetConfig+0x210>
 8008fdc:	2308      	movs	r3, #8
 8008fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fe2:	e09f      	b.n	8009124 <UART_SetConfig+0x210>
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fea:	e09b      	b.n	8009124 <UART_SetConfig+0x210>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a76      	ldr	r2, [pc, #472]	; (80091cc <UART_SetConfig+0x2b8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d138      	bne.n	8009068 <UART_SetConfig+0x154>
 8008ff6:	4b74      	ldr	r3, [pc, #464]	; (80091c8 <UART_SetConfig+0x2b4>)
 8008ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffc:	f003 030c 	and.w	r3, r3, #12
 8009000:	2b0c      	cmp	r3, #12
 8009002:	d82d      	bhi.n	8009060 <UART_SetConfig+0x14c>
 8009004:	a201      	add	r2, pc, #4	; (adr r2, 800900c <UART_SetConfig+0xf8>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	08009041 	.word	0x08009041
 8009010:	08009061 	.word	0x08009061
 8009014:	08009061 	.word	0x08009061
 8009018:	08009061 	.word	0x08009061
 800901c:	08009051 	.word	0x08009051
 8009020:	08009061 	.word	0x08009061
 8009024:	08009061 	.word	0x08009061
 8009028:	08009061 	.word	0x08009061
 800902c:	08009049 	.word	0x08009049
 8009030:	08009061 	.word	0x08009061
 8009034:	08009061 	.word	0x08009061
 8009038:	08009061 	.word	0x08009061
 800903c:	08009059 	.word	0x08009059
 8009040:	2300      	movs	r3, #0
 8009042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009046:	e06d      	b.n	8009124 <UART_SetConfig+0x210>
 8009048:	2302      	movs	r3, #2
 800904a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800904e:	e069      	b.n	8009124 <UART_SetConfig+0x210>
 8009050:	2304      	movs	r3, #4
 8009052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009056:	e065      	b.n	8009124 <UART_SetConfig+0x210>
 8009058:	2308      	movs	r3, #8
 800905a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800905e:	e061      	b.n	8009124 <UART_SetConfig+0x210>
 8009060:	2310      	movs	r3, #16
 8009062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009066:	e05d      	b.n	8009124 <UART_SetConfig+0x210>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a58      	ldr	r2, [pc, #352]	; (80091d0 <UART_SetConfig+0x2bc>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d125      	bne.n	80090be <UART_SetConfig+0x1aa>
 8009072:	4b55      	ldr	r3, [pc, #340]	; (80091c8 <UART_SetConfig+0x2b4>)
 8009074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009078:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800907c:	2b30      	cmp	r3, #48	; 0x30
 800907e:	d016      	beq.n	80090ae <UART_SetConfig+0x19a>
 8009080:	2b30      	cmp	r3, #48	; 0x30
 8009082:	d818      	bhi.n	80090b6 <UART_SetConfig+0x1a2>
 8009084:	2b20      	cmp	r3, #32
 8009086:	d00a      	beq.n	800909e <UART_SetConfig+0x18a>
 8009088:	2b20      	cmp	r3, #32
 800908a:	d814      	bhi.n	80090b6 <UART_SetConfig+0x1a2>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <UART_SetConfig+0x182>
 8009090:	2b10      	cmp	r3, #16
 8009092:	d008      	beq.n	80090a6 <UART_SetConfig+0x192>
 8009094:	e00f      	b.n	80090b6 <UART_SetConfig+0x1a2>
 8009096:	2300      	movs	r3, #0
 8009098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800909c:	e042      	b.n	8009124 <UART_SetConfig+0x210>
 800909e:	2302      	movs	r3, #2
 80090a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090a4:	e03e      	b.n	8009124 <UART_SetConfig+0x210>
 80090a6:	2304      	movs	r3, #4
 80090a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ac:	e03a      	b.n	8009124 <UART_SetConfig+0x210>
 80090ae:	2308      	movs	r3, #8
 80090b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090b4:	e036      	b.n	8009124 <UART_SetConfig+0x210>
 80090b6:	2310      	movs	r3, #16
 80090b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090bc:	e032      	b.n	8009124 <UART_SetConfig+0x210>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a3f      	ldr	r2, [pc, #252]	; (80091c0 <UART_SetConfig+0x2ac>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d12a      	bne.n	800911e <UART_SetConfig+0x20a>
 80090c8:	4b3f      	ldr	r3, [pc, #252]	; (80091c8 <UART_SetConfig+0x2b4>)
 80090ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80090d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090d6:	d01a      	beq.n	800910e <UART_SetConfig+0x1fa>
 80090d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090dc:	d81b      	bhi.n	8009116 <UART_SetConfig+0x202>
 80090de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090e2:	d00c      	beq.n	80090fe <UART_SetConfig+0x1ea>
 80090e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090e8:	d815      	bhi.n	8009116 <UART_SetConfig+0x202>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <UART_SetConfig+0x1e2>
 80090ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f2:	d008      	beq.n	8009106 <UART_SetConfig+0x1f2>
 80090f4:	e00f      	b.n	8009116 <UART_SetConfig+0x202>
 80090f6:	2300      	movs	r3, #0
 80090f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090fc:	e012      	b.n	8009124 <UART_SetConfig+0x210>
 80090fe:	2302      	movs	r3, #2
 8009100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009104:	e00e      	b.n	8009124 <UART_SetConfig+0x210>
 8009106:	2304      	movs	r3, #4
 8009108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800910c:	e00a      	b.n	8009124 <UART_SetConfig+0x210>
 800910e:	2308      	movs	r3, #8
 8009110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009114:	e006      	b.n	8009124 <UART_SetConfig+0x210>
 8009116:	2310      	movs	r3, #16
 8009118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800911c:	e002      	b.n	8009124 <UART_SetConfig+0x210>
 800911e:	2310      	movs	r3, #16
 8009120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a25      	ldr	r2, [pc, #148]	; (80091c0 <UART_SetConfig+0x2ac>)
 800912a:	4293      	cmp	r3, r2
 800912c:	f040 808a 	bne.w	8009244 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009130:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009134:	2b08      	cmp	r3, #8
 8009136:	d824      	bhi.n	8009182 <UART_SetConfig+0x26e>
 8009138:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <UART_SetConfig+0x22c>)
 800913a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913e:	bf00      	nop
 8009140:	08009165 	.word	0x08009165
 8009144:	08009183 	.word	0x08009183
 8009148:	0800916d 	.word	0x0800916d
 800914c:	08009183 	.word	0x08009183
 8009150:	08009173 	.word	0x08009173
 8009154:	08009183 	.word	0x08009183
 8009158:	08009183 	.word	0x08009183
 800915c:	08009183 	.word	0x08009183
 8009160:	0800917b 	.word	0x0800917b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009164:	f7fd fae0 	bl	8006728 <HAL_RCC_GetPCLK1Freq>
 8009168:	61f8      	str	r0, [r7, #28]
        break;
 800916a:	e010      	b.n	800918e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800916c:	4b19      	ldr	r3, [pc, #100]	; (80091d4 <UART_SetConfig+0x2c0>)
 800916e:	61fb      	str	r3, [r7, #28]
        break;
 8009170:	e00d      	b.n	800918e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009172:	f7fd fa41 	bl	80065f8 <HAL_RCC_GetSysClockFreq>
 8009176:	61f8      	str	r0, [r7, #28]
        break;
 8009178:	e009      	b.n	800918e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800917a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800917e:	61fb      	str	r3, [r7, #28]
        break;
 8009180:	e005      	b.n	800918e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800918c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 8109 	beq.w	80093a8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	4613      	mov	r3, r2
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	4413      	add	r3, r2
 80091a0:	69fa      	ldr	r2, [r7, #28]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d305      	bcc.n	80091b2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d912      	bls.n	80091d8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80091b8:	e0f6      	b.n	80093a8 <UART_SetConfig+0x494>
 80091ba:	bf00      	nop
 80091bc:	efff69f3 	.word	0xefff69f3
 80091c0:	40008000 	.word	0x40008000
 80091c4:	40013800 	.word	0x40013800
 80091c8:	40021000 	.word	0x40021000
 80091cc:	40004400 	.word	0x40004400
 80091d0:	40004800 	.word	0x40004800
 80091d4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	2200      	movs	r2, #0
 80091dc:	461c      	mov	r4, r3
 80091de:	4615      	mov	r5, r2
 80091e0:	f04f 0200 	mov.w	r2, #0
 80091e4:	f04f 0300 	mov.w	r3, #0
 80091e8:	022b      	lsls	r3, r5, #8
 80091ea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80091ee:	0222      	lsls	r2, r4, #8
 80091f0:	68f9      	ldr	r1, [r7, #12]
 80091f2:	6849      	ldr	r1, [r1, #4]
 80091f4:	0849      	lsrs	r1, r1, #1
 80091f6:	2000      	movs	r0, #0
 80091f8:	4688      	mov	r8, r1
 80091fa:	4681      	mov	r9, r0
 80091fc:	eb12 0a08 	adds.w	sl, r2, r8
 8009200:	eb43 0b09 	adc.w	fp, r3, r9
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009212:	4650      	mov	r0, sl
 8009214:	4659      	mov	r1, fp
 8009216:	f7f7 f82b 	bl	8000270 <__aeabi_uldivmod>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4613      	mov	r3, r2
 8009220:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009228:	d308      	bcc.n	800923c <UART_SetConfig+0x328>
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009230:	d204      	bcs.n	800923c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	60da      	str	r2, [r3, #12]
 800923a:	e0b5      	b.n	80093a8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009242:	e0b1      	b.n	80093a8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800924c:	d15d      	bne.n	800930a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800924e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009252:	2b08      	cmp	r3, #8
 8009254:	d827      	bhi.n	80092a6 <UART_SetConfig+0x392>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <UART_SetConfig+0x348>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009281 	.word	0x08009281
 8009260:	08009289 	.word	0x08009289
 8009264:	08009291 	.word	0x08009291
 8009268:	080092a7 	.word	0x080092a7
 800926c:	08009297 	.word	0x08009297
 8009270:	080092a7 	.word	0x080092a7
 8009274:	080092a7 	.word	0x080092a7
 8009278:	080092a7 	.word	0x080092a7
 800927c:	0800929f 	.word	0x0800929f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009280:	f7fd fa52 	bl	8006728 <HAL_RCC_GetPCLK1Freq>
 8009284:	61f8      	str	r0, [r7, #28]
        break;
 8009286:	e014      	b.n	80092b2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009288:	f7fd fa64 	bl	8006754 <HAL_RCC_GetPCLK2Freq>
 800928c:	61f8      	str	r0, [r7, #28]
        break;
 800928e:	e010      	b.n	80092b2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009290:	4b4c      	ldr	r3, [pc, #304]	; (80093c4 <UART_SetConfig+0x4b0>)
 8009292:	61fb      	str	r3, [r7, #28]
        break;
 8009294:	e00d      	b.n	80092b2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009296:	f7fd f9af 	bl	80065f8 <HAL_RCC_GetSysClockFreq>
 800929a:	61f8      	str	r0, [r7, #28]
        break;
 800929c:	e009      	b.n	80092b2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800929e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092a2:	61fb      	str	r3, [r7, #28]
        break;
 80092a4:	e005      	b.n	80092b2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80092b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d077      	beq.n	80093a8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	005a      	lsls	r2, r3, #1
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	085b      	lsrs	r3, r3, #1
 80092c2:	441a      	add	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b0f      	cmp	r3, #15
 80092d2:	d916      	bls.n	8009302 <UART_SetConfig+0x3ee>
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092da:	d212      	bcs.n	8009302 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	f023 030f 	bic.w	r3, r3, #15
 80092e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	085b      	lsrs	r3, r3, #1
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	f003 0307 	and.w	r3, r3, #7
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	8afb      	ldrh	r3, [r7, #22]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	8afa      	ldrh	r2, [r7, #22]
 80092fe:	60da      	str	r2, [r3, #12]
 8009300:	e052      	b.n	80093a8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009308:	e04e      	b.n	80093a8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800930a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800930e:	2b08      	cmp	r3, #8
 8009310:	d827      	bhi.n	8009362 <UART_SetConfig+0x44e>
 8009312:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <UART_SetConfig+0x404>)
 8009314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009318:	0800933d 	.word	0x0800933d
 800931c:	08009345 	.word	0x08009345
 8009320:	0800934d 	.word	0x0800934d
 8009324:	08009363 	.word	0x08009363
 8009328:	08009353 	.word	0x08009353
 800932c:	08009363 	.word	0x08009363
 8009330:	08009363 	.word	0x08009363
 8009334:	08009363 	.word	0x08009363
 8009338:	0800935b 	.word	0x0800935b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800933c:	f7fd f9f4 	bl	8006728 <HAL_RCC_GetPCLK1Freq>
 8009340:	61f8      	str	r0, [r7, #28]
        break;
 8009342:	e014      	b.n	800936e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009344:	f7fd fa06 	bl	8006754 <HAL_RCC_GetPCLK2Freq>
 8009348:	61f8      	str	r0, [r7, #28]
        break;
 800934a:	e010      	b.n	800936e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800934c:	4b1d      	ldr	r3, [pc, #116]	; (80093c4 <UART_SetConfig+0x4b0>)
 800934e:	61fb      	str	r3, [r7, #28]
        break;
 8009350:	e00d      	b.n	800936e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009352:	f7fd f951 	bl	80065f8 <HAL_RCC_GetSysClockFreq>
 8009356:	61f8      	str	r0, [r7, #28]
        break;
 8009358:	e009      	b.n	800936e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800935a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800935e:	61fb      	str	r3, [r7, #28]
        break;
 8009360:	e005      	b.n	800936e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800936c:	bf00      	nop
    }

    if (pclk != 0U)
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d019      	beq.n	80093a8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	085a      	lsrs	r2, r3, #1
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	441a      	add	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	fbb2 f3f3 	udiv	r3, r2, r3
 8009386:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	2b0f      	cmp	r3, #15
 800938c:	d909      	bls.n	80093a2 <UART_SetConfig+0x48e>
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009394:	d205      	bcs.n	80093a2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	b29a      	uxth	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60da      	str	r2, [r3, #12]
 80093a0:	e002      	b.n	80093a8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80093b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3728      	adds	r7, #40	; 0x28
 80093bc:	46bd      	mov	sp, r7
 80093be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093c2:	bf00      	nop
 80093c4:	00f42400 	.word	0x00f42400

080093c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00a      	beq.n	80093f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00a      	beq.n	8009414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	430a      	orrs	r2, r1
 8009412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009418:	f003 0304 	and.w	r3, r3, #4
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00a      	beq.n	8009436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	430a      	orrs	r2, r1
 8009434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	f003 0308 	and.w	r3, r3, #8
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00a      	beq.n	8009458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	f003 0310 	and.w	r3, r3, #16
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00a      	beq.n	800947a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	f003 0320 	and.w	r3, r3, #32
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	430a      	orrs	r2, r1
 800949a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d01a      	beq.n	80094de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094c6:	d10a      	bne.n	80094de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	430a      	orrs	r2, r1
 80094dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00a      	beq.n	8009500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	430a      	orrs	r2, r1
 80094fe:	605a      	str	r2, [r3, #4]
  }
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af02      	add	r7, sp, #8
 8009512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800951c:	f7f9 f994 	bl	8002848 <HAL_GetTick>
 8009520:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0308 	and.w	r3, r3, #8
 800952c:	2b08      	cmp	r3, #8
 800952e:	d10e      	bne.n	800954e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f82d 	bl	800959e <UART_WaitOnFlagUntilTimeout>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e023      	b.n	8009596 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b04      	cmp	r3, #4
 800955a:	d10e      	bne.n	800957a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800955c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f817 	bl	800959e <UART_WaitOnFlagUntilTimeout>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e00d      	b.n	8009596 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2220      	movs	r2, #32
 800957e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2220      	movs	r2, #32
 8009584:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b09c      	sub	sp, #112	; 0x70
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	603b      	str	r3, [r7, #0]
 80095aa:	4613      	mov	r3, r2
 80095ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ae:	e0a5      	b.n	80096fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b6:	f000 80a1 	beq.w	80096fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095ba:	f7f9 f945 	bl	8002848 <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d302      	bcc.n	80095d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80095ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d13e      	bne.n	800964e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095e4:	667b      	str	r3, [r7, #100]	; 0x64
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e6      	bne.n	80095d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3308      	adds	r3, #8
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009614:	f023 0301 	bic.w	r3, r3, #1
 8009618:	663b      	str	r3, [r7, #96]	; 0x60
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3308      	adds	r3, #8
 8009620:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009622:	64ba      	str	r2, [r7, #72]	; 0x48
 8009624:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e5      	bne.n	8009602 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2220      	movs	r2, #32
 800963a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2220      	movs	r2, #32
 8009640:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e067      	b.n	800971e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0304 	and.w	r3, r3, #4
 8009658:	2b00      	cmp	r3, #0
 800965a:	d04f      	beq.n	80096fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800966a:	d147      	bne.n	80096fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009674:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800968a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009694:	637b      	str	r3, [r7, #52]	; 0x34
 8009696:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800969a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e6      	bne.n	8009676 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3308      	adds	r3, #8
 80096ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	e853 3f00 	ldrex	r3, [r3]
 80096b6:	613b      	str	r3, [r7, #16]
   return(result);
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f023 0301 	bic.w	r3, r3, #1
 80096be:	66bb      	str	r3, [r7, #104]	; 0x68
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3308      	adds	r3, #8
 80096c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096c8:	623a      	str	r2, [r7, #32]
 80096ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	69f9      	ldr	r1, [r7, #28]
 80096ce:	6a3a      	ldr	r2, [r7, #32]
 80096d0:	e841 2300 	strex	r3, r2, [r1]
 80096d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e5      	bne.n	80096a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2220      	movs	r2, #32
 80096e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2220      	movs	r2, #32
 80096e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e010      	b.n	800971e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	69da      	ldr	r2, [r3, #28]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	4013      	ands	r3, r2
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	429a      	cmp	r2, r3
 800970a:	bf0c      	ite	eq
 800970c:	2301      	moveq	r3, #1
 800970e:	2300      	movne	r3, #0
 8009710:	b2db      	uxtb	r3, r3
 8009712:	461a      	mov	r2, r3
 8009714:	79fb      	ldrb	r3, [r7, #7]
 8009716:	429a      	cmp	r2, r3
 8009718:	f43f af4a 	beq.w	80095b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3770      	adds	r7, #112	; 0x70
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b096      	sub	sp, #88	; 0x58
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	4613      	mov	r3, r2
 8009734:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	88fa      	ldrh	r2, [r7, #6]
 8009740:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2222      	movs	r2, #34	; 0x22
 8009750:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009756:	2b00      	cmp	r3, #0
 8009758:	d02b      	beq.n	80097b2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975e:	4a42      	ldr	r2, [pc, #264]	; (8009868 <UART_Start_Receive_DMA+0x140>)
 8009760:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009766:	4a41      	ldr	r2, [pc, #260]	; (800986c <UART_Start_Receive_DMA+0x144>)
 8009768:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976e:	4a40      	ldr	r2, [pc, #256]	; (8009870 <UART_Start_Receive_DMA+0x148>)
 8009770:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009776:	2200      	movs	r2, #0
 8009778:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3324      	adds	r3, #36	; 0x24
 8009784:	4619      	mov	r1, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978a:	461a      	mov	r2, r3
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	f7fb fd23 	bl	80051d8 <HAL_DMA_Start_IT>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00c      	beq.n	80097b2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2210      	movs	r2, #16
 800979c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2220      	movs	r2, #32
 80097ac:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e055      	b.n	800985e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d018      	beq.n	80097f4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097d6:	657b      	str	r3, [r7, #84]	; 0x54
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80097e2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e6      	bne.n	80097c2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3308      	adds	r3, #8
 80097fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	e853 3f00 	ldrex	r3, [r3]
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	f043 0301 	orr.w	r3, r3, #1
 800980a:	653b      	str	r3, [r7, #80]	; 0x50
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3308      	adds	r3, #8
 8009812:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009814:	637a      	str	r2, [r7, #52]	; 0x34
 8009816:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800981a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800981c:	e841 2300 	strex	r3, r2, [r1]
 8009820:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1e5      	bne.n	80097f4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3308      	adds	r3, #8
 800982e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	613b      	str	r3, [r7, #16]
   return(result);
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800983e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3308      	adds	r3, #8
 8009846:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009848:	623a      	str	r2, [r7, #32]
 800984a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	69f9      	ldr	r1, [r7, #28]
 800984e:	6a3a      	ldr	r2, [r7, #32]
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	61bb      	str	r3, [r7, #24]
   return(result);
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e5      	bne.n	8009828 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3758      	adds	r7, #88	; 0x58
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	08009a3d 	.word	0x08009a3d
 800986c:	08009b61 	.word	0x08009b61
 8009870:	08009b99 	.word	0x08009b99

08009874 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009874:	b480      	push	{r7}
 8009876:	b089      	sub	sp, #36	; 0x24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	60bb      	str	r3, [r7, #8]
   return(result);
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009890:	61fb      	str	r3, [r7, #28]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	61bb      	str	r3, [r7, #24]
 800989c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6979      	ldr	r1, [r7, #20]
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	613b      	str	r3, [r7, #16]
   return(result);
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e6      	bne.n	800987c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	679a      	str	r2, [r3, #120]	; 0x78
}
 80098b4:	bf00      	nop
 80098b6:	3724      	adds	r7, #36	; 0x24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b095      	sub	sp, #84	; 0x54
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098e6:	643b      	str	r3, [r7, #64]	; 0x40
 80098e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e6      	bne.n	80098c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3308      	adds	r3, #8
 8009900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	61fb      	str	r3, [r7, #28]
   return(result);
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	f023 0301 	bic.w	r3, r3, #1
 8009910:	64bb      	str	r3, [r7, #72]	; 0x48
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3308      	adds	r3, #8
 8009918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800991a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800991c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e5      	bne.n	80098fa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009932:	2b01      	cmp	r3, #1
 8009934:	d118      	bne.n	8009968 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	60bb      	str	r3, [r7, #8]
   return(result);
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f023 0310 	bic.w	r3, r3, #16
 800994a:	647b      	str	r3, [r7, #68]	; 0x44
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009954:	61bb      	str	r3, [r7, #24]
 8009956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	6979      	ldr	r1, [r7, #20]
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	613b      	str	r3, [r7, #16]
   return(result);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e6      	bne.n	8009936 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2220      	movs	r2, #32
 800996c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	665a      	str	r2, [r3, #100]	; 0x64
}
 800997a:	bf00      	nop
 800997c:	3754      	adds	r7, #84	; 0x54
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b090      	sub	sp, #64	; 0x40
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009992:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0320 	and.w	r3, r3, #32
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d137      	bne.n	8009a12 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80099a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a4:	2200      	movs	r2, #0
 80099a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3308      	adds	r3, #8
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	623b      	str	r3, [r7, #32]
   return(result);
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80099c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3308      	adds	r3, #8
 80099c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099ca:	633a      	str	r2, [r7, #48]	; 0x30
 80099cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d2:	e841 2300 	strex	r3, r2, [r1]
 80099d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1e5      	bne.n	80099aa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34
 80099f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	461a      	mov	r2, r3
 80099fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fc:	61fb      	str	r3, [r7, #28]
 80099fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	69b9      	ldr	r1, [r7, #24]
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	617b      	str	r3, [r7, #20]
   return(result);
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e6      	bne.n	80099de <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a10:	e002      	b.n	8009a18 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009a12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009a14:	f7f8 fce0 	bl	80023d8 <HAL_UART_TxCpltCallback>
}
 8009a18:	bf00      	nop
 8009a1a:	3740      	adds	r7, #64	; 0x40
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7f8 fce6 	bl	8002400 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a34:	bf00      	nop
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b09c      	sub	sp, #112	; 0x70
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a48:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0320 	and.w	r3, r3, #32
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d170      	bne.n	8009b3a <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8009a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e6      	bne.n	8009a60 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa4:	f023 0301 	bic.w	r3, r3, #1
 8009aa8:	667b      	str	r3, [r7, #100]	; 0x64
 8009aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3308      	adds	r3, #8
 8009ab0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ab2:	647a      	str	r2, [r7, #68]	; 0x44
 8009ab4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e5      	bne.n	8009a92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3308      	adds	r3, #8
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009adc:	663b      	str	r3, [r7, #96]	; 0x60
 8009ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ae6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e5      	bne.n	8009ac6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009afc:	2220      	movs	r2, #32
 8009afe:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d118      	bne.n	8009b3a <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f023 0310 	bic.w	r3, r3, #16
 8009b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2a:	69b9      	ldr	r1, [r7, #24]
 8009b2c:	69fa      	ldr	r2, [r7, #28]
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	617b      	str	r3, [r7, #20]
   return(result);
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1e6      	bne.n	8009b08 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d107      	bne.n	8009b52 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b4c:	f7f8 fbd6 	bl	80022fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b50:	e002      	b.n	8009b58 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8009b52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b54:	f7f8 fc0c 	bl	8002370 <HAL_UART_RxCpltCallback>
}
 8009b58:	bf00      	nop
 8009b5a:	3770      	adds	r7, #112	; 0x70
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d109      	bne.n	8009b8a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b7c:	085b      	lsrs	r3, r3, #1
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	4619      	mov	r1, r3
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f7f8 fbba 	bl	80022fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b88:	e002      	b.n	8009b90 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f7f8 fc0a 	bl	80023a4 <HAL_UART_RxHalfCpltCallback>
}
 8009b90:	bf00      	nop
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009baa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bbc:	2b80      	cmp	r3, #128	; 0x80
 8009bbe:	d109      	bne.n	8009bd4 <UART_DMAError+0x3c>
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2b21      	cmp	r3, #33	; 0x21
 8009bc4:	d106      	bne.n	8009bd4 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009bce:	6978      	ldr	r0, [r7, #20]
 8009bd0:	f7ff fe50 	bl	8009874 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bde:	2b40      	cmp	r3, #64	; 0x40
 8009be0:	d109      	bne.n	8009bf6 <UART_DMAError+0x5e>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b22      	cmp	r3, #34	; 0x22
 8009be6:	d106      	bne.n	8009bf6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009bf0:	6978      	ldr	r0, [r7, #20]
 8009bf2:	f7ff fe65 	bl	80098c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bfc:	f043 0210 	orr.w	r2, r3, #16
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c06:	6978      	ldr	r0, [r7, #20]
 8009c08:	f7f8 fc14 	bl	8002434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c0c:	bf00      	nop
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f7f8 fbfe 	bl	8002434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c38:	bf00      	nop
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c5c:	61fb      	str	r3, [r7, #28]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	61bb      	str	r3, [r7, #24]
 8009c68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6a:	6979      	ldr	r1, [r7, #20]
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	e841 2300 	strex	r3, r2, [r1]
 8009c72:	613b      	str	r3, [r7, #16]
   return(result);
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1e6      	bne.n	8009c48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7f8 fba6 	bl	80023d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c8c:	bf00      	nop
 8009c8e:	3720      	adds	r7, #32
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08c      	sub	sp, #48	; 0x30
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d14a      	bne.n	8009d54 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8009cc4:	88fb      	ldrh	r3, [r7, #6]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e043      	b.n	8009d56 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d101      	bne.n	8009cdc <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	e03c      	b.n	8009d56 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	461a      	mov	r2, r3
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f7ff fd19 	bl	8009728 <UART_Start_Receive_DMA>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d124      	bne.n	8009d4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d11d      	bne.n	8009d48 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2210      	movs	r2, #16
 8009d12:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	617b      	str	r3, [r7, #20]
   return(result);
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f043 0310 	orr.w	r3, r3, #16
 8009d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
 8009d34:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d36:	6a39      	ldr	r1, [r7, #32]
 8009d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1e6      	bne.n	8009d14 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8009d46:	e002      	b.n	8009d4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d52:	e000      	b.n	8009d56 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8009d54:	2302      	movs	r3, #2
  }
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3730      	adds	r7, #48	; 0x30
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <stimLib_stimInit>:
/*
 BRIEF
 - Initalize stimulation library. Preempt system resources and peripherals.
 */
stim_lib_rsp_t stimLib_stimInit(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
	stim_lib_rsp_t rslt;

	TD_DEBUG_PRINT(("STIM_LIB: stimLib_stimInit()\n"));
 8009d66:	480c      	ldr	r0, [pc, #48]	; (8009d98 <stimLib_stimInit+0x38>)
 8009d68:	f002 f8ce 	bl	800bf08 <puts>

	if (stimLib_stateGet() != stim_lib_state_uninitialized)
 8009d6c:	f001 f8e0 	bl	800af30 <stimLib_stateGet>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <stimLib_stimInit+0x1a>
	{
		return stim_lib_stim_rsp_invalid_status;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e00a      	b.n	8009d90 <stimLib_stimInit+0x30>
	}

	rslt = stimLib_initResrc();
 8009d7a:	f000 f977 	bl	800a06c <stimLib_initResrc>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	71fb      	strb	r3, [r7, #7]

	if (rslt == stim_lib_stim_rsp_ok)
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <stimLib_stimInit+0x2e>
	{
		stimLib_stateSet(stim_lib_state_idle);
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f001 f8dd 	bl	800af48 <stimLib_stateSet>
	}

	return rslt;
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	0800d410 	.word	0x0800d410

08009d9c <stimLib_stimSignalConfig>:
/*
 BRIEF
 - Setup signal pusle of stimulation configuration.
 */
stim_lib_rsp_t stimLib_stimSignalConfig(stim_signal_cfg_t *signal_cfg)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
	if (signal_cfg == NULL || stimLib_signalParamCheck(signal_cfg) == false)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <stimLib_stimSignalConfig+0x20>
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f001 f9cc 	bl	800b148 <stimLib_signalParamCheck>
 8009db0:	4603      	mov	r3, r0
 8009db2:	f083 0301 	eor.w	r3, r3, #1
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <stimLib_stimSignalConfig+0x24>
	{
		return stim_lib_stim_rsp_invalid_parameter;
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	e00a      	b.n	8009dd6 <stimLib_stimSignalConfig+0x3a>
	}

	if (stimLib_stateGet() == stim_lib_state_idle)
 8009dc0:	f001 f8b6 	bl	800af30 <stimLib_stateGet>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d104      	bne.n	8009dd4 <stimLib_stimSignalConfig+0x38>
	{
		stimLib_stateSigParamSet(signal_cfg);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f001 f92c 	bl	800b028 <stimLib_stateSigParamSet>

		return stim_lib_stim_rsp_ok;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	e000      	b.n	8009dd6 <stimLib_stimSignalConfig+0x3a>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009dd4:	2303      	movs	r3, #3
	}
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <stimLib_stimTriggerConfig>:
/*
 BRIEF
 - Setup trigger of stimulation configuration.
 */
stim_lib_rsp_t stimLib_stimTriggerConfig(stim_trg_cfg_t *trg_cfg)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
	if (trg_cfg == NULL || stimLib_triggerParamCheck(trg_cfg) == false)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d008      	beq.n	8009dfe <stimLib_stimTriggerConfig+0x20>
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 f9e3 	bl	800b1b8 <stimLib_triggerParamCheck>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f083 0301 	eor.w	r3, r3, #1
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <stimLib_stimTriggerConfig+0x24>
	{
		return stim_lib_stim_rsp_invalid_parameter;
 8009dfe:	2304      	movs	r3, #4
 8009e00:	e00a      	b.n	8009e18 <stimLib_stimTriggerConfig+0x3a>
	}

	if (stimLib_stateGet() == stim_lib_state_idle)
 8009e02:	f001 f895 	bl	800af30 <stimLib_stateGet>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d104      	bne.n	8009e16 <stimLib_stimTriggerConfig+0x38>
	{
		stimLib_stateTrgParamSet(trg_cfg);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 f92f 	bl	800b070 <stimLib_stateTrgParamSet>

		return stim_lib_stim_rsp_ok;
 8009e12:	2300      	movs	r3, #0
 8009e14:	e000      	b.n	8009e18 <stimLib_stimTriggerConfig+0x3a>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009e16:	2303      	movs	r3, #3
	}

}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <stimLib_stimSessionStart>:
/*
 BRIEF
 - Start stimulation session.
 */
stim_lib_rsp_t stimLib_stimSessionStart(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
	bool param_rslt;

	if (stimLib_stateGet() == stim_lib_state_idle)
 8009e26:	f001 f883 	bl	800af30 <stimLib_stateGet>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d11a      	bne.n	8009e66 <stimLib_stimSessionStart+0x46>
	{
		param_rslt = stimLib_stateSigParamCheck();
 8009e30:	f001 f94a 	bl	800b0c8 <stimLib_stateSigParamCheck>
 8009e34:	4603      	mov	r3, r0
 8009e36:	71fb      	strb	r3, [r7, #7]

		if (param_rslt == true)
 8009e38:	79fb      	ldrb	r3, [r7, #7]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d011      	beq.n	8009e62 <stimLib_stimSessionStart+0x42>
		{
			param_rslt = stimLib_paramSetting();
 8009e3e:	f001 f9cb 	bl	800b1d8 <stimLib_paramSetting>
 8009e42:	4603      	mov	r3, r0
 8009e44:	71fb      	strb	r3, [r7, #7]

			/* VOLTAGE CONTROL PRESTART */
			if (STIM_LIB_STATE_TRG_VOLT_PRESTART == true)
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <stimLib_stimSessionStart+0x50>)
 8009e48:	7c1b      	ldrb	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <stimLib_stimSessionStart+0x32>
				 * STEP UP VOLTAGE CONTROL START
				 *
				 * START STEPUP PULSE TIMER :: TIMER 1
				 * START STEPUP FEEDBACK TIMER :: TIMER 6
				 * */
				stimLib_stepupStart();
 8009e4e:	f001 feb3 	bl	800bbb8 <stimLib_stepupStart>
			}

			stimLib_stateSet(stim_lib_state_session_idle);
 8009e52:	2002      	movs	r0, #2
 8009e54:	f001 f878 	bl	800af48 <stimLib_stateSet>
			TD_DEBUG_PRINT(("STIM_LIB: Session Start >> Session IDLE\n"));
 8009e58:	4806      	ldr	r0, [pc, #24]	; (8009e74 <stimLib_stimSessionStart+0x54>)
 8009e5a:	f002 f855 	bl	800bf08 <puts>

			return stim_lib_stim_rsp_ok;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	e002      	b.n	8009e68 <stimLib_stimSessionStart+0x48>
		}
		else
		{
			return stim_lib_stim_rsp_invalid_parameter;
 8009e62:	2304      	movs	r3, #4
 8009e64:	e000      	b.n	8009e68 <stimLib_stimSessionStart+0x48>
		}
	}

	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009e66:	2303      	movs	r3, #3
	}
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	20000660 	.word	0x20000660
 8009e74:	0800d430 	.word	0x0800d430

08009e78 <stimLib_stimSessionStop>:
/*
 BRIEF
 - Stop stimulation session.
 */
stim_lib_rsp_t stimLib_stimSessionStop(void)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
	uint32_t tick;

	tick = HAL_GetTick();
 8009e7e:	f7f8 fce3 	bl	8002848 <HAL_GetTick>
 8009e82:	6078      	str	r0, [r7, #4]

	while (stimLib_stateGet() == stim_lib_state_stim_stopping
 8009e84:	bf00      	nop
 8009e86:	f001 f853 	bl	800af30 <stimLib_stateGet>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d107      	bne.n	8009ea0 <stimLib_stimSessionStop+0x28>
			&& stimLib_getTick() - tick < STIM_LIB_SESSION_VALID_TIME)
 8009e90:	f000 f84c 	bl	8009f2c <stimLib_getTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e9e:	d3f2      	bcc.n	8009e86 <stimLib_stimSessionStop+0xe>
		;

	if (stimLib_getTick() - tick >= STIM_LIB_SESSION_VALID_TIME)
 8009ea0:	f000 f844 	bl	8009f2c <stimLib_getTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009eae:	d303      	bcc.n	8009eb8 <stimLib_stimSessionStop+0x40>
	{
		/* ERROR */
		stimLib_errorHandle();
 8009eb0:	f000 f844 	bl	8009f3c <stimLib_errorHandle>

		return stim_lib_stim_rsp_system_fault;
 8009eb4:	2306      	movs	r3, #6
 8009eb6:	e00e      	b.n	8009ed6 <stimLib_stimSessionStop+0x5e>
	}

	if (stimLib_stateGet() == stim_lib_state_session_idle) // if (stimLib_stateGet() == stim_lib_state_session_idle)
 8009eb8:	f001 f83a 	bl	800af30 <stimLib_stateGet>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d108      	bne.n	8009ed4 <stimLib_stimSessionStop+0x5c>
	{
		stimLib_stepupStop();
 8009ec2:	f001 fe89 	bl	800bbd8 <stimLib_stepupStop>

		stimLib_paramClear();
 8009ec6:	f001 f998 	bl	800b1fa <stimLib_paramClear>

		stimLib_stateSet(stim_lib_state_idle);
 8009eca:	2001      	movs	r0, #1
 8009ecc:	f001 f83c 	bl	800af48 <stimLib_stateSet>

		return stim_lib_stim_rsp_ok;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	e000      	b.n	8009ed6 <stimLib_stimSessionStop+0x5e>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009ed4:	2303      	movs	r3, #3
	}
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <stimLib_stimStart>:
/*
 BRIEF
 - Start stimulation signal output in a session.
 */
stim_lib_rsp_t stimLib_stimStart(void)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	af00      	add	r7, sp, #0

	if (stimLib_stateGet() == stim_lib_state_session_idle)
 8009ee2:	f001 f825 	bl	800af30 <stimLib_stateGet>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d106      	bne.n	8009efa <stimLib_stimStart+0x1c>
	{
		stimLib_stimPulseStart();
 8009eec:	f001 f98e 	bl	800b20c <stimLib_stimPulseStart>
		stimLib_stateSet(stim_lib_state_stimulating);
 8009ef0:	2003      	movs	r0, #3
 8009ef2:	f001 f829 	bl	800af48 <stimLib_stateSet>

		return stim_lib_stim_rsp_ok;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e000      	b.n	8009efc <stimLib_stimStart+0x1e>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009efa:	2303      	movs	r3, #3
	}
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <stimLib_stimPause>:
/*
 BRIEF
 - Pause stimulation signal output in a session.
 */
stim_lib_rsp_t stimLib_stimPause(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	af00      	add	r7, sp, #0
	if (stimLib_stateGet() == stim_lib_state_stimulating)
 8009f04:	f001 f814 	bl	800af30 <stimLib_stateGet>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b03      	cmp	r3, #3
 8009f0c:	d103      	bne.n	8009f16 <stimLib_stimPause+0x16>
		/* To save puls start time */
		stimLib_stimPulseSetiing();

		stimLib_stateSet(stim_lib_state_session_idle);
#else
		stimLib_stimStopDelayRaw();
 8009f0e:	f000 f9db 	bl	800a2c8 <stimLib_stimStopDelayRaw>

#endif

		return stim_lib_stim_rsp_ok;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e000      	b.n	8009f18 <stimLib_stimPause+0x18>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009f16:	2303      	movs	r3, #3
	}
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <stimLib_chkSystem>:
#include "stim_lib_common.h"

#include "td_debug.h"

bool stimLib_chkSystem(void)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	af00      	add	r7, sp, #0
#ifdef	STM32L412xx
	return true;
 8009f20:	2301      	movs	r3, #1
#else
	return false;
#endif

}
 8009f22:	4618      	mov	r0, r3
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <stimLib_getTick>:

uint32_t stimLib_getTick(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8009f30:	f7f8 fc8a 	bl	8002848 <HAL_GetTick>
 8009f34:	4603      	mov	r3, r0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <stimLib_errorHandle>:
#include "stim_lib_error.h"

#include "td_debug.h"

void stimLib_errorHandle(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	af00      	add	r7, sp, #0
	 1. Stop voltage
	 2. Stop Stimulation
	 3. Set state to error
	 ...
	 */
	stimLib_stepupStop();
 8009f40:	f001 fe4a 	bl	800bbd8 <stimLib_stepupStop>
	stimLib_stimPulseStop();
 8009f44:	f001 f97c 	bl	800b240 <stimLib_stimPulseStop>
	stimLib_paramClear();
 8009f48:	f001 f957 	bl	800b1fa <stimLib_paramClear>
	stimLib_stateSet(stim_lib_state_error);
 8009f4c:	2005      	movs	r0, #5
 8009f4e:	f000 fffb 	bl	800af48 <stimLib_stateSet>

	sitmLib_appErrorHandle_callback();
 8009f52:	f000 f807 	bl	8009f64 <sitmLib_appErrorHandle_callback>

	TD_DEBUG_PRINT(("STIM_LIB: ERROR!!\n"));
 8009f56:	4802      	ldr	r0, [pc, #8]	; (8009f60 <stimLib_errorHandle+0x24>)
 8009f58:	f001 ffd6 	bl	800bf08 <puts>
}
 8009f5c:	bf00      	nop
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	0800d458 	.word	0x0800d458

08009f64 <sitmLib_appErrorHandle_callback>:

void sitmLib_appErrorHandle_callback(void)
{
 8009f64:	b480      	push	{r7}
 8009f66:	af00      	add	r7, sp, #0
}
 8009f68:	bf00      	nop
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
	...

08009f74 <stimLib_initResource>:

#define STIM_LIB_RESOURCE_INIT_ERROR				false
#define STIM_LIB_RESOURCE_INIT_OK					true

static void stimLib_initResource(bool *resource_check)
{
 8009f74:	b590      	push	{r4, r7, lr}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	if (resource_check == NULL)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d06d      	beq.n	800a05e <stimLib_initResource+0xea>
	{
		return;
	}

	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]
 8009f86:	e007      	b.n	8009f98 <stimLib_initResource+0x24>
	{
		resource_check[i] = false;
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	2200      	movs	r2, #0
 8009f90:	701a      	strb	r2, [r3, #0]
	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
 8009f94:	3301      	adds	r3, #1
 8009f96:	73fb      	strb	r3, [r7, #15]
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	2b06      	cmp	r3, #6
 8009f9c:	d9f4      	bls.n	8009f88 <stimLib_initResource+0x14>
	}

	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]
 8009fa2:	e058      	b.n	800a056 <stimLib_initResource+0xe2>
	{
		switch (i)
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	2b06      	cmp	r3, #6
 8009fa8:	d848      	bhi.n	800a03c <stimLib_initResource+0xc8>
 8009faa:	a201      	add	r2, pc, #4	; (adr r2, 8009fb0 <stimLib_initResource+0x3c>)
 8009fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb0:	08009fcd 	.word	0x08009fcd
 8009fb4:	08009fdd 	.word	0x08009fdd
 8009fb8:	08009fed 	.word	0x08009fed
 8009fbc:	08009ffd 	.word	0x08009ffd
 8009fc0:	0800a00d 	.word	0x0800a00d
 8009fc4:	0800a01d 	.word	0x0800a01d
 8009fc8:	0800a02d 	.word	0x0800a02d
		{

		case stim_lib_resrc_dma:
			resource_check[i] = stimLib_dmaInit();
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	18d4      	adds	r4, r2, r3
 8009fd2:	f000 fa31 	bl	800a438 <stimLib_dmaInit>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	7023      	strb	r3, [r4, #0]
			break;
 8009fda:	e030      	b.n	800a03e <stimLib_initResource+0xca>

		case stim_lib_resrc_tim1:
			resource_check[i] = stimLib_tim1_Init();
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	18d4      	adds	r4, r2, r3
 8009fe2:	f000 fa63 	bl	800a4ac <stimLib_tim1_Init>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	7023      	strb	r3, [r4, #0]
			break;
 8009fea:	e028      	b.n	800a03e <stimLib_initResource+0xca>

		case stim_lib_resrc_tim2:
			resource_check[i] = stimLib_tim2_Init();
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	18d4      	adds	r4, r2, r3
 8009ff2:	f000 faef 	bl	800a5d4 <stimLib_tim2_Init>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	7023      	strb	r3, [r4, #0]
			break;
 8009ffa:	e020      	b.n	800a03e <stimLib_initResource+0xca>

		case stim_lib_resrc_tim6:
			resource_check[i] = stimLib_tim6_Init();
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	18d4      	adds	r4, r2, r3
 800a002:	f000 fbb1 	bl	800a768 <stimLib_tim6_Init>
 800a006:	4603      	mov	r3, r0
 800a008:	7023      	strb	r3, [r4, #0]
			break;
 800a00a:	e018      	b.n	800a03e <stimLib_initResource+0xca>

		case stim_lib_resrc_adc1:
			resource_check[i] = stimLib_adc1_Init();
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	18d4      	adds	r4, r2, r3
 800a012:	f000 fc07 	bl	800a824 <stimLib_adc1_Init>
 800a016:	4603      	mov	r3, r0
 800a018:	7023      	strb	r3, [r4, #0]
			break;
 800a01a:	e010      	b.n	800a03e <stimLib_initResource+0xca>

		case stim_lib_resrc_adc2:
			resource_check[i] = stimLib_adc2_Init();
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	18d4      	adds	r4, r2, r3
 800a022:	f000 fca7 	bl	800a974 <stimLib_adc2_Init>
 800a026:	4603      	mov	r3, r0
 800a028:	7023      	strb	r3, [r4, #0]
			break;
 800a02a:	e008      	b.n	800a03e <stimLib_initResource+0xca>

		case stim_lib_resrc_gpio:
			resource_check[i] = stimLib_gpioInit();
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	18d4      	adds	r4, r2, r3
 800a032:	f000 f993 	bl	800a35c <stimLib_gpioInit>
 800a036:	4603      	mov	r3, r0
 800a038:	7023      	strb	r3, [r4, #0]
			break;
 800a03a:	e000      	b.n	800a03e <stimLib_initResource+0xca>

		default:
			break;
 800a03c:	bf00      	nop
		}

		if (resource_check[i] == false)
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	4413      	add	r3, r2
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	f083 0301 	eor.w	r3, r3, #1
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d108      	bne.n	800a062 <stimLib_initResource+0xee>
	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 800a050:	7bfb      	ldrb	r3, [r7, #15]
 800a052:	3301      	adds	r3, #1
 800a054:	73fb      	strb	r3, [r7, #15]
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	2b06      	cmp	r3, #6
 800a05a:	d9a3      	bls.n	8009fa4 <stimLib_initResource+0x30>
 800a05c:	e002      	b.n	800a064 <stimLib_initResource+0xf0>
		return;
 800a05e:	bf00      	nop
 800a060:	e000      	b.n	800a064 <stimLib_initResource+0xf0>
		{
			break;
 800a062:	bf00      	nop
		}
	}
}
 800a064:	3714      	adds	r7, #20
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}
 800a06a:	bf00      	nop

0800a06c <stimLib_initResrc>:

uint8_t stimLib_initResrc(void)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
	uint8_t i;
	bool resrc_chk[stim_lib_resrc_max] =
 800a072:	463b      	mov	r3, r7
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]
 800a078:	f8c3 2003 	str.w	r2, [r3, #3]
	{ false, };

	/* Check system environment */
	if (stimLib_chkSystem() == false)
 800a07c:	f7ff ff4e 	bl	8009f1c <stimLib_chkSystem>
 800a080:	4603      	mov	r3, r0
 800a082:	f083 0301 	eor.w	r3, r3, #1
 800a086:	b2db      	uxtb	r3, r3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <stimLib_initResrc+0x24>
	{
		return stim_lib_stim_rsp_unsupported;
 800a08c:	2305      	movs	r3, #5
 800a08e:	e04f      	b.n	800a130 <stimLib_initResrc+0xc4>
	}

	/* Check system clock */
	if (SystemCoreClock != STIM_LIB_SYSTEM_CLOCK_HZ)
 800a090:	4b29      	ldr	r3, [pc, #164]	; (800a138 <stimLib_initResrc+0xcc>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a29      	ldr	r2, [pc, #164]	; (800a13c <stimLib_initResrc+0xd0>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d001      	beq.n	800a09e <stimLib_initResrc+0x32>
	{
		return stim_lib_stim_rsp_unsupported;
 800a09a:	2305      	movs	r3, #5
 800a09c:	e048      	b.n	800a130 <stimLib_initResrc+0xc4>
	}

	if (stimLib_stateGet() != stim_lib_state_uninitialized)
 800a09e:	f000 ff47 	bl	800af30 <stimLib_stateGet>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <stimLib_initResrc+0x40>
	{
		return stim_lib_stim_rsp_invalid_status;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e041      	b.n	800a130 <stimLib_initResrc+0xc4>
	}
	else
	{
		/* Resource Init */
		stimLib_initResource(resrc_chk);
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff ff60 	bl	8009f74 <stimLib_initResource>
	}

	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	71fb      	strb	r3, [r7, #7]
 800a0b8:	e00c      	b.n	800a0d4 <stimLib_initResrc+0x68>
	{
		if (resrc_chk[i] == false)
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	443b      	add	r3, r7
 800a0c0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800a0c4:	f083 0301 	eor.w	r3, r3, #1
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d106      	bne.n	800a0dc <stimLib_initResrc+0x70>
	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	71fb      	strb	r3, [r7, #7]
 800a0d4:	79fb      	ldrb	r3, [r7, #7]
 800a0d6:	2b06      	cmp	r3, #6
 800a0d8:	d9ef      	bls.n	800a0ba <stimLib_initResrc+0x4e>
 800a0da:	e000      	b.n	800a0de <stimLib_initResrc+0x72>
		{
			break;
 800a0dc:	bf00      	nop
		}
	}

	if (i == stim_lib_resrc_max)
 800a0de:	79fb      	ldrb	r3, [r7, #7]
 800a0e0:	2b07      	cmp	r3, #7
 800a0e2:	d101      	bne.n	800a0e8 <stimLib_initResrc+0x7c>
	{
		return stim_lib_stim_rsp_ok;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	e023      	b.n	800a130 <stimLib_initResrc+0xc4>
	}
	else
	{
		/* Keep the order of stim_lib_resrc_t elements */
		switch (i)
 800a0e8:	79fb      	ldrb	r3, [r7, #7]
 800a0ea:	2b06      	cmp	r3, #6
 800a0ec:	d81e      	bhi.n	800a12c <stimLib_initResrc+0xc0>
 800a0ee:	a201      	add	r2, pc, #4	; (adr r2, 800a0f4 <stimLib_initResrc+0x88>)
 800a0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f4:	0800a129 	.word	0x0800a129
 800a0f8:	0800a125 	.word	0x0800a125
 800a0fc:	0800a121 	.word	0x0800a121
 800a100:	0800a11d 	.word	0x0800a11d
 800a104:	0800a119 	.word	0x0800a119
 800a108:	0800a115 	.word	0x0800a115
 800a10c:	0800a111 	.word	0x0800a111
		{
		case stim_lib_resrc_gpio:
			stimLib_gpioDeinit();
 800a110:	f000 fcb4 	bl	800aa7c <stimLib_gpioDeinit>

		case stim_lib_resrc_adc2:
			stimLib_adc2_Deinit();
 800a114:	f000 fd0a 	bl	800ab2c <stimLib_adc2_Deinit>

		case stim_lib_resrc_adc1:
			stimLib_adc1_Deinit();
 800a118:	f000 fcfe 	bl	800ab18 <stimLib_adc1_Deinit>

		case stim_lib_resrc_tim6:
			stimLib_tim6_Deinit();
 800a11c:	f000 fcf2 	bl	800ab04 <stimLib_tim6_Deinit>

		case stim_lib_resrc_tim2:
			stimLib_tim2_Deinit();
 800a120:	f000 fce6 	bl	800aaf0 <stimLib_tim2_Deinit>

		case stim_lib_resrc_tim1:
			stimLib_tim1_Deinit();
 800a124:	f000 fcda 	bl	800aadc <stimLib_tim1_Deinit>

		case stim_lib_resrc_dma:
			stimLib_dmaDeinit();
 800a128:	f000 fcc0 	bl	800aaac <stimLib_dmaDeinit>

		default:
			break;
 800a12c:	bf00      	nop
		}

		return stim_lib_stim_rsp_failed;
 800a12e:	2301      	movs	r3, #1
	}

}
 800a130:	4618      	mov	r0, r3
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20000000 	.word	0x20000000
 800a13c:	04c4b400 	.word	0x04c4b400

0800a140 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a144:	f3bf 8f4f 	dsb	sy
}
 800a148:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a14a:	4b06      	ldr	r3, [pc, #24]	; (800a164 <__NVIC_SystemReset+0x24>)
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a152:	4904      	ldr	r1, [pc, #16]	; (800a164 <__NVIC_SystemReset+0x24>)
 800a154:	4b04      	ldr	r3, [pc, #16]	; (800a168 <__NVIC_SystemReset+0x28>)
 800a156:	4313      	orrs	r3, r2
 800a158:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a15a:	f3bf 8f4f 	dsb	sy
}
 800a15e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a160:	bf00      	nop
 800a162:	e7fd      	b.n	800a160 <__NVIC_SystemReset+0x20>
 800a164:	e000ed00 	.word	0xe000ed00
 800a168:	05fa0004 	.word	0x05fa0004

0800a16c <stimLib_adcWatchdoc_callback>:
/*
 * ADC WATCH DOC INTERRUPT
 * Calling from "HAL_ADC_LevelOutOfWindowCallback()" Function
 * */
void stimLib_adcWatchdoc_callback(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
	TD_DEBUG_PRINT(
 800a170:	4804      	ldr	r0, [pc, #16]	; (800a184 <stimLib_adcWatchdoc_callback+0x18>)
 800a172:	f001 fec9 	bl	800bf08 <puts>
			("WATCH DOC INTERRUPT :: stimLib_adcWatchdoc_callback()\r\n"));
	TD_DEBUG_PRINT(("SYSTEM ALL STOP AND RESETs\r\n"));
 800a176:	4804      	ldr	r0, [pc, #16]	; (800a188 <stimLib_adcWatchdoc_callback+0x1c>)
 800a178:	f001 fec6 	bl	800bf08 <puts>

	stimLib_errorHandle();
 800a17c:	f7ff fede 	bl	8009f3c <stimLib_errorHandle>
	/*
	 TODO:

	 Move to error handle
	 */
	NVIC_SystemReset();
 800a180:	f7ff ffde 	bl	800a140 <__NVIC_SystemReset>
 800a184:	0800d46c 	.word	0x0800d46c
 800a188:	0800d4a4 	.word	0x0800d4a4

0800a18c <stimLib_adcError_callback>:
/*
 * ADC WATCH DOC INTERRUPT
 * Calling from "HAL_ADC_ErrorCallback()" Function
 * */
void stimLib_adcError_callback(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
	TD_DEBUG_PRINT(("ADC ERROR :: stimLib_adcError_callback()\r\n"));
 800a190:	4803      	ldr	r0, [pc, #12]	; (800a1a0 <stimLib_adcError_callback+0x14>)
 800a192:	f001 feb9 	bl	800bf08 <puts>

	stimLib_errorHandle();
 800a196:	f7ff fed1 	bl	8009f3c <stimLib_errorHandle>
	/*
	 TODO:

	 Move to error handle
	 */
	NVIC_SystemReset();
 800a19a:	f7ff ffd1 	bl	800a140 <__NVIC_SystemReset>
 800a19e:	bf00      	nop
 800a1a0:	0800d4c0 	.word	0x0800d4c0

0800a1a4 <stimLib_stepup_ctrlCallback>:
/*
 * STEPUP CONTROL CALLBACK
 * Calling from "HAL_TIM_PeriodElapsedCallback()" Function
 * */
void stimLib_stepup_ctrlCallback(TIM_HandleTypeDef *htim)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a04      	ldr	r2, [pc, #16]	; (800a1c4 <stimLib_stepup_ctrlCallback+0x20>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d101      	bne.n	800a1ba <stimLib_stepup_ctrlCallback+0x16>
	{
		stimLib_stepup_ctrlScheduler();
 800a1b6:	f001 fa53 	bl	800b660 <stimLib_stepup_ctrlScheduler>
	}
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	40001000 	.word	0x40001000

0800a1c8 <stimLib_trgInput_callback>:
/*
 * Trigger Input Callback
 * Calling from "HAL_GPIO_EXTI_Callback()" Function
 * */
void stimLib_trgInput_callback(uint16_t gpio_pin)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	80fb      	strh	r3, [r7, #6]
	if (STIM_LIB_TRG_INPUT_PIN_IS_ENABLED(gpio_pin))
 800a1d2:	88fb      	ldrh	r3, [r7, #6]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d132      	bne.n	800a23e <stimLib_trgInput_callback+0x76>
 800a1d8:	4b1b      	ldr	r3, [pc, #108]	; (800a248 <stimLib_trgInput_callback+0x80>)
 800a1da:	7cdb      	ldrb	r3, [r3, #19]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d02e      	beq.n	800a23e <stimLib_trgInput_callback+0x76>
	{
		if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_LOW())
 800a1e0:	4b19      	ldr	r3, [pc, #100]	; (800a248 <stimLib_trgInput_callback+0x80>)
 800a1e2:	7d1b      	ldrb	r3, [r3, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d106      	bne.n	800a1f6 <stimLib_trgInput_callback+0x2e>
 800a1e8:	4b17      	ldr	r3, [pc, #92]	; (800a248 <stimLib_trgInput_callback+0x80>)
 800a1ea:	7d5b      	ldrb	r3, [r3, #21]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <stimLib_trgInput_callback+0x2e>
		{
			stim_lib_trg_input_active_low_hanlde();
 800a1f0:	f000 f846 	bl	800a280 <stim_lib_trg_input_active_low_hanlde>
 800a1f4:	e023      	b.n	800a23e <stimLib_trgInput_callback+0x76>
		}

		else if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_HIGH())
 800a1f6:	4b14      	ldr	r3, [pc, #80]	; (800a248 <stimLib_trgInput_callback+0x80>)
 800a1f8:	7d1b      	ldrb	r3, [r3, #20]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d106      	bne.n	800a20c <stimLib_trgInput_callback+0x44>
 800a1fe:	4b12      	ldr	r3, [pc, #72]	; (800a248 <stimLib_trgInput_callback+0x80>)
 800a200:	7d5b      	ldrb	r3, [r3, #21]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d002      	beq.n	800a20c <stimLib_trgInput_callback+0x44>
		{
			stim_lib_trg_input_active_high_handle();
 800a206:	f000 f84d 	bl	800a2a4 <stim_lib_trg_input_active_high_handle>
 800a20a:	e018      	b.n	800a23e <stimLib_trgInput_callback+0x76>
		}

		else if (STIM_LIB_TRG_INPUT_IS_FALLING_EDGE(
 800a20c:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <stimLib_trgInput_callback+0x80>)
 800a20e:	7d1b      	ldrb	r3, [r3, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d106      	bne.n	800a222 <stimLib_trgInput_callback+0x5a>
 800a214:	4b0c      	ldr	r3, [pc, #48]	; (800a248 <stimLib_trgInput_callback+0x80>)
 800a216:	7d5b      	ldrb	r3, [r3, #21]
 800a218:	f083 0301 	eor.w	r3, r3, #1
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <stimLib_trgInput_callback+0x70>
		) || STIM_LIB_TRG_INPUT_IS_RISING_EDGE())
 800a222:	4b09      	ldr	r3, [pc, #36]	; (800a248 <stimLib_trgInput_callback+0x80>)
 800a224:	7d1b      	ldrb	r3, [r3, #20]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d109      	bne.n	800a23e <stimLib_trgInput_callback+0x76>
 800a22a:	4b07      	ldr	r3, [pc, #28]	; (800a248 <stimLib_trgInput_callback+0x80>)
 800a22c:	7d5b      	ldrb	r3, [r3, #21]
 800a22e:	f083 0301 	eor.w	r3, r3, #1
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <stimLib_trgInput_callback+0x76>
			/*
			 * STIM START
			 * Initiate stimulation by trigger input.
			 * RISING EDGE and FALLING EDGE
			 * */
			stimLib_stimStart();
 800a238:	f7ff fe51 	bl	8009ede <stimLib_stimStart>
		}
	}
}
 800a23c:	e7ff      	b.n	800a23e <stimLib_trgInput_callback+0x76>
 800a23e:	bf00      	nop
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20000660 	.word	0x20000660

0800a24c <stimLib_timError_callback>:

void stimLib_timError_callback(TIM_HandleTypeDef *htim)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	stimLib_errorHandle();
 800a254:	f7ff fe72 	bl	8009f3c <stimLib_errorHandle>
}
 800a258:	bf00      	nop
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <stimLib_timPwmPluseFinished_callback>:

void stimLib_timPwmPluseFinished_callback(TIM_HandleTypeDef *htim)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a270:	d101      	bne.n	800a276 <stimLib_timPwmPluseFinished_callback+0x16>
	{
		stimLib_stimPulseStop();
 800a272:	f000 ffe5 	bl	800b240 <stimLib_stimPulseStop>
	}
}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <stim_lib_trg_input_active_low_hanlde>:

/* Define static functions */
static void stim_lib_trg_input_active_low_hanlde(void)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
	if (STIM_LIB_TRG_INPUT_PIN_IS_HIGH())
 800a284:	2101      	movs	r1, #1
 800a286:	4806      	ldr	r0, [pc, #24]	; (800a2a0 <stim_lib_trg_input_active_low_hanlde+0x20>)
 800a288:	f7fb fba8 	bl	80059dc <HAL_GPIO_ReadPin>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d102      	bne.n	800a298 <stim_lib_trg_input_active_low_hanlde+0x18>
		/*
		 * Force low of TIM PIO outputs
		 * CAUTION: OCREF must be normalized in PWM mode. Refer to TIM stop Function, stimLib_stimStopRaw()
		 * Stop when the toggle signal is HIGH.
		 * */
		stimLib_stimStopDelayRaw();
 800a292:	f000 f819 	bl	800a2c8 <stimLib_stimStopDelayRaw>
		 * Initiate stimulation by trigger input.
		 * Start when the toggle signal is LOW.
		 * */
		stimLib_stimStart();
	}
}
 800a296:	e001      	b.n	800a29c <stim_lib_trg_input_active_low_hanlde+0x1c>
		stimLib_stimStart();
 800a298:	f7ff fe21 	bl	8009ede <stimLib_stimStart>
}
 800a29c:	bf00      	nop
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	48000400 	.word	0x48000400

0800a2a4 <stim_lib_trg_input_active_high_handle>:

static void stim_lib_trg_input_active_high_handle(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
	if (STIM_LIB_TRG_INPUT_PIN_IS_LOW())
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	4806      	ldr	r0, [pc, #24]	; (800a2c4 <stim_lib_trg_input_active_high_handle+0x20>)
 800a2ac:	f7fb fb96 	bl	80059dc <HAL_GPIO_ReadPin>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d102      	bne.n	800a2bc <stim_lib_trg_input_active_high_handle+0x18>
		/*
		 * Force low of TIM PIO outputs
		 * CAUTION: OCREF must be normalized in PWM mode. Refer to TIM stop Function, stimLib_stimStopRaw()
		 * Stop when the toggle signal is LOW.
		 * */
		stimLib_stimStopDelayRaw();
 800a2b6:	f000 f807 	bl	800a2c8 <stimLib_stimStopDelayRaw>
		 * Initiate stimulation by trigger input.
		 * Start when the toggle signal is HIGH.
		 * */
		stimLib_stimStart();
	}
}
 800a2ba:	e001      	b.n	800a2c0 <stim_lib_trg_input_active_high_handle+0x1c>
		stimLib_stimStart();
 800a2bc:	f7ff fe0f 	bl	8009ede <stimLib_stimStart>
}
 800a2c0:	bf00      	nop
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	48000400 	.word	0x48000400

0800a2c8 <stimLib_stimStopDelayRaw>:
#include "stim_lib_common.h"

#define STIM_LIB_PLUS_OUTPUT_OFF_TIME()						for (int i = 0; i < 0xffff; i++) /* Delay */

void stimLib_stimStopDelayRaw(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
	if (stimLib_stateGet() == stim_lib_state_stimulating)
 800a2ce:	f000 fe2f 	bl	800af30 <stimLib_stateGet>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b03      	cmp	r3, #3
 800a2d6:	d139      	bne.n	800a34c <stimLib_stimStopDelayRaw+0x84>
	{
		/*
		 * I had a problem with not going straight to LOW when ending the pulse.
		 * At the end of the pulse, I change the OC mode immediately to drop the GPIO to the LOW level.
		 * */
		TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 800a2d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2dc:	699a      	ldr	r2, [r3, #24]
 800a2de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a2e2:	4b1c      	ldr	r3, [pc, #112]	; (800a354 <stimLib_stimStopDelayRaw+0x8c>)
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	618b      	str	r3, [r1, #24]
		TIM2->CCMR1 |= (TIM_OCMODE_FORCED_INACTIVE)
 800a2e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a2f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2fa:	6193      	str	r3, [r2, #24]
				| (TIM_OCMODE_FORCED_INACTIVE << 8U);

		TIM2->CCMR2 &= ~(TIM_CCMR2_OC3M | TIM_CCMR2_OC4M);
 800a2fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a300:	69da      	ldr	r2, [r3, #28]
 800a302:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a306:	4b13      	ldr	r3, [pc, #76]	; (800a354 <stimLib_stimStopDelayRaw+0x8c>)
 800a308:	4013      	ands	r3, r2
 800a30a:	61cb      	str	r3, [r1, #28]
		TIM2->CCMR2 |= (TIM_OCMODE_FORCED_INACTIVE)
 800a30c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a31a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a31e:	61d3      	str	r3, [r2, #28]

		/*
		 * Since it must be used not only in the polling method but also inside the interrupt, the Delay function is avoided and replaced with a For statement.
		 * stimLib_delay(STIM_LIB_PLUS_OUTPUT_OFF_TIME);
		 * */
		STIM_LIB_PLUS_OUTPUT_OFF_TIME();
 800a320:	2300      	movs	r3, #0
 800a322:	607b      	str	r3, [r7, #4]
 800a324:	e002      	b.n	800a32c <stimLib_stimStopDelayRaw+0x64>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3301      	adds	r3, #1
 800a32a:	607b      	str	r3, [r7, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a332:	4293      	cmp	r3, r2
 800a334:	ddf7      	ble.n	800a326 <stimLib_stimStopDelayRaw+0x5e>

		/*
		 * TIM2 CH3 DMA TC INTERRUPT ENABLE
		 * */
		__HAL_DMA_ENABLE_IT(&hdma_tim2_ch3, (DMA_IT_TC));
 800a336:	4b08      	ldr	r3, [pc, #32]	; (800a358 <stimLib_stimStopDelayRaw+0x90>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	4b06      	ldr	r3, [pc, #24]	; (800a358 <stimLib_stimStopDelayRaw+0x90>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f042 0202 	orr.w	r2, r2, #2
 800a344:	601a      	str	r2, [r3, #0]

		stimLib_stateSet(stim_lib_state_stim_stopping);
 800a346:	2004      	movs	r0, #4
 800a348:	f000 fdfe 	bl	800af48 <stimLib_stateSet>
	}
}
 800a34c:	bf00      	nop
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	fefe8f8f 	.word	0xfefe8f8f
 800a358:	20000390 	.word	0x20000390

0800a35c <stimLib_gpioInit>:
#include "stim_lib_stim_cfg.h"
#include "stim_lib_state.h"

/* INIT FUNCTION */
bool stimLib_gpioInit(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08a      	sub	sp, #40	; 0x28
 800a360:	af00      	add	r7, sp, #0
	/* GPIO INIT */
	GPIO_InitTypeDef GPIO_InitStruct =
 800a362:	f107 0314 	add.w	r3, r7, #20
 800a366:	2200      	movs	r2, #0
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	605a      	str	r2, [r3, #4]
 800a36c:	609a      	str	r2, [r3, #8]
 800a36e:	60da      	str	r2, [r3, #12]
 800a370:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800a372:	4b2e      	ldr	r3, [pc, #184]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a376:	4a2d      	ldr	r2, [pc, #180]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a378:	f043 0304 	orr.w	r3, r3, #4
 800a37c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a37e:	4b2b      	ldr	r3, [pc, #172]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	613b      	str	r3, [r7, #16]
 800a388:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800a38a:	4b28      	ldr	r3, [pc, #160]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a38e:	4a27      	ldr	r2, [pc, #156]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a394:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a396:	4b25      	ldr	r3, [pc, #148]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a3a2:	4b22      	ldr	r3, [pc, #136]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a6:	4a21      	ldr	r2, [pc, #132]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a3a8:	f043 0301 	orr.w	r3, r3, #1
 800a3ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3ae:	4b1f      	ldr	r3, [pc, #124]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	60bb      	str	r3, [r7, #8]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a3ba:	4b1c      	ldr	r3, [pc, #112]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3be:	4a1b      	ldr	r2, [pc, #108]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a3c0:	f043 0302 	orr.w	r3, r3, #2
 800a3c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3c6:	4b19      	ldr	r3, [pc, #100]	; (800a42c <stimLib_gpioInit+0xd0>)
 800a3c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	607b      	str	r3, [r7, #4]
 800a3d0:	687b      	ldr	r3, [r7, #4]

	/* Configure GPIO pin Output Level */
	/* DAC and PEAK DISCHARGE SW */
	HAL_GPIO_WritePin(GPIOB,
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f241 11fe 	movw	r1, #4606	; 0x11fe
 800a3d8:	4815      	ldr	r0, [pc, #84]	; (800a430 <stimLib_gpioInit+0xd4>)
 800a3da:	f7fb fb17 	bl	8005a0c <HAL_GPIO_WritePin>
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN, GPIO_PIN_RESET);

	/* PEAK DETECTION */
	HAL_GPIO_WritePin(STIM_LIB_PEAK_DETECTION_PWR_SW_GPIO_PORT,
 800a3de:	2200      	movs	r2, #0
 800a3e0:	2108      	movs	r1, #8
 800a3e2:	4814      	ldr	r0, [pc, #80]	; (800a434 <stimLib_gpioInit+0xd8>)
 800a3e4:	f7fb fb12 	bl	8005a0c <HAL_GPIO_WritePin>
	STIM_LIB_PEAK_DETECTION_PWR_SW_PIN, GPIO_PIN_RESET);

	/* Configure GPIO pin : DAC and PEAK DISCHARGE SW */
	GPIO_InitStruct.Pin = STIM_LIB_DAC_N0_PIN | STIM_LIB_DAC_N1_PIN
 800a3e8:	f241 13fe 	movw	r3, #4606	; 0x11fe
 800a3ec:	617b      	str	r3, [r7, #20]
			| STIM_LIB_PEAK_DISCHG_SW_PIN | STIM_LIB_DAC_N2_PIN
			| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN | STIM_LIB_DAC_N5_PIN
			| STIM_LIB_DAC_N6_PIN | STIM_LIB_DAC_N7_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3fa:	f107 0314 	add.w	r3, r7, #20
 800a3fe:	4619      	mov	r1, r3
 800a400:	480b      	ldr	r0, [pc, #44]	; (800a430 <stimLib_gpioInit+0xd4>)
 800a402:	f7fb f8a7 	bl	8005554 <HAL_GPIO_Init>

	/* Configure GPIO pin : PEAK_DETECTION_PWR_SW_Pin */
	GPIO_InitStruct.Pin = STIM_LIB_PEAK_DETECTION_PWR_SW_PIN;
 800a406:	2308      	movs	r3, #8
 800a408:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a40a:	2301      	movs	r3, #1
 800a40c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a412:	2300      	movs	r3, #0
 800a414:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(STIM_LIB_PEAK_DETECTION_PWR_SW_GPIO_PORT, &GPIO_InitStruct);
 800a416:	f107 0314 	add.w	r3, r7, #20
 800a41a:	4619      	mov	r1, r3
 800a41c:	4805      	ldr	r0, [pc, #20]	; (800a434 <stimLib_gpioInit+0xd8>)
 800a41e:	f7fb f899 	bl	8005554 <HAL_GPIO_Init>

	return true;
 800a422:	2301      	movs	r3, #1
}
 800a424:	4618      	mov	r0, r3
 800a426:	3728      	adds	r7, #40	; 0x28
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	40021000 	.word	0x40021000
 800a430:	48000400 	.word	0x48000400
 800a434:	48001c00 	.word	0x48001c00

0800a438 <stimLib_dmaInit>:

bool stimLib_dmaInit(void)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800a43e:	4b1a      	ldr	r3, [pc, #104]	; (800a4a8 <stimLib_dmaInit+0x70>)
 800a440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a442:	4a19      	ldr	r2, [pc, #100]	; (800a4a8 <stimLib_dmaInit+0x70>)
 800a444:	f043 0301 	orr.w	r3, r3, #1
 800a448:	6493      	str	r3, [r2, #72]	; 0x48
 800a44a:	4b17      	ldr	r3, [pc, #92]	; (800a4a8 <stimLib_dmaInit+0x70>)
 800a44c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	607b      	str	r3, [r7, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800a456:	4b14      	ldr	r3, [pc, #80]	; (800a4a8 <stimLib_dmaInit+0x70>)
 800a458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a45a:	4a13      	ldr	r2, [pc, #76]	; (800a4a8 <stimLib_dmaInit+0x70>)
 800a45c:	f043 0302 	orr.w	r3, r3, #2
 800a460:	6493      	str	r3, [r2, #72]	; 0x48
 800a462:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <stimLib_dmaInit+0x70>)
 800a464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a466:	f003 0302 	and.w	r3, r3, #2
 800a46a:	603b      	str	r3, [r7, #0]
 800a46c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */

	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800a46e:	2200      	movs	r2, #0
 800a470:	2101      	movs	r1, #1
 800a472:	200b      	movs	r0, #11
 800a474:	f7fa fd21 	bl	8004eba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a478:	200b      	movs	r0, #11
 800a47a:	f7fa fd3a 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 800a47e:	2200      	movs	r2, #0
 800a480:	2101      	movs	r1, #1
 800a482:	200c      	movs	r0, #12
 800a484:	f7fa fd19 	bl	8004eba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a488:	200c      	movs	r0, #12
 800a48a:	f7fa fd32 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 800a48e:	2200      	movs	r2, #0
 800a490:	2101      	movs	r1, #1
 800a492:	2011      	movs	r0, #17
 800a494:	f7fa fd11 	bl	8004eba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800a498:	2011      	movs	r0, #17
 800a49a:	f7fa fd2a 	bl	8004ef2 <HAL_NVIC_EnableIRQ>

	return STIM_LIB_RESOURCE_INIT_OK;
 800a49e:	2301      	movs	r3, #1
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	40021000 	.word	0x40021000

0800a4ac <stimLib_tim1_Init>:

bool stimLib_tim1_Init(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b096      	sub	sp, #88	; 0x58
 800a4b0:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig =
 800a4b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	605a      	str	r2, [r3, #4]
 800a4bc:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 800a4be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	605a      	str	r2, [r3, #4]
 800a4c8:	609a      	str	r2, [r3, #8]
 800a4ca:	60da      	str	r2, [r3, #12]
 800a4cc:	611a      	str	r2, [r3, #16]
 800a4ce:	615a      	str	r2, [r3, #20]
 800a4d0:	619a      	str	r2, [r3, #24]
	{ 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 800a4d2:	1d3b      	adds	r3, r7, #4
 800a4d4:	222c      	movs	r2, #44	; 0x2c
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f001 fc71 	bl	800bdc0 <memset>
	{ 0 };

	htim1.Instance = TIM1;
 800a4de:	4b3b      	ldr	r3, [pc, #236]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a4e0:	4a3b      	ldr	r2, [pc, #236]	; (800a5d0 <stimLib_tim1_Init+0x124>)
 800a4e2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 3;
 800a4e4:	4b39      	ldr	r3, [pc, #228]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a4e6:	2203      	movs	r2, #3
 800a4e8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800a4ea:	4b38      	ldr	r3, [pc, #224]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a4ec:	2210      	movs	r2, #16
 800a4ee:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9999;
 800a4f0:	4b36      	ldr	r3, [pc, #216]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a4f2:	f242 720f 	movw	r2, #9999	; 0x270f
 800a4f6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4f8:	4b34      	ldr	r3, [pc, #208]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800a4fe:	4b33      	ldr	r3, [pc, #204]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a500:	2200      	movs	r2, #0
 800a502:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a504:	4b31      	ldr	r3, [pc, #196]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a506:	2280      	movs	r2, #128	; 0x80
 800a508:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a50a:	4830      	ldr	r0, [pc, #192]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a50c:	f7fc ff60 	bl	80073d0 <HAL_TIM_PWM_Init>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <stimLib_tim1_Init+0x6e>
	{
		return false;
 800a516:	2300      	movs	r3, #0
 800a518:	e053      	b.n	800a5c2 <stimLib_tim1_Init+0x116>
	}
	/* MSP :: Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
	stimLib_tim_pwmmspInit(&htim1);
 800a51a:	482c      	ldr	r0, [pc, #176]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a51c:	f000 fbec 	bl	800acf8 <stimLib_tim_pwmmspInit>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a520:	2300      	movs	r3, #0
 800a522:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a524:	2300      	movs	r3, #0
 800a526:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a528:	2300      	movs	r3, #0
 800a52a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a52c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a530:	4619      	mov	r1, r3
 800a532:	4826      	ldr	r0, [pc, #152]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a534:	f7fe f832 	bl	800859c <HAL_TIMEx_MasterConfigSynchronization>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <stimLib_tim1_Init+0x96>
	{
		return false;
 800a53e:	2300      	movs	r3, #0
 800a540:	e03f      	b.n	800a5c2 <stimLib_tim1_Init+0x116>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a542:	2360      	movs	r3, #96	; 0x60
 800a544:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a54a:	2300      	movs	r3, #0
 800a54c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a54e:	2300      	movs	r3, #0
 800a550:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a552:	2300      	movs	r3, #0
 800a554:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a556:	2300      	movs	r3, #0
 800a558:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a55a:	2300      	movs	r3, #0
 800a55c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a55e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a562:	2200      	movs	r2, #0
 800a564:	4619      	mov	r1, r3
 800a566:	4819      	ldr	r0, [pc, #100]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a568:	f7fd fae6 	bl	8007b38 <HAL_TIM_PWM_ConfigChannel>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <stimLib_tim1_Init+0xca>
	{
		return false;
 800a572:	2300      	movs	r3, #0
 800a574:	e025      	b.n	800a5c2 <stimLib_tim1_Init+0x116>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a576:	2300      	movs	r3, #0
 800a578:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a586:	2300      	movs	r3, #0
 800a588:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a58a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a58e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800a590:	2300      	movs	r3, #0
 800a592:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a594:	2300      	movs	r3, #0
 800a596:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a59c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a5a6:	1d3b      	adds	r3, r7, #4
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4808      	ldr	r0, [pc, #32]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a5ac:	f7fe f85c 	bl	8008668 <HAL_TIMEx_ConfigBreakDeadTime>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <stimLib_tim1_Init+0x10e>
	{
		return false;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e003      	b.n	800a5c2 <stimLib_tim1_Init+0x116>
	}

	/* MSP :: TIMER GPIO */
	stimLib_tim_msppostInit(&htim1);
 800a5ba:	4804      	ldr	r0, [pc, #16]	; (800a5cc <stimLib_tim1_Init+0x120>)
 800a5bc:	f000 fc5e 	bl	800ae7c <stimLib_tim_msppostInit>

	return STIM_LIB_RESOURCE_INIT_OK;
 800a5c0:	2301      	movs	r3, #1
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3758      	adds	r7, #88	; 0x58
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20000264 	.word	0x20000264
 800a5d0:	40012c00 	.word	0x40012c00

0800a5d4 <stimLib_tim2_Init>:

bool stimLib_tim2_Init(void)
{
 800a5d4:	b590      	push	{r4, r7, lr}
 800a5d6:	b08b      	sub	sp, #44	; 0x2c
 800a5d8:	af00      	add	r7, sp, #0
	/* TIMER2 SETTING */
	TIM_MasterConfigTypeDef sMasterConfig =
 800a5da:	f107 031c 	add.w	r3, r7, #28
 800a5de:	2200      	movs	r2, #0
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	605a      	str	r2, [r3, #4]
 800a5e4:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 800a5e6:	463b      	mov	r3, r7
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	605a      	str	r2, [r3, #4]
 800a5ee:	609a      	str	r2, [r3, #8]
 800a5f0:	60da      	str	r2, [r3, #12]
 800a5f2:	611a      	str	r2, [r3, #16]
 800a5f4:	615a      	str	r2, [r3, #20]
 800a5f6:	619a      	str	r2, [r3, #24]
	{ 0 };
	htim2.Instance = TIM2;
 800a5f8:	4b58      	ldr	r3, [pc, #352]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a5fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a5fe:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = STIM_LIB_SIGNAL_PSC_INPUT;
 800a600:	f7fc f886 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800a604:	4603      	mov	r3, r0
 800a606:	4a56      	ldr	r2, [pc, #344]	; (800a760 <stimLib_tim2_Init+0x18c>)
 800a608:	fbb2 f3f3 	udiv	r3, r2, r3
 800a60c:	461a      	mov	r2, r3
 800a60e:	2350      	movs	r3, #80	; 0x50
 800a610:	fb93 f3f2 	sdiv	r3, r3, r2
 800a614:	3b01      	subs	r3, #1
 800a616:	461a      	mov	r2, r3
 800a618:	4b50      	ldr	r3, [pc, #320]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a61a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a61c:	4b4f      	ldr	r3, [pc, #316]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a61e:	2200      	movs	r2, #0
 800a620:	609a      	str	r2, [r3, #8]
	if (STIM_LIB_STATE_SIG_FREQ == 0)
 800a622:	4b50      	ldr	r3, [pc, #320]	; (800a764 <stimLib_tim2_Init+0x190>)
 800a624:	791b      	ldrb	r3, [r3, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d102      	bne.n	800a630 <stimLib_tim2_Init+0x5c>
	{
		STIM_LIB_STATE_SIG_FREQ = 1;
 800a62a:	4b4e      	ldr	r3, [pc, #312]	; (800a764 <stimLib_tim2_Init+0x190>)
 800a62c:	2201      	movs	r2, #1
 800a62e:	711a      	strb	r2, [r3, #4]
	}
	htim2.Init.Period = STIM_LIB_SIGNAL_ARR_INPUT;
 800a630:	f7fc f86e 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800a634:	4604      	mov	r4, r0
 800a636:	f7fc f86b 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800a63a:	4603      	mov	r3, r0
 800a63c:	4a48      	ldr	r2, [pc, #288]	; (800a760 <stimLib_tim2_Init+0x18c>)
 800a63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a642:	461a      	mov	r2, r3
 800a644:	2350      	movs	r3, #80	; 0x50
 800a646:	fb93 f3f2 	sdiv	r3, r3, r2
 800a64a:	fbb4 f3f3 	udiv	r3, r4, r3
 800a64e:	4a45      	ldr	r2, [pc, #276]	; (800a764 <stimLib_tim2_Init+0x190>)
 800a650:	7912      	ldrb	r2, [r2, #4]
 800a652:	fbb3 f3f2 	udiv	r3, r3, r2
 800a656:	3b01      	subs	r3, #1
 800a658:	461a      	mov	r2, r3
 800a65a:	4b40      	ldr	r3, [pc, #256]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a65c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a65e:	4b3f      	ldr	r3, [pc, #252]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a660:	2200      	movs	r2, #0
 800a662:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a664:	4b3d      	ldr	r3, [pc, #244]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a666:	2280      	movs	r2, #128	; 0x80
 800a668:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a66a:	483c      	ldr	r0, [pc, #240]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a66c:	f7fc feb0 	bl	80073d0 <HAL_TIM_PWM_Init>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <stimLib_tim2_Init+0xa6>
	{
		return false;
 800a676:	2300      	movs	r3, #0
 800a678:	e06b      	b.n	800a752 <stimLib_tim2_Init+0x17e>
	}
	/* MSP :: Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
	stimLib_tim_pwmmspInit(&htim2);
 800a67a:	4838      	ldr	r0, [pc, #224]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a67c:	f000 fb3c 	bl	800acf8 <stimLib_tim_pwmmspInit>

	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800a680:	4836      	ldr	r0, [pc, #216]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a682:	f7fc fb64 	bl	8006d4e <HAL_TIM_OC_Init>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <stimLib_tim2_Init+0xbc>
	{
		return false;
 800a68c:	2300      	movs	r3, #0
 800a68e:	e060      	b.n	800a752 <stimLib_tim2_Init+0x17e>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800a690:	2350      	movs	r3, #80	; 0x50
 800a692:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a694:	2300      	movs	r3, #0
 800a696:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a698:	f107 031c 	add.w	r3, r7, #28
 800a69c:	4619      	mov	r1, r3
 800a69e:	482f      	ldr	r0, [pc, #188]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a6a0:	f7fd ff7c 	bl	800859c <HAL_TIMEx_MasterConfigSynchronization>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <stimLib_tim2_Init+0xda>
	{
		return false;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e051      	b.n	800a752 <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 1 :: TRIGGER OUTPUT */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a6ae:	2360      	movs	r3, #96	; 0x60
 800a6b0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_TRG_OUTPUT_PULSE_TIME;
 800a6b2:	4b2c      	ldr	r3, [pc, #176]	; (800a764 <stimLib_tim2_Init+0x190>)
 800a6b4:	88db      	ldrh	r3, [r3, #6]
 800a6b6:	330f      	adds	r3, #15
 800a6b8:	005b      	lsls	r3, r3, #1
 800a6ba:	607b      	str	r3, [r7, #4]

	if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_low)
 800a6bc:	4b29      	ldr	r3, [pc, #164]	; (800a764 <stimLib_tim2_Init+0x190>)
 800a6be:	7c9b      	ldrb	r3, [r3, #18]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d102      	bne.n	800a6ca <stimLib_tim2_Init+0xf6>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	60bb      	str	r3, [r7, #8]
 800a6c8:	e005      	b.n	800a6d6 <stimLib_tim2_Init+0x102>
	}
	else if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_high)
 800a6ca:	4b26      	ldr	r3, [pc, #152]	; (800a764 <stimLib_tim2_Init+0x190>)
 800a6cc:	7c9b      	ldrb	r3, [r3, #18]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d101      	bne.n	800a6d6 <stimLib_tim2_Init+0x102>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60bb      	str	r3, [r7, #8]
	}

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC,
 800a6d6:	463b      	mov	r3, r7
 800a6d8:	2200      	movs	r2, #0
 800a6da:	4619      	mov	r1, r3
 800a6dc:	481f      	ldr	r0, [pc, #124]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a6de:	f7fd fa2b 	bl	8007b38 <HAL_TIM_PWM_ConfigChannel>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <stimLib_tim2_Init+0x118>
	STIM_LIB_PULSE_TRG_OUT_TIM_CH) != HAL_OK)
	{
		return false;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e032      	b.n	800a752 <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 2 :: ANODE PULSE */
	sConfigOC.Pulse = STIM_LIB_ANODE_PULSE_TIME;
 800a6ec:	4b1d      	ldr	r3, [pc, #116]	; (800a764 <stimLib_tim2_Init+0x190>)
 800a6ee:	88db      	ldrh	r3, [r3, #6]
 800a6f0:	330a      	adds	r3, #10
 800a6f2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC,
 800a6f8:	463b      	mov	r3, r7
 800a6fa:	2204      	movs	r2, #4
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4817      	ldr	r0, [pc, #92]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a700:	f7fd fa1a 	bl	8007b38 <HAL_TIM_PWM_ConfigChannel>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <stimLib_tim2_Init+0x13a>
	STIM_LIB_PULSE_ANODE_TIM_CH) != HAL_OK)
	{
		return false;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e021      	b.n	800a752 <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 3 :: CATHODE PULSE */
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800a70e:	2330      	movs	r3, #48	; 0x30
 800a710:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_CATHODE_PULSE_TIME1;
 800a712:	4b14      	ldr	r3, [pc, #80]	; (800a764 <stimLib_tim2_Init+0x190>)
 800a714:	88db      	ldrh	r3, [r3, #6]
 800a716:	3314      	adds	r3, #20
 800a718:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC,
 800a71a:	463b      	mov	r3, r7
 800a71c:	2208      	movs	r2, #8
 800a71e:	4619      	mov	r1, r3
 800a720:	480e      	ldr	r0, [pc, #56]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a722:	f7fd f98f 	bl	8007a44 <HAL_TIM_OC_ConfigChannel>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <stimLib_tim2_Init+0x15c>
	STIM_LIB_PULSE_CATHODE_TIM_CH) != HAL_OK)
	{
		return false;
 800a72c:	2300      	movs	r3, #0
 800a72e:	e010      	b.n	800a752 <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 4 :: DAC_ON_N PULSE or STIM DISCHARGE PULSE */
#if 1
	sConfigOC.Pulse = STIM_LIB_SIGNAL_GLICH_TIME;
 800a730:	2305      	movs	r3, #5
 800a732:	607b      	str	r3, [r7, #4]
#else
					sConfigOC.Pulse = STIM_LIB_DISCHARGE_PULSE_TIME1;
		#endif
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC,
 800a734:	463b      	mov	r3, r7
 800a736:	220c      	movs	r2, #12
 800a738:	4619      	mov	r1, r3
 800a73a:	4808      	ldr	r0, [pc, #32]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a73c:	f7fd f982 	bl	8007a44 <HAL_TIM_OC_ConfigChannel>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <stimLib_tim2_Init+0x176>
	STIM_LIB_PULSE_DAC_ON_TIM_CH) != HAL_OK)
	{
		return false;
 800a746:	2300      	movs	r3, #0
 800a748:	e003      	b.n	800a752 <stimLib_tim2_Init+0x17e>
	}

	/* MSP :: TIMER GPIO */
	stimLib_tim_msppostInit(&htim2);
 800a74a:	4804      	ldr	r0, [pc, #16]	; (800a75c <stimLib_tim2_Init+0x188>)
 800a74c:	f000 fb96 	bl	800ae7c <stimLib_tim_msppostInit>

	return STIM_LIB_RESOURCE_INIT_OK;
 800a750:	2301      	movs	r3, #1
}
 800a752:	4618      	mov	r0, r3
 800a754:	372c      	adds	r7, #44	; 0x2c
 800a756:	46bd      	mov	sp, r7
 800a758:	bd90      	pop	{r4, r7, pc}
 800a75a:	bf00      	nop
 800a75c:	200002b0 	.word	0x200002b0
 800a760:	04c4b400 	.word	0x04c4b400
 800a764:	20000660 	.word	0x20000660

0800a768 <stimLib_tim6_Init>:

bool stimLib_tim6_Init(void)
{
 800a768:	b590      	push	{r4, r7, lr}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig =
 800a76e:	1d3b      	adds	r3, r7, #4
 800a770:	2200      	movs	r2, #0
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	605a      	str	r2, [r3, #4]
 800a776:	609a      	str	r2, [r3, #8]
	{ 0 };

	htim6.Instance = TIM6;
 800a778:	4b26      	ldr	r3, [pc, #152]	; (800a814 <stimLib_tim6_Init+0xac>)
 800a77a:	4a27      	ldr	r2, [pc, #156]	; (800a818 <stimLib_tim6_Init+0xb0>)
 800a77c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = STIM_LIB_STEPUP_PSC_INPUT;
 800a77e:	f7fb ffc7 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800a782:	4603      	mov	r3, r0
 800a784:	4a25      	ldr	r2, [pc, #148]	; (800a81c <stimLib_tim6_Init+0xb4>)
 800a786:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a790:	fb93 f3f2 	sdiv	r3, r3, r2
 800a794:	3b01      	subs	r3, #1
 800a796:	461a      	mov	r2, r3
 800a798:	4b1e      	ldr	r3, [pc, #120]	; (800a814 <stimLib_tim6_Init+0xac>)
 800a79a:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a79c:	4b1d      	ldr	r3, [pc, #116]	; (800a814 <stimLib_tim6_Init+0xac>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = STIM_LIB_STEPUP_ARR_INPUT;
 800a7a2:	f7fb ffb5 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	f7fb ffb2 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	4a1b      	ldr	r2, [pc, #108]	; (800a81c <stimLib_tim6_Init+0xb4>)
 800a7b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a7ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7be:	fbb4 f3f3 	udiv	r3, r4, r3
 800a7c2:	4a17      	ldr	r2, [pc, #92]	; (800a820 <stimLib_tim6_Init+0xb8>)
 800a7c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c8:	08db      	lsrs	r3, r3, #3
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4b11      	ldr	r3, [pc, #68]	; (800a814 <stimLib_tim6_Init+0xac>)
 800a7d0:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a7d2:	4b10      	ldr	r3, [pc, #64]	; (800a814 <stimLib_tim6_Init+0xac>)
 800a7d4:	2280      	movs	r2, #128	; 0x80
 800a7d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a7d8:	480e      	ldr	r0, [pc, #56]	; (800a814 <stimLib_tim6_Init+0xac>)
 800a7da:	f7fc f9b7 	bl	8006b4c <HAL_TIM_Base_Init>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <stimLib_tim6_Init+0x80>
	{
		return false;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	e011      	b.n	800a80c <stimLib_tim6_Init+0xa4>
	}

	/* MSP :: TIMER 6 :: HAL_TIM_BASE_INIT >> HAL_TIM_Base_MspInit */
	stimLib_tim_basemspInit(&htim6);
 800a7e8:	480a      	ldr	r0, [pc, #40]	; (800a814 <stimLib_tim6_Init+0xac>)
 800a7ea:	f000 fb21 	bl	800ae30 <stimLib_tim_basemspInit>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a7f6:	1d3b      	adds	r3, r7, #4
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4806      	ldr	r0, [pc, #24]	; (800a814 <stimLib_tim6_Init+0xac>)
 800a7fc:	f7fd fece 	bl	800859c <HAL_TIMEx_MasterConfigSynchronization>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d001      	beq.n	800a80a <stimLib_tim6_Init+0xa2>
	{
		return false;
 800a806:	2300      	movs	r3, #0
 800a808:	e000      	b.n	800a80c <stimLib_tim6_Init+0xa4>
	}

	return STIM_LIB_RESOURCE_INIT_OK;
 800a80a:	2301      	movs	r3, #1
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	bd90      	pop	{r4, r7, pc}
 800a814:	200002fc 	.word	0x200002fc
 800a818:	40001000 	.word	0x40001000
 800a81c:	04c4b400 	.word	0x04c4b400
 800a820:	cccccccd 	.word	0xcccccccd

0800a824 <stimLib_adc1_Init>:

bool stimLib_adc1_Init(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b090      	sub	sp, #64	; 0x40
 800a828:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode =
 800a82a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
 800a832:	605a      	str	r2, [r3, #4]
 800a834:	609a      	str	r2, [r3, #8]
	{ 0 };
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig =
 800a836:	f107 031c 	add.w	r3, r7, #28
 800a83a:	2200      	movs	r2, #0
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	605a      	str	r2, [r3, #4]
 800a840:	609a      	str	r2, [r3, #8]
 800a842:	60da      	str	r2, [r3, #12]
 800a844:	611a      	str	r2, [r3, #16]
 800a846:	615a      	str	r2, [r3, #20]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 800a848:	1d3b      	adds	r3, r7, #4
 800a84a:	2200      	movs	r2, #0
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	605a      	str	r2, [r3, #4]
 800a850:	609a      	str	r2, [r3, #8]
 800a852:	60da      	str	r2, [r3, #12]
 800a854:	611a      	str	r2, [r3, #16]
 800a856:	615a      	str	r2, [r3, #20]
	{ 0 };

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800a858:	4b42      	ldr	r3, [pc, #264]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a85a:	4a43      	ldr	r2, [pc, #268]	; (800a968 <stimLib_adc1_Init+0x144>)
 800a85c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a85e:	4b41      	ldr	r3, [pc, #260]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a860:	2200      	movs	r2, #0
 800a862:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a864:	4b3f      	ldr	r3, [pc, #252]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a866:	2200      	movs	r2, #0
 800a868:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a86a:	4b3e      	ldr	r3, [pc, #248]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a870:	4b3c      	ldr	r3, [pc, #240]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a872:	2200      	movs	r2, #0
 800a874:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a876:	4b3b      	ldr	r3, [pc, #236]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a878:	2208      	movs	r2, #8
 800a87a:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800a87c:	4b39      	ldr	r3, [pc, #228]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a87e:	2200      	movs	r2, #0
 800a880:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800a882:	4b38      	ldr	r3, [pc, #224]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a884:	2201      	movs	r2, #1
 800a886:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800a888:	4b36      	ldr	r3, [pc, #216]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a88a:	2201      	movs	r2, #1
 800a88c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a88e:	4b35      	ldr	r3, [pc, #212]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a896:	4b33      	ldr	r3, [pc, #204]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a898:	2200      	movs	r2, #0
 800a89a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a89c:	4b31      	ldr	r3, [pc, #196]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800a8a2:	4b30      	ldr	r3, [pc, #192]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a8aa:	4b2e      	ldr	r3, [pc, #184]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a8ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a8b0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800a8b2:	4b2c      	ldr	r3, [pc, #176]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a8ba:	482a      	ldr	r0, [pc, #168]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a8bc:	f7f8 fb00 	bl	8002ec0 <HAL_ADC_Init>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <stimLib_adc1_Init+0xa6>
	{
		return false;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	e047      	b.n	800a95a <stimLib_adc1_Init+0x136>
	}

	/* MSP SETTING */
	stimLib_adc_mspInit(&hadc1);
 800a8ca:	4826      	ldr	r0, [pc, #152]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a8cc:	f000 f938 	bl	800ab40 <stimLib_adc_mspInit>
	/* Set ADC error code to none */
	ADC_CLEAR_ERRORCODE(&hadc1);
 800a8d0:	4b24      	ldr	r3, [pc, #144]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	659a      	str	r2, [r3, #88]	; 0x58
	/* Initialize Lock */
	hadc1.Lock = HAL_UNLOCKED;
 800a8d6:	4b23      	ldr	r3, [pc, #140]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a8e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	481e      	ldr	r0, [pc, #120]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a8ea:	f7fa f943 	bl	8004b74 <HAL_ADCEx_MultiModeConfigChannel>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <stimLib_adc1_Init+0xd4>
	{
		return false;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	e030      	b.n	800a95a <stimLib_adc1_Init+0x136>
	}

	/** Configure Analog WatchDog 1
	 */
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800a8f8:	4b1c      	ldr	r3, [pc, #112]	; (800a96c <stimLib_adc1_Init+0x148>)
 800a8fa:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800a8fc:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800a900:	623b      	str	r3, [r7, #32]
	AnalogWDGConfig.Channel = ADC_CHANNEL_9;
 800a902:	4b1b      	ldr	r3, [pc, #108]	; (800a970 <stimLib_adc1_Init+0x14c>)
 800a904:	627b      	str	r3, [r7, #36]	; 0x24
	AnalogWDGConfig.ITMode = ENABLE;
 800a906:	2301      	movs	r3, #1
 800a908:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	AnalogWDGConfig.HighThreshold = 2600;
 800a90c:	f640 2328 	movw	r3, #2600	; 0xa28
 800a910:	62fb      	str	r3, [r7, #44]	; 0x2c
	AnalogWDGConfig.LowThreshold = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800a916:	f107 031c 	add.w	r3, r7, #28
 800a91a:	4619      	mov	r1, r3
 800a91c:	4811      	ldr	r0, [pc, #68]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a91e:	f7f9 fc8f 	bl	8004240 <HAL_ADC_AnalogWDGConfig>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <stimLib_adc1_Init+0x108>
	{
		return false;
 800a928:	2300      	movs	r3, #0
 800a92a:	e016      	b.n	800a95a <stimLib_adc1_Init+0x136>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800a92c:	4b10      	ldr	r3, [pc, #64]	; (800a970 <stimLib_adc1_Init+0x14c>)
 800a92e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800a930:	2306      	movs	r3, #6
 800a932:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800a934:	2300      	movs	r3, #0
 800a936:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a938:	237f      	movs	r3, #127	; 0x7f
 800a93a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a93c:	2304      	movs	r3, #4
 800a93e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a944:	1d3b      	adds	r3, r7, #4
 800a946:	4619      	mov	r1, r3
 800a948:	4806      	ldr	r0, [pc, #24]	; (800a964 <stimLib_adc1_Init+0x140>)
 800a94a:	f7f9 f87d 	bl	8003a48 <HAL_ADC_ConfigChannel>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <stimLib_adc1_Init+0x134>
	{
		return false;
 800a954:	2300      	movs	r3, #0
 800a956:	e000      	b.n	800a95a <stimLib_adc1_Init+0x136>
	}
	return STIM_LIB_RESOURCE_INIT_OK;
 800a958:	2301      	movs	r3, #1
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3740      	adds	r7, #64	; 0x40
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	2000010c 	.word	0x2000010c
 800a968:	50040000 	.word	0x50040000
 800a96c:	7dc00000 	.word	0x7dc00000
 800a970:	25b00200 	.word	0x25b00200

0800a974 <stimLib_adc2_Init>:

bool stimLib_adc2_Init(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig =
 800a97a:	463b      	mov	r3, r7
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	605a      	str	r2, [r3, #4]
 800a982:	609a      	str	r2, [r3, #8]
 800a984:	60da      	str	r2, [r3, #12]
 800a986:	611a      	str	r2, [r3, #16]
 800a988:	615a      	str	r2, [r3, #20]
	{ 0 };

	/** Common config
	 */
	hadc2.Instance = ADC2;
 800a98a:	4b38      	ldr	r3, [pc, #224]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a98c:	4a38      	ldr	r2, [pc, #224]	; (800aa70 <stimLib_adc2_Init+0xfc>)
 800a98e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a990:	4b36      	ldr	r3, [pc, #216]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a992:	2200      	movs	r2, #0
 800a994:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a996:	4b35      	ldr	r3, [pc, #212]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a998:	2200      	movs	r2, #0
 800a99a:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a99c:	4b33      	ldr	r3, [pc, #204]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	60da      	str	r2, [r3, #12]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a9a2:	4b32      	ldr	r3, [pc, #200]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a9a8:	4b30      	ldr	r3, [pc, #192]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9aa:	2208      	movs	r2, #8
 800a9ac:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800a9ae:	4b2f      	ldr	r3, [pc, #188]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800a9b4:	4b2d      	ldr	r3, [pc, #180]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 2;
 800a9ba:	4b2c      	ldr	r3, [pc, #176]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9bc:	2202      	movs	r2, #2
 800a9be:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a9c0:	4b2a      	ldr	r3, [pc, #168]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800a9c8:	4b28      	ldr	r3, [pc, #160]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9ca:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800a9ce:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800a9d0:	4b26      	ldr	r3, [pc, #152]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9d6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.DMAContinuousRequests = ENABLE;
 800a9d8:	4b24      	ldr	r3, [pc, #144]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a9e0:	4b22      	ldr	r3, [pc, #136]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9e6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 800a9e8:	4b20      	ldr	r3, [pc, #128]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a9f0:	481e      	ldr	r0, [pc, #120]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800a9f2:	f7f8 fa65 	bl	8002ec0 <HAL_ADC_Init>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d001      	beq.n	800aa00 <stimLib_adc2_Init+0x8c>
	{
		return false;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e030      	b.n	800aa62 <stimLib_adc2_Init+0xee>
	}
	/* MSP SETTING */
	stimLib_adc_mspInit(&hadc2);
 800aa00:	481a      	ldr	r0, [pc, #104]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800aa02:	f000 f89d 	bl	800ab40 <stimLib_adc_mspInit>
	/* Set ADC error code to none */
	ADC_CLEAR_ERRORCODE(&hadc2);
 800aa06:	4b19      	ldr	r3, [pc, #100]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	659a      	str	r2, [r3, #88]	; 0x58
	/* Initialize Lock */
	hadc2.Lock = HAL_UNLOCKED;
 800aa0c:	4b17      	ldr	r3, [pc, #92]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 800aa14:	4b17      	ldr	r3, [pc, #92]	; (800aa74 <stimLib_adc2_Init+0x100>)
 800aa16:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800aa18:	2306      	movs	r3, #6
 800aa1a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800aa20:	237f      	movs	r3, #127	; 0x7f
 800aa22:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800aa24:	2304      	movs	r3, #4
 800aa26:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800aa2c:	463b      	mov	r3, r7
 800aa2e:	4619      	mov	r1, r3
 800aa30:	480e      	ldr	r0, [pc, #56]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800aa32:	f7f9 f809 	bl	8003a48 <HAL_ADC_ConfigChannel>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <stimLib_adc2_Init+0xcc>
	{
		return false;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e010      	b.n	800aa62 <stimLib_adc2_Init+0xee>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 800aa40:	4b0d      	ldr	r3, [pc, #52]	; (800aa78 <stimLib_adc2_Init+0x104>)
 800aa42:	603b      	str	r3, [r7, #0]
	sConfig.Channel = ADC_CHANNEL_12;
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <stimLib_adc2_Init+0x104>)
 800aa46:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800aa48:	230c      	movs	r3, #12
 800aa4a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800aa4c:	463b      	mov	r3, r7
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4806      	ldr	r0, [pc, #24]	; (800aa6c <stimLib_adc2_Init+0xf8>)
 800aa52:	f7f8 fff9 	bl	8003a48 <HAL_ADC_ConfigChannel>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <stimLib_adc2_Init+0xec>
	{
		return false;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	e000      	b.n	800aa62 <stimLib_adc2_Init+0xee>
	}
	return STIM_LIB_RESOURCE_INIT_OK;
 800aa60:	2301      	movs	r3, #1
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3718      	adds	r7, #24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20000170 	.word	0x20000170
 800aa70:	50040100 	.word	0x50040100
 800aa74:	2e300800 	.word	0x2e300800
 800aa78:	32601000 	.word	0x32601000

0800aa7c <stimLib_gpioDeinit>:

/* DEINIT FUNCTION */
void stimLib_gpioDeinit(void)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOA,
 800aa80:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800aa84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa88:	f7fa fed6 	bl	8005838 <HAL_GPIO_DeInit>
			STIM_LIB_STEP_UP_SW_PIN | STIM_LIB_STEP_UP_FEEDBACK_PIN
					| STIM_LIB_STIM_ANODE_PIN | STIM_LIB_STIM_CATHODE_PIN
					| STIM_LIB_DAC_ON_N_PIN | STIM_LIB_STIM_TRIGGER_OUTPUT_PIN
					| STIM_LIB_PEAK_DETECTION_R_PIN
					| STIM_LIB_PEAK_DETECTION_L_PIN);
	HAL_GPIO_DeInit(GPIOB,
 800aa8c:	f241 11ff 	movw	r1, #4607	; 0x11ff
 800aa90:	4804      	ldr	r0, [pc, #16]	; (800aaa4 <stimLib_gpioDeinit+0x28>)
 800aa92:	f7fa fed1 	bl	8005838 <HAL_GPIO_DeInit>
			STIM_LIB_STIM_TRIGGER_INPUT_PIN | STIM_LIB_DAC_N0_PIN
					| STIM_LIB_DAC_N1_PIN | STIM_LIB_DAC_N2_PIN
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN | STIM_LIB_PEAK_DISCHG_SW_PIN);
	HAL_GPIO_DeInit(STIM_LIB_PEAK_DETECTION_PWR_SW_GPIO_PORT,
 800aa96:	2108      	movs	r1, #8
 800aa98:	4803      	ldr	r0, [pc, #12]	; (800aaa8 <stimLib_gpioDeinit+0x2c>)
 800aa9a:	f7fa fecd 	bl	8005838 <HAL_GPIO_DeInit>
	STIM_LIB_PEAK_DETECTION_PWR_SW_PIN);
}
 800aa9e:	bf00      	nop
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	48000400 	.word	0x48000400
 800aaa8:	48001c00 	.word	0x48001c00

0800aaac <stimLib_dmaDeinit>:

void stimLib_dmaDeinit(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
	HAL_DMA_DeInit(&hdma_adc1);
 800aab0:	4806      	ldr	r0, [pc, #24]	; (800aacc <stimLib_dmaDeinit+0x20>)
 800aab2:	f7fa faff 	bl	80050b4 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800aab6:	4806      	ldr	r0, [pc, #24]	; (800aad0 <stimLib_dmaDeinit+0x24>)
 800aab8:	f7fa fafc 	bl	80050b4 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim2_ch2_ch4);
 800aabc:	4805      	ldr	r0, [pc, #20]	; (800aad4 <stimLib_dmaDeinit+0x28>)
 800aabe:	f7fa faf9 	bl	80050b4 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim2_ch3);
 800aac2:	4805      	ldr	r0, [pc, #20]	; (800aad8 <stimLib_dmaDeinit+0x2c>)
 800aac4:	f7fa faf6 	bl	80050b4 <HAL_DMA_DeInit>
}
 800aac8:	bf00      	nop
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	200001d4 	.word	0x200001d4
 800aad0:	2000021c 	.word	0x2000021c
 800aad4:	20000348 	.word	0x20000348
 800aad8:	20000390 	.word	0x20000390

0800aadc <stimLib_tim1_Deinit>:

void stimLib_tim1_Deinit(void)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_DeInit(&htim1);
 800aae0:	4802      	ldr	r0, [pc, #8]	; (800aaec <stimLib_tim1_Deinit+0x10>)
 800aae2:	f7fc fccc 	bl	800747e <HAL_TIM_PWM_DeInit>
}
 800aae6:	bf00      	nop
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	20000264 	.word	0x20000264

0800aaf0 <stimLib_tim2_Deinit>:

void stimLib_tim2_Deinit(void)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_DeInit(&htim2);
 800aaf4:	4802      	ldr	r0, [pc, #8]	; (800ab00 <stimLib_tim2_Deinit+0x10>)
 800aaf6:	f7fc fcc2 	bl	800747e <HAL_TIM_PWM_DeInit>
}
 800aafa:	bf00      	nop
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	200002b0 	.word	0x200002b0

0800ab04 <stimLib_tim6_Deinit>:

void stimLib_tim6_Deinit(void)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_DeInit(&htim6);
 800ab08:	4802      	ldr	r0, [pc, #8]	; (800ab14 <stimLib_tim6_Deinit+0x10>)
 800ab0a:	f7fc fcb8 	bl	800747e <HAL_TIM_PWM_DeInit>
}
 800ab0e:	bf00      	nop
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	200002fc 	.word	0x200002fc

0800ab18 <stimLib_adc1_Deinit>:

void stimLib_adc1_Deinit(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 800ab1c:	4802      	ldr	r0, [pc, #8]	; (800ab28 <stimLib_adc1_Deinit+0x10>)
 800ab1e:	f7f8 fb1f 	bl	8003160 <HAL_ADC_DeInit>
}
 800ab22:	bf00      	nop
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	2000010c 	.word	0x2000010c

0800ab2c <stimLib_adc2_Deinit>:

void stimLib_adc2_Deinit(void)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc2);
 800ab30:	4802      	ldr	r0, [pc, #8]	; (800ab3c <stimLib_adc2_Deinit+0x10>)
 800ab32:	f7f8 fb15 	bl	8003160 <HAL_ADC_DeInit>
}
 800ab36:	bf00      	nop
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20000170 	.word	0x20000170

0800ab40 <stimLib_adc_mspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED = 0;

/* BASE TIMER MSP INIT :: NON APPLICATION JUST STIMLIB */
void stimLib_adc_mspInit(ADC_HandleTypeDef *hadc)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08c      	sub	sp, #48	; 0x30
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800ab48:	f107 031c 	add.w	r3, r7, #28
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	605a      	str	r2, [r3, #4]
 800ab52:	609a      	str	r2, [r3, #8]
 800ab54:	60da      	str	r2, [r3, #12]
 800ab56:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (hadc->Instance == ADC1)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a5e      	ldr	r2, [pc, #376]	; (800acd8 <stimLib_adc_mspInit+0x198>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d15c      	bne.n	800ac1c <stimLib_adc_mspInit+0xdc>
	{
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		HAL_RCC_ADC_CLK_ENABLED++;
 800ab62:	4b5e      	ldr	r3, [pc, #376]	; (800acdc <stimLib_adc_mspInit+0x19c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	4a5c      	ldr	r2, [pc, #368]	; (800acdc <stimLib_adc_mspInit+0x19c>)
 800ab6a:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_ADC_CLK_ENABLED == 1)
 800ab6c:	4b5b      	ldr	r3, [pc, #364]	; (800acdc <stimLib_adc_mspInit+0x19c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d10b      	bne.n	800ab8c <stimLib_adc_mspInit+0x4c>
		{
			__HAL_RCC_ADC_CLK_ENABLE();
 800ab74:	4b5a      	ldr	r3, [pc, #360]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ab76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab78:	4a59      	ldr	r2, [pc, #356]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ab7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ab7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab80:	4b57      	ldr	r3, [pc, #348]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ab82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab88:	61bb      	str	r3, [r7, #24]
 800ab8a:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800ab8c:	4b54      	ldr	r3, [pc, #336]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ab8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab90:	4a53      	ldr	r2, [pc, #332]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ab92:	f043 0301 	orr.w	r3, r3, #1
 800ab96:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab98:	4b51      	ldr	r3, [pc, #324]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ab9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	617b      	str	r3, [r7, #20]
 800aba2:	697b      	ldr	r3, [r7, #20]
		/**ADC1 GPIO Configuration
		 PA4     ------> ADC1_IN9
		 */
		GPIO_InitStruct.Pin = STIM_LIB_STEP_UP_FEEDBACK_PIN;
 800aba4:	2310      	movs	r3, #16
 800aba6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800aba8:	230b      	movs	r3, #11
 800abaa:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abac:	2300      	movs	r3, #0
 800abae:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(STIM_LIB_STEP_UP_FEEDBACK_GPIO_PORT, &GPIO_InitStruct);
 800abb0:	f107 031c 	add.w	r3, r7, #28
 800abb4:	4619      	mov	r1, r3
 800abb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800abba:	f7fa fccb 	bl	8005554 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA2_Channel3;
 800abbe:	4b49      	ldr	r3, [pc, #292]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800abc0:	4a49      	ldr	r2, [pc, #292]	; (800ace8 <stimLib_adc_mspInit+0x1a8>)
 800abc2:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_0;
 800abc4:	4b47      	ldr	r3, [pc, #284]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800abca:	4b46      	ldr	r3, [pc, #280]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800abcc:	2200      	movs	r2, #0
 800abce:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800abd0:	4b44      	ldr	r3, [pc, #272]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800abd6:	4b43      	ldr	r3, [pc, #268]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800abd8:	2280      	movs	r2, #128	; 0x80
 800abda:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800abdc:	4b41      	ldr	r3, [pc, #260]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800abde:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abe2:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800abe4:	4b3f      	ldr	r3, [pc, #252]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800abe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800abea:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800abec:	4b3d      	ldr	r3, [pc, #244]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800abee:	2220      	movs	r2, #32
 800abf0:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800abf2:	4b3c      	ldr	r3, [pc, #240]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800abf8:	483a      	ldr	r0, [pc, #232]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800abfa:	f7fa f9a3 	bl	8004f44 <HAL_DMA_Init>
		{
			//Error_Handler();
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a38      	ldr	r2, [pc, #224]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800ac02:	64da      	str	r2, [r3, #76]	; 0x4c
 800ac04:	4a37      	ldr	r2, [pc, #220]	; (800ace4 <stimLib_adc_mspInit+0x1a4>)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6293      	str	r3, [r2, #40]	; 0x28

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	2101      	movs	r1, #1
 800ac0e:	2012      	movs	r0, #18
 800ac10:	f7fa f953 	bl	8004eba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800ac14:	2012      	movs	r0, #18
 800ac16:	f7fa f96c 	bl	8004ef2 <HAL_NVIC_EnableIRQ>

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc2);

	}

}
 800ac1a:	e058      	b.n	800acce <stimLib_adc_mspInit+0x18e>
	else if (hadc->Instance == ADC2)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a32      	ldr	r2, [pc, #200]	; (800acec <stimLib_adc_mspInit+0x1ac>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d153      	bne.n	800acce <stimLib_adc_mspInit+0x18e>
		HAL_RCC_ADC_CLK_ENABLED++;
 800ac26:	4b2d      	ldr	r3, [pc, #180]	; (800acdc <stimLib_adc_mspInit+0x19c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	4a2b      	ldr	r2, [pc, #172]	; (800acdc <stimLib_adc_mspInit+0x19c>)
 800ac2e:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_ADC_CLK_ENABLED == 1)
 800ac30:	4b2a      	ldr	r3, [pc, #168]	; (800acdc <stimLib_adc_mspInit+0x19c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d10b      	bne.n	800ac50 <stimLib_adc_mspInit+0x110>
			__HAL_RCC_ADC_CLK_ENABLE();
 800ac38:	4b29      	ldr	r3, [pc, #164]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ac3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac3c:	4a28      	ldr	r2, [pc, #160]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ac3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ac42:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac44:	4b26      	ldr	r3, [pc, #152]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ac46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac4c:	613b      	str	r3, [r7, #16]
 800ac4e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800ac50:	4b23      	ldr	r3, [pc, #140]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ac52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac54:	4a22      	ldr	r2, [pc, #136]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ac56:	f043 0301 	orr.w	r3, r3, #1
 800ac5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac5c:	4b20      	ldr	r3, [pc, #128]	; (800ace0 <stimLib_adc_mspInit+0x1a0>)
 800ac5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac60:	f003 0301 	and.w	r3, r3, #1
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = STIM_LIB_PEAK_DETECTION_R_PIN
 800ac68:	23c0      	movs	r3, #192	; 0xc0
 800ac6a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800ac6c:	230b      	movs	r3, #11
 800ac6e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac70:	2300      	movs	r3, #0
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac74:	f107 031c 	add.w	r3, r7, #28
 800ac78:	4619      	mov	r1, r3
 800ac7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac7e:	f7fa fc69 	bl	8005554 <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA1_Channel2;
 800ac82:	4b1b      	ldr	r3, [pc, #108]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800ac84:	4a1b      	ldr	r2, [pc, #108]	; (800acf4 <stimLib_adc_mspInit+0x1b4>)
 800ac86:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Request = DMA_REQUEST_0;
 800ac88:	4b19      	ldr	r3, [pc, #100]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac8e:	4b18      	ldr	r3, [pc, #96]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac94:	4b16      	ldr	r3, [pc, #88]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ac9a:	4b15      	ldr	r3, [pc, #84]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800ac9c:	2280      	movs	r2, #128	; 0x80
 800ac9e:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800aca0:	4b13      	ldr	r3, [pc, #76]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800aca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aca6:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800aca8:	4b11      	ldr	r3, [pc, #68]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800acaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acae:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800acb0:	4b0f      	ldr	r3, [pc, #60]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800acb2:	2220      	movs	r2, #32
 800acb4:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800acb6:	4b0e      	ldr	r3, [pc, #56]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800acb8:	2200      	movs	r2, #0
 800acba:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800acbc:	480c      	ldr	r0, [pc, #48]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800acbe:	f7fa f941 	bl	8004f44 <HAL_DMA_Init>
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc2);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a0a      	ldr	r2, [pc, #40]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800acc6:	64da      	str	r2, [r3, #76]	; 0x4c
 800acc8:	4a09      	ldr	r2, [pc, #36]	; (800acf0 <stimLib_adc_mspInit+0x1b0>)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6293      	str	r3, [r2, #40]	; 0x28
}
 800acce:	bf00      	nop
 800acd0:	3730      	adds	r7, #48	; 0x30
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	50040000 	.word	0x50040000
 800acdc:	2000065c 	.word	0x2000065c
 800ace0:	40021000 	.word	0x40021000
 800ace4:	200001d4 	.word	0x200001d4
 800ace8:	40020430 	.word	0x40020430
 800acec:	50040100 	.word	0x50040100
 800acf0:	2000021c 	.word	0x2000021c
 800acf4:	4002001c 	.word	0x4002001c

0800acf8 <stimLib_tim_pwmmspInit>:

void stimLib_tim_pwmmspInit(TIM_HandleTypeDef *htim_pwm)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
	if (htim_pwm->Instance == TIM1)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a44      	ldr	r2, [pc, #272]	; (800ae18 <stimLib_tim_pwmmspInit+0x120>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d114      	bne.n	800ad34 <stimLib_tim_pwmmspInit+0x3c>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 800ad0a:	4b44      	ldr	r3, [pc, #272]	; (800ae1c <stimLib_tim_pwmmspInit+0x124>)
 800ad0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad0e:	4a43      	ldr	r2, [pc, #268]	; (800ae1c <stimLib_tim_pwmmspInit+0x124>)
 800ad10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ad14:	6613      	str	r3, [r2, #96]	; 0x60
 800ad16:	4b41      	ldr	r3, [pc, #260]	; (800ae1c <stimLib_tim_pwmmspInit+0x124>)
 800ad18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 800ad22:	2200      	movs	r2, #0
 800ad24:	2102      	movs	r1, #2
 800ad26:	2019      	movs	r0, #25
 800ad28:	f7fa f8c7 	bl	8004eba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800ad2c:	2019      	movs	r0, #25
 800ad2e:	f7fa f8e0 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}

}
 800ad32:	e06c      	b.n	800ae0e <stimLib_tim_pwmmspInit+0x116>
	else if (htim_pwm->Instance == TIM2)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad3c:	d167      	bne.n	800ae0e <stimLib_tim_pwmmspInit+0x116>
		__HAL_RCC_TIM2_CLK_ENABLE();
 800ad3e:	4b37      	ldr	r3, [pc, #220]	; (800ae1c <stimLib_tim_pwmmspInit+0x124>)
 800ad40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad42:	4a36      	ldr	r2, [pc, #216]	; (800ae1c <stimLib_tim_pwmmspInit+0x124>)
 800ad44:	f043 0301 	orr.w	r3, r3, #1
 800ad48:	6593      	str	r3, [r2, #88]	; 0x58
 800ad4a:	4b34      	ldr	r3, [pc, #208]	; (800ae1c <stimLib_tim_pwmmspInit+0x124>)
 800ad4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	60bb      	str	r3, [r7, #8]
 800ad54:	68bb      	ldr	r3, [r7, #8]
		hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800ad56:	4b32      	ldr	r3, [pc, #200]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad58:	4a32      	ldr	r2, [pc, #200]	; (800ae24 <stimLib_tim_pwmmspInit+0x12c>)
 800ad5a:	601a      	str	r2, [r3, #0]
		hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 800ad5c:	4b30      	ldr	r3, [pc, #192]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad5e:	2204      	movs	r2, #4
 800ad60:	605a      	str	r2, [r3, #4]
		hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad62:	4b2f      	ldr	r3, [pc, #188]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad64:	2210      	movs	r2, #16
 800ad66:	609a      	str	r2, [r3, #8]
		hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad68:	4b2d      	ldr	r3, [pc, #180]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	60da      	str	r2, [r3, #12]
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800ad6e:	4b2c      	ldr	r3, [pc, #176]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad70:	2280      	movs	r2, #128	; 0x80
 800ad72:	611a      	str	r2, [r3, #16]
		hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ad74:	4b2a      	ldr	r3, [pc, #168]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad7a:	615a      	str	r2, [r3, #20]
		hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ad7c:	4b28      	ldr	r3, [pc, #160]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad82:	619a      	str	r2, [r3, #24]
		hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 800ad84:	4b26      	ldr	r3, [pc, #152]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad86:	2220      	movs	r2, #32
 800ad88:	61da      	str	r2, [r3, #28]
		hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ad8a:	4b25      	ldr	r3, [pc, #148]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad8c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ad90:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800ad92:	4823      	ldr	r0, [pc, #140]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad94:	f7fa f8d6 	bl	8004f44 <HAL_DMA_Init>
		__HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC2], hdma_tim2_ch2_ch4);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a21      	ldr	r2, [pc, #132]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ad9c:	629a      	str	r2, [r3, #40]	; 0x28
 800ad9e:	4a20      	ldr	r2, [pc, #128]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6293      	str	r3, [r2, #40]	; 0x28
		__HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC4], hdma_tim2_ch2_ch4);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a1e      	ldr	r2, [pc, #120]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800ada8:	631a      	str	r2, [r3, #48]	; 0x30
 800adaa:	4a1d      	ldr	r2, [pc, #116]	; (800ae20 <stimLib_tim_pwmmspInit+0x128>)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6293      	str	r3, [r2, #40]	; 0x28
		hdma_tim2_ch3.Instance = DMA1_Channel1;
 800adb0:	4b1d      	ldr	r3, [pc, #116]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800adb2:	4a1e      	ldr	r2, [pc, #120]	; (800ae2c <stimLib_tim_pwmmspInit+0x134>)
 800adb4:	601a      	str	r2, [r3, #0]
		hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 800adb6:	4b1c      	ldr	r3, [pc, #112]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800adb8:	2204      	movs	r2, #4
 800adba:	605a      	str	r2, [r3, #4]
		hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800adbc:	4b1a      	ldr	r3, [pc, #104]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800adbe:	2210      	movs	r2, #16
 800adc0:	609a      	str	r2, [r3, #8]
		hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800adc2:	4b19      	ldr	r3, [pc, #100]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	60da      	str	r2, [r3, #12]
		hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800adc8:	4b17      	ldr	r3, [pc, #92]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800adca:	2280      	movs	r2, #128	; 0x80
 800adcc:	611a      	str	r2, [r3, #16]
		hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800adce:	4b16      	ldr	r3, [pc, #88]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800add0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800add4:	615a      	str	r2, [r3, #20]
		hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800add8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800addc:	619a      	str	r2, [r3, #24]
		hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 800adde:	4b12      	ldr	r3, [pc, #72]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800ade0:	2220      	movs	r2, #32
 800ade2:	61da      	str	r2, [r3, #28]
		hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ade4:	4b10      	ldr	r3, [pc, #64]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800ade6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800adea:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800adec:	480e      	ldr	r0, [pc, #56]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800adee:	f7fa f8a9 	bl	8004f44 <HAL_DMA_Init>
		__HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC3], hdma_tim2_ch3);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4a0c      	ldr	r2, [pc, #48]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800adf6:	62da      	str	r2, [r3, #44]	; 0x2c
 800adf8:	4a0b      	ldr	r2, [pc, #44]	; (800ae28 <stimLib_tim_pwmmspInit+0x130>)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6293      	str	r3, [r2, #40]	; 0x28
		HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800adfe:	2200      	movs	r2, #0
 800ae00:	2102      	movs	r1, #2
 800ae02:	201c      	movs	r0, #28
 800ae04:	f7fa f859 	bl	8004eba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ae08:	201c      	movs	r0, #28
 800ae0a:	f7fa f872 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 800ae0e:	bf00      	nop
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	40012c00 	.word	0x40012c00
 800ae1c:	40021000 	.word	0x40021000
 800ae20:	20000348 	.word	0x20000348
 800ae24:	40020080 	.word	0x40020080
 800ae28:	20000390 	.word	0x20000390
 800ae2c:	40020008 	.word	0x40020008

0800ae30 <stimLib_tim_basemspInit>:

void stimLib_tim_basemspInit(TIM_HandleTypeDef *htim_base)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM6)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a0d      	ldr	r2, [pc, #52]	; (800ae74 <stimLib_tim_basemspInit+0x44>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d113      	bne.n	800ae6a <stimLib_tim_basemspInit+0x3a>
	{
		__HAL_RCC_TIM6_CLK_ENABLE();
 800ae42:	4b0d      	ldr	r3, [pc, #52]	; (800ae78 <stimLib_tim_basemspInit+0x48>)
 800ae44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae46:	4a0c      	ldr	r2, [pc, #48]	; (800ae78 <stimLib_tim_basemspInit+0x48>)
 800ae48:	f043 0310 	orr.w	r3, r3, #16
 800ae4c:	6593      	str	r3, [r2, #88]	; 0x58
 800ae4e:	4b0a      	ldr	r3, [pc, #40]	; (800ae78 <stimLib_tim_basemspInit+0x48>)
 800ae50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae52:	f003 0310 	and.w	r3, r3, #16
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2102      	movs	r1, #2
 800ae5e:	2036      	movs	r0, #54	; 0x36
 800ae60:	f7fa f82b 	bl	8004eba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800ae64:	2036      	movs	r0, #54	; 0x36
 800ae66:	f7fa f844 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
	}
}
 800ae6a:	bf00      	nop
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	40001000 	.word	0x40001000
 800ae78:	40021000 	.word	0x40021000

0800ae7c <stimLib_tim_msppostInit>:

/* TIMER PWM MSP INIT :: NVIC and DMA */
/* TIMER CONTROL PIN MSP INIT */
void stimLib_tim_msppostInit(TIM_HandleTypeDef *htim)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08a      	sub	sp, #40	; 0x28
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800ae84:	f107 0314 	add.w	r3, r7, #20
 800ae88:	2200      	movs	r2, #0
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	605a      	str	r2, [r3, #4]
 800ae8e:	609a      	str	r2, [r3, #8]
 800ae90:	60da      	str	r2, [r3, #12]
 800ae92:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (htim->Instance == TIM1)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a23      	ldr	r2, [pc, #140]	; (800af28 <stimLib_tim_msppostInit+0xac>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d11e      	bne.n	800aedc <stimLib_tim_msppostInit+0x60>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800ae9e:	4b23      	ldr	r3, [pc, #140]	; (800af2c <stimLib_tim_msppostInit+0xb0>)
 800aea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aea2:	4a22      	ldr	r2, [pc, #136]	; (800af2c <stimLib_tim_msppostInit+0xb0>)
 800aea4:	f043 0301 	orr.w	r3, r3, #1
 800aea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aeaa:	4b20      	ldr	r3, [pc, #128]	; (800af2c <stimLib_tim_msppostInit+0xb0>)
 800aeac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeae:	f003 0301 	and.w	r3, r3, #1
 800aeb2:	613b      	str	r3, [r7, #16]
 800aeb4:	693b      	ldr	r3, [r7, #16]
		/**TIM1 GPIO Configuration
		 PA8     ------> TIM1_CH1
		 */
		GPIO_InitStruct.Pin = STIM_LIB_STEP_UP_SW_PIN;
 800aeb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeba:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aebc:	2302      	movs	r3, #2
 800aebe:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aec0:	2300      	movs	r3, #0
 800aec2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aec4:	2300      	movs	r3, #0
 800aec6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800aec8:	2301      	movs	r3, #1
 800aeca:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(STIM_LIB_STEP_UP_SW_GPIO_PORT, &GPIO_InitStruct);
 800aecc:	f107 0314 	add.w	r3, r7, #20
 800aed0:	4619      	mov	r1, r3
 800aed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aed6:	f7fa fb3d 	bl	8005554 <HAL_GPIO_Init>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	}
}
 800aeda:	e021      	b.n	800af20 <stimLib_tim_msppostInit+0xa4>
	else if (htim->Instance == TIM2)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee4:	d11c      	bne.n	800af20 <stimLib_tim_msppostInit+0xa4>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800aee6:	4b11      	ldr	r3, [pc, #68]	; (800af2c <stimLib_tim_msppostInit+0xb0>)
 800aee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeea:	4a10      	ldr	r2, [pc, #64]	; (800af2c <stimLib_tim_msppostInit+0xb0>)
 800aeec:	f043 0301 	orr.w	r3, r3, #1
 800aef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aef2:	4b0e      	ldr	r3, [pc, #56]	; (800af2c <stimLib_tim_msppostInit+0xb0>)
 800aef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = STIM_LIB_STIM_ANODE_PIN
 800aefe:	232e      	movs	r3, #46	; 0x2e
 800af00:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af02:	2302      	movs	r3, #2
 800af04:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af06:	2300      	movs	r3, #0
 800af08:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af0a:	2303      	movs	r3, #3
 800af0c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800af0e:	2301      	movs	r3, #1
 800af10:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af12:	f107 0314 	add.w	r3, r7, #20
 800af16:	4619      	mov	r1, r3
 800af18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af1c:	f7fa fb1a 	bl	8005554 <HAL_GPIO_Init>
}
 800af20:	bf00      	nop
 800af22:	3728      	adds	r7, #40	; 0x28
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	40012c00 	.word	0x40012c00
 800af2c:	40021000 	.word	0x40021000

0800af30 <stimLib_stateGet>:
{ 0, 0, 0, NULL }, /* 10Hz, Pulse Width 1ms, DAC 1, no callback */

{ false, false, 0, false, 0, false } };

stim_lib_state_t stimLib_stateGet()
{
 800af30:	b480      	push	{r7}
 800af32:	af00      	add	r7, sp, #0
	return STIM_LIB_CUR_STATE;
 800af34:	4b03      	ldr	r3, [pc, #12]	; (800af44 <stimLib_stateGet+0x14>)
 800af36:	781b      	ldrb	r3, [r3, #0]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	20000660 	.word	0x20000660

0800af48 <stimLib_stateSet>:

bool stimLib_stateSet(stim_lib_state_t set_state)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	4603      	mov	r3, r0
 800af50:	71fb      	strb	r3, [r7, #7]
	bool rslt = false;
 800af52:	2300      	movs	r3, #0
 800af54:	73fb      	strb	r3, [r7, #15]

	if (STIM_LIB_CUR_STATE != set_state)
 800af56:	4b33      	ldr	r3, [pc, #204]	; (800b024 <stimLib_stateSet+0xdc>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	79fa      	ldrb	r2, [r7, #7]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d059      	beq.n	800b014 <stimLib_stateSet+0xcc>
	{
		switch (set_state)
 800af60:	79fb      	ldrb	r3, [r7, #7]
 800af62:	2b05      	cmp	r3, #5
 800af64:	d844      	bhi.n	800aff0 <stimLib_stateSet+0xa8>
 800af66:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <stimLib_stateSet+0x24>)
 800af68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6c:	0800af85 	.word	0x0800af85
 800af70:	0800af93 	.word	0x0800af93
 800af74:	0800afb9 	.word	0x0800afb9
 800af78:	0800afcf 	.word	0x0800afcf
 800af7c:	0800afdd 	.word	0x0800afdd
 800af80:	0800afeb 	.word	0x0800afeb
		{
		case stim_lib_state_uninitialized:
			if (STIM_LIB_CUR_STATE == stim_lib_state_idle)
 800af84:	4b27      	ldr	r3, [pc, #156]	; (800b024 <stimLib_stateSet+0xdc>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d134      	bne.n	800aff6 <stimLib_stateSet+0xae>
			{
				rslt = true;
 800af8c:	2301      	movs	r3, #1
 800af8e:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800af90:	e031      	b.n	800aff6 <stimLib_stateSet+0xae>

		case stim_lib_state_idle:
			if (STIM_LIB_CUR_STATE == stim_lib_state_uninitialized
 800af92:	4b24      	ldr	r3, [pc, #144]	; (800b024 <stimLib_stateSet+0xdc>)
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00b      	beq.n	800afb2 <stimLib_stateSet+0x6a>
					|| STIM_LIB_CUR_STATE == stim_lib_state_session_idle
 800af9a:	4b22      	ldr	r3, [pc, #136]	; (800b024 <stimLib_stateSet+0xdc>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d007      	beq.n	800afb2 <stimLib_stateSet+0x6a>
					|| STIM_LIB_CUR_STATE == stim_lib_state_stimulating
 800afa2:	4b20      	ldr	r3, [pc, #128]	; (800b024 <stimLib_stateSet+0xdc>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	d003      	beq.n	800afb2 <stimLib_stateSet+0x6a>
					|| STIM_LIB_CUR_STATE == stim_lib_state_stim_stopping)
 800afaa:	4b1e      	ldr	r3, [pc, #120]	; (800b024 <stimLib_stateSet+0xdc>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d123      	bne.n	800affa <stimLib_stateSet+0xb2>
			{
				rslt = true;
 800afb2:	2301      	movs	r3, #1
 800afb4:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800afb6:	e020      	b.n	800affa <stimLib_stateSet+0xb2>

		case stim_lib_state_session_idle:
			if (STIM_LIB_CUR_STATE == stim_lib_state_idle
 800afb8:	4b1a      	ldr	r3, [pc, #104]	; (800b024 <stimLib_stateSet+0xdc>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d003      	beq.n	800afc8 <stimLib_stateSet+0x80>
					|| STIM_LIB_CUR_STATE == stim_lib_state_stim_stopping)
 800afc0:	4b18      	ldr	r3, [pc, #96]	; (800b024 <stimLib_stateSet+0xdc>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	d11a      	bne.n	800affe <stimLib_stateSet+0xb6>
			{
				rslt = true;
 800afc8:	2301      	movs	r3, #1
 800afca:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800afcc:	e017      	b.n	800affe <stimLib_stateSet+0xb6>

		case stim_lib_state_stimulating:
			if (STIM_LIB_CUR_STATE == stim_lib_state_session_idle)
 800afce:	4b15      	ldr	r3, [pc, #84]	; (800b024 <stimLib_stateSet+0xdc>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d115      	bne.n	800b002 <stimLib_stateSet+0xba>
			{
				rslt = true;
 800afd6:	2301      	movs	r3, #1
 800afd8:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800afda:	e012      	b.n	800b002 <stimLib_stateSet+0xba>

		case stim_lib_state_stim_stopping:
			if (STIM_LIB_CUR_STATE == stim_lib_state_stimulating)
 800afdc:	4b11      	ldr	r3, [pc, #68]	; (800b024 <stimLib_stateSet+0xdc>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d110      	bne.n	800b006 <stimLib_stateSet+0xbe>
			{
				rslt = true;
 800afe4:	2301      	movs	r3, #1
 800afe6:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800afe8:	e00d      	b.n	800b006 <stimLib_stateSet+0xbe>

		case stim_lib_state_error:
			rslt = true;
 800afea:	2301      	movs	r3, #1
 800afec:	73fb      	strb	r3, [r7, #15]
			break;
 800afee:	e00b      	b.n	800b008 <stimLib_stateSet+0xc0>

		default:
			rslt = false;
 800aff0:	2300      	movs	r3, #0
 800aff2:	73fb      	strb	r3, [r7, #15]
			break;
 800aff4:	e008      	b.n	800b008 <stimLib_stateSet+0xc0>
			break;
 800aff6:	bf00      	nop
 800aff8:	e006      	b.n	800b008 <stimLib_stateSet+0xc0>
			break;
 800affa:	bf00      	nop
 800affc:	e004      	b.n	800b008 <stimLib_stateSet+0xc0>
			break;
 800affe:	bf00      	nop
 800b000:	e002      	b.n	800b008 <stimLib_stateSet+0xc0>
			break;
 800b002:	bf00      	nop
 800b004:	e000      	b.n	800b008 <stimLib_stateSet+0xc0>
			break;
 800b006:	bf00      	nop
		}

		if (rslt == true)
 800b008:	7bfb      	ldrb	r3, [r7, #15]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <stimLib_stateSet+0xcc>
		{
			STIM_LIB_CUR_STATE = set_state;
 800b00e:	4a05      	ldr	r2, [pc, #20]	; (800b024 <stimLib_stateSet+0xdc>)
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	7013      	strb	r3, [r2, #0]
		}

	}

	return rslt;
 800b014:	7bfb      	ldrb	r3, [r7, #15]

}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	20000660 	.word	0x20000660

0800b028 <stimLib_stateSigParamSet>:

void stimLib_stateSigParamSet(stim_signal_cfg_t *cfg)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
	if (stimLib_signalParamCheck(cfg) == false)
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f889 	bl	800b148 <stimLib_signalParamCheck>
 800b036:	4603      	mov	r3, r0
 800b038:	f083 0301 	eor.w	r3, r3, #1
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d110      	bne.n	800b064 <stimLib_stateSigParamSet+0x3c>
	{
		return;
	}

	STIM_LIB_STATE_SIG_FREQ = cfg->freq;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	781a      	ldrb	r2, [r3, #0]
 800b046:	4b09      	ldr	r3, [pc, #36]	; (800b06c <stimLib_stateSigParamSet+0x44>)
 800b048:	711a      	strb	r2, [r3, #4]
	STIM_LIB_STATE_SIG_PW = cfg->pulse_width;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	885a      	ldrh	r2, [r3, #2]
 800b04e:	4b07      	ldr	r3, [pc, #28]	; (800b06c <stimLib_stateSigParamSet+0x44>)
 800b050:	80da      	strh	r2, [r3, #6]
	STIM_LIB_STATE_SIG_DEGREE = cfg->degree;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	791a      	ldrb	r2, [r3, #4]
 800b056:	4b05      	ldr	r3, [pc, #20]	; (800b06c <stimLib_stateSigParamSet+0x44>)
 800b058:	721a      	strb	r2, [r3, #8]
	STIM_LIB_STATE_SIG_PEAK_DET_CALLBACK = cfg->peak_detect_callback;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	4a03      	ldr	r2, [pc, #12]	; (800b06c <stimLib_stateSigParamSet+0x44>)
 800b060:	60d3      	str	r3, [r2, #12]
 800b062:	e000      	b.n	800b066 <stimLib_stateSigParamSet+0x3e>
		return;
 800b064:	bf00      	nop
}
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	20000660 	.word	0x20000660

0800b070 <stimLib_stateTrgParamSet>:

void stimLib_stateTrgParamSet(stim_trg_cfg_t *cfg)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	if (stimLib_triggerParamCheck(cfg) == false)
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f89d 	bl	800b1b8 <stimLib_triggerParamCheck>
 800b07e:	4603      	mov	r3, r0
 800b080:	f083 0301 	eor.w	r3, r3, #1
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b00      	cmp	r3, #0
 800b088:	d118      	bne.n	800b0bc <stimLib_stateTrgParamSet+0x4c>
	{
		return;
	}

	STIM_LIB_STATE_TRG_VOLT_PRESTART = cfg->volt_prestart;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	781a      	ldrb	r2, [r3, #0]
 800b08e:	4b0d      	ldr	r3, [pc, #52]	; (800b0c4 <stimLib_stateTrgParamSet+0x54>)
 800b090:	741a      	strb	r2, [r3, #16]

	STIM_LIB_STATE_TRG_OUT_ENABLE = cfg->trg_out_enable;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	785a      	ldrb	r2, [r3, #1]
 800b096:	4b0b      	ldr	r3, [pc, #44]	; (800b0c4 <stimLib_stateTrgParamSet+0x54>)
 800b098:	745a      	strb	r2, [r3, #17]
	STIM_LIB_STATE_TRG_OUT_ACT_POL = cfg->trg_out_active_pol;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	789a      	ldrb	r2, [r3, #2]
 800b09e:	4b09      	ldr	r3, [pc, #36]	; (800b0c4 <stimLib_stateTrgParamSet+0x54>)
 800b0a0:	749a      	strb	r2, [r3, #18]

	STIM_LIB_STATE_TRG_IN_ENABLE = cfg->trg_in_enable;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	78da      	ldrb	r2, [r3, #3]
 800b0a6:	4b07      	ldr	r3, [pc, #28]	; (800b0c4 <stimLib_stateTrgParamSet+0x54>)
 800b0a8:	74da      	strb	r2, [r3, #19]
	STIM_LIB_STATE_TRG_IN_ACT_POL = cfg->trg_in_active_pol;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	791a      	ldrb	r2, [r3, #4]
 800b0ae:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <stimLib_stateTrgParamSet+0x54>)
 800b0b0:	751a      	strb	r2, [r3, #20]
	STIM_LIB_STATE_TRG_IN_TOGGLED = cfg->trg_in_toggled;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	795a      	ldrb	r2, [r3, #5]
 800b0b6:	4b03      	ldr	r3, [pc, #12]	; (800b0c4 <stimLib_stateTrgParamSet+0x54>)
 800b0b8:	755a      	strb	r2, [r3, #21]
 800b0ba:	e000      	b.n	800b0be <stimLib_stateTrgParamSet+0x4e>
		return;
 800b0bc:	bf00      	nop

}
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	20000660 	.word	0x20000660

0800b0c8 <stimLib_stateSigParamCheck>:
		return false;
	}
}

bool stimLib_stateSigParamCheck(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	af00      	add	r7, sp, #0
	if (stimLib_signalParamCheck(&STIM_LIB_STATE_SIG) == true
 800b0cc:	4808      	ldr	r0, [pc, #32]	; (800b0f0 <stimLib_stateSigParamCheck+0x28>)
 800b0ce:	f000 f83b 	bl	800b148 <stimLib_signalParamCheck>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d007      	beq.n	800b0e8 <stimLib_stateSigParamCheck+0x20>
			&& stimLib_triggerParamCheck(&STIM_LIB_STATE_TRG) == true)
 800b0d8:	4806      	ldr	r0, [pc, #24]	; (800b0f4 <stimLib_stateSigParamCheck+0x2c>)
 800b0da:	f000 f86d 	bl	800b1b8 <stimLib_triggerParamCheck>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <stimLib_stateSigParamCheck+0x20>
	{
		return true;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e000      	b.n	800b0ea <stimLib_stateSigParamCheck+0x22>
	}
	else
	{
		return false;
 800b0e8:	2300      	movs	r3, #0
	}

}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20000664 	.word	0x20000664
 800b0f4:	20000670 	.word	0x20000670

0800b0f8 <stimLib_stateParamClear>:

void stimLib_stateParamClear(void)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	af00      	add	r7, sp, #0
	STIM_LIB_STATE_SIG_FREQ = 0;
 800b0fc:	4b11      	ldr	r3, [pc, #68]	; (800b144 <stimLib_stateParamClear+0x4c>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	711a      	strb	r2, [r3, #4]
	STIM_LIB_STATE_SIG_PW = 0;
 800b102:	4b10      	ldr	r3, [pc, #64]	; (800b144 <stimLib_stateParamClear+0x4c>)
 800b104:	2200      	movs	r2, #0
 800b106:	80da      	strh	r2, [r3, #6]
	STIM_LIB_STATE_SIG_DEGREE = 0;
 800b108:	4b0e      	ldr	r3, [pc, #56]	; (800b144 <stimLib_stateParamClear+0x4c>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	721a      	strb	r2, [r3, #8]
	STIM_LIB_STATE_SIG_PEAK_DET_CALLBACK = NULL;
 800b10e:	4b0d      	ldr	r3, [pc, #52]	; (800b144 <stimLib_stateParamClear+0x4c>)
 800b110:	2200      	movs	r2, #0
 800b112:	60da      	str	r2, [r3, #12]

	STIM_LIB_STATE_TRG_VOLT_PRESTART = false;
 800b114:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <stimLib_stateParamClear+0x4c>)
 800b116:	2200      	movs	r2, #0
 800b118:	741a      	strb	r2, [r3, #16]
	STIM_LIB_STATE_TRG_OUT_ENABLE = false;
 800b11a:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <stimLib_stateParamClear+0x4c>)
 800b11c:	2200      	movs	r2, #0
 800b11e:	745a      	strb	r2, [r3, #17]
	STIM_LIB_STATE_TRG_OUT_ACT_POL = 0;
 800b120:	4b08      	ldr	r3, [pc, #32]	; (800b144 <stimLib_stateParamClear+0x4c>)
 800b122:	2200      	movs	r2, #0
 800b124:	749a      	strb	r2, [r3, #18]
	STIM_LIB_STATE_TRG_IN_ENABLE = false;
 800b126:	4b07      	ldr	r3, [pc, #28]	; (800b144 <stimLib_stateParamClear+0x4c>)
 800b128:	2200      	movs	r2, #0
 800b12a:	74da      	strb	r2, [r3, #19]
	STIM_LIB_STATE_TRG_IN_ACT_POL = 0;
 800b12c:	4b05      	ldr	r3, [pc, #20]	; (800b144 <stimLib_stateParamClear+0x4c>)
 800b12e:	2200      	movs	r2, #0
 800b130:	751a      	strb	r2, [r3, #20]
	STIM_LIB_STATE_TRG_IN_TOGGLED = false;
 800b132:	4b04      	ldr	r3, [pc, #16]	; (800b144 <stimLib_stateParamClear+0x4c>)
 800b134:	2200      	movs	r2, #0
 800b136:	755a      	strb	r2, [r3, #21]
}
 800b138:	bf00      	nop
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	20000660 	.word	0x20000660

0800b148 <stimLib_signalParamCheck>:
#define STIM_LIB_SIGNAL_DEGREE_MIN						0
#define STIM_LIB_SIGNAL_DEGREE_MAX						255
#define STIM_LIB_SIGNAL_DGREE_IS_VALID(param)			(param <= STIM_LIB_SIGNAL_DEGREE_MAX)				/* unsigned is always bigger than 0 */

bool stimLib_signalParamCheck(stim_signal_cfg_t *cfg)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
	if (cfg == NULL)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d101      	bne.n	800b15a <stimLib_signalParamCheck+0x12>
	{
		return false;
 800b156:	2300      	movs	r3, #0
 800b158:	e026      	b.n	800b1a8 <stimLib_signalParamCheck+0x60>
	}

	/* Base check */
	if (STIM_LIB_SIGNAL_FREQ_IS_VALID(
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d021      	beq.n	800b1a6 <stimLib_signalParamCheck+0x5e>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	2b3c      	cmp	r3, #60	; 0x3c
 800b168:	d81d      	bhi.n	800b1a6 <stimLib_signalParamCheck+0x5e>
			cfg->freq) && STIM_LIB_SIGNAL_PW_IS_VALID(cfg->pulse_width) && STIM_LIB_SIGNAL_DGREE_IS_VALID(cfg->degree))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	885b      	ldrh	r3, [r3, #2]
 800b16e:	2b63      	cmp	r3, #99	; 0x63
 800b170:	d919      	bls.n	800b1a6 <stimLib_signalParamCheck+0x5e>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	885b      	ldrh	r3, [r3, #2]
 800b176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b17a:	d814      	bhi.n	800b1a6 <stimLib_signalParamCheck+0x5e>
	{
		/* Step check of pulse width */
		cfg->pulse_width = (cfg->pulse_width / STIM_LIB_SIGNAL_PW_STEP)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	885b      	ldrh	r3, [r3, #2]
 800b180:	4a0c      	ldr	r2, [pc, #48]	; (800b1b4 <stimLib_signalParamCheck+0x6c>)
 800b182:	fba2 2303 	umull	r2, r3, r2, r3
 800b186:	095b      	lsrs	r3, r3, #5
 800b188:	b29b      	uxth	r3, r3
 800b18a:	461a      	mov	r2, r3
 800b18c:	0092      	lsls	r2, r2, #2
 800b18e:	4413      	add	r3, r2
 800b190:	461a      	mov	r2, r3
 800b192:	0091      	lsls	r1, r2, #2
 800b194:	461a      	mov	r2, r3
 800b196:	460b      	mov	r3, r1
 800b198:	4413      	add	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	805a      	strh	r2, [r3, #2]
				* STIM_LIB_SIGNAL_PW_STEP;

		return true;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e000      	b.n	800b1a8 <stimLib_signalParamCheck+0x60>
	}

	return false;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	51eb851f 	.word	0x51eb851f

0800b1b8 <stimLib_triggerParamCheck>:

bool stimLib_triggerParamCheck(stim_trg_cfg_t *cfg)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
	if (cfg == NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <stimLib_triggerParamCheck+0x12>
	{
		return false;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	e000      	b.n	800b1cc <stimLib_triggerParamCheck+0x14>
	}

	return true;
 800b1ca:	2301      	movs	r3, #1
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <stimLib_paramSetting>:

bool stimLib_paramSetting(void)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
	bool rslt;

	rslt = stimLib_stimPulseSetiing();
 800b1de:	f000 f83f 	bl	800b260 <stimLib_stimPulseSetiing>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	71fb      	strb	r3, [r7, #7]

	if (rslt == true)
 800b1e6:	79fb      	ldrb	r3, [r7, #7]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <stimLib_paramSetting+0x18>
	{
		stimLib_paramTrgSettingRaw();
 800b1ec:	f000 f90e 	bl	800b40c <stimLib_paramTrgSettingRaw>
	}

	return rslt;
 800b1f0:	79fb      	ldrb	r3, [r7, #7]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <stimLib_paramClear>:

void stimLib_paramClear(void)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	af00      	add	r7, sp, #0
	stimLib_paramTrgResettingRaw();
 800b1fe:	f000 f97d 	bl	800b4fc <stimLib_paramTrgResettingRaw>

	/* State clear */
	stimLib_stateParamClear();
 800b202:	f7ff ff79 	bl	800b0f8 <stimLib_stateParamClear>

	/* ST parameter clear :: NOT YET */
}
 800b206:	bf00      	nop
 800b208:	bd80      	pop	{r7, pc}
	...

0800b20c <stimLib_stimPulseStart>:

void stimLib_stimPulseStart(void)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	af00      	add	r7, sp, #0
	stimLib_pulseConfigRaw();
 800b210:	f000 f97c 	bl	800b50c <stimLib_pulseConfigRaw>
	stimLib_stimStartRaw();
 800b214:	f000 f9be 	bl	800b594 <stimLib_stimStartRaw>
	if (STIM_LIB_STATE_TRG_VOLT_PRESTART == false && STIM_LIB_STEPUP_IS_STARTED() == false)
 800b218:	4b07      	ldr	r3, [pc, #28]	; (800b238 <stimLib_stimPulseStart+0x2c>)
 800b21a:	7c1b      	ldrb	r3, [r3, #16]
 800b21c:	f083 0301 	eor.w	r3, r3, #1
 800b220:	b2db      	uxtb	r3, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d005      	beq.n	800b232 <stimLib_stimPulseStart+0x26>
 800b226:	4b05      	ldr	r3, [pc, #20]	; (800b23c <stimLib_stimPulseStart+0x30>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d001      	beq.n	800b232 <stimLib_stimPulseStart+0x26>
	{
		stimLib_stepupStart();
 800b22e:	f000 fcc3 	bl	800bbb8 <stimLib_stepupStart>
	}
}
 800b232:	bf00      	nop
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20000660 	.word	0x20000660
 800b23c:	2000069c 	.word	0x2000069c

0800b240 <stimLib_stimPulseStop>:

void stimLib_stimPulseStop(void)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	af00      	add	r7, sp, #0
	if (stimLib_stateGet() == stim_lib_state_stim_stopping)
 800b244:	f7ff fe74 	bl	800af30 <stimLib_stateGet>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	d106      	bne.n	800b25c <stimLib_stimPulseStop+0x1c>
	{
		stimLib_stimStopRaw();
 800b24e:	f000 f9db 	bl	800b608 <stimLib_stimStopRaw>

		/* To save pulst start time */
		stimLib_stimPulseSetiing();
 800b252:	f000 f805 	bl	800b260 <stimLib_stimPulseSetiing>

		stimLib_stateSet(stim_lib_state_session_idle);
 800b256:	2002      	movs	r0, #2
 800b258:	f7ff fe76 	bl	800af48 <stimLib_stateSet>
	}
}
 800b25c:	bf00      	nop
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <stimLib_stimPulseSetiing>:

bool stimLib_stimPulseSetiing(void)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	af00      	add	r7, sp, #0
	return stimLib_paramPulseSettingRaw();
 800b264:	f000 f804 	bl	800b270 <stimLib_paramPulseSettingRaw>
 800b268:	4603      	mov	r3, r0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <stimLib_paramPulseSettingRaw>:
volatile uint32_t gStimLib_dischgDma[2];
volatile uint32_t gStimLIb_cathodeDma[2];


bool stimLib_paramPulseSettingRaw(void)
{
 800b270:	b590      	push	{r4, r7, lr}
 800b272:	b08b      	sub	sp, #44	; 0x2c
 800b274:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig =
 800b276:	f107 031c 	add.w	r3, r7, #28
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
 800b27e:	605a      	str	r2, [r3, #4]
 800b280:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 800b282:	463b      	mov	r3, r7
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	605a      	str	r2, [r3, #4]
 800b28a:	609a      	str	r2, [r3, #8]
 800b28c:	60da      	str	r2, [r3, #12]
 800b28e:	611a      	str	r2, [r3, #16]
 800b290:	615a      	str	r2, [r3, #20]
 800b292:	619a      	str	r2, [r3, #24]
	{ 0 };

	htim2.Instance = TIM2;
 800b294:	4b58      	ldr	r3, [pc, #352]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b29a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = STIM_LIB_SIGNAL_PSC_INPUT;
 800b29c:	f7fb fa38 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	4a56      	ldr	r2, [pc, #344]	; (800b3fc <stimLib_paramPulseSettingRaw+0x18c>)
 800b2a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	2350      	movs	r3, #80	; 0x50
 800b2ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	4b50      	ldr	r3, [pc, #320]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b2b6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2b8:	4b4f      	ldr	r3, [pc, #316]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = STIM_LIB_SIGNAL_ARR_INPUT;
 800b2be:	f7fb fa27 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	f7fb fa24 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	4a4c      	ldr	r2, [pc, #304]	; (800b3fc <stimLib_paramPulseSettingRaw+0x18c>)
 800b2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	2350      	movs	r3, #80	; 0x50
 800b2d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2d8:	fbb4 f3f3 	udiv	r3, r4, r3
 800b2dc:	4a48      	ldr	r2, [pc, #288]	; (800b400 <stimLib_paramPulseSettingRaw+0x190>)
 800b2de:	7912      	ldrb	r2, [r2, #4]
 800b2e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	4b43      	ldr	r3, [pc, #268]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b2ea:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b2ec:	4b42      	ldr	r3, [pc, #264]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b2f2:	4b41      	ldr	r3, [pc, #260]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b2f4:	2280      	movs	r2, #128	; 0x80
 800b2f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b2f8:	483f      	ldr	r0, [pc, #252]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b2fa:	f7fc f869 	bl	80073d0 <HAL_TIM_PWM_Init>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <stimLib_paramPulseSettingRaw+0x98>
	{
		return false;
 800b304:	2300      	movs	r3, #0
 800b306:	e072      	b.n	800b3ee <stimLib_paramPulseSettingRaw+0x17e>
	}
	/* MSP :: Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
	stimLib_tim_pwmmspInit(&htim2);
 800b308:	483b      	ldr	r0, [pc, #236]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b30a:	f7ff fcf5 	bl	800acf8 <stimLib_tim_pwmmspInit>

	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800b30e:	483a      	ldr	r0, [pc, #232]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b310:	f7fb fd1d 	bl	8006d4e <HAL_TIM_OC_Init>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d001      	beq.n	800b31e <stimLib_paramPulseSettingRaw+0xae>
	{
		return false;
 800b31a:	2300      	movs	r3, #0
 800b31c:	e067      	b.n	800b3ee <stimLib_paramPulseSettingRaw+0x17e>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800b31e:	2350      	movs	r3, #80	; 0x50
 800b320:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800b322:	2380      	movs	r3, #128	; 0x80
 800b324:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b326:	f107 031c 	add.w	r3, r7, #28
 800b32a:	4619      	mov	r1, r3
 800b32c:	4832      	ldr	r0, [pc, #200]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b32e:	f7fd f935 	bl	800859c <HAL_TIMEx_MasterConfigSynchronization>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <stimLib_paramPulseSettingRaw+0xcc>
	{
		return false;
 800b338:	2300      	movs	r3, #0
 800b33a:	e058      	b.n	800b3ee <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 1 :: TRIGGER OUTPUT */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b33c:	2360      	movs	r3, #96	; 0x60
 800b33e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_TRG_OUTPUT_PULSE_TIME;
 800b340:	4b2f      	ldr	r3, [pc, #188]	; (800b400 <stimLib_paramPulseSettingRaw+0x190>)
 800b342:	88db      	ldrh	r3, [r3, #6]
 800b344:	330f      	adds	r3, #15
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	607b      	str	r3, [r7, #4]

	if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_low)
 800b34a:	4b2d      	ldr	r3, [pc, #180]	; (800b400 <stimLib_paramPulseSettingRaw+0x190>)
 800b34c:	7c9b      	ldrb	r3, [r3, #18]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d102      	bne.n	800b358 <stimLib_paramPulseSettingRaw+0xe8>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800b352:	2302      	movs	r3, #2
 800b354:	60bb      	str	r3, [r7, #8]
 800b356:	e005      	b.n	800b364 <stimLib_paramPulseSettingRaw+0xf4>
	}
	else if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_high)
 800b358:	4b29      	ldr	r3, [pc, #164]	; (800b400 <stimLib_paramPulseSettingRaw+0x190>)
 800b35a:	7c9b      	ldrb	r3, [r3, #18]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d101      	bne.n	800b364 <stimLib_paramPulseSettingRaw+0xf4>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b360:	2300      	movs	r3, #0
 800b362:	60bb      	str	r3, [r7, #8]
	}

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_TRG_OUT_TIM_CH) != HAL_OK)
 800b364:	463b      	mov	r3, r7
 800b366:	2200      	movs	r2, #0
 800b368:	4619      	mov	r1, r3
 800b36a:	4823      	ldr	r0, [pc, #140]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b36c:	f7fc fbe4 	bl	8007b38 <HAL_TIM_PWM_ConfigChannel>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <stimLib_paramPulseSettingRaw+0x10a>
	{
		return stim_lib_stim_rsp_failed;
 800b376:	2301      	movs	r3, #1
 800b378:	e039      	b.n	800b3ee <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 2 :: ANODE PULSE */
	sConfigOC.Pulse = STIM_LIB_ANODE_PULSE_TIME;
 800b37a:	4b21      	ldr	r3, [pc, #132]	; (800b400 <stimLib_paramPulseSettingRaw+0x190>)
 800b37c:	88db      	ldrh	r3, [r3, #6]
 800b37e:	330a      	adds	r3, #10
 800b380:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b382:	2300      	movs	r3, #0
 800b384:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_ANODE_TIM_CH) != HAL_OK)
 800b386:	463b      	mov	r3, r7
 800b388:	2204      	movs	r2, #4
 800b38a:	4619      	mov	r1, r3
 800b38c:	481a      	ldr	r0, [pc, #104]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b38e:	f7fc fbd3 	bl	8007b38 <HAL_TIM_PWM_ConfigChannel>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d004      	beq.n	800b3a2 <stimLib_paramPulseSettingRaw+0x132>
	{
		TD_DEBUG_PRINT(("STIM_LIB: TIM2 CH2 Set failed\n"));
 800b398:	481a      	ldr	r0, [pc, #104]	; (800b404 <stimLib_paramPulseSettingRaw+0x194>)
 800b39a:	f000 fdb5 	bl	800bf08 <puts>
		return false;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e025      	b.n	800b3ee <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 3 :: CATHODE PULSE */
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800b3a2:	2330      	movs	r3, #48	; 0x30
 800b3a4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_CATHODE_PULSE_TIME1;
 800b3a6:	4b16      	ldr	r3, [pc, #88]	; (800b400 <stimLib_paramPulseSettingRaw+0x190>)
 800b3a8:	88db      	ldrh	r3, [r3, #6]
 800b3aa:	3314      	adds	r3, #20
 800b3ac:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_CATHODE_TIM_CH) != HAL_OK)
 800b3ae:	463b      	mov	r3, r7
 800b3b0:	2208      	movs	r2, #8
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4810      	ldr	r0, [pc, #64]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b3b6:	f7fc fb45 	bl	8007a44 <HAL_TIM_OC_ConfigChannel>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d004      	beq.n	800b3ca <stimLib_paramPulseSettingRaw+0x15a>
	{
		TD_DEBUG_PRINT(("STIM_LIB: TIM2 CH3 Set failed\n"));
 800b3c0:	4811      	ldr	r0, [pc, #68]	; (800b408 <stimLib_paramPulseSettingRaw+0x198>)
 800b3c2:	f000 fda1 	bl	800bf08 <puts>
		return false;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e011      	b.n	800b3ee <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 4 :: DAC_ON_N PULSE or STIM DISCHARGE PULSE */
#if 1
	sConfigOC.Pulse = STIM_LIB_SIGNAL_GLICH_TIME;
 800b3ca:	2305      	movs	r3, #5
 800b3cc:	607b      	str	r3, [r7, #4]
#else
	sConfigOC.Pulse = STIM_LIB_DISCHARGE_PULSE_TIME1;
#endif
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_DAC_ON_TIM_CH) != HAL_OK)
 800b3ce:	463b      	mov	r3, r7
 800b3d0:	220c      	movs	r2, #12
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4808      	ldr	r0, [pc, #32]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b3d6:	f7fc fb35 	bl	8007a44 <HAL_TIM_OC_ConfigChannel>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <stimLib_paramPulseSettingRaw+0x174>
	{
		return false;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	e004      	b.n	800b3ee <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* MSP :: TIMER GPIO */
	//stimLib_tim_msppostInit(&htim2);
	HAL_TIM_GenerateEvent(&htim2, TIM_EVENTSOURCE_UPDATE);
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	4804      	ldr	r0, [pc, #16]	; (800b3f8 <stimLib_paramPulseSettingRaw+0x188>)
 800b3e8:	f7fc fcba 	bl	8007d60 <HAL_TIM_GenerateEvent>

	return true;
 800b3ec:	2301      	movs	r3, #1
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	372c      	adds	r7, #44	; 0x2c
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd90      	pop	{r4, r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	200002b0 	.word	0x200002b0
 800b3fc:	04c4b400 	.word	0x04c4b400
 800b400:	20000660 	.word	0x20000660
 800b404:	0800d4ec 	.word	0x0800d4ec
 800b408:	0800d50c 	.word	0x0800d50c

0800b40c <stimLib_paramTrgSettingRaw>:

void stimLib_paramTrgSettingRaw(void)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
	/* GPIO INIT */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800b412:	1d3b      	adds	r3, r7, #4
 800b414:	2200      	movs	r2, #0
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	605a      	str	r2, [r3, #4]
 800b41a:	609a      	str	r2, [r3, #8]
 800b41c:	60da      	str	r2, [r3, #12]
 800b41e:	611a      	str	r2, [r3, #16]

	if(STIM_LIB_TRG_INPUT_IS_ENABLED() == false)
 800b420:	4b34      	ldr	r3, [pc, #208]	; (800b4f4 <stimLib_paramTrgSettingRaw+0xe8>)
 800b422:	7cdb      	ldrb	r3, [r3, #19]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d161      	bne.n	800b4ec <stimLib_paramTrgSettingRaw+0xe0>
		return;
	
	/* Configure GPIO pin : STIM_TRIGGER_INPUT_Pin */
	if (STIM_LIB_TRG_INPUT_IS_FALLING_EDGE())
 800b428:	4b32      	ldr	r3, [pc, #200]	; (800b4f4 <stimLib_paramTrgSettingRaw+0xe8>)
 800b42a:	7d1b      	ldrb	r3, [r3, #20]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d113      	bne.n	800b458 <stimLib_paramTrgSettingRaw+0x4c>
 800b430:	4b30      	ldr	r3, [pc, #192]	; (800b4f4 <stimLib_paramTrgSettingRaw+0xe8>)
 800b432:	7d5b      	ldrb	r3, [r3, #21]
 800b434:	f083 0301 	eor.w	r3, r3, #1
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00c      	beq.n	800b458 <stimLib_paramTrgSettingRaw+0x4c>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 800b43e:	2301      	movs	r3, #1
 800b440:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b442:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800b446:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 800b44c:	1d3b      	adds	r3, r7, #4
 800b44e:	4619      	mov	r1, r3
 800b450:	4829      	ldr	r0, [pc, #164]	; (800b4f8 <stimLib_paramTrgSettingRaw+0xec>)
 800b452:	f7fa f87f 	bl	8005554 <HAL_GPIO_Init>
 800b456:	e040      	b.n	800b4da <stimLib_paramTrgSettingRaw+0xce>
	}
	else if (STIM_LIB_TRG_INPUT_IS_RISING_EDGE())
 800b458:	4b26      	ldr	r3, [pc, #152]	; (800b4f4 <stimLib_paramTrgSettingRaw+0xe8>)
 800b45a:	7d1b      	ldrb	r3, [r3, #20]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d113      	bne.n	800b488 <stimLib_paramTrgSettingRaw+0x7c>
 800b460:	4b24      	ldr	r3, [pc, #144]	; (800b4f4 <stimLib_paramTrgSettingRaw+0xe8>)
 800b462:	7d5b      	ldrb	r3, [r3, #21]
 800b464:	f083 0301 	eor.w	r3, r3, #1
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00c      	beq.n	800b488 <stimLib_paramTrgSettingRaw+0x7c>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 800b46e:	2301      	movs	r3, #1
 800b470:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b472:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800b476:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 800b47c:	1d3b      	adds	r3, r7, #4
 800b47e:	4619      	mov	r1, r3
 800b480:	481d      	ldr	r0, [pc, #116]	; (800b4f8 <stimLib_paramTrgSettingRaw+0xec>)
 800b482:	f7fa f867 	bl	8005554 <HAL_GPIO_Init>
 800b486:	e028      	b.n	800b4da <stimLib_paramTrgSettingRaw+0xce>
	}
	else if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_LOW())
 800b488:	4b1a      	ldr	r3, [pc, #104]	; (800b4f4 <stimLib_paramTrgSettingRaw+0xe8>)
 800b48a:	7d1b      	ldrb	r3, [r3, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d110      	bne.n	800b4b2 <stimLib_paramTrgSettingRaw+0xa6>
 800b490:	4b18      	ldr	r3, [pc, #96]	; (800b4f4 <stimLib_paramTrgSettingRaw+0xe8>)
 800b492:	7d5b      	ldrb	r3, [r3, #21]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00c      	beq.n	800b4b2 <stimLib_paramTrgSettingRaw+0xa6>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 800b498:	2301      	movs	r3, #1
 800b49a:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800b49c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800b4a0:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 800b4a6:	1d3b      	adds	r3, r7, #4
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4813      	ldr	r0, [pc, #76]	; (800b4f8 <stimLib_paramTrgSettingRaw+0xec>)
 800b4ac:	f7fa f852 	bl	8005554 <HAL_GPIO_Init>
 800b4b0:	e013      	b.n	800b4da <stimLib_paramTrgSettingRaw+0xce>
	}
	else if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_HIGH())
 800b4b2:	4b10      	ldr	r3, [pc, #64]	; (800b4f4 <stimLib_paramTrgSettingRaw+0xe8>)
 800b4b4:	7d1b      	ldrb	r3, [r3, #20]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d10f      	bne.n	800b4da <stimLib_paramTrgSettingRaw+0xce>
 800b4ba:	4b0e      	ldr	r3, [pc, #56]	; (800b4f4 <stimLib_paramTrgSettingRaw+0xe8>)
 800b4bc:	7d5b      	ldrb	r3, [r3, #21]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00b      	beq.n	800b4da <stimLib_paramTrgSettingRaw+0xce>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800b4c6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800b4ca:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 800b4d0:	1d3b      	adds	r3, r7, #4
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4808      	ldr	r0, [pc, #32]	; (800b4f8 <stimLib_paramTrgSettingRaw+0xec>)
 800b4d6:	f7fa f83d 	bl	8005554 <HAL_GPIO_Init>
	}

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2100      	movs	r1, #0
 800b4de:	2006      	movs	r0, #6
 800b4e0:	f7f9 fceb 	bl	8004eba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800b4e4:	2006      	movs	r0, #6
 800b4e6:	f7f9 fd04 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
 800b4ea:	e000      	b.n	800b4ee <stimLib_paramTrgSettingRaw+0xe2>
		return;
 800b4ec:	bf00      	nop
}
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	20000660 	.word	0x20000660
 800b4f8:	48000400 	.word	0x48000400

0800b4fc <stimLib_paramTrgResettingRaw>:

void stimLib_paramTrgResettingRaw(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800b500:	2006      	movs	r0, #6
 800b502:	f7f9 fd04 	bl	8004f0e <HAL_NVIC_DisableIRQ>
}
 800b506:	bf00      	nop
 800b508:	bd80      	pop	{r7, pc}
	...

0800b50c <stimLib_pulseConfigRaw>:

bool stimLib_pulseConfigRaw(void)
{
 800b50c:	b480      	push	{r7}
 800b50e:	af00      	add	r7, sp, #0
	/* DAC_ON_N Control Time */
	STIM_LIB_DMA_DAC_ON_BUF[0] = STIM_LIB_DAC_CTRL_TIME0;
 800b510:	4b1c      	ldr	r3, [pc, #112]	; (800b584 <stimLib_pulseConfigRaw+0x78>)
 800b512:	88db      	ldrh	r3, [r3, #6]
 800b514:	3305      	adds	r3, #5
 800b516:	461a      	mov	r2, r3
 800b518:	4b1b      	ldr	r3, [pc, #108]	; (800b588 <stimLib_pulseConfigRaw+0x7c>)
 800b51a:	601a      	str	r2, [r3, #0]
	STIM_LIB_DMA_DAC_ON_BUF[1] = STIM_LIB_DAC_CTRL_TIME1;
 800b51c:	4b19      	ldr	r3, [pc, #100]	; (800b584 <stimLib_pulseConfigRaw+0x78>)
 800b51e:	88db      	ldrh	r3, [r3, #6]
 800b520:	3319      	adds	r3, #25
 800b522:	461a      	mov	r2, r3
 800b524:	4b18      	ldr	r3, [pc, #96]	; (800b588 <stimLib_pulseConfigRaw+0x7c>)
 800b526:	605a      	str	r2, [r3, #4]
	STIM_LIB_DMA_DAC_ON_BUF[2] = STIM_LIB_DAC_CTRL_TIME2;
 800b528:	4b16      	ldr	r3, [pc, #88]	; (800b584 <stimLib_pulseConfigRaw+0x78>)
 800b52a:	88db      	ldrh	r3, [r3, #6]
 800b52c:	330a      	adds	r3, #10
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	3305      	adds	r3, #5
 800b532:	461a      	mov	r2, r3
 800b534:	4b14      	ldr	r3, [pc, #80]	; (800b588 <stimLib_pulseConfigRaw+0x7c>)
 800b536:	609a      	str	r2, [r3, #8]
	STIM_LIB_DMA_DAC_ON_BUF[3] = STIM_LIB_DAC_CTRL_TIME3;
 800b538:	4b13      	ldr	r3, [pc, #76]	; (800b588 <stimLib_pulseConfigRaw+0x7c>)
 800b53a:	2205      	movs	r2, #5
 800b53c:	60da      	str	r2, [r3, #12]

	/* DISCHARGE PULSE Control Time */
	STIM_LIB_DMA_DISCHG_BUF[0] = STIM_LIB_DISCHARGE_PULSE_TIME0;
 800b53e:	4b11      	ldr	r3, [pc, #68]	; (800b584 <stimLib_pulseConfigRaw+0x78>)
 800b540:	88db      	ldrh	r3, [r3, #6]
 800b542:	f603 13dd 	addw	r3, r3, #2525	; 0x9dd
 800b546:	005b      	lsls	r3, r3, #1
 800b548:	461a      	mov	r2, r3
 800b54a:	4b10      	ldr	r3, [pc, #64]	; (800b58c <stimLib_pulseConfigRaw+0x80>)
 800b54c:	601a      	str	r2, [r3, #0]
	STIM_LIB_DMA_DISCHG_BUF[1] = STIM_LIB_DISCHARGE_PULSE_TIME1;
 800b54e:	4b0d      	ldr	r3, [pc, #52]	; (800b584 <stimLib_pulseConfigRaw+0x78>)
 800b550:	88db      	ldrh	r3, [r3, #6]
 800b552:	3319      	adds	r3, #25
 800b554:	005b      	lsls	r3, r3, #1
 800b556:	461a      	mov	r2, r3
 800b558:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <stimLib_pulseConfigRaw+0x80>)
 800b55a:	605a      	str	r2, [r3, #4]

	STIM_LIB_DMA_CATHODE_BUF[0] = STIM_LIB_CATHODE_PULSE_TIME0;
 800b55c:	4b09      	ldr	r3, [pc, #36]	; (800b584 <stimLib_pulseConfigRaw+0x78>)
 800b55e:	88db      	ldrh	r3, [r3, #6]
 800b560:	330f      	adds	r3, #15
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	461a      	mov	r2, r3
 800b566:	4b0a      	ldr	r3, [pc, #40]	; (800b590 <stimLib_pulseConfigRaw+0x84>)
 800b568:	601a      	str	r2, [r3, #0]
	STIM_LIB_DMA_CATHODE_BUF[1] = STIM_LIB_CATHODE_PULSE_TIME1;
 800b56a:	4b06      	ldr	r3, [pc, #24]	; (800b584 <stimLib_pulseConfigRaw+0x78>)
 800b56c:	88db      	ldrh	r3, [r3, #6]
 800b56e:	3314      	adds	r3, #20
 800b570:	461a      	mov	r2, r3
 800b572:	4b07      	ldr	r3, [pc, #28]	; (800b590 <stimLib_pulseConfigRaw+0x84>)
 800b574:	605a      	str	r2, [r3, #4]

	return stim_lib_stim_rsp_ok;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	20000660 	.word	0x20000660
 800b588:	20000678 	.word	0x20000678
 800b58c:	20000688 	.word	0x20000688
 800b590:	20000690 	.word	0x20000690

0800b594 <stimLib_stimStartRaw>:

bool stimLib_stimStartRaw(void)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	af00      	add	r7, sp, #0
	/* START PULSE TIMER CH4 :: DAC_ON_N or STIM_DISCHARGE :: GPIOA PIN 3 */
	HAL_TIM_OC_Start_DMA(&htim2, STIM_LIB_PULSE_DAC_ON_TIM_CH,(const uint32_t*) STIM_LIB_DMA_DAC_ON_BUF, 4);
 800b598:	2304      	movs	r3, #4
 800b59a:	4a15      	ldr	r2, [pc, #84]	; (800b5f0 <stimLib_stimStartRaw+0x5c>)
 800b59c:	210c      	movs	r1, #12
 800b59e:	4815      	ldr	r0, [pc, #84]	; (800b5f4 <stimLib_stimStartRaw+0x60>)
 800b5a0:	f7fb fc36 	bl	8006e10 <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT));
 800b5a4:	4b14      	ldr	r3, [pc, #80]	; (800b5f8 <stimLib_stimStartRaw+0x64>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	4b13      	ldr	r3, [pc, #76]	; (800b5f8 <stimLib_stimStartRaw+0x64>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0206 	bic.w	r2, r2, #6
 800b5b2:	601a      	str	r2, [r3, #0]

	/* START PULSE TIMER CH2 :: ANODE :: GPIOA PIN 1 */
	HAL_TIM_PWM_Start(&htim2, STIM_LIB_PULSE_ANODE_TIM_CH);
 800b5b4:	2104      	movs	r1, #4
 800b5b6:	480f      	ldr	r0, [pc, #60]	; (800b5f4 <stimLib_stimStartRaw+0x60>)
 800b5b8:	f7fb ffbe 	bl	8007538 <HAL_TIM_PWM_Start>

	/* START PULSE TIMER CH3 :: CATHODE :: GPIOA PIN 2 */
	HAL_TIM_OC_Start_DMA(&htim2, STIM_LIB_PULSE_CATHODE_TIM_CH,
 800b5bc:	2302      	movs	r3, #2
 800b5be:	4a0f      	ldr	r2, [pc, #60]	; (800b5fc <stimLib_stimStartRaw+0x68>)
 800b5c0:	2108      	movs	r1, #8
 800b5c2:	480c      	ldr	r0, [pc, #48]	; (800b5f4 <stimLib_stimStartRaw+0x60>)
 800b5c4:	f7fb fc24 	bl	8006e10 <HAL_TIM_OC_Start_DMA>
			(const uint32_t*) STIM_LIB_DMA_CATHODE_BUF, 2);
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch3, (DMA_IT_TC | DMA_IT_HT));
 800b5c8:	4b0d      	ldr	r3, [pc, #52]	; (800b600 <stimLib_stimStartRaw+0x6c>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	4b0c      	ldr	r3, [pc, #48]	; (800b600 <stimLib_stimStartRaw+0x6c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f022 0206 	bic.w	r2, r2, #6
 800b5d6:	601a      	str	r2, [r3, #0]

	/* START PULSE TIMER CH1 :: TRIGGER OUTPUT :: GPIOA PIN 5 */
	if (STIM_LIB_TRG_OUTPUT_IS_ENABLED() == true)
 800b5d8:	4b0a      	ldr	r3, [pc, #40]	; (800b604 <stimLib_stimStartRaw+0x70>)
 800b5da:	7c5b      	ldrb	r3, [r3, #17]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <stimLib_stimStartRaw+0x54>
	{
		HAL_TIM_PWM_Start(&htim2, STIM_LIB_PULSE_TRG_OUT_TIM_CH);
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	4804      	ldr	r0, [pc, #16]	; (800b5f4 <stimLib_stimStartRaw+0x60>)
 800b5e4:	f7fb ffa8 	bl	8007538 <HAL_TIM_PWM_Start>
	}

	return stim_lib_stim_rsp_ok;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20000678 	.word	0x20000678
 800b5f4:	200002b0 	.word	0x200002b0
 800b5f8:	20000348 	.word	0x20000348
 800b5fc:	20000690 	.word	0x20000690
 800b600:	20000390 	.word	0x20000390
 800b604:	20000660 	.word	0x20000660

0800b608 <stimLib_stimStopRaw>:

bool stimLib_stimStopRaw(void)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	af00      	add	r7, sp, #0
	/*
	 * Normalize OCREFs in PWM mode
	 * OCREF cannot be changed in stop state
	 * Check stimLib_trgPauseRaw() Function
	 * */
	TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 800b60c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b610:	699a      	ldr	r2, [r3, #24]
 800b612:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b616:	4b10      	ldr	r3, [pc, #64]	; (800b658 <stimLib_stimStopRaw+0x50>)
 800b618:	4013      	ands	r3, r2
 800b61a:	618b      	str	r3, [r1, #24]
	TIM2->CCMR1 |= (TIM_OCMODE_PWM1) | (TIM_OCMODE_PWM1 << 8U);
 800b61c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b626:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800b62a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b62e:	6193      	str	r3, [r2, #24]

	HAL_TIM_PWM_Stop(&htim2, STIM_LIB_PULSE_TRG_OUT_TIM_CH);
 800b630:	2100      	movs	r1, #0
 800b632:	480a      	ldr	r0, [pc, #40]	; (800b65c <stimLib_stimStopRaw+0x54>)
 800b634:	f7fc f85e 	bl	80076f4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, STIM_LIB_PULSE_ANODE_TIM_CH);
 800b638:	2104      	movs	r1, #4
 800b63a:	4808      	ldr	r0, [pc, #32]	; (800b65c <stimLib_stimStopRaw+0x54>)
 800b63c:	f7fc f85a 	bl	80076f4 <HAL_TIM_PWM_Stop>

	HAL_TIM_OC_Stop_DMA(&htim2, STIM_LIB_PULSE_CATHODE_TIM_CH);
 800b640:	2108      	movs	r1, #8
 800b642:	4806      	ldr	r0, [pc, #24]	; (800b65c <stimLib_stimStopRaw+0x54>)
 800b644:	f7fb fddc 	bl	8007200 <HAL_TIM_OC_Stop_DMA>
	HAL_TIM_OC_Stop_DMA(&htim2, STIM_LIB_PULSE_DAC_ON_TIM_CH);
 800b648:	210c      	movs	r1, #12
 800b64a:	4804      	ldr	r0, [pc, #16]	; (800b65c <stimLib_stimStopRaw+0x54>)
 800b64c:	f7fb fdd8 	bl	8007200 <HAL_TIM_OC_Stop_DMA>

	return stim_lib_stim_rsp_ok;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	fefe8f8f 	.word	0xfefe8f8f
 800b65c:	200002b0 	.word	0x200002b0

0800b660 <stimLib_stepup_ctrlScheduler>:
 * STEPUP CONTROL SCHEDULER
 * Calling from "HAL_TIM_PeriodElapsedCallback()" and "stimLib_stepup_ctrlCallback()" Function
 * Check out the "stim_lib_st_inc.c" file.
 * */
void stimLib_stepup_ctrlScheduler(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	af00      	add	r7, sp, #0
	STIM_LIB_STEPUP_FEEDBACK_CNT++;
 800b664:	4b19      	ldr	r3, [pc, #100]	; (800b6cc <stimLib_stepup_ctrlScheduler+0x6c>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	3301      	adds	r3, #1
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	4b17      	ldr	r3, [pc, #92]	; (800b6cc <stimLib_stepup_ctrlScheduler+0x6c>)
 800b66e:	701a      	strb	r2, [r3, #0]
	stimLib_adc1_readBuffer(setpup_buff, adc1_conv_buff,
 800b670:	220a      	movs	r2, #10
 800b672:	4917      	ldr	r1, [pc, #92]	; (800b6d0 <stimLib_stepup_ctrlScheduler+0x70>)
 800b674:	4817      	ldr	r0, [pc, #92]	; (800b6d4 <stimLib_stepup_ctrlScheduler+0x74>)
 800b676:	f000 f91d 	bl	800b8b4 <stimLib_adc1_readBuffer>
	STIM_LIB_ADC1_TOTAL_SIZE);
	/* SLOPE VOLTAGE RISE CONTROL */
	if (STIM_LIB_STEPUP_FEEDBACK_CNT == 10 && SLOPE_CTRL_END_FLAG == false)
 800b67a:	4b14      	ldr	r3, [pc, #80]	; (800b6cc <stimLib_stepup_ctrlScheduler+0x6c>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	2b0a      	cmp	r3, #10
 800b680:	d10f      	bne.n	800b6a2 <stimLib_stepup_ctrlScheduler+0x42>
 800b682:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <stimLib_stepup_ctrlScheduler+0x78>)
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	f083 0301 	eor.w	r3, r3, #1
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d008      	beq.n	800b6a2 <stimLib_stepup_ctrlScheduler+0x42>
	{
		stimLib_stepup_voltFeedback();
 800b690:	f000 f826 	bl	800b6e0 <stimLib_stepup_voltFeedback>
		STIM_LIB_STEPUP_FEEDBACK_CNT = 0;
 800b694:	4b0d      	ldr	r3, [pc, #52]	; (800b6cc <stimLib_stepup_ctrlScheduler+0x6c>)
 800b696:	2200      	movs	r2, #0
 800b698:	701a      	strb	r2, [r3, #0]
		STEPUP_DATA_PRINT_FLAG = true;
 800b69a:	4b10      	ldr	r3, [pc, #64]	; (800b6dc <stimLib_stepup_ctrlScheduler+0x7c>)
 800b69c:	2201      	movs	r2, #1
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	e00f      	b.n	800b6c2 <stimLib_stepup_ctrlScheduler+0x62>
	}
	/* VOLTAGE RANGE KEEPING CONTROL */
	else if (STIM_LIB_STEPUP_FEEDBACK_CNT == 1 && SLOPE_CTRL_END_FLAG == true)
 800b6a2:	4b0a      	ldr	r3, [pc, #40]	; (800b6cc <stimLib_stepup_ctrlScheduler+0x6c>)
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d10b      	bne.n	800b6c2 <stimLib_stepup_ctrlScheduler+0x62>
 800b6aa:	4b0b      	ldr	r3, [pc, #44]	; (800b6d8 <stimLib_stepup_ctrlScheduler+0x78>)
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d007      	beq.n	800b6c2 <stimLib_stepup_ctrlScheduler+0x62>
	{
		stimLib_stepup_voltFeedback();
 800b6b2:	f000 f815 	bl	800b6e0 <stimLib_stepup_voltFeedback>
		STIM_LIB_STEPUP_FEEDBACK_CNT = 0;
 800b6b6:	4b05      	ldr	r3, [pc, #20]	; (800b6cc <stimLib_stepup_ctrlScheduler+0x6c>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	701a      	strb	r2, [r3, #0]
		STEPUP_DATA_PRINT_FLAG = true;
 800b6bc:	4b07      	ldr	r3, [pc, #28]	; (800b6dc <stimLib_stepup_ctrlScheduler+0x7c>)
 800b6be:	2201      	movs	r2, #1
 800b6c0:	701a      	strb	r2, [r3, #0]
	}
	stimLib_stepup_dataPrint();
 800b6c2:	f000 f9db 	bl	800ba7c <stimLib_stepup_dataPrint>
}
 800b6c6:	bf00      	nop
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20000699 	.word	0x20000699
 800b6d0:	200006a0 	.word	0x200006a0
 800b6d4:	200006b4 	.word	0x200006b4
 800b6d8:	2000069a 	.word	0x2000069a
 800b6dc:	2000069b 	.word	0x2000069b

0800b6e0 <stimLib_stepup_voltFeedback>:

/*
 * STEP UP VOLTAGE FEEDBACK
 * */
void stimLib_stepup_voltFeedback(void)
{
 800b6e0:	b5b0      	push	{r4, r5, r7, lr}
 800b6e2:	af00      	add	r7, sp, #0
	/* STEPUP DATA CLAC */
	stepup_fdbk_adc_avg = stimLib_stepup_adcAVG(setpup_buff,
 800b6e4:	210a      	movs	r1, #10
 800b6e6:	480e      	ldr	r0, [pc, #56]	; (800b720 <stimLib_stepup_voltFeedback+0x40>)
 800b6e8:	f000 f93d 	bl	800b966 <stimLib_stepup_adcAVG>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	4a0d      	ldr	r2, [pc, #52]	; (800b724 <stimLib_stepup_voltFeedback+0x44>)
 800b6f0:	6013      	str	r3, [r2, #0]
	STIM_LIB_ADC1_TOTAL_SIZE);
	stepup_fdbk_volt = stimLib_stepup_voltCalc(stepup_fdbk_adc_avg, R1_Vstup,
 800b6f2:	4b0c      	ldr	r3, [pc, #48]	; (800b724 <stimLib_stepup_voltFeedback+0x44>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	226e      	movs	r2, #110	; 0x6e
 800b6f8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 f957 	bl	800b9b0 <stimLib_stepup_voltCalc>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	4b08      	ldr	r3, [pc, #32]	; (800b728 <stimLib_stepup_voltFeedback+0x48>)
 800b708:	601a      	str	r2, [r3, #0]
	R2_Vstup);

	/* STEPUP VOLTAGE CONFIG */
	stimLib_voltCfg(stepup_fdbk_volt);
 800b70a:	4b07      	ldr	r3, [pc, #28]	; (800b728 <stimLib_stepup_voltFeedback+0x48>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2200      	movs	r2, #0
 800b710:	461c      	mov	r4, r3
 800b712:	4615      	mov	r5, r2
 800b714:	4620      	mov	r0, r4
 800b716:	4629      	mov	r1, r5
 800b718:	f000 f808 	bl	800b72c <stimLib_voltCfg>
}
 800b71c:	bf00      	nop
 800b71e:	bdb0      	pop	{r4, r5, r7, pc}
 800b720:	200006b4 	.word	0x200006b4
 800b724:	200006c8 	.word	0x200006c8
 800b728:	200006cc 	.word	0x200006cc

0800b72c <stimLib_voltCfg>:

/*
 * STEP UP VOLTAGE CONFIG
 * */
void stimLib_voltCfg(uint64_t stepup_voltage)
{
 800b72c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b730:	b087      	sub	sp, #28
 800b732:	af00      	add	r7, sp, #0
 800b734:	e9c7 0102 	strd	r0, r1, [r7, #8]
	uint32_t voltage_scaleup_val = STEPUP_TARGET_VOLTAGE
 800b738:	4956      	ldr	r1, [pc, #344]	; (800b894 <stimLib_voltCfg+0x168>)
 800b73a:	6179      	str	r1, [r7, #20]

#define OUTPUT_VOLTAGE_IS_LOW		voltage_scaleup_val > stepup_voltage
#define OUTPUT_VOLTAGE_IS_HIGH		voltage_scaleup_val < stepup_voltage
#define OUTPUT_VOLTAGE_IS_SAME		voltage_scaleup_val == stepup_voltage

	if (VOLTAGE_DIFFERENCE_ABS < STEPUP_FDBK_VOLT_RANGE)
 800b73c:	68b9      	ldr	r1, [r7, #8]
 800b73e:	6978      	ldr	r0, [r7, #20]
 800b740:	1a41      	subs	r1, r0, r1
 800b742:	4608      	mov	r0, r1
 800b744:	4954      	ldr	r1, [pc, #336]	; (800b898 <stimLib_voltCfg+0x16c>)
 800b746:	4288      	cmp	r0, r1
 800b748:	db39      	blt.n	800b7be <stimLib_voltCfg+0x92>
 800b74a:	68b9      	ldr	r1, [r7, #8]
 800b74c:	6978      	ldr	r0, [r7, #20]
 800b74e:	1a41      	subs	r1, r0, r1
 800b750:	4608      	mov	r0, r1
 800b752:	4952      	ldr	r1, [pc, #328]	; (800b89c <stimLib_voltCfg+0x170>)
 800b754:	4288      	cmp	r0, r1
 800b756:	dc32      	bgt.n	800b7be <stimLib_voltCfg+0x92>
	{
		if (OUTPUT_VOLTAGE_IS_LOW)
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	2200      	movs	r2, #0
 800b75c:	603b      	str	r3, [r7, #0]
 800b75e:	607a      	str	r2, [r7, #4]
 800b760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b764:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b768:	4621      	mov	r1, r4
 800b76a:	428a      	cmp	r2, r1
 800b76c:	4629      	mov	r1, r5
 800b76e:	418b      	sbcs	r3, r1
 800b770:	d20d      	bcs.n	800b78e <stimLib_voltCfg+0x62>
		{
			STIM_LIB_VOLTAGE_CTRL_PULSE++;
 800b772:	4b4b      	ldr	r3, [pc, #300]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	3301      	adds	r3, #1
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	4b49      	ldr	r3, [pc, #292]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b77c:	701a      	strb	r2, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE
					> STIM_LIB_STEPUP_CTRL_TABLE_LIMIT - 1)
 800b77e:	4b48      	ldr	r3, [pc, #288]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b780:	781b      	ldrb	r3, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE
 800b782:	2b1d      	cmp	r3, #29
 800b784:	d913      	bls.n	800b7ae <stimLib_voltCfg+0x82>
			{
				STIM_LIB_VOLTAGE_CTRL_PULSE = STIM_LIB_STEPUP_CTRL_TABLE_LIMIT
 800b786:	4b46      	ldr	r3, [pc, #280]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b788:	221d      	movs	r2, #29
 800b78a:	701a      	strb	r2, [r3, #0]
 800b78c:	e00f      	b.n	800b7ae <stimLib_voltCfg+0x82>
						- 1;
			}
		}

		else if (OUTPUT_VOLTAGE_IS_HIGH)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2200      	movs	r2, #0
 800b792:	469a      	mov	sl, r3
 800b794:	4693      	mov	fp, r2
 800b796:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b79a:	4592      	cmp	sl, r2
 800b79c:	eb7b 0303 	sbcs.w	r3, fp, r3
 800b7a0:	d205      	bcs.n	800b7ae <stimLib_voltCfg+0x82>
		{
			STIM_LIB_VOLTAGE_CTRL_PULSE--;
 800b7a2:	4b3f      	ldr	r3, [pc, #252]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	4b3d      	ldr	r3, [pc, #244]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b7ac:	701a      	strb	r2, [r3, #0]
		}

		SLOPE_CTRL_END_FLAG = true;
 800b7ae:	4b3d      	ldr	r3, [pc, #244]	; (800b8a4 <stimLib_voltCfg+0x178>)
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	701a      	strb	r2, [r3, #0]
		TIM1->CCR1 = STIM_LIB_VOLTAGE_CTRL_PULSE;
 800b7b4:	4b3a      	ldr	r3, [pc, #232]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b7b6:	781a      	ldrb	r2, [r3, #0]
 800b7b8:	4b3b      	ldr	r3, [pc, #236]	; (800b8a8 <stimLib_voltCfg+0x17c>)
 800b7ba:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		SLOPE_CTRL_END_FLAG = true;
	}

}
 800b7bc:	e063      	b.n	800b886 <stimLib_voltCfg+0x15a>
	else if (VOLTAGE_DIFFERENCE_ABS > STEPUP_FDBK_VOLT_RANGE)
 800b7be:	68b9      	ldr	r1, [r7, #8]
 800b7c0:	6978      	ldr	r0, [r7, #20]
 800b7c2:	1a41      	subs	r1, r0, r1
 800b7c4:	2900      	cmp	r1, #0
 800b7c6:	bfb8      	it	lt
 800b7c8:	4249      	neglt	r1, r1
 800b7ca:	4838      	ldr	r0, [pc, #224]	; (800b8ac <stimLib_voltCfg+0x180>)
 800b7cc:	4281      	cmp	r1, r0
 800b7ce:	dd49      	ble.n	800b864 <stimLib_voltCfg+0x138>
		if (OUTPUT_VOLTAGE_IS_LOW)
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	4698      	mov	r8, r3
 800b7d6:	4691      	mov	r9, r2
 800b7d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7dc:	4542      	cmp	r2, r8
 800b7de:	eb73 0309 	sbcs.w	r3, r3, r9
 800b7e2:	d220      	bcs.n	800b826 <stimLib_voltCfg+0xfa>
			if (FAST_STEPUP_ENABLE)
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bfb8      	it	lt
 800b7ee:	425b      	neglt	r3, r3
 800b7f0:	4a2f      	ldr	r2, [pc, #188]	; (800b8b0 <stimLib_voltCfg+0x184>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	dd06      	ble.n	800b804 <stimLib_voltCfg+0xd8>
				STIM_LIB_VOLTAGE_CTRL_PULSE += 6;
 800b7f6:	4b2a      	ldr	r3, [pc, #168]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	3306      	adds	r3, #6
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	4b28      	ldr	r3, [pc, #160]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b800:	701a      	strb	r2, [r3, #0]
 800b802:	e005      	b.n	800b810 <stimLib_voltCfg+0xe4>
				STIM_LIB_VOLTAGE_CTRL_PULSE += 1;
 800b804:	4b26      	ldr	r3, [pc, #152]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	3301      	adds	r3, #1
 800b80a:	b2da      	uxtb	r2, r3
 800b80c:	4b24      	ldr	r3, [pc, #144]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b80e:	701a      	strb	r2, [r3, #0]
			SLOPE_CTRL_END_FLAG = false;
 800b810:	4b24      	ldr	r3, [pc, #144]	; (800b8a4 <stimLib_voltCfg+0x178>)
 800b812:	2200      	movs	r2, #0
 800b814:	701a      	strb	r2, [r3, #0]
					> STIM_LIB_STEPUP_CTRL_TABLE_LIMIT - 1)
 800b816:	4b22      	ldr	r3, [pc, #136]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b818:	781b      	ldrb	r3, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE
 800b81a:	2b1d      	cmp	r3, #29
 800b81c:	d91d      	bls.n	800b85a <stimLib_voltCfg+0x12e>
				STIM_LIB_VOLTAGE_CTRL_PULSE = STIM_LIB_STEPUP_CTRL_TABLE_LIMIT
 800b81e:	4b20      	ldr	r3, [pc, #128]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b820:	221d      	movs	r2, #29
 800b822:	701a      	strb	r2, [r3, #0]
 800b824:	e019      	b.n	800b85a <stimLib_voltCfg+0x12e>
		else if (OUTPUT_VOLTAGE_IS_HIGH)
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2200      	movs	r2, #0
 800b82a:	461c      	mov	r4, r3
 800b82c:	4615      	mov	r5, r2
 800b82e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b832:	4294      	cmp	r4, r2
 800b834:	eb75 0303 	sbcs.w	r3, r5, r3
 800b838:	d20f      	bcs.n	800b85a <stimLib_voltCfg+0x12e>
			STIM_LIB_VOLTAGE_CTRL_PULSE--;
 800b83a:	4b19      	ldr	r3, [pc, #100]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	3b01      	subs	r3, #1
 800b840:	b2da      	uxtb	r2, r3
 800b842:	4b17      	ldr	r3, [pc, #92]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b844:	701a      	strb	r2, [r3, #0]
			SLOPE_CTRL_END_FLAG = true;
 800b846:	4b17      	ldr	r3, [pc, #92]	; (800b8a4 <stimLib_voltCfg+0x178>)
 800b848:	2201      	movs	r2, #1
 800b84a:	701a      	strb	r2, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE <= 0)
 800b84c:	4b14      	ldr	r3, [pc, #80]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d102      	bne.n	800b85a <stimLib_voltCfg+0x12e>
				STIM_LIB_VOLTAGE_CTRL_PULSE = 0;
 800b854:	4b12      	ldr	r3, [pc, #72]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b856:	2200      	movs	r2, #0
 800b858:	701a      	strb	r2, [r3, #0]
		TIM1->CCR1 = STIM_LIB_VOLTAGE_CTRL_PULSE;
 800b85a:	4b11      	ldr	r3, [pc, #68]	; (800b8a0 <stimLib_voltCfg+0x174>)
 800b85c:	781a      	ldrb	r2, [r3, #0]
 800b85e:	4b12      	ldr	r3, [pc, #72]	; (800b8a8 <stimLib_voltCfg+0x17c>)
 800b860:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b862:	e010      	b.n	800b886 <stimLib_voltCfg+0x15a>
	else if (OUTPUT_VOLTAGE_IS_SAME)
 800b864:	6979      	ldr	r1, [r7, #20]
 800b866:	2000      	movs	r0, #0
 800b868:	460a      	mov	r2, r1
 800b86a:	4603      	mov	r3, r0
 800b86c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b870:	4299      	cmp	r1, r3
 800b872:	bf08      	it	eq
 800b874:	4290      	cmpeq	r0, r2
 800b876:	d103      	bne.n	800b880 <stimLib_voltCfg+0x154>
		SLOPE_CTRL_END_FLAG = true;
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <stimLib_voltCfg+0x178>)
 800b87a:	2201      	movs	r2, #1
 800b87c:	701a      	strb	r2, [r3, #0]
}
 800b87e:	e002      	b.n	800b886 <stimLib_voltCfg+0x15a>
		SLOPE_CTRL_END_FLAG = true;
 800b880:	4b08      	ldr	r3, [pc, #32]	; (800b8a4 <stimLib_voltCfg+0x178>)
 800b882:	2201      	movs	r2, #1
 800b884:	701a      	strb	r2, [r3, #0]
}
 800b886:	bf00      	nop
 800b888:	371c      	adds	r7, #28
 800b88a:	46bd      	mov	sp, r7
 800b88c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	003d0900 	.word	0x003d0900
 800b898:	fffd40e1 	.word	0xfffd40e1
 800b89c:	0002bf1f 	.word	0x0002bf1f
 800b8a0:	20000698 	.word	0x20000698
 800b8a4:	2000069a 	.word	0x2000069a
 800b8a8:	40012c00 	.word	0x40012c00
 800b8ac:	0002bf20 	.word	0x0002bf20
 800b8b0:	000927c0 	.word	0x000927c0

0800b8b4 <stimLib_adc1_readBuffer>:
/*
 * ADC CONVERSION DATA READ :: ADC1 DATA >> STEP UP BUFFER
 * */
void stimLib_adc1_readBuffer(uint16_t *stepup_buff, uint16_t *adc1_conv_buff,
		uint8_t conv_length)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	4613      	mov	r3, r2
 800b8c0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < conv_length; i++)
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	75fb      	strb	r3, [r7, #23]
 800b8c6:	e043      	b.n	800b950 <stimLib_adc1_readBuffer+0x9c>
		/*
		 * STEP UP ADC FILTER
		 * When the ADC buffer is read once,
		 * if the deviation of the value is an unexpected value, it is filtered.
		 *  */
		if (abs(adc1_conv_buff[i] - adc1_conv_buff[(i + 1) % conv_length])
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	881b      	ldrh	r3, [r3, #0]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	7dfb      	ldrb	r3, [r7, #23]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	79fa      	ldrb	r2, [r7, #7]
 800b8da:	fb93 f1f2 	sdiv	r1, r3, r2
 800b8de:	fb01 f202 	mul.w	r2, r1, r2
 800b8e2:	1a9b      	subs	r3, r3, r2
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	68ba      	ldr	r2, [r7, #8]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	1ac3      	subs	r3, r0, r3
 800b8ee:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 800b8f2:	db1f      	blt.n	800b934 <stimLib_adc1_readBuffer+0x80>
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	4618      	mov	r0, r3
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	3301      	adds	r3, #1
 800b904:	79fa      	ldrb	r2, [r7, #7]
 800b906:	fb93 f1f2 	sdiv	r1, r3, r2
 800b90a:	fb01 f202 	mul.w	r2, r1, r2
 800b90e:	1a9b      	subs	r3, r3, r2
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	4413      	add	r3, r2
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	1ac3      	subs	r3, r0, r3
				< 200)
 800b91a:	2bc7      	cmp	r3, #199	; 0xc7
 800b91c:	dc0a      	bgt.n	800b934 <stimLib_adc1_readBuffer+0x80>
		{
			stepup_buff[i] = adc1_conv_buff[i];
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	441a      	add	r2, r3
 800b926:	7dfb      	ldrb	r3, [r7, #23]
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	68f9      	ldr	r1, [r7, #12]
 800b92c:	440b      	add	r3, r1
 800b92e:	8812      	ldrh	r2, [r2, #0]
 800b930:	801a      	strh	r2, [r3, #0]
 800b932:	e00a      	b.n	800b94a <stimLib_adc1_readBuffer+0x96>
		}
		else
		{
			stepup_buff[i] = adc1_conv_buff[i + 1];
 800b934:	7dfb      	ldrb	r3, [r7, #23]
 800b936:	3301      	adds	r3, #1
 800b938:	005b      	lsls	r3, r3, #1
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	441a      	add	r2, r3
 800b93e:	7dfb      	ldrb	r3, [r7, #23]
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	68f9      	ldr	r1, [r7, #12]
 800b944:	440b      	add	r3, r1
 800b946:	8812      	ldrh	r2, [r2, #0]
 800b948:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < conv_length; i++)
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
 800b94c:	3301      	adds	r3, #1
 800b94e:	75fb      	strb	r3, [r7, #23]
 800b950:	7dfa      	ldrb	r2, [r7, #23]
 800b952:	79fb      	ldrb	r3, [r7, #7]
 800b954:	429a      	cmp	r2, r3
 800b956:	d3b7      	bcc.n	800b8c8 <stimLib_adc1_readBuffer+0x14>
		}
	}
}
 800b958:	bf00      	nop
 800b95a:	bf00      	nop
 800b95c:	371c      	adds	r7, #28
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <stimLib_stepup_adcAVG>:

/*
 * STEPUP ADC DATA AVG
 * */
uint32_t stimLib_stepup_adcAVG(uint16_t *stepup_buff, uint8_t conv_length)
{
 800b966:	b480      	push	{r7}
 800b968:	b085      	sub	sp, #20
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	460b      	mov	r3, r1
 800b970:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint32_t stepup_total = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < conv_length; i++)
 800b976:	2300      	movs	r3, #0
 800b978:	73fb      	strb	r3, [r7, #15]
 800b97a:	e00b      	b.n	800b994 <stimLib_stepup_adcAVG+0x2e>
	{
		stepup_total += stepup_buff[i];
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	4413      	add	r3, r2
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	461a      	mov	r2, r3
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	4413      	add	r3, r2
 800b98c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < conv_length; i++)
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	3301      	adds	r3, #1
 800b992:	73fb      	strb	r3, [r7, #15]
 800b994:	7bfa      	ldrb	r2, [r7, #15]
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d3ef      	bcc.n	800b97c <stimLib_stepup_adcAVG+0x16>
	}
	return stepup_total / conv_length;
 800b99c:	78fb      	ldrb	r3, [r7, #3]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <stimLib_stepup_voltCalc>:
/*
 * STEP UP VOLTAGE CALC
 * */
uint64_t stimLib_stepup_voltCalc(uint32_t stepup_adc_avg, uint32_t r1,
		uint32_t r2)
{
 800b9b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9b4:	b08a      	sub	sp, #40	; 0x28
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6178      	str	r0, [r7, #20]
 800b9ba:	6139      	str	r1, [r7, #16]
 800b9bc:	60fa      	str	r2, [r7, #12]
	 * TODO:
	 * ADD IN FUATURE
	 * ADC TABLE
	 * */
	/* REFERENCE TABLE */
	uint64_t adc_val = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].fdbk_vol
 800b9be:	4b2d      	ldr	r3, [pc, #180]	; (800ba74 <stimLib_stepup_voltCalc+0xc4>)
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4a2c      	ldr	r2, [pc, #176]	; (800ba78 <stimLib_stepup_voltCalc+0xc8>)
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	440b      	add	r3, r1
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	461a      	mov	r2, r3
			* stepup_adc_avg)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	fb03 f202 	mul.w	r2, r3, r2
			/ STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].adc_val;
 800b9dc:	4b25      	ldr	r3, [pc, #148]	; (800ba74 <stimLib_stepup_voltCalc+0xc4>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	4925      	ldr	r1, [pc, #148]	; (800ba78 <stimLib_stepup_voltCalc+0xc8>)
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	4403      	add	r3, r0
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	440b      	add	r3, r1
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	fbb2 f3f3 	udiv	r3, r2, r3
	uint64_t adc_val = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].fdbk_vol
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	469a      	mov	sl, r3
 800b9fa:	4693      	mov	fp, r2
 800b9fc:	e9c7 ab08 	strd	sl, fp, [r7, #32]

	uint64_t v_out = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].output_vol
 800ba00:	4b1c      	ldr	r3, [pc, #112]	; (800ba74 <stimLib_stepup_voltCalc+0xc4>)
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	4619      	mov	r1, r3
 800ba06:	4a1c      	ldr	r2, [pc, #112]	; (800ba78 <stimLib_stepup_voltCalc+0xc8>)
 800ba08:	460b      	mov	r3, r1
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	440b      	add	r3, r1
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	17da      	asrs	r2, r3, #31
 800ba16:	4698      	mov	r8, r3
 800ba18:	4691      	mov	r9, r2
			* adc_val) / STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].fdbk_vol;
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	fb09 f203 	mul.w	r2, r9, r3
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	fb08 f303 	mul.w	r3, r8, r3
 800ba26:	4413      	add	r3, r2
 800ba28:	6a3a      	ldr	r2, [r7, #32]
 800ba2a:	fba2 4508 	umull	r4, r5, r2, r8
 800ba2e:	442b      	add	r3, r5
 800ba30:	461d      	mov	r5, r3
 800ba32:	4b10      	ldr	r3, [pc, #64]	; (800ba74 <stimLib_stepup_voltCalc+0xc4>)
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	4619      	mov	r1, r3
 800ba38:	4a0f      	ldr	r2, [pc, #60]	; (800ba78 <stimLib_stepup_voltCalc+0xc8>)
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	440b      	add	r3, r1
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	4413      	add	r3, r2
 800ba44:	3308      	adds	r3, #8
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	17da      	asrs	r2, r3, #31
 800ba4a:	603b      	str	r3, [r7, #0]
 800ba4c:	607a      	str	r2, [r7, #4]
	uint64_t v_out = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].output_vol
 800ba4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba52:	4620      	mov	r0, r4
 800ba54:	4629      	mov	r1, r5
 800ba56:	f7f4 fc0b 	bl	8000270 <__aeabi_uldivmod>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	return v_out;
 800ba62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800ba66:	4610      	mov	r0, r2
 800ba68:	4619      	mov	r1, r3
 800ba6a:	3728      	adds	r7, #40	; 0x28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba72:	bf00      	nop
 800ba74:	20000698 	.word	0x20000698
 800ba78:	0800d604 	.word	0x0800d604

0800ba7c <stimLib_stepup_dataPrint>:

/*
 * STEP UP ADC DATA PRINT
 * */
void stimLib_stepup_dataPrint(void)
{
 800ba7c:	b590      	push	{r4, r7, lr}
 800ba7e:	b08b      	sub	sp, #44	; 0x2c
 800ba80:	af04      	add	r7, sp, #16
	if (STEPUP_DATA_PRINT_FLAG == true)
 800ba82:	4b33      	ldr	r3, [pc, #204]	; (800bb50 <stimLib_stepup_dataPrint+0xd4>)
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d05a      	beq.n	800bb40 <stimLib_stepup_dataPrint+0xc4>
	{
		uint8_t i;
		uint8_t dec_point[STEPUP_DEC_PLACES];
		int mode_val = STEPUP_VOLTAGE_SCALE_SIZE;
 800ba8a:	4b32      	ldr	r3, [pc, #200]	; (800bb54 <stimLib_stepup_dataPrint+0xd8>)
 800ba8c:	613b      	str	r3, [r7, #16]
		uint32_t n_number = (int) (stepup_fdbk_volt / STEPUP_VOLTAGE_SCALE_SIZE);
 800ba8e:	4b32      	ldr	r3, [pc, #200]	; (800bb58 <stimLib_stepup_dataPrint+0xdc>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	095b      	lsrs	r3, r3, #5
 800ba94:	4a31      	ldr	r2, [pc, #196]	; (800bb5c <stimLib_stepup_dataPrint+0xe0>)
 800ba96:	fba2 2303 	umull	r2, r3, r2, r3
 800ba9a:	09db      	lsrs	r3, r3, #7
 800ba9c:	60fb      	str	r3, [r7, #12]

		for (i = 0; i < STEPUP_DEC_PLACES; i++)
 800ba9e:	2300      	movs	r3, #0
 800baa0:	75fb      	strb	r3, [r7, #23]
 800baa2:	e021      	b.n	800bae8 <stimLib_stepup_dataPrint+0x6c>
		{
			dec_point[i] = (stepup_fdbk_volt % mode_val) / (mode_val / 10);
 800baa4:	4b2c      	ldr	r3, [pc, #176]	; (800bb58 <stimLib_stepup_dataPrint+0xdc>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800baae:	fb01 f202 	mul.w	r2, r1, r2
 800bab2:	1a9a      	subs	r2, r3, r2
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	492a      	ldr	r1, [pc, #168]	; (800bb60 <stimLib_stepup_dataPrint+0xe4>)
 800bab8:	fb81 0103 	smull	r0, r1, r1, r3
 800babc:	1089      	asrs	r1, r1, #2
 800babe:	17db      	asrs	r3, r3, #31
 800bac0:	1acb      	subs	r3, r1, r3
 800bac2:	fbb2 f2f3 	udiv	r2, r2, r3
 800bac6:	7dfb      	ldrb	r3, [r7, #23]
 800bac8:	b2d2      	uxtb	r2, r2
 800baca:	3318      	adds	r3, #24
 800bacc:	443b      	add	r3, r7
 800bace:	f803 2c14 	strb.w	r2, [r3, #-20]
			mode_val /= 10;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	4a22      	ldr	r2, [pc, #136]	; (800bb60 <stimLib_stepup_dataPrint+0xe4>)
 800bad6:	fb82 1203 	smull	r1, r2, r2, r3
 800bada:	1092      	asrs	r2, r2, #2
 800badc:	17db      	asrs	r3, r3, #31
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	613b      	str	r3, [r7, #16]
		for (i = 0; i < STEPUP_DEC_PLACES; i++)
 800bae2:	7dfb      	ldrb	r3, [r7, #23]
 800bae4:	3301      	adds	r3, #1
 800bae6:	75fb      	strb	r3, [r7, #23]
 800bae8:	7dfb      	ldrb	r3, [r7, #23]
 800baea:	2b04      	cmp	r3, #4
 800baec:	d9da      	bls.n	800baa4 <stimLib_stepup_dataPrint+0x28>
		}

		/* dec_point[0] = fdbk_adc_voltage % STEPUP_VOLTAGE_SCALE; */
		TD_DEBUG_PRINT(("----- STEP-UP -----\n"));
 800baee:	481d      	ldr	r0, [pc, #116]	; (800bb64 <stimLib_stepup_dataPrint+0xe8>)
 800baf0:	f000 fa0a 	bl	800bf08 <puts>
		TD_DEBUG_PRINT(("TARGET VOLTAGE : %d\n", STEPUP_TARGET_VOLTAGE));
 800baf4:	2128      	movs	r1, #40	; 0x28
 800baf6:	481c      	ldr	r0, [pc, #112]	; (800bb68 <stimLib_stepup_dataPrint+0xec>)
 800baf8:	f000 f96a 	bl	800bdd0 <iprintf>

		TD_DEBUG_PRINT(
 800bafc:	793b      	ldrb	r3, [r7, #4]
 800bafe:	4618      	mov	r0, r3
 800bb00:	797b      	ldrb	r3, [r7, #5]
 800bb02:	461c      	mov	r4, r3
 800bb04:	79bb      	ldrb	r3, [r7, #6]
 800bb06:	79fa      	ldrb	r2, [r7, #7]
 800bb08:	7a39      	ldrb	r1, [r7, #8]
 800bb0a:	9102      	str	r1, [sp, #8]
 800bb0c:	9201      	str	r2, [sp, #4]
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	4623      	mov	r3, r4
 800bb12:	4602      	mov	r2, r0
 800bb14:	68f9      	ldr	r1, [r7, #12]
 800bb16:	4815      	ldr	r0, [pc, #84]	; (800bb6c <stimLib_stepup_dataPrint+0xf0>)
 800bb18:	f000 f95a 	bl	800bdd0 <iprintf>
				("MEAS Voltage : %ld.%d%d%d%d%d\n", n_number, dec_point[0], dec_point[1], dec_point[2], dec_point[3], dec_point[4]));
		TD_DEBUG_PRINT(("STEP-UP ADC AVG : %ld\n", stepup_fdbk_adc_avg));
 800bb1c:	4b14      	ldr	r3, [pc, #80]	; (800bb70 <stimLib_stepup_dataPrint+0xf4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4619      	mov	r1, r3
 800bb22:	4814      	ldr	r0, [pc, #80]	; (800bb74 <stimLib_stepup_dataPrint+0xf8>)
 800bb24:	f000 f954 	bl	800bdd0 <iprintf>
		TD_DEBUG_PRINT(("STEP-UP PW : %d\n", STIM_LIB_VOLTAGE_CTRL_PULSE));
 800bb28:	4b13      	ldr	r3, [pc, #76]	; (800bb78 <stimLib_stepup_dataPrint+0xfc>)
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4813      	ldr	r0, [pc, #76]	; (800bb7c <stimLib_stepup_dataPrint+0x100>)
 800bb30:	f000 f94e 	bl	800bdd0 <iprintf>

#ifdef STIM_LIB_EVKIT_CC
		TD_DEBUG_PRINT(("DAC CTRL VALUE : %d\n\n", DAC_CONTROL_VALUE));
 800bb34:	4b12      	ldr	r3, [pc, #72]	; (800bb80 <stimLib_stepup_dataPrint+0x104>)
 800bb36:	7a1b      	ldrb	r3, [r3, #8]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	4812      	ldr	r0, [pc, #72]	; (800bb84 <stimLib_stepup_dataPrint+0x108>)
 800bb3c:	f000 f948 	bl	800bdd0 <iprintf>
#endif

	}
	STEPUP_DATA_PRINT_FLAG = false;
 800bb40:	4b03      	ldr	r3, [pc, #12]	; (800bb50 <stimLib_stepup_dataPrint+0xd4>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	701a      	strb	r2, [r3, #0]

}
 800bb46:	bf00      	nop
 800bb48:	371c      	adds	r7, #28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd90      	pop	{r4, r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	2000069b 	.word	0x2000069b
 800bb54:	000186a0 	.word	0x000186a0
 800bb58:	200006cc 	.word	0x200006cc
 800bb5c:	0a7c5ac5 	.word	0x0a7c5ac5
 800bb60:	66666667 	.word	0x66666667
 800bb64:	0800d52c 	.word	0x0800d52c
 800bb68:	0800d540 	.word	0x0800d540
 800bb6c:	0800d558 	.word	0x0800d558
 800bb70:	200006c8 	.word	0x200006c8
 800bb74:	0800d578 	.word	0x0800d578
 800bb78:	20000698 	.word	0x20000698
 800bb7c:	0800d590 	.word	0x0800d590
 800bb80:	20000660 	.word	0x20000660
 800bb84:	0800d5a4 	.word	0x0800d5a4

0800bb88 <stimLib_dacctrl_Set>:

/*
 * DAC GPIO CONTROL
 * */
void stimLib_dacctrl_Set(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0
	stimLib_dacctrl_setRaw();
 800bb8c:	f000 f8bc 	bl	800bd08 <stimLib_dacctrl_setRaw>
}
 800bb90:	bf00      	nop
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <stimLib_dacctrl_Off>:

void stimLib_dacctrl_Off(void)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	af00      	add	r7, sp, #0
	stimLib_dacctrl_offRaw();
 800bb98:	f000 f8ce 	bl	800bd38 <stimLib_dacctrl_offRaw>
}
 800bb9c:	bf00      	nop
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <stimLib_stepup_adcStart>:

/*
 * STEP UP START :: ADC CONVERSION START
 * */
void stimLib_stepup_adcStart(void)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	af00      	add	r7, sp, #0
	stimLib_stepup_adcStartRaw();
 800bba4:	f000 f886 	bl	800bcb4 <stimLib_stepup_adcStartRaw>
}
 800bba8:	bf00      	nop
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <stimLib_stepup_adcStop>:

/*
 * STEP UP STOP :: ADC CONVERSION STOP
 * */
void stimLib_stepup_adcStop(void)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	af00      	add	r7, sp, #0
	stimLib_stepup_adcStopRaw();
 800bbb0:	f000 f8a0 	bl	800bcf4 <stimLib_stepup_adcStopRaw>
}
 800bbb4:	bf00      	nop
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <stimLib_stepupStart>:

/* STEP UP FUNCTION Collection */
void stimLib_stepupStart(void)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	af00      	add	r7, sp, #0
	STIM_LIB_STEPUP_SET_START();
 800bbbc:	4b05      	ldr	r3, [pc, #20]	; (800bbd4 <stimLib_stepupStart+0x1c>)
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	701a      	strb	r2, [r3, #0]
#ifdef STIM_LIB_EVKIT_CC
	stimLib_dacctrl_Set();
 800bbc2:	f7ff ffe1 	bl	800bb88 <stimLib_dacctrl_Set>
#endif
	stimLib_stepup_adcStart();
 800bbc6:	f7ff ffeb 	bl	800bba0 <stimLib_stepup_adcStart>
	stimLib_stepup_startRaw();
 800bbca:	f000 f815 	bl	800bbf8 <stimLib_stepup_startRaw>
}
 800bbce:	bf00      	nop
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	2000069c 	.word	0x2000069c

0800bbd8 <stimLib_stepupStop>:

void stimLib_stepupStop(void)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	af00      	add	r7, sp, #0
	STIM_LIB_STEPUP_SET_STOP();
 800bbdc:	4b05      	ldr	r3, [pc, #20]	; (800bbf4 <stimLib_stepupStop+0x1c>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	701a      	strb	r2, [r3, #0]
#ifdef STIM_LIB_EVKIT_CC
	stimLib_dacctrl_Off();
 800bbe2:	f7ff ffd7 	bl	800bb94 <stimLib_dacctrl_Off>
#endif
	stimLib_stepup_stopRaw();
 800bbe6:	f000 f84d 	bl	800bc84 <stimLib_stepup_stopRaw>
	stimLib_stepup_adcStop();
 800bbea:	f7ff ffdf 	bl	800bbac <stimLib_stepup_adcStop>
}
 800bbee:	bf00      	nop
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	2000069c 	.word	0x2000069c

0800bbf8 <stimLib_stepup_startRaw>:
/* STEPUP CONTROL VALUE :: PULSE and Counter */
extern uint8_t voltage_ctrl_pulse;
extern uint8_t stepup_feedback_cnt;

void stimLib_stepup_startRaw(void)
{
 800bbf8:	b598      	push	{r3, r4, r7, lr}
 800bbfa:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 800bbfc:	4b1a      	ldr	r3, [pc, #104]	; (800bc68 <stimLib_stepup_startRaw+0x70>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->PSC = STIM_LIB_STEPUP_PSC_INPUT;
 800bc02:	f7fa fd85 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4a18      	ldr	r2, [pc, #96]	; (800bc6c <stimLib_stepup_startRaw+0x74>)
 800bc0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc0e:	461a      	mov	r2, r3
 800bc10:	f44f 7348 	mov.w	r3, #800	; 0x320
 800bc14:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc18:	1e5a      	subs	r2, r3, #1
 800bc1a:	4b13      	ldr	r3, [pc, #76]	; (800bc68 <stimLib_stepup_startRaw+0x70>)
 800bc1c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = STIM_LIB_STEPUP_ARR_INPUT;
 800bc1e:	f7fa fd77 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800bc22:	4604      	mov	r4, r0
 800bc24:	f7fa fd74 	bl	8006710 <HAL_RCC_GetHCLKFreq>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	4a10      	ldr	r2, [pc, #64]	; (800bc6c <stimLib_stepup_startRaw+0x74>)
 800bc2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc30:	461a      	mov	r2, r3
 800bc32:	f44f 7348 	mov.w	r3, #800	; 0x320
 800bc36:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc3a:	fbb4 f3f3 	udiv	r3, r4, r3
 800bc3e:	4a0c      	ldr	r2, [pc, #48]	; (800bc70 <stimLib_stepup_startRaw+0x78>)
 800bc40:	fba2 2303 	umull	r2, r3, r2, r3
 800bc44:	08db      	lsrs	r3, r3, #3
 800bc46:	1e5a      	subs	r2, r3, #1
 800bc48:	4b07      	ldr	r3, [pc, #28]	; (800bc68 <stimLib_stepup_startRaw+0x70>)
 800bc4a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* STEP UP PULSE */
	TIM1->CCR1 = STIM_LIB_VOLTAGE_CTRL_PULSE;
 800bc4c:	4b09      	ldr	r3, [pc, #36]	; (800bc74 <stimLib_stepup_startRaw+0x7c>)
 800bc4e:	781a      	ldrb	r2, [r3, #0]
 800bc50:	4b09      	ldr	r3, [pc, #36]	; (800bc78 <stimLib_stepup_startRaw+0x80>)
 800bc52:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800bc54:	2100      	movs	r1, #0
 800bc56:	4809      	ldr	r0, [pc, #36]	; (800bc7c <stimLib_stepup_startRaw+0x84>)
 800bc58:	f7fb fc6e 	bl	8007538 <HAL_TIM_PWM_Start>

	/* STEP UP FEEDBACK */
	HAL_TIM_Base_Start_IT(&htim6);
 800bc5c:	4808      	ldr	r0, [pc, #32]	; (800bc80 <stimLib_stepup_startRaw+0x88>)
 800bc5e:	f7fa fff3 	bl	8006c48 <HAL_TIM_Base_Start_IT>
}
 800bc62:	bf00      	nop
 800bc64:	bd98      	pop	{r3, r4, r7, pc}
 800bc66:	bf00      	nop
 800bc68:	40001000 	.word	0x40001000
 800bc6c:	04c4b400 	.word	0x04c4b400
 800bc70:	cccccccd 	.word	0xcccccccd
 800bc74:	20000698 	.word	0x20000698
 800bc78:	40012c00 	.word	0x40012c00
 800bc7c:	20000264 	.word	0x20000264
 800bc80:	200002fc 	.word	0x200002fc

0800bc84 <stimLib_stepup_stopRaw>:

void stimLib_stepup_stopRaw(void)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	af00      	add	r7, sp, #0
	STIM_LIB_VOLTAGE_CTRL_PULSE = 0;
 800bc88:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <stimLib_stepup_stopRaw+0x24>)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop(&htim1);
 800bc8e:	4807      	ldr	r0, [pc, #28]	; (800bcac <stimLib_stepup_stopRaw+0x28>)
 800bc90:	f7fa ffb3 	bl	8006bfa <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800bc94:	2100      	movs	r1, #0
 800bc96:	4805      	ldr	r0, [pc, #20]	; (800bcac <stimLib_stepup_stopRaw+0x28>)
 800bc98:	f7fb fd2c 	bl	80076f4 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 800bc9c:	4804      	ldr	r0, [pc, #16]	; (800bcb0 <stimLib_stepup_stopRaw+0x2c>)
 800bc9e:	f7fb f827 	bl	8006cf0 <HAL_TIM_Base_Stop_IT>
}
 800bca2:	bf00      	nop
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20000698 	.word	0x20000698
 800bcac:	20000264 	.word	0x20000264
 800bcb0:	200002fc 	.word	0x200002fc

0800bcb4 <stimLib_stepup_adcStartRaw>:

void stimLib_stepup_adcStartRaw(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_conv_buff, STIM_LIB_ADC1_TOTAL_SIZE);
 800bcb8:	220a      	movs	r2, #10
 800bcba:	490b      	ldr	r1, [pc, #44]	; (800bce8 <stimLib_stepup_adcStartRaw+0x34>)
 800bcbc:	480b      	ldr	r0, [pc, #44]	; (800bcec <stimLib_stepup_adcStartRaw+0x38>)
 800bcbe:	f7f7 fb7f 	bl	80033c0 <HAL_ADC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT | DMA_IT_TC);
 800bcc2:	4b0b      	ldr	r3, [pc, #44]	; (800bcf0 <stimLib_stepup_adcStartRaw+0x3c>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <stimLib_stepup_adcStartRaw+0x3c>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f022 0206 	bic.w	r2, r2, #6
 800bcd0:	601a      	str	r2, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, ADC_IT_OVR);
 800bcd2:	4b06      	ldr	r3, [pc, #24]	; (800bcec <stimLib_stepup_adcStartRaw+0x38>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	4b04      	ldr	r3, [pc, #16]	; (800bcec <stimLib_stepup_adcStartRaw+0x38>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f022 0210 	bic.w	r2, r2, #16
 800bce0:	605a      	str	r2, [r3, #4]
}
 800bce2:	bf00      	nop
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	200006a0 	.word	0x200006a0
 800bcec:	2000010c 	.word	0x2000010c
 800bcf0:	200001d4 	.word	0x200001d4

0800bcf4 <stimLib_stepup_adcStopRaw>:

void stimLib_stepup_adcStopRaw(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 800bcf8:	4802      	ldr	r0, [pc, #8]	; (800bd04 <stimLib_stepup_adcStopRaw+0x10>)
 800bcfa:	f7f7 fc15 	bl	8003528 <HAL_ADC_Stop_DMA>
}
 800bcfe:	bf00      	nop
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	2000010c 	.word	0x2000010c

0800bd08 <stimLib_dacctrl_setRaw>:
 * Add in Future
 * Need to create a DAC Control GPIO Function
 * */

void stimLib_dacctrl_setRaw(void)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
	/* GPIO DAC CONTROL CLEAR */
	HAL_GPIO_WritePin(STIM_LIB_DAC_N0_GPIO_PORT,
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800bd12:	4807      	ldr	r0, [pc, #28]	; (800bd30 <stimLib_dacctrl_setRaw+0x28>)
 800bd14:	f7f9 fe7a 	bl	8005a0c <HAL_GPIO_WritePin>
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN, GPIO_PIN_RESET);

	/* GPIO DAC SETTING */
	HAL_GPIO_WritePin(STIM_LIB_DAC_N0_GPIO_PORT, STIM_LIB_STATE_SIG_DEGREE << 1,
 800bd18:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <stimLib_dacctrl_setRaw+0x2c>)
 800bd1a:	7a1b      	ldrb	r3, [r3, #8]
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	2201      	movs	r2, #1
 800bd24:	4619      	mov	r1, r3
 800bd26:	4802      	ldr	r0, [pc, #8]	; (800bd30 <stimLib_dacctrl_setRaw+0x28>)
 800bd28:	f7f9 fe70 	bl	8005a0c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 800bd2c:	bf00      	nop
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	48000400 	.word	0x48000400
 800bd34:	20000660 	.word	0x20000660

0800bd38 <stimLib_dacctrl_offRaw>:

void stimLib_dacctrl_offRaw(void)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
	/* GPIO DAC CONTROL CLEAR */
	HAL_GPIO_WritePin(STIM_LIB_DAC_N0_GPIO_PORT,
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800bd42:	4802      	ldr	r0, [pc, #8]	; (800bd4c <stimLib_dacctrl_offRaw+0x14>)
 800bd44:	f7f9 fe62 	bl	8005a0c <HAL_GPIO_WritePin>
			STIM_LIB_DAC_N0_PIN | STIM_LIB_DAC_N1_PIN | STIM_LIB_DAC_N2_PIN
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN, GPIO_PIN_RESET);
}
 800bd48:	bf00      	nop
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	48000400 	.word	0x48000400

0800bd50 <__errno>:
 800bd50:	4b01      	ldr	r3, [pc, #4]	; (800bd58 <__errno+0x8>)
 800bd52:	6818      	ldr	r0, [r3, #0]
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	2000008c 	.word	0x2000008c

0800bd5c <__libc_init_array>:
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	4d0d      	ldr	r5, [pc, #52]	; (800bd94 <__libc_init_array+0x38>)
 800bd60:	4c0d      	ldr	r4, [pc, #52]	; (800bd98 <__libc_init_array+0x3c>)
 800bd62:	1b64      	subs	r4, r4, r5
 800bd64:	10a4      	asrs	r4, r4, #2
 800bd66:	2600      	movs	r6, #0
 800bd68:	42a6      	cmp	r6, r4
 800bd6a:	d109      	bne.n	800bd80 <__libc_init_array+0x24>
 800bd6c:	4d0b      	ldr	r5, [pc, #44]	; (800bd9c <__libc_init_array+0x40>)
 800bd6e:	4c0c      	ldr	r4, [pc, #48]	; (800bda0 <__libc_init_array+0x44>)
 800bd70:	f001 f890 	bl	800ce94 <_init>
 800bd74:	1b64      	subs	r4, r4, r5
 800bd76:	10a4      	asrs	r4, r4, #2
 800bd78:	2600      	movs	r6, #0
 800bd7a:	42a6      	cmp	r6, r4
 800bd7c:	d105      	bne.n	800bd8a <__libc_init_array+0x2e>
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd84:	4798      	blx	r3
 800bd86:	3601      	adds	r6, #1
 800bd88:	e7ee      	b.n	800bd68 <__libc_init_array+0xc>
 800bd8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd8e:	4798      	blx	r3
 800bd90:	3601      	adds	r6, #1
 800bd92:	e7f2      	b.n	800bd7a <__libc_init_array+0x1e>
 800bd94:	0800d80c 	.word	0x0800d80c
 800bd98:	0800d80c 	.word	0x0800d80c
 800bd9c:	0800d80c 	.word	0x0800d80c
 800bda0:	0800d810 	.word	0x0800d810

0800bda4 <memcpy>:
 800bda4:	440a      	add	r2, r1
 800bda6:	4291      	cmp	r1, r2
 800bda8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdac:	d100      	bne.n	800bdb0 <memcpy+0xc>
 800bdae:	4770      	bx	lr
 800bdb0:	b510      	push	{r4, lr}
 800bdb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdba:	4291      	cmp	r1, r2
 800bdbc:	d1f9      	bne.n	800bdb2 <memcpy+0xe>
 800bdbe:	bd10      	pop	{r4, pc}

0800bdc0 <memset>:
 800bdc0:	4402      	add	r2, r0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d100      	bne.n	800bdca <memset+0xa>
 800bdc8:	4770      	bx	lr
 800bdca:	f803 1b01 	strb.w	r1, [r3], #1
 800bdce:	e7f9      	b.n	800bdc4 <memset+0x4>

0800bdd0 <iprintf>:
 800bdd0:	b40f      	push	{r0, r1, r2, r3}
 800bdd2:	4b0a      	ldr	r3, [pc, #40]	; (800bdfc <iprintf+0x2c>)
 800bdd4:	b513      	push	{r0, r1, r4, lr}
 800bdd6:	681c      	ldr	r4, [r3, #0]
 800bdd8:	b124      	cbz	r4, 800bde4 <iprintf+0x14>
 800bdda:	69a3      	ldr	r3, [r4, #24]
 800bddc:	b913      	cbnz	r3, 800bde4 <iprintf+0x14>
 800bdde:	4620      	mov	r0, r4
 800bde0:	f000 fa74 	bl	800c2cc <__sinit>
 800bde4:	ab05      	add	r3, sp, #20
 800bde6:	9a04      	ldr	r2, [sp, #16]
 800bde8:	68a1      	ldr	r1, [r4, #8]
 800bdea:	9301      	str	r3, [sp, #4]
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 fc7d 	bl	800c6ec <_vfiprintf_r>
 800bdf2:	b002      	add	sp, #8
 800bdf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdf8:	b004      	add	sp, #16
 800bdfa:	4770      	bx	lr
 800bdfc:	2000008c 	.word	0x2000008c

0800be00 <putchar>:
 800be00:	4b09      	ldr	r3, [pc, #36]	; (800be28 <putchar+0x28>)
 800be02:	b513      	push	{r0, r1, r4, lr}
 800be04:	681c      	ldr	r4, [r3, #0]
 800be06:	4601      	mov	r1, r0
 800be08:	b134      	cbz	r4, 800be18 <putchar+0x18>
 800be0a:	69a3      	ldr	r3, [r4, #24]
 800be0c:	b923      	cbnz	r3, 800be18 <putchar+0x18>
 800be0e:	9001      	str	r0, [sp, #4]
 800be10:	4620      	mov	r0, r4
 800be12:	f000 fa5b 	bl	800c2cc <__sinit>
 800be16:	9901      	ldr	r1, [sp, #4]
 800be18:	68a2      	ldr	r2, [r4, #8]
 800be1a:	4620      	mov	r0, r4
 800be1c:	b002      	add	sp, #8
 800be1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be22:	f000 bf27 	b.w	800cc74 <_putc_r>
 800be26:	bf00      	nop
 800be28:	2000008c 	.word	0x2000008c

0800be2c <_puts_r>:
 800be2c:	b570      	push	{r4, r5, r6, lr}
 800be2e:	460e      	mov	r6, r1
 800be30:	4605      	mov	r5, r0
 800be32:	b118      	cbz	r0, 800be3c <_puts_r+0x10>
 800be34:	6983      	ldr	r3, [r0, #24]
 800be36:	b90b      	cbnz	r3, 800be3c <_puts_r+0x10>
 800be38:	f000 fa48 	bl	800c2cc <__sinit>
 800be3c:	69ab      	ldr	r3, [r5, #24]
 800be3e:	68ac      	ldr	r4, [r5, #8]
 800be40:	b913      	cbnz	r3, 800be48 <_puts_r+0x1c>
 800be42:	4628      	mov	r0, r5
 800be44:	f000 fa42 	bl	800c2cc <__sinit>
 800be48:	4b2c      	ldr	r3, [pc, #176]	; (800befc <_puts_r+0xd0>)
 800be4a:	429c      	cmp	r4, r3
 800be4c:	d120      	bne.n	800be90 <_puts_r+0x64>
 800be4e:	686c      	ldr	r4, [r5, #4]
 800be50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be52:	07db      	lsls	r3, r3, #31
 800be54:	d405      	bmi.n	800be62 <_puts_r+0x36>
 800be56:	89a3      	ldrh	r3, [r4, #12]
 800be58:	0598      	lsls	r0, r3, #22
 800be5a:	d402      	bmi.n	800be62 <_puts_r+0x36>
 800be5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be5e:	f000 fad3 	bl	800c408 <__retarget_lock_acquire_recursive>
 800be62:	89a3      	ldrh	r3, [r4, #12]
 800be64:	0719      	lsls	r1, r3, #28
 800be66:	d51d      	bpl.n	800bea4 <_puts_r+0x78>
 800be68:	6923      	ldr	r3, [r4, #16]
 800be6a:	b1db      	cbz	r3, 800bea4 <_puts_r+0x78>
 800be6c:	3e01      	subs	r6, #1
 800be6e:	68a3      	ldr	r3, [r4, #8]
 800be70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be74:	3b01      	subs	r3, #1
 800be76:	60a3      	str	r3, [r4, #8]
 800be78:	bb39      	cbnz	r1, 800beca <_puts_r+0x9e>
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	da38      	bge.n	800bef0 <_puts_r+0xc4>
 800be7e:	4622      	mov	r2, r4
 800be80:	210a      	movs	r1, #10
 800be82:	4628      	mov	r0, r5
 800be84:	f000 f848 	bl	800bf18 <__swbuf_r>
 800be88:	3001      	adds	r0, #1
 800be8a:	d011      	beq.n	800beb0 <_puts_r+0x84>
 800be8c:	250a      	movs	r5, #10
 800be8e:	e011      	b.n	800beb4 <_puts_r+0x88>
 800be90:	4b1b      	ldr	r3, [pc, #108]	; (800bf00 <_puts_r+0xd4>)
 800be92:	429c      	cmp	r4, r3
 800be94:	d101      	bne.n	800be9a <_puts_r+0x6e>
 800be96:	68ac      	ldr	r4, [r5, #8]
 800be98:	e7da      	b.n	800be50 <_puts_r+0x24>
 800be9a:	4b1a      	ldr	r3, [pc, #104]	; (800bf04 <_puts_r+0xd8>)
 800be9c:	429c      	cmp	r4, r3
 800be9e:	bf08      	it	eq
 800bea0:	68ec      	ldreq	r4, [r5, #12]
 800bea2:	e7d5      	b.n	800be50 <_puts_r+0x24>
 800bea4:	4621      	mov	r1, r4
 800bea6:	4628      	mov	r0, r5
 800bea8:	f000 f888 	bl	800bfbc <__swsetup_r>
 800beac:	2800      	cmp	r0, #0
 800beae:	d0dd      	beq.n	800be6c <_puts_r+0x40>
 800beb0:	f04f 35ff 	mov.w	r5, #4294967295
 800beb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800beb6:	07da      	lsls	r2, r3, #31
 800beb8:	d405      	bmi.n	800bec6 <_puts_r+0x9a>
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	059b      	lsls	r3, r3, #22
 800bebe:	d402      	bmi.n	800bec6 <_puts_r+0x9a>
 800bec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bec2:	f000 faa2 	bl	800c40a <__retarget_lock_release_recursive>
 800bec6:	4628      	mov	r0, r5
 800bec8:	bd70      	pop	{r4, r5, r6, pc}
 800beca:	2b00      	cmp	r3, #0
 800becc:	da04      	bge.n	800bed8 <_puts_r+0xac>
 800bece:	69a2      	ldr	r2, [r4, #24]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	dc06      	bgt.n	800bee2 <_puts_r+0xb6>
 800bed4:	290a      	cmp	r1, #10
 800bed6:	d004      	beq.n	800bee2 <_puts_r+0xb6>
 800bed8:	6823      	ldr	r3, [r4, #0]
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	6022      	str	r2, [r4, #0]
 800bede:	7019      	strb	r1, [r3, #0]
 800bee0:	e7c5      	b.n	800be6e <_puts_r+0x42>
 800bee2:	4622      	mov	r2, r4
 800bee4:	4628      	mov	r0, r5
 800bee6:	f000 f817 	bl	800bf18 <__swbuf_r>
 800beea:	3001      	adds	r0, #1
 800beec:	d1bf      	bne.n	800be6e <_puts_r+0x42>
 800beee:	e7df      	b.n	800beb0 <_puts_r+0x84>
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	250a      	movs	r5, #10
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	6022      	str	r2, [r4, #0]
 800bef8:	701d      	strb	r5, [r3, #0]
 800befa:	e7db      	b.n	800beb4 <_puts_r+0x88>
 800befc:	0800d790 	.word	0x0800d790
 800bf00:	0800d7b0 	.word	0x0800d7b0
 800bf04:	0800d770 	.word	0x0800d770

0800bf08 <puts>:
 800bf08:	4b02      	ldr	r3, [pc, #8]	; (800bf14 <puts+0xc>)
 800bf0a:	4601      	mov	r1, r0
 800bf0c:	6818      	ldr	r0, [r3, #0]
 800bf0e:	f7ff bf8d 	b.w	800be2c <_puts_r>
 800bf12:	bf00      	nop
 800bf14:	2000008c 	.word	0x2000008c

0800bf18 <__swbuf_r>:
 800bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1a:	460e      	mov	r6, r1
 800bf1c:	4614      	mov	r4, r2
 800bf1e:	4605      	mov	r5, r0
 800bf20:	b118      	cbz	r0, 800bf2a <__swbuf_r+0x12>
 800bf22:	6983      	ldr	r3, [r0, #24]
 800bf24:	b90b      	cbnz	r3, 800bf2a <__swbuf_r+0x12>
 800bf26:	f000 f9d1 	bl	800c2cc <__sinit>
 800bf2a:	4b21      	ldr	r3, [pc, #132]	; (800bfb0 <__swbuf_r+0x98>)
 800bf2c:	429c      	cmp	r4, r3
 800bf2e:	d12b      	bne.n	800bf88 <__swbuf_r+0x70>
 800bf30:	686c      	ldr	r4, [r5, #4]
 800bf32:	69a3      	ldr	r3, [r4, #24]
 800bf34:	60a3      	str	r3, [r4, #8]
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	071a      	lsls	r2, r3, #28
 800bf3a:	d52f      	bpl.n	800bf9c <__swbuf_r+0x84>
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	b36b      	cbz	r3, 800bf9c <__swbuf_r+0x84>
 800bf40:	6923      	ldr	r3, [r4, #16]
 800bf42:	6820      	ldr	r0, [r4, #0]
 800bf44:	1ac0      	subs	r0, r0, r3
 800bf46:	6963      	ldr	r3, [r4, #20]
 800bf48:	b2f6      	uxtb	r6, r6
 800bf4a:	4283      	cmp	r3, r0
 800bf4c:	4637      	mov	r7, r6
 800bf4e:	dc04      	bgt.n	800bf5a <__swbuf_r+0x42>
 800bf50:	4621      	mov	r1, r4
 800bf52:	4628      	mov	r0, r5
 800bf54:	f000 f926 	bl	800c1a4 <_fflush_r>
 800bf58:	bb30      	cbnz	r0, 800bfa8 <__swbuf_r+0x90>
 800bf5a:	68a3      	ldr	r3, [r4, #8]
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	60a3      	str	r3, [r4, #8]
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	1c5a      	adds	r2, r3, #1
 800bf64:	6022      	str	r2, [r4, #0]
 800bf66:	701e      	strb	r6, [r3, #0]
 800bf68:	6963      	ldr	r3, [r4, #20]
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	4283      	cmp	r3, r0
 800bf6e:	d004      	beq.n	800bf7a <__swbuf_r+0x62>
 800bf70:	89a3      	ldrh	r3, [r4, #12]
 800bf72:	07db      	lsls	r3, r3, #31
 800bf74:	d506      	bpl.n	800bf84 <__swbuf_r+0x6c>
 800bf76:	2e0a      	cmp	r6, #10
 800bf78:	d104      	bne.n	800bf84 <__swbuf_r+0x6c>
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	f000 f911 	bl	800c1a4 <_fflush_r>
 800bf82:	b988      	cbnz	r0, 800bfa8 <__swbuf_r+0x90>
 800bf84:	4638      	mov	r0, r7
 800bf86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf88:	4b0a      	ldr	r3, [pc, #40]	; (800bfb4 <__swbuf_r+0x9c>)
 800bf8a:	429c      	cmp	r4, r3
 800bf8c:	d101      	bne.n	800bf92 <__swbuf_r+0x7a>
 800bf8e:	68ac      	ldr	r4, [r5, #8]
 800bf90:	e7cf      	b.n	800bf32 <__swbuf_r+0x1a>
 800bf92:	4b09      	ldr	r3, [pc, #36]	; (800bfb8 <__swbuf_r+0xa0>)
 800bf94:	429c      	cmp	r4, r3
 800bf96:	bf08      	it	eq
 800bf98:	68ec      	ldreq	r4, [r5, #12]
 800bf9a:	e7ca      	b.n	800bf32 <__swbuf_r+0x1a>
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f000 f80c 	bl	800bfbc <__swsetup_r>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d0cb      	beq.n	800bf40 <__swbuf_r+0x28>
 800bfa8:	f04f 37ff 	mov.w	r7, #4294967295
 800bfac:	e7ea      	b.n	800bf84 <__swbuf_r+0x6c>
 800bfae:	bf00      	nop
 800bfb0:	0800d790 	.word	0x0800d790
 800bfb4:	0800d7b0 	.word	0x0800d7b0
 800bfb8:	0800d770 	.word	0x0800d770

0800bfbc <__swsetup_r>:
 800bfbc:	4b32      	ldr	r3, [pc, #200]	; (800c088 <__swsetup_r+0xcc>)
 800bfbe:	b570      	push	{r4, r5, r6, lr}
 800bfc0:	681d      	ldr	r5, [r3, #0]
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	b125      	cbz	r5, 800bfd2 <__swsetup_r+0x16>
 800bfc8:	69ab      	ldr	r3, [r5, #24]
 800bfca:	b913      	cbnz	r3, 800bfd2 <__swsetup_r+0x16>
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f000 f97d 	bl	800c2cc <__sinit>
 800bfd2:	4b2e      	ldr	r3, [pc, #184]	; (800c08c <__swsetup_r+0xd0>)
 800bfd4:	429c      	cmp	r4, r3
 800bfd6:	d10f      	bne.n	800bff8 <__swsetup_r+0x3c>
 800bfd8:	686c      	ldr	r4, [r5, #4]
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfe0:	0719      	lsls	r1, r3, #28
 800bfe2:	d42c      	bmi.n	800c03e <__swsetup_r+0x82>
 800bfe4:	06dd      	lsls	r5, r3, #27
 800bfe6:	d411      	bmi.n	800c00c <__swsetup_r+0x50>
 800bfe8:	2309      	movs	r3, #9
 800bfea:	6033      	str	r3, [r6, #0]
 800bfec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bff0:	81a3      	strh	r3, [r4, #12]
 800bff2:	f04f 30ff 	mov.w	r0, #4294967295
 800bff6:	e03e      	b.n	800c076 <__swsetup_r+0xba>
 800bff8:	4b25      	ldr	r3, [pc, #148]	; (800c090 <__swsetup_r+0xd4>)
 800bffa:	429c      	cmp	r4, r3
 800bffc:	d101      	bne.n	800c002 <__swsetup_r+0x46>
 800bffe:	68ac      	ldr	r4, [r5, #8]
 800c000:	e7eb      	b.n	800bfda <__swsetup_r+0x1e>
 800c002:	4b24      	ldr	r3, [pc, #144]	; (800c094 <__swsetup_r+0xd8>)
 800c004:	429c      	cmp	r4, r3
 800c006:	bf08      	it	eq
 800c008:	68ec      	ldreq	r4, [r5, #12]
 800c00a:	e7e6      	b.n	800bfda <__swsetup_r+0x1e>
 800c00c:	0758      	lsls	r0, r3, #29
 800c00e:	d512      	bpl.n	800c036 <__swsetup_r+0x7a>
 800c010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c012:	b141      	cbz	r1, 800c026 <__swsetup_r+0x6a>
 800c014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c018:	4299      	cmp	r1, r3
 800c01a:	d002      	beq.n	800c022 <__swsetup_r+0x66>
 800c01c:	4630      	mov	r0, r6
 800c01e:	f000 fa5b 	bl	800c4d8 <_free_r>
 800c022:	2300      	movs	r3, #0
 800c024:	6363      	str	r3, [r4, #52]	; 0x34
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c02c:	81a3      	strh	r3, [r4, #12]
 800c02e:	2300      	movs	r3, #0
 800c030:	6063      	str	r3, [r4, #4]
 800c032:	6923      	ldr	r3, [r4, #16]
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f043 0308 	orr.w	r3, r3, #8
 800c03c:	81a3      	strh	r3, [r4, #12]
 800c03e:	6923      	ldr	r3, [r4, #16]
 800c040:	b94b      	cbnz	r3, 800c056 <__swsetup_r+0x9a>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c04c:	d003      	beq.n	800c056 <__swsetup_r+0x9a>
 800c04e:	4621      	mov	r1, r4
 800c050:	4630      	mov	r0, r6
 800c052:	f000 fa01 	bl	800c458 <__smakebuf_r>
 800c056:	89a0      	ldrh	r0, [r4, #12]
 800c058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c05c:	f010 0301 	ands.w	r3, r0, #1
 800c060:	d00a      	beq.n	800c078 <__swsetup_r+0xbc>
 800c062:	2300      	movs	r3, #0
 800c064:	60a3      	str	r3, [r4, #8]
 800c066:	6963      	ldr	r3, [r4, #20]
 800c068:	425b      	negs	r3, r3
 800c06a:	61a3      	str	r3, [r4, #24]
 800c06c:	6923      	ldr	r3, [r4, #16]
 800c06e:	b943      	cbnz	r3, 800c082 <__swsetup_r+0xc6>
 800c070:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c074:	d1ba      	bne.n	800bfec <__swsetup_r+0x30>
 800c076:	bd70      	pop	{r4, r5, r6, pc}
 800c078:	0781      	lsls	r1, r0, #30
 800c07a:	bf58      	it	pl
 800c07c:	6963      	ldrpl	r3, [r4, #20]
 800c07e:	60a3      	str	r3, [r4, #8]
 800c080:	e7f4      	b.n	800c06c <__swsetup_r+0xb0>
 800c082:	2000      	movs	r0, #0
 800c084:	e7f7      	b.n	800c076 <__swsetup_r+0xba>
 800c086:	bf00      	nop
 800c088:	2000008c 	.word	0x2000008c
 800c08c:	0800d790 	.word	0x0800d790
 800c090:	0800d7b0 	.word	0x0800d7b0
 800c094:	0800d770 	.word	0x0800d770

0800c098 <__sflush_r>:
 800c098:	898a      	ldrh	r2, [r1, #12]
 800c09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c09e:	4605      	mov	r5, r0
 800c0a0:	0710      	lsls	r0, r2, #28
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	d458      	bmi.n	800c158 <__sflush_r+0xc0>
 800c0a6:	684b      	ldr	r3, [r1, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	dc05      	bgt.n	800c0b8 <__sflush_r+0x20>
 800c0ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	dc02      	bgt.n	800c0b8 <__sflush_r+0x20>
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0ba:	2e00      	cmp	r6, #0
 800c0bc:	d0f9      	beq.n	800c0b2 <__sflush_r+0x1a>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0c4:	682f      	ldr	r7, [r5, #0]
 800c0c6:	602b      	str	r3, [r5, #0]
 800c0c8:	d032      	beq.n	800c130 <__sflush_r+0x98>
 800c0ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	075a      	lsls	r2, r3, #29
 800c0d0:	d505      	bpl.n	800c0de <__sflush_r+0x46>
 800c0d2:	6863      	ldr	r3, [r4, #4]
 800c0d4:	1ac0      	subs	r0, r0, r3
 800c0d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0d8:	b10b      	cbz	r3, 800c0de <__sflush_r+0x46>
 800c0da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0dc:	1ac0      	subs	r0, r0, r3
 800c0de:	2300      	movs	r3, #0
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0e4:	6a21      	ldr	r1, [r4, #32]
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	47b0      	blx	r6
 800c0ea:	1c43      	adds	r3, r0, #1
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	d106      	bne.n	800c0fe <__sflush_r+0x66>
 800c0f0:	6829      	ldr	r1, [r5, #0]
 800c0f2:	291d      	cmp	r1, #29
 800c0f4:	d82c      	bhi.n	800c150 <__sflush_r+0xb8>
 800c0f6:	4a2a      	ldr	r2, [pc, #168]	; (800c1a0 <__sflush_r+0x108>)
 800c0f8:	40ca      	lsrs	r2, r1
 800c0fa:	07d6      	lsls	r6, r2, #31
 800c0fc:	d528      	bpl.n	800c150 <__sflush_r+0xb8>
 800c0fe:	2200      	movs	r2, #0
 800c100:	6062      	str	r2, [r4, #4]
 800c102:	04d9      	lsls	r1, r3, #19
 800c104:	6922      	ldr	r2, [r4, #16]
 800c106:	6022      	str	r2, [r4, #0]
 800c108:	d504      	bpl.n	800c114 <__sflush_r+0x7c>
 800c10a:	1c42      	adds	r2, r0, #1
 800c10c:	d101      	bne.n	800c112 <__sflush_r+0x7a>
 800c10e:	682b      	ldr	r3, [r5, #0]
 800c110:	b903      	cbnz	r3, 800c114 <__sflush_r+0x7c>
 800c112:	6560      	str	r0, [r4, #84]	; 0x54
 800c114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c116:	602f      	str	r7, [r5, #0]
 800c118:	2900      	cmp	r1, #0
 800c11a:	d0ca      	beq.n	800c0b2 <__sflush_r+0x1a>
 800c11c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c120:	4299      	cmp	r1, r3
 800c122:	d002      	beq.n	800c12a <__sflush_r+0x92>
 800c124:	4628      	mov	r0, r5
 800c126:	f000 f9d7 	bl	800c4d8 <_free_r>
 800c12a:	2000      	movs	r0, #0
 800c12c:	6360      	str	r0, [r4, #52]	; 0x34
 800c12e:	e7c1      	b.n	800c0b4 <__sflush_r+0x1c>
 800c130:	6a21      	ldr	r1, [r4, #32]
 800c132:	2301      	movs	r3, #1
 800c134:	4628      	mov	r0, r5
 800c136:	47b0      	blx	r6
 800c138:	1c41      	adds	r1, r0, #1
 800c13a:	d1c7      	bne.n	800c0cc <__sflush_r+0x34>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d0c4      	beq.n	800c0cc <__sflush_r+0x34>
 800c142:	2b1d      	cmp	r3, #29
 800c144:	d001      	beq.n	800c14a <__sflush_r+0xb2>
 800c146:	2b16      	cmp	r3, #22
 800c148:	d101      	bne.n	800c14e <__sflush_r+0xb6>
 800c14a:	602f      	str	r7, [r5, #0]
 800c14c:	e7b1      	b.n	800c0b2 <__sflush_r+0x1a>
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c154:	81a3      	strh	r3, [r4, #12]
 800c156:	e7ad      	b.n	800c0b4 <__sflush_r+0x1c>
 800c158:	690f      	ldr	r7, [r1, #16]
 800c15a:	2f00      	cmp	r7, #0
 800c15c:	d0a9      	beq.n	800c0b2 <__sflush_r+0x1a>
 800c15e:	0793      	lsls	r3, r2, #30
 800c160:	680e      	ldr	r6, [r1, #0]
 800c162:	bf08      	it	eq
 800c164:	694b      	ldreq	r3, [r1, #20]
 800c166:	600f      	str	r7, [r1, #0]
 800c168:	bf18      	it	ne
 800c16a:	2300      	movne	r3, #0
 800c16c:	eba6 0807 	sub.w	r8, r6, r7
 800c170:	608b      	str	r3, [r1, #8]
 800c172:	f1b8 0f00 	cmp.w	r8, #0
 800c176:	dd9c      	ble.n	800c0b2 <__sflush_r+0x1a>
 800c178:	6a21      	ldr	r1, [r4, #32]
 800c17a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c17c:	4643      	mov	r3, r8
 800c17e:	463a      	mov	r2, r7
 800c180:	4628      	mov	r0, r5
 800c182:	47b0      	blx	r6
 800c184:	2800      	cmp	r0, #0
 800c186:	dc06      	bgt.n	800c196 <__sflush_r+0xfe>
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c18e:	81a3      	strh	r3, [r4, #12]
 800c190:	f04f 30ff 	mov.w	r0, #4294967295
 800c194:	e78e      	b.n	800c0b4 <__sflush_r+0x1c>
 800c196:	4407      	add	r7, r0
 800c198:	eba8 0800 	sub.w	r8, r8, r0
 800c19c:	e7e9      	b.n	800c172 <__sflush_r+0xda>
 800c19e:	bf00      	nop
 800c1a0:	20400001 	.word	0x20400001

0800c1a4 <_fflush_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	690b      	ldr	r3, [r1, #16]
 800c1a8:	4605      	mov	r5, r0
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	b913      	cbnz	r3, 800c1b4 <_fflush_r+0x10>
 800c1ae:	2500      	movs	r5, #0
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	bd38      	pop	{r3, r4, r5, pc}
 800c1b4:	b118      	cbz	r0, 800c1be <_fflush_r+0x1a>
 800c1b6:	6983      	ldr	r3, [r0, #24]
 800c1b8:	b90b      	cbnz	r3, 800c1be <_fflush_r+0x1a>
 800c1ba:	f000 f887 	bl	800c2cc <__sinit>
 800c1be:	4b14      	ldr	r3, [pc, #80]	; (800c210 <_fflush_r+0x6c>)
 800c1c0:	429c      	cmp	r4, r3
 800c1c2:	d11b      	bne.n	800c1fc <_fflush_r+0x58>
 800c1c4:	686c      	ldr	r4, [r5, #4]
 800c1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d0ef      	beq.n	800c1ae <_fflush_r+0xa>
 800c1ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1d0:	07d0      	lsls	r0, r2, #31
 800c1d2:	d404      	bmi.n	800c1de <_fflush_r+0x3a>
 800c1d4:	0599      	lsls	r1, r3, #22
 800c1d6:	d402      	bmi.n	800c1de <_fflush_r+0x3a>
 800c1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1da:	f000 f915 	bl	800c408 <__retarget_lock_acquire_recursive>
 800c1de:	4628      	mov	r0, r5
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	f7ff ff59 	bl	800c098 <__sflush_r>
 800c1e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1e8:	07da      	lsls	r2, r3, #31
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	d4e0      	bmi.n	800c1b0 <_fflush_r+0xc>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	059b      	lsls	r3, r3, #22
 800c1f2:	d4dd      	bmi.n	800c1b0 <_fflush_r+0xc>
 800c1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1f6:	f000 f908 	bl	800c40a <__retarget_lock_release_recursive>
 800c1fa:	e7d9      	b.n	800c1b0 <_fflush_r+0xc>
 800c1fc:	4b05      	ldr	r3, [pc, #20]	; (800c214 <_fflush_r+0x70>)
 800c1fe:	429c      	cmp	r4, r3
 800c200:	d101      	bne.n	800c206 <_fflush_r+0x62>
 800c202:	68ac      	ldr	r4, [r5, #8]
 800c204:	e7df      	b.n	800c1c6 <_fflush_r+0x22>
 800c206:	4b04      	ldr	r3, [pc, #16]	; (800c218 <_fflush_r+0x74>)
 800c208:	429c      	cmp	r4, r3
 800c20a:	bf08      	it	eq
 800c20c:	68ec      	ldreq	r4, [r5, #12]
 800c20e:	e7da      	b.n	800c1c6 <_fflush_r+0x22>
 800c210:	0800d790 	.word	0x0800d790
 800c214:	0800d7b0 	.word	0x0800d7b0
 800c218:	0800d770 	.word	0x0800d770

0800c21c <std>:
 800c21c:	2300      	movs	r3, #0
 800c21e:	b510      	push	{r4, lr}
 800c220:	4604      	mov	r4, r0
 800c222:	e9c0 3300 	strd	r3, r3, [r0]
 800c226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c22a:	6083      	str	r3, [r0, #8]
 800c22c:	8181      	strh	r1, [r0, #12]
 800c22e:	6643      	str	r3, [r0, #100]	; 0x64
 800c230:	81c2      	strh	r2, [r0, #14]
 800c232:	6183      	str	r3, [r0, #24]
 800c234:	4619      	mov	r1, r3
 800c236:	2208      	movs	r2, #8
 800c238:	305c      	adds	r0, #92	; 0x5c
 800c23a:	f7ff fdc1 	bl	800bdc0 <memset>
 800c23e:	4b05      	ldr	r3, [pc, #20]	; (800c254 <std+0x38>)
 800c240:	6263      	str	r3, [r4, #36]	; 0x24
 800c242:	4b05      	ldr	r3, [pc, #20]	; (800c258 <std+0x3c>)
 800c244:	62a3      	str	r3, [r4, #40]	; 0x28
 800c246:	4b05      	ldr	r3, [pc, #20]	; (800c25c <std+0x40>)
 800c248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c24a:	4b05      	ldr	r3, [pc, #20]	; (800c260 <std+0x44>)
 800c24c:	6224      	str	r4, [r4, #32]
 800c24e:	6323      	str	r3, [r4, #48]	; 0x30
 800c250:	bd10      	pop	{r4, pc}
 800c252:	bf00      	nop
 800c254:	0800cd25 	.word	0x0800cd25
 800c258:	0800cd47 	.word	0x0800cd47
 800c25c:	0800cd7f 	.word	0x0800cd7f
 800c260:	0800cda3 	.word	0x0800cda3

0800c264 <_cleanup_r>:
 800c264:	4901      	ldr	r1, [pc, #4]	; (800c26c <_cleanup_r+0x8>)
 800c266:	f000 b8af 	b.w	800c3c8 <_fwalk_reent>
 800c26a:	bf00      	nop
 800c26c:	0800c1a5 	.word	0x0800c1a5

0800c270 <__sfmoreglue>:
 800c270:	b570      	push	{r4, r5, r6, lr}
 800c272:	2268      	movs	r2, #104	; 0x68
 800c274:	1e4d      	subs	r5, r1, #1
 800c276:	4355      	muls	r5, r2
 800c278:	460e      	mov	r6, r1
 800c27a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c27e:	f000 f997 	bl	800c5b0 <_malloc_r>
 800c282:	4604      	mov	r4, r0
 800c284:	b140      	cbz	r0, 800c298 <__sfmoreglue+0x28>
 800c286:	2100      	movs	r1, #0
 800c288:	e9c0 1600 	strd	r1, r6, [r0]
 800c28c:	300c      	adds	r0, #12
 800c28e:	60a0      	str	r0, [r4, #8]
 800c290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c294:	f7ff fd94 	bl	800bdc0 <memset>
 800c298:	4620      	mov	r0, r4
 800c29a:	bd70      	pop	{r4, r5, r6, pc}

0800c29c <__sfp_lock_acquire>:
 800c29c:	4801      	ldr	r0, [pc, #4]	; (800c2a4 <__sfp_lock_acquire+0x8>)
 800c29e:	f000 b8b3 	b.w	800c408 <__retarget_lock_acquire_recursive>
 800c2a2:	bf00      	nop
 800c2a4:	200006d1 	.word	0x200006d1

0800c2a8 <__sfp_lock_release>:
 800c2a8:	4801      	ldr	r0, [pc, #4]	; (800c2b0 <__sfp_lock_release+0x8>)
 800c2aa:	f000 b8ae 	b.w	800c40a <__retarget_lock_release_recursive>
 800c2ae:	bf00      	nop
 800c2b0:	200006d1 	.word	0x200006d1

0800c2b4 <__sinit_lock_acquire>:
 800c2b4:	4801      	ldr	r0, [pc, #4]	; (800c2bc <__sinit_lock_acquire+0x8>)
 800c2b6:	f000 b8a7 	b.w	800c408 <__retarget_lock_acquire_recursive>
 800c2ba:	bf00      	nop
 800c2bc:	200006d2 	.word	0x200006d2

0800c2c0 <__sinit_lock_release>:
 800c2c0:	4801      	ldr	r0, [pc, #4]	; (800c2c8 <__sinit_lock_release+0x8>)
 800c2c2:	f000 b8a2 	b.w	800c40a <__retarget_lock_release_recursive>
 800c2c6:	bf00      	nop
 800c2c8:	200006d2 	.word	0x200006d2

0800c2cc <__sinit>:
 800c2cc:	b510      	push	{r4, lr}
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	f7ff fff0 	bl	800c2b4 <__sinit_lock_acquire>
 800c2d4:	69a3      	ldr	r3, [r4, #24]
 800c2d6:	b11b      	cbz	r3, 800c2e0 <__sinit+0x14>
 800c2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2dc:	f7ff bff0 	b.w	800c2c0 <__sinit_lock_release>
 800c2e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2e4:	6523      	str	r3, [r4, #80]	; 0x50
 800c2e6:	4b13      	ldr	r3, [pc, #76]	; (800c334 <__sinit+0x68>)
 800c2e8:	4a13      	ldr	r2, [pc, #76]	; (800c338 <__sinit+0x6c>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2ee:	42a3      	cmp	r3, r4
 800c2f0:	bf04      	itt	eq
 800c2f2:	2301      	moveq	r3, #1
 800c2f4:	61a3      	streq	r3, [r4, #24]
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f000 f820 	bl	800c33c <__sfp>
 800c2fc:	6060      	str	r0, [r4, #4]
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 f81c 	bl	800c33c <__sfp>
 800c304:	60a0      	str	r0, [r4, #8]
 800c306:	4620      	mov	r0, r4
 800c308:	f000 f818 	bl	800c33c <__sfp>
 800c30c:	2200      	movs	r2, #0
 800c30e:	60e0      	str	r0, [r4, #12]
 800c310:	2104      	movs	r1, #4
 800c312:	6860      	ldr	r0, [r4, #4]
 800c314:	f7ff ff82 	bl	800c21c <std>
 800c318:	68a0      	ldr	r0, [r4, #8]
 800c31a:	2201      	movs	r2, #1
 800c31c:	2109      	movs	r1, #9
 800c31e:	f7ff ff7d 	bl	800c21c <std>
 800c322:	68e0      	ldr	r0, [r4, #12]
 800c324:	2202      	movs	r2, #2
 800c326:	2112      	movs	r1, #18
 800c328:	f7ff ff78 	bl	800c21c <std>
 800c32c:	2301      	movs	r3, #1
 800c32e:	61a3      	str	r3, [r4, #24]
 800c330:	e7d2      	b.n	800c2d8 <__sinit+0xc>
 800c332:	bf00      	nop
 800c334:	0800d76c 	.word	0x0800d76c
 800c338:	0800c265 	.word	0x0800c265

0800c33c <__sfp>:
 800c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33e:	4607      	mov	r7, r0
 800c340:	f7ff ffac 	bl	800c29c <__sfp_lock_acquire>
 800c344:	4b1e      	ldr	r3, [pc, #120]	; (800c3c0 <__sfp+0x84>)
 800c346:	681e      	ldr	r6, [r3, #0]
 800c348:	69b3      	ldr	r3, [r6, #24]
 800c34a:	b913      	cbnz	r3, 800c352 <__sfp+0x16>
 800c34c:	4630      	mov	r0, r6
 800c34e:	f7ff ffbd 	bl	800c2cc <__sinit>
 800c352:	3648      	adds	r6, #72	; 0x48
 800c354:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c358:	3b01      	subs	r3, #1
 800c35a:	d503      	bpl.n	800c364 <__sfp+0x28>
 800c35c:	6833      	ldr	r3, [r6, #0]
 800c35e:	b30b      	cbz	r3, 800c3a4 <__sfp+0x68>
 800c360:	6836      	ldr	r6, [r6, #0]
 800c362:	e7f7      	b.n	800c354 <__sfp+0x18>
 800c364:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c368:	b9d5      	cbnz	r5, 800c3a0 <__sfp+0x64>
 800c36a:	4b16      	ldr	r3, [pc, #88]	; (800c3c4 <__sfp+0x88>)
 800c36c:	60e3      	str	r3, [r4, #12]
 800c36e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c372:	6665      	str	r5, [r4, #100]	; 0x64
 800c374:	f000 f847 	bl	800c406 <__retarget_lock_init_recursive>
 800c378:	f7ff ff96 	bl	800c2a8 <__sfp_lock_release>
 800c37c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c380:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c384:	6025      	str	r5, [r4, #0]
 800c386:	61a5      	str	r5, [r4, #24]
 800c388:	2208      	movs	r2, #8
 800c38a:	4629      	mov	r1, r5
 800c38c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c390:	f7ff fd16 	bl	800bdc0 <memset>
 800c394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c39c:	4620      	mov	r0, r4
 800c39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3a0:	3468      	adds	r4, #104	; 0x68
 800c3a2:	e7d9      	b.n	800c358 <__sfp+0x1c>
 800c3a4:	2104      	movs	r1, #4
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	f7ff ff62 	bl	800c270 <__sfmoreglue>
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	6030      	str	r0, [r6, #0]
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d1d5      	bne.n	800c360 <__sfp+0x24>
 800c3b4:	f7ff ff78 	bl	800c2a8 <__sfp_lock_release>
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	e7ee      	b.n	800c39c <__sfp+0x60>
 800c3be:	bf00      	nop
 800c3c0:	0800d76c 	.word	0x0800d76c
 800c3c4:	ffff0001 	.word	0xffff0001

0800c3c8 <_fwalk_reent>:
 800c3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3cc:	4606      	mov	r6, r0
 800c3ce:	4688      	mov	r8, r1
 800c3d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3d4:	2700      	movs	r7, #0
 800c3d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3da:	f1b9 0901 	subs.w	r9, r9, #1
 800c3de:	d505      	bpl.n	800c3ec <_fwalk_reent+0x24>
 800c3e0:	6824      	ldr	r4, [r4, #0]
 800c3e2:	2c00      	cmp	r4, #0
 800c3e4:	d1f7      	bne.n	800c3d6 <_fwalk_reent+0xe>
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ec:	89ab      	ldrh	r3, [r5, #12]
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d907      	bls.n	800c402 <_fwalk_reent+0x3a>
 800c3f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	d003      	beq.n	800c402 <_fwalk_reent+0x3a>
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	47c0      	blx	r8
 800c400:	4307      	orrs	r7, r0
 800c402:	3568      	adds	r5, #104	; 0x68
 800c404:	e7e9      	b.n	800c3da <_fwalk_reent+0x12>

0800c406 <__retarget_lock_init_recursive>:
 800c406:	4770      	bx	lr

0800c408 <__retarget_lock_acquire_recursive>:
 800c408:	4770      	bx	lr

0800c40a <__retarget_lock_release_recursive>:
 800c40a:	4770      	bx	lr

0800c40c <__swhatbuf_r>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	460e      	mov	r6, r1
 800c410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c414:	2900      	cmp	r1, #0
 800c416:	b096      	sub	sp, #88	; 0x58
 800c418:	4614      	mov	r4, r2
 800c41a:	461d      	mov	r5, r3
 800c41c:	da08      	bge.n	800c430 <__swhatbuf_r+0x24>
 800c41e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	602a      	str	r2, [r5, #0]
 800c426:	061a      	lsls	r2, r3, #24
 800c428:	d410      	bmi.n	800c44c <__swhatbuf_r+0x40>
 800c42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c42e:	e00e      	b.n	800c44e <__swhatbuf_r+0x42>
 800c430:	466a      	mov	r2, sp
 800c432:	f000 fcdd 	bl	800cdf0 <_fstat_r>
 800c436:	2800      	cmp	r0, #0
 800c438:	dbf1      	blt.n	800c41e <__swhatbuf_r+0x12>
 800c43a:	9a01      	ldr	r2, [sp, #4]
 800c43c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c440:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c444:	425a      	negs	r2, r3
 800c446:	415a      	adcs	r2, r3
 800c448:	602a      	str	r2, [r5, #0]
 800c44a:	e7ee      	b.n	800c42a <__swhatbuf_r+0x1e>
 800c44c:	2340      	movs	r3, #64	; 0x40
 800c44e:	2000      	movs	r0, #0
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	b016      	add	sp, #88	; 0x58
 800c454:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c458 <__smakebuf_r>:
 800c458:	898b      	ldrh	r3, [r1, #12]
 800c45a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c45c:	079d      	lsls	r5, r3, #30
 800c45e:	4606      	mov	r6, r0
 800c460:	460c      	mov	r4, r1
 800c462:	d507      	bpl.n	800c474 <__smakebuf_r+0x1c>
 800c464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	6123      	str	r3, [r4, #16]
 800c46c:	2301      	movs	r3, #1
 800c46e:	6163      	str	r3, [r4, #20]
 800c470:	b002      	add	sp, #8
 800c472:	bd70      	pop	{r4, r5, r6, pc}
 800c474:	ab01      	add	r3, sp, #4
 800c476:	466a      	mov	r2, sp
 800c478:	f7ff ffc8 	bl	800c40c <__swhatbuf_r>
 800c47c:	9900      	ldr	r1, [sp, #0]
 800c47e:	4605      	mov	r5, r0
 800c480:	4630      	mov	r0, r6
 800c482:	f000 f895 	bl	800c5b0 <_malloc_r>
 800c486:	b948      	cbnz	r0, 800c49c <__smakebuf_r+0x44>
 800c488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c48c:	059a      	lsls	r2, r3, #22
 800c48e:	d4ef      	bmi.n	800c470 <__smakebuf_r+0x18>
 800c490:	f023 0303 	bic.w	r3, r3, #3
 800c494:	f043 0302 	orr.w	r3, r3, #2
 800c498:	81a3      	strh	r3, [r4, #12]
 800c49a:	e7e3      	b.n	800c464 <__smakebuf_r+0xc>
 800c49c:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <__smakebuf_r+0x7c>)
 800c49e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4a0:	89a3      	ldrh	r3, [r4, #12]
 800c4a2:	6020      	str	r0, [r4, #0]
 800c4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a8:	81a3      	strh	r3, [r4, #12]
 800c4aa:	9b00      	ldr	r3, [sp, #0]
 800c4ac:	6163      	str	r3, [r4, #20]
 800c4ae:	9b01      	ldr	r3, [sp, #4]
 800c4b0:	6120      	str	r0, [r4, #16]
 800c4b2:	b15b      	cbz	r3, 800c4cc <__smakebuf_r+0x74>
 800c4b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	f000 fcab 	bl	800ce14 <_isatty_r>
 800c4be:	b128      	cbz	r0, 800c4cc <__smakebuf_r+0x74>
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	f023 0303 	bic.w	r3, r3, #3
 800c4c6:	f043 0301 	orr.w	r3, r3, #1
 800c4ca:	81a3      	strh	r3, [r4, #12]
 800c4cc:	89a0      	ldrh	r0, [r4, #12]
 800c4ce:	4305      	orrs	r5, r0
 800c4d0:	81a5      	strh	r5, [r4, #12]
 800c4d2:	e7cd      	b.n	800c470 <__smakebuf_r+0x18>
 800c4d4:	0800c265 	.word	0x0800c265

0800c4d8 <_free_r>:
 800c4d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4da:	2900      	cmp	r1, #0
 800c4dc:	d044      	beq.n	800c568 <_free_r+0x90>
 800c4de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4e2:	9001      	str	r0, [sp, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f1a1 0404 	sub.w	r4, r1, #4
 800c4ea:	bfb8      	it	lt
 800c4ec:	18e4      	addlt	r4, r4, r3
 800c4ee:	f000 fcb3 	bl	800ce58 <__malloc_lock>
 800c4f2:	4a1e      	ldr	r2, [pc, #120]	; (800c56c <_free_r+0x94>)
 800c4f4:	9801      	ldr	r0, [sp, #4]
 800c4f6:	6813      	ldr	r3, [r2, #0]
 800c4f8:	b933      	cbnz	r3, 800c508 <_free_r+0x30>
 800c4fa:	6063      	str	r3, [r4, #4]
 800c4fc:	6014      	str	r4, [r2, #0]
 800c4fe:	b003      	add	sp, #12
 800c500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c504:	f000 bcae 	b.w	800ce64 <__malloc_unlock>
 800c508:	42a3      	cmp	r3, r4
 800c50a:	d908      	bls.n	800c51e <_free_r+0x46>
 800c50c:	6825      	ldr	r5, [r4, #0]
 800c50e:	1961      	adds	r1, r4, r5
 800c510:	428b      	cmp	r3, r1
 800c512:	bf01      	itttt	eq
 800c514:	6819      	ldreq	r1, [r3, #0]
 800c516:	685b      	ldreq	r3, [r3, #4]
 800c518:	1949      	addeq	r1, r1, r5
 800c51a:	6021      	streq	r1, [r4, #0]
 800c51c:	e7ed      	b.n	800c4fa <_free_r+0x22>
 800c51e:	461a      	mov	r2, r3
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	b10b      	cbz	r3, 800c528 <_free_r+0x50>
 800c524:	42a3      	cmp	r3, r4
 800c526:	d9fa      	bls.n	800c51e <_free_r+0x46>
 800c528:	6811      	ldr	r1, [r2, #0]
 800c52a:	1855      	adds	r5, r2, r1
 800c52c:	42a5      	cmp	r5, r4
 800c52e:	d10b      	bne.n	800c548 <_free_r+0x70>
 800c530:	6824      	ldr	r4, [r4, #0]
 800c532:	4421      	add	r1, r4
 800c534:	1854      	adds	r4, r2, r1
 800c536:	42a3      	cmp	r3, r4
 800c538:	6011      	str	r1, [r2, #0]
 800c53a:	d1e0      	bne.n	800c4fe <_free_r+0x26>
 800c53c:	681c      	ldr	r4, [r3, #0]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	6053      	str	r3, [r2, #4]
 800c542:	4421      	add	r1, r4
 800c544:	6011      	str	r1, [r2, #0]
 800c546:	e7da      	b.n	800c4fe <_free_r+0x26>
 800c548:	d902      	bls.n	800c550 <_free_r+0x78>
 800c54a:	230c      	movs	r3, #12
 800c54c:	6003      	str	r3, [r0, #0]
 800c54e:	e7d6      	b.n	800c4fe <_free_r+0x26>
 800c550:	6825      	ldr	r5, [r4, #0]
 800c552:	1961      	adds	r1, r4, r5
 800c554:	428b      	cmp	r3, r1
 800c556:	bf04      	itt	eq
 800c558:	6819      	ldreq	r1, [r3, #0]
 800c55a:	685b      	ldreq	r3, [r3, #4]
 800c55c:	6063      	str	r3, [r4, #4]
 800c55e:	bf04      	itt	eq
 800c560:	1949      	addeq	r1, r1, r5
 800c562:	6021      	streq	r1, [r4, #0]
 800c564:	6054      	str	r4, [r2, #4]
 800c566:	e7ca      	b.n	800c4fe <_free_r+0x26>
 800c568:	b003      	add	sp, #12
 800c56a:	bd30      	pop	{r4, r5, pc}
 800c56c:	200006d4 	.word	0x200006d4

0800c570 <sbrk_aligned>:
 800c570:	b570      	push	{r4, r5, r6, lr}
 800c572:	4e0e      	ldr	r6, [pc, #56]	; (800c5ac <sbrk_aligned+0x3c>)
 800c574:	460c      	mov	r4, r1
 800c576:	6831      	ldr	r1, [r6, #0]
 800c578:	4605      	mov	r5, r0
 800c57a:	b911      	cbnz	r1, 800c582 <sbrk_aligned+0x12>
 800c57c:	f000 fbc2 	bl	800cd04 <_sbrk_r>
 800c580:	6030      	str	r0, [r6, #0]
 800c582:	4621      	mov	r1, r4
 800c584:	4628      	mov	r0, r5
 800c586:	f000 fbbd 	bl	800cd04 <_sbrk_r>
 800c58a:	1c43      	adds	r3, r0, #1
 800c58c:	d00a      	beq.n	800c5a4 <sbrk_aligned+0x34>
 800c58e:	1cc4      	adds	r4, r0, #3
 800c590:	f024 0403 	bic.w	r4, r4, #3
 800c594:	42a0      	cmp	r0, r4
 800c596:	d007      	beq.n	800c5a8 <sbrk_aligned+0x38>
 800c598:	1a21      	subs	r1, r4, r0
 800c59a:	4628      	mov	r0, r5
 800c59c:	f000 fbb2 	bl	800cd04 <_sbrk_r>
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	d101      	bne.n	800c5a8 <sbrk_aligned+0x38>
 800c5a4:	f04f 34ff 	mov.w	r4, #4294967295
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
 800c5ac:	200006d8 	.word	0x200006d8

0800c5b0 <_malloc_r>:
 800c5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b4:	1ccd      	adds	r5, r1, #3
 800c5b6:	f025 0503 	bic.w	r5, r5, #3
 800c5ba:	3508      	adds	r5, #8
 800c5bc:	2d0c      	cmp	r5, #12
 800c5be:	bf38      	it	cc
 800c5c0:	250c      	movcc	r5, #12
 800c5c2:	2d00      	cmp	r5, #0
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	db01      	blt.n	800c5cc <_malloc_r+0x1c>
 800c5c8:	42a9      	cmp	r1, r5
 800c5ca:	d905      	bls.n	800c5d8 <_malloc_r+0x28>
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	603b      	str	r3, [r7, #0]
 800c5d0:	2600      	movs	r6, #0
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d8:	4e2e      	ldr	r6, [pc, #184]	; (800c694 <_malloc_r+0xe4>)
 800c5da:	f000 fc3d 	bl	800ce58 <__malloc_lock>
 800c5de:	6833      	ldr	r3, [r6, #0]
 800c5e0:	461c      	mov	r4, r3
 800c5e2:	bb34      	cbnz	r4, 800c632 <_malloc_r+0x82>
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	f7ff ffc2 	bl	800c570 <sbrk_aligned>
 800c5ec:	1c43      	adds	r3, r0, #1
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	d14d      	bne.n	800c68e <_malloc_r+0xde>
 800c5f2:	6834      	ldr	r4, [r6, #0]
 800c5f4:	4626      	mov	r6, r4
 800c5f6:	2e00      	cmp	r6, #0
 800c5f8:	d140      	bne.n	800c67c <_malloc_r+0xcc>
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	4631      	mov	r1, r6
 800c5fe:	4638      	mov	r0, r7
 800c600:	eb04 0803 	add.w	r8, r4, r3
 800c604:	f000 fb7e 	bl	800cd04 <_sbrk_r>
 800c608:	4580      	cmp	r8, r0
 800c60a:	d13a      	bne.n	800c682 <_malloc_r+0xd2>
 800c60c:	6821      	ldr	r1, [r4, #0]
 800c60e:	3503      	adds	r5, #3
 800c610:	1a6d      	subs	r5, r5, r1
 800c612:	f025 0503 	bic.w	r5, r5, #3
 800c616:	3508      	adds	r5, #8
 800c618:	2d0c      	cmp	r5, #12
 800c61a:	bf38      	it	cc
 800c61c:	250c      	movcc	r5, #12
 800c61e:	4629      	mov	r1, r5
 800c620:	4638      	mov	r0, r7
 800c622:	f7ff ffa5 	bl	800c570 <sbrk_aligned>
 800c626:	3001      	adds	r0, #1
 800c628:	d02b      	beq.n	800c682 <_malloc_r+0xd2>
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	442b      	add	r3, r5
 800c62e:	6023      	str	r3, [r4, #0]
 800c630:	e00e      	b.n	800c650 <_malloc_r+0xa0>
 800c632:	6822      	ldr	r2, [r4, #0]
 800c634:	1b52      	subs	r2, r2, r5
 800c636:	d41e      	bmi.n	800c676 <_malloc_r+0xc6>
 800c638:	2a0b      	cmp	r2, #11
 800c63a:	d916      	bls.n	800c66a <_malloc_r+0xba>
 800c63c:	1961      	adds	r1, r4, r5
 800c63e:	42a3      	cmp	r3, r4
 800c640:	6025      	str	r5, [r4, #0]
 800c642:	bf18      	it	ne
 800c644:	6059      	strne	r1, [r3, #4]
 800c646:	6863      	ldr	r3, [r4, #4]
 800c648:	bf08      	it	eq
 800c64a:	6031      	streq	r1, [r6, #0]
 800c64c:	5162      	str	r2, [r4, r5]
 800c64e:	604b      	str	r3, [r1, #4]
 800c650:	4638      	mov	r0, r7
 800c652:	f104 060b 	add.w	r6, r4, #11
 800c656:	f000 fc05 	bl	800ce64 <__malloc_unlock>
 800c65a:	f026 0607 	bic.w	r6, r6, #7
 800c65e:	1d23      	adds	r3, r4, #4
 800c660:	1af2      	subs	r2, r6, r3
 800c662:	d0b6      	beq.n	800c5d2 <_malloc_r+0x22>
 800c664:	1b9b      	subs	r3, r3, r6
 800c666:	50a3      	str	r3, [r4, r2]
 800c668:	e7b3      	b.n	800c5d2 <_malloc_r+0x22>
 800c66a:	6862      	ldr	r2, [r4, #4]
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	bf0c      	ite	eq
 800c670:	6032      	streq	r2, [r6, #0]
 800c672:	605a      	strne	r2, [r3, #4]
 800c674:	e7ec      	b.n	800c650 <_malloc_r+0xa0>
 800c676:	4623      	mov	r3, r4
 800c678:	6864      	ldr	r4, [r4, #4]
 800c67a:	e7b2      	b.n	800c5e2 <_malloc_r+0x32>
 800c67c:	4634      	mov	r4, r6
 800c67e:	6876      	ldr	r6, [r6, #4]
 800c680:	e7b9      	b.n	800c5f6 <_malloc_r+0x46>
 800c682:	230c      	movs	r3, #12
 800c684:	603b      	str	r3, [r7, #0]
 800c686:	4638      	mov	r0, r7
 800c688:	f000 fbec 	bl	800ce64 <__malloc_unlock>
 800c68c:	e7a1      	b.n	800c5d2 <_malloc_r+0x22>
 800c68e:	6025      	str	r5, [r4, #0]
 800c690:	e7de      	b.n	800c650 <_malloc_r+0xa0>
 800c692:	bf00      	nop
 800c694:	200006d4 	.word	0x200006d4

0800c698 <__sfputc_r>:
 800c698:	6893      	ldr	r3, [r2, #8]
 800c69a:	3b01      	subs	r3, #1
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	b410      	push	{r4}
 800c6a0:	6093      	str	r3, [r2, #8]
 800c6a2:	da08      	bge.n	800c6b6 <__sfputc_r+0x1e>
 800c6a4:	6994      	ldr	r4, [r2, #24]
 800c6a6:	42a3      	cmp	r3, r4
 800c6a8:	db01      	blt.n	800c6ae <__sfputc_r+0x16>
 800c6aa:	290a      	cmp	r1, #10
 800c6ac:	d103      	bne.n	800c6b6 <__sfputc_r+0x1e>
 800c6ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6b2:	f7ff bc31 	b.w	800bf18 <__swbuf_r>
 800c6b6:	6813      	ldr	r3, [r2, #0]
 800c6b8:	1c58      	adds	r0, r3, #1
 800c6ba:	6010      	str	r0, [r2, #0]
 800c6bc:	7019      	strb	r1, [r3, #0]
 800c6be:	4608      	mov	r0, r1
 800c6c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <__sfputs_r>:
 800c6c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	460f      	mov	r7, r1
 800c6cc:	4614      	mov	r4, r2
 800c6ce:	18d5      	adds	r5, r2, r3
 800c6d0:	42ac      	cmp	r4, r5
 800c6d2:	d101      	bne.n	800c6d8 <__sfputs_r+0x12>
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	e007      	b.n	800c6e8 <__sfputs_r+0x22>
 800c6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6dc:	463a      	mov	r2, r7
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7ff ffda 	bl	800c698 <__sfputc_r>
 800c6e4:	1c43      	adds	r3, r0, #1
 800c6e6:	d1f3      	bne.n	800c6d0 <__sfputs_r+0xa>
 800c6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6ec <_vfiprintf_r>:
 800c6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	460d      	mov	r5, r1
 800c6f2:	b09d      	sub	sp, #116	; 0x74
 800c6f4:	4614      	mov	r4, r2
 800c6f6:	4698      	mov	r8, r3
 800c6f8:	4606      	mov	r6, r0
 800c6fa:	b118      	cbz	r0, 800c704 <_vfiprintf_r+0x18>
 800c6fc:	6983      	ldr	r3, [r0, #24]
 800c6fe:	b90b      	cbnz	r3, 800c704 <_vfiprintf_r+0x18>
 800c700:	f7ff fde4 	bl	800c2cc <__sinit>
 800c704:	4b89      	ldr	r3, [pc, #548]	; (800c92c <_vfiprintf_r+0x240>)
 800c706:	429d      	cmp	r5, r3
 800c708:	d11b      	bne.n	800c742 <_vfiprintf_r+0x56>
 800c70a:	6875      	ldr	r5, [r6, #4]
 800c70c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c70e:	07d9      	lsls	r1, r3, #31
 800c710:	d405      	bmi.n	800c71e <_vfiprintf_r+0x32>
 800c712:	89ab      	ldrh	r3, [r5, #12]
 800c714:	059a      	lsls	r2, r3, #22
 800c716:	d402      	bmi.n	800c71e <_vfiprintf_r+0x32>
 800c718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c71a:	f7ff fe75 	bl	800c408 <__retarget_lock_acquire_recursive>
 800c71e:	89ab      	ldrh	r3, [r5, #12]
 800c720:	071b      	lsls	r3, r3, #28
 800c722:	d501      	bpl.n	800c728 <_vfiprintf_r+0x3c>
 800c724:	692b      	ldr	r3, [r5, #16]
 800c726:	b9eb      	cbnz	r3, 800c764 <_vfiprintf_r+0x78>
 800c728:	4629      	mov	r1, r5
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7ff fc46 	bl	800bfbc <__swsetup_r>
 800c730:	b1c0      	cbz	r0, 800c764 <_vfiprintf_r+0x78>
 800c732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c734:	07dc      	lsls	r4, r3, #31
 800c736:	d50e      	bpl.n	800c756 <_vfiprintf_r+0x6a>
 800c738:	f04f 30ff 	mov.w	r0, #4294967295
 800c73c:	b01d      	add	sp, #116	; 0x74
 800c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c742:	4b7b      	ldr	r3, [pc, #492]	; (800c930 <_vfiprintf_r+0x244>)
 800c744:	429d      	cmp	r5, r3
 800c746:	d101      	bne.n	800c74c <_vfiprintf_r+0x60>
 800c748:	68b5      	ldr	r5, [r6, #8]
 800c74a:	e7df      	b.n	800c70c <_vfiprintf_r+0x20>
 800c74c:	4b79      	ldr	r3, [pc, #484]	; (800c934 <_vfiprintf_r+0x248>)
 800c74e:	429d      	cmp	r5, r3
 800c750:	bf08      	it	eq
 800c752:	68f5      	ldreq	r5, [r6, #12]
 800c754:	e7da      	b.n	800c70c <_vfiprintf_r+0x20>
 800c756:	89ab      	ldrh	r3, [r5, #12]
 800c758:	0598      	lsls	r0, r3, #22
 800c75a:	d4ed      	bmi.n	800c738 <_vfiprintf_r+0x4c>
 800c75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c75e:	f7ff fe54 	bl	800c40a <__retarget_lock_release_recursive>
 800c762:	e7e9      	b.n	800c738 <_vfiprintf_r+0x4c>
 800c764:	2300      	movs	r3, #0
 800c766:	9309      	str	r3, [sp, #36]	; 0x24
 800c768:	2320      	movs	r3, #32
 800c76a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c76e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c772:	2330      	movs	r3, #48	; 0x30
 800c774:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c938 <_vfiprintf_r+0x24c>
 800c778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c77c:	f04f 0901 	mov.w	r9, #1
 800c780:	4623      	mov	r3, r4
 800c782:	469a      	mov	sl, r3
 800c784:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c788:	b10a      	cbz	r2, 800c78e <_vfiprintf_r+0xa2>
 800c78a:	2a25      	cmp	r2, #37	; 0x25
 800c78c:	d1f9      	bne.n	800c782 <_vfiprintf_r+0x96>
 800c78e:	ebba 0b04 	subs.w	fp, sl, r4
 800c792:	d00b      	beq.n	800c7ac <_vfiprintf_r+0xc0>
 800c794:	465b      	mov	r3, fp
 800c796:	4622      	mov	r2, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	4630      	mov	r0, r6
 800c79c:	f7ff ff93 	bl	800c6c6 <__sfputs_r>
 800c7a0:	3001      	adds	r0, #1
 800c7a2:	f000 80aa 	beq.w	800c8fa <_vfiprintf_r+0x20e>
 800c7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7a8:	445a      	add	r2, fp
 800c7aa:	9209      	str	r2, [sp, #36]	; 0x24
 800c7ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 80a2 	beq.w	800c8fa <_vfiprintf_r+0x20e>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7c0:	f10a 0a01 	add.w	sl, sl, #1
 800c7c4:	9304      	str	r3, [sp, #16]
 800c7c6:	9307      	str	r3, [sp, #28]
 800c7c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7cc:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ce:	4654      	mov	r4, sl
 800c7d0:	2205      	movs	r2, #5
 800c7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d6:	4858      	ldr	r0, [pc, #352]	; (800c938 <_vfiprintf_r+0x24c>)
 800c7d8:	f7f3 fcfa 	bl	80001d0 <memchr>
 800c7dc:	9a04      	ldr	r2, [sp, #16]
 800c7de:	b9d8      	cbnz	r0, 800c818 <_vfiprintf_r+0x12c>
 800c7e0:	06d1      	lsls	r1, r2, #27
 800c7e2:	bf44      	itt	mi
 800c7e4:	2320      	movmi	r3, #32
 800c7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ea:	0713      	lsls	r3, r2, #28
 800c7ec:	bf44      	itt	mi
 800c7ee:	232b      	movmi	r3, #43	; 0x2b
 800c7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7fa:	d015      	beq.n	800c828 <_vfiprintf_r+0x13c>
 800c7fc:	9a07      	ldr	r2, [sp, #28]
 800c7fe:	4654      	mov	r4, sl
 800c800:	2000      	movs	r0, #0
 800c802:	f04f 0c0a 	mov.w	ip, #10
 800c806:	4621      	mov	r1, r4
 800c808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c80c:	3b30      	subs	r3, #48	; 0x30
 800c80e:	2b09      	cmp	r3, #9
 800c810:	d94e      	bls.n	800c8b0 <_vfiprintf_r+0x1c4>
 800c812:	b1b0      	cbz	r0, 800c842 <_vfiprintf_r+0x156>
 800c814:	9207      	str	r2, [sp, #28]
 800c816:	e014      	b.n	800c842 <_vfiprintf_r+0x156>
 800c818:	eba0 0308 	sub.w	r3, r0, r8
 800c81c:	fa09 f303 	lsl.w	r3, r9, r3
 800c820:	4313      	orrs	r3, r2
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	46a2      	mov	sl, r4
 800c826:	e7d2      	b.n	800c7ce <_vfiprintf_r+0xe2>
 800c828:	9b03      	ldr	r3, [sp, #12]
 800c82a:	1d19      	adds	r1, r3, #4
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	9103      	str	r1, [sp, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	bfbb      	ittet	lt
 800c834:	425b      	neglt	r3, r3
 800c836:	f042 0202 	orrlt.w	r2, r2, #2
 800c83a:	9307      	strge	r3, [sp, #28]
 800c83c:	9307      	strlt	r3, [sp, #28]
 800c83e:	bfb8      	it	lt
 800c840:	9204      	strlt	r2, [sp, #16]
 800c842:	7823      	ldrb	r3, [r4, #0]
 800c844:	2b2e      	cmp	r3, #46	; 0x2e
 800c846:	d10c      	bne.n	800c862 <_vfiprintf_r+0x176>
 800c848:	7863      	ldrb	r3, [r4, #1]
 800c84a:	2b2a      	cmp	r3, #42	; 0x2a
 800c84c:	d135      	bne.n	800c8ba <_vfiprintf_r+0x1ce>
 800c84e:	9b03      	ldr	r3, [sp, #12]
 800c850:	1d1a      	adds	r2, r3, #4
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	9203      	str	r2, [sp, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	bfb8      	it	lt
 800c85a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c85e:	3402      	adds	r4, #2
 800c860:	9305      	str	r3, [sp, #20]
 800c862:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c948 <_vfiprintf_r+0x25c>
 800c866:	7821      	ldrb	r1, [r4, #0]
 800c868:	2203      	movs	r2, #3
 800c86a:	4650      	mov	r0, sl
 800c86c:	f7f3 fcb0 	bl	80001d0 <memchr>
 800c870:	b140      	cbz	r0, 800c884 <_vfiprintf_r+0x198>
 800c872:	2340      	movs	r3, #64	; 0x40
 800c874:	eba0 000a 	sub.w	r0, r0, sl
 800c878:	fa03 f000 	lsl.w	r0, r3, r0
 800c87c:	9b04      	ldr	r3, [sp, #16]
 800c87e:	4303      	orrs	r3, r0
 800c880:	3401      	adds	r4, #1
 800c882:	9304      	str	r3, [sp, #16]
 800c884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c888:	482c      	ldr	r0, [pc, #176]	; (800c93c <_vfiprintf_r+0x250>)
 800c88a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c88e:	2206      	movs	r2, #6
 800c890:	f7f3 fc9e 	bl	80001d0 <memchr>
 800c894:	2800      	cmp	r0, #0
 800c896:	d03f      	beq.n	800c918 <_vfiprintf_r+0x22c>
 800c898:	4b29      	ldr	r3, [pc, #164]	; (800c940 <_vfiprintf_r+0x254>)
 800c89a:	bb1b      	cbnz	r3, 800c8e4 <_vfiprintf_r+0x1f8>
 800c89c:	9b03      	ldr	r3, [sp, #12]
 800c89e:	3307      	adds	r3, #7
 800c8a0:	f023 0307 	bic.w	r3, r3, #7
 800c8a4:	3308      	adds	r3, #8
 800c8a6:	9303      	str	r3, [sp, #12]
 800c8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8aa:	443b      	add	r3, r7
 800c8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ae:	e767      	b.n	800c780 <_vfiprintf_r+0x94>
 800c8b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	2001      	movs	r0, #1
 800c8b8:	e7a5      	b.n	800c806 <_vfiprintf_r+0x11a>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	3401      	adds	r4, #1
 800c8be:	9305      	str	r3, [sp, #20]
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	f04f 0c0a 	mov.w	ip, #10
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8cc:	3a30      	subs	r2, #48	; 0x30
 800c8ce:	2a09      	cmp	r2, #9
 800c8d0:	d903      	bls.n	800c8da <_vfiprintf_r+0x1ee>
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d0c5      	beq.n	800c862 <_vfiprintf_r+0x176>
 800c8d6:	9105      	str	r1, [sp, #20]
 800c8d8:	e7c3      	b.n	800c862 <_vfiprintf_r+0x176>
 800c8da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8de:	4604      	mov	r4, r0
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e7f0      	b.n	800c8c6 <_vfiprintf_r+0x1da>
 800c8e4:	ab03      	add	r3, sp, #12
 800c8e6:	9300      	str	r3, [sp, #0]
 800c8e8:	462a      	mov	r2, r5
 800c8ea:	4b16      	ldr	r3, [pc, #88]	; (800c944 <_vfiprintf_r+0x258>)
 800c8ec:	a904      	add	r1, sp, #16
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	f3af 8000 	nop.w
 800c8f4:	4607      	mov	r7, r0
 800c8f6:	1c78      	adds	r0, r7, #1
 800c8f8:	d1d6      	bne.n	800c8a8 <_vfiprintf_r+0x1bc>
 800c8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8fc:	07d9      	lsls	r1, r3, #31
 800c8fe:	d405      	bmi.n	800c90c <_vfiprintf_r+0x220>
 800c900:	89ab      	ldrh	r3, [r5, #12]
 800c902:	059a      	lsls	r2, r3, #22
 800c904:	d402      	bmi.n	800c90c <_vfiprintf_r+0x220>
 800c906:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c908:	f7ff fd7f 	bl	800c40a <__retarget_lock_release_recursive>
 800c90c:	89ab      	ldrh	r3, [r5, #12]
 800c90e:	065b      	lsls	r3, r3, #25
 800c910:	f53f af12 	bmi.w	800c738 <_vfiprintf_r+0x4c>
 800c914:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c916:	e711      	b.n	800c73c <_vfiprintf_r+0x50>
 800c918:	ab03      	add	r3, sp, #12
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	462a      	mov	r2, r5
 800c91e:	4b09      	ldr	r3, [pc, #36]	; (800c944 <_vfiprintf_r+0x258>)
 800c920:	a904      	add	r1, sp, #16
 800c922:	4630      	mov	r0, r6
 800c924:	f000 f880 	bl	800ca28 <_printf_i>
 800c928:	e7e4      	b.n	800c8f4 <_vfiprintf_r+0x208>
 800c92a:	bf00      	nop
 800c92c:	0800d790 	.word	0x0800d790
 800c930:	0800d7b0 	.word	0x0800d7b0
 800c934:	0800d770 	.word	0x0800d770
 800c938:	0800d7d0 	.word	0x0800d7d0
 800c93c:	0800d7da 	.word	0x0800d7da
 800c940:	00000000 	.word	0x00000000
 800c944:	0800c6c7 	.word	0x0800c6c7
 800c948:	0800d7d6 	.word	0x0800d7d6

0800c94c <_printf_common>:
 800c94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c950:	4616      	mov	r6, r2
 800c952:	4699      	mov	r9, r3
 800c954:	688a      	ldr	r2, [r1, #8]
 800c956:	690b      	ldr	r3, [r1, #16]
 800c958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c95c:	4293      	cmp	r3, r2
 800c95e:	bfb8      	it	lt
 800c960:	4613      	movlt	r3, r2
 800c962:	6033      	str	r3, [r6, #0]
 800c964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c968:	4607      	mov	r7, r0
 800c96a:	460c      	mov	r4, r1
 800c96c:	b10a      	cbz	r2, 800c972 <_printf_common+0x26>
 800c96e:	3301      	adds	r3, #1
 800c970:	6033      	str	r3, [r6, #0]
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	0699      	lsls	r1, r3, #26
 800c976:	bf42      	ittt	mi
 800c978:	6833      	ldrmi	r3, [r6, #0]
 800c97a:	3302      	addmi	r3, #2
 800c97c:	6033      	strmi	r3, [r6, #0]
 800c97e:	6825      	ldr	r5, [r4, #0]
 800c980:	f015 0506 	ands.w	r5, r5, #6
 800c984:	d106      	bne.n	800c994 <_printf_common+0x48>
 800c986:	f104 0a19 	add.w	sl, r4, #25
 800c98a:	68e3      	ldr	r3, [r4, #12]
 800c98c:	6832      	ldr	r2, [r6, #0]
 800c98e:	1a9b      	subs	r3, r3, r2
 800c990:	42ab      	cmp	r3, r5
 800c992:	dc26      	bgt.n	800c9e2 <_printf_common+0x96>
 800c994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c998:	1e13      	subs	r3, r2, #0
 800c99a:	6822      	ldr	r2, [r4, #0]
 800c99c:	bf18      	it	ne
 800c99e:	2301      	movne	r3, #1
 800c9a0:	0692      	lsls	r2, r2, #26
 800c9a2:	d42b      	bmi.n	800c9fc <_printf_common+0xb0>
 800c9a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	47c0      	blx	r8
 800c9ae:	3001      	adds	r0, #1
 800c9b0:	d01e      	beq.n	800c9f0 <_printf_common+0xa4>
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	68e5      	ldr	r5, [r4, #12]
 800c9b6:	6832      	ldr	r2, [r6, #0]
 800c9b8:	f003 0306 	and.w	r3, r3, #6
 800c9bc:	2b04      	cmp	r3, #4
 800c9be:	bf08      	it	eq
 800c9c0:	1aad      	subeq	r5, r5, r2
 800c9c2:	68a3      	ldr	r3, [r4, #8]
 800c9c4:	6922      	ldr	r2, [r4, #16]
 800c9c6:	bf0c      	ite	eq
 800c9c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9cc:	2500      	movne	r5, #0
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	bfc4      	itt	gt
 800c9d2:	1a9b      	subgt	r3, r3, r2
 800c9d4:	18ed      	addgt	r5, r5, r3
 800c9d6:	2600      	movs	r6, #0
 800c9d8:	341a      	adds	r4, #26
 800c9da:	42b5      	cmp	r5, r6
 800c9dc:	d11a      	bne.n	800ca14 <_printf_common+0xc8>
 800c9de:	2000      	movs	r0, #0
 800c9e0:	e008      	b.n	800c9f4 <_printf_common+0xa8>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	4652      	mov	r2, sl
 800c9e6:	4649      	mov	r1, r9
 800c9e8:	4638      	mov	r0, r7
 800c9ea:	47c0      	blx	r8
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	d103      	bne.n	800c9f8 <_printf_common+0xac>
 800c9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f8:	3501      	adds	r5, #1
 800c9fa:	e7c6      	b.n	800c98a <_printf_common+0x3e>
 800c9fc:	18e1      	adds	r1, r4, r3
 800c9fe:	1c5a      	adds	r2, r3, #1
 800ca00:	2030      	movs	r0, #48	; 0x30
 800ca02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca06:	4422      	add	r2, r4
 800ca08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca10:	3302      	adds	r3, #2
 800ca12:	e7c7      	b.n	800c9a4 <_printf_common+0x58>
 800ca14:	2301      	movs	r3, #1
 800ca16:	4622      	mov	r2, r4
 800ca18:	4649      	mov	r1, r9
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	47c0      	blx	r8
 800ca1e:	3001      	adds	r0, #1
 800ca20:	d0e6      	beq.n	800c9f0 <_printf_common+0xa4>
 800ca22:	3601      	adds	r6, #1
 800ca24:	e7d9      	b.n	800c9da <_printf_common+0x8e>
	...

0800ca28 <_printf_i>:
 800ca28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca2c:	7e0f      	ldrb	r7, [r1, #24]
 800ca2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca30:	2f78      	cmp	r7, #120	; 0x78
 800ca32:	4691      	mov	r9, r2
 800ca34:	4680      	mov	r8, r0
 800ca36:	460c      	mov	r4, r1
 800ca38:	469a      	mov	sl, r3
 800ca3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca3e:	d807      	bhi.n	800ca50 <_printf_i+0x28>
 800ca40:	2f62      	cmp	r7, #98	; 0x62
 800ca42:	d80a      	bhi.n	800ca5a <_printf_i+0x32>
 800ca44:	2f00      	cmp	r7, #0
 800ca46:	f000 80d8 	beq.w	800cbfa <_printf_i+0x1d2>
 800ca4a:	2f58      	cmp	r7, #88	; 0x58
 800ca4c:	f000 80a3 	beq.w	800cb96 <_printf_i+0x16e>
 800ca50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca58:	e03a      	b.n	800cad0 <_printf_i+0xa8>
 800ca5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca5e:	2b15      	cmp	r3, #21
 800ca60:	d8f6      	bhi.n	800ca50 <_printf_i+0x28>
 800ca62:	a101      	add	r1, pc, #4	; (adr r1, 800ca68 <_printf_i+0x40>)
 800ca64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca68:	0800cac1 	.word	0x0800cac1
 800ca6c:	0800cad5 	.word	0x0800cad5
 800ca70:	0800ca51 	.word	0x0800ca51
 800ca74:	0800ca51 	.word	0x0800ca51
 800ca78:	0800ca51 	.word	0x0800ca51
 800ca7c:	0800ca51 	.word	0x0800ca51
 800ca80:	0800cad5 	.word	0x0800cad5
 800ca84:	0800ca51 	.word	0x0800ca51
 800ca88:	0800ca51 	.word	0x0800ca51
 800ca8c:	0800ca51 	.word	0x0800ca51
 800ca90:	0800ca51 	.word	0x0800ca51
 800ca94:	0800cbe1 	.word	0x0800cbe1
 800ca98:	0800cb05 	.word	0x0800cb05
 800ca9c:	0800cbc3 	.word	0x0800cbc3
 800caa0:	0800ca51 	.word	0x0800ca51
 800caa4:	0800ca51 	.word	0x0800ca51
 800caa8:	0800cc03 	.word	0x0800cc03
 800caac:	0800ca51 	.word	0x0800ca51
 800cab0:	0800cb05 	.word	0x0800cb05
 800cab4:	0800ca51 	.word	0x0800ca51
 800cab8:	0800ca51 	.word	0x0800ca51
 800cabc:	0800cbcb 	.word	0x0800cbcb
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	1d1a      	adds	r2, r3, #4
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	602a      	str	r2, [r5, #0]
 800cac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cacc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cad0:	2301      	movs	r3, #1
 800cad2:	e0a3      	b.n	800cc1c <_printf_i+0x1f4>
 800cad4:	6820      	ldr	r0, [r4, #0]
 800cad6:	6829      	ldr	r1, [r5, #0]
 800cad8:	0606      	lsls	r6, r0, #24
 800cada:	f101 0304 	add.w	r3, r1, #4
 800cade:	d50a      	bpl.n	800caf6 <_printf_i+0xce>
 800cae0:	680e      	ldr	r6, [r1, #0]
 800cae2:	602b      	str	r3, [r5, #0]
 800cae4:	2e00      	cmp	r6, #0
 800cae6:	da03      	bge.n	800caf0 <_printf_i+0xc8>
 800cae8:	232d      	movs	r3, #45	; 0x2d
 800caea:	4276      	negs	r6, r6
 800caec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caf0:	485e      	ldr	r0, [pc, #376]	; (800cc6c <_printf_i+0x244>)
 800caf2:	230a      	movs	r3, #10
 800caf4:	e019      	b.n	800cb2a <_printf_i+0x102>
 800caf6:	680e      	ldr	r6, [r1, #0]
 800caf8:	602b      	str	r3, [r5, #0]
 800cafa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cafe:	bf18      	it	ne
 800cb00:	b236      	sxthne	r6, r6
 800cb02:	e7ef      	b.n	800cae4 <_printf_i+0xbc>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	6820      	ldr	r0, [r4, #0]
 800cb08:	1d19      	adds	r1, r3, #4
 800cb0a:	6029      	str	r1, [r5, #0]
 800cb0c:	0601      	lsls	r1, r0, #24
 800cb0e:	d501      	bpl.n	800cb14 <_printf_i+0xec>
 800cb10:	681e      	ldr	r6, [r3, #0]
 800cb12:	e002      	b.n	800cb1a <_printf_i+0xf2>
 800cb14:	0646      	lsls	r6, r0, #25
 800cb16:	d5fb      	bpl.n	800cb10 <_printf_i+0xe8>
 800cb18:	881e      	ldrh	r6, [r3, #0]
 800cb1a:	4854      	ldr	r0, [pc, #336]	; (800cc6c <_printf_i+0x244>)
 800cb1c:	2f6f      	cmp	r7, #111	; 0x6f
 800cb1e:	bf0c      	ite	eq
 800cb20:	2308      	moveq	r3, #8
 800cb22:	230a      	movne	r3, #10
 800cb24:	2100      	movs	r1, #0
 800cb26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb2a:	6865      	ldr	r5, [r4, #4]
 800cb2c:	60a5      	str	r5, [r4, #8]
 800cb2e:	2d00      	cmp	r5, #0
 800cb30:	bfa2      	ittt	ge
 800cb32:	6821      	ldrge	r1, [r4, #0]
 800cb34:	f021 0104 	bicge.w	r1, r1, #4
 800cb38:	6021      	strge	r1, [r4, #0]
 800cb3a:	b90e      	cbnz	r6, 800cb40 <_printf_i+0x118>
 800cb3c:	2d00      	cmp	r5, #0
 800cb3e:	d04d      	beq.n	800cbdc <_printf_i+0x1b4>
 800cb40:	4615      	mov	r5, r2
 800cb42:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb46:	fb03 6711 	mls	r7, r3, r1, r6
 800cb4a:	5dc7      	ldrb	r7, [r0, r7]
 800cb4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb50:	4637      	mov	r7, r6
 800cb52:	42bb      	cmp	r3, r7
 800cb54:	460e      	mov	r6, r1
 800cb56:	d9f4      	bls.n	800cb42 <_printf_i+0x11a>
 800cb58:	2b08      	cmp	r3, #8
 800cb5a:	d10b      	bne.n	800cb74 <_printf_i+0x14c>
 800cb5c:	6823      	ldr	r3, [r4, #0]
 800cb5e:	07de      	lsls	r6, r3, #31
 800cb60:	d508      	bpl.n	800cb74 <_printf_i+0x14c>
 800cb62:	6923      	ldr	r3, [r4, #16]
 800cb64:	6861      	ldr	r1, [r4, #4]
 800cb66:	4299      	cmp	r1, r3
 800cb68:	bfde      	ittt	le
 800cb6a:	2330      	movle	r3, #48	; 0x30
 800cb6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb74:	1b52      	subs	r2, r2, r5
 800cb76:	6122      	str	r2, [r4, #16]
 800cb78:	f8cd a000 	str.w	sl, [sp]
 800cb7c:	464b      	mov	r3, r9
 800cb7e:	aa03      	add	r2, sp, #12
 800cb80:	4621      	mov	r1, r4
 800cb82:	4640      	mov	r0, r8
 800cb84:	f7ff fee2 	bl	800c94c <_printf_common>
 800cb88:	3001      	adds	r0, #1
 800cb8a:	d14c      	bne.n	800cc26 <_printf_i+0x1fe>
 800cb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb90:	b004      	add	sp, #16
 800cb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb96:	4835      	ldr	r0, [pc, #212]	; (800cc6c <_printf_i+0x244>)
 800cb98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb9c:	6829      	ldr	r1, [r5, #0]
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	f851 6b04 	ldr.w	r6, [r1], #4
 800cba4:	6029      	str	r1, [r5, #0]
 800cba6:	061d      	lsls	r5, r3, #24
 800cba8:	d514      	bpl.n	800cbd4 <_printf_i+0x1ac>
 800cbaa:	07df      	lsls	r7, r3, #31
 800cbac:	bf44      	itt	mi
 800cbae:	f043 0320 	orrmi.w	r3, r3, #32
 800cbb2:	6023      	strmi	r3, [r4, #0]
 800cbb4:	b91e      	cbnz	r6, 800cbbe <_printf_i+0x196>
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	f023 0320 	bic.w	r3, r3, #32
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	2310      	movs	r3, #16
 800cbc0:	e7b0      	b.n	800cb24 <_printf_i+0xfc>
 800cbc2:	6823      	ldr	r3, [r4, #0]
 800cbc4:	f043 0320 	orr.w	r3, r3, #32
 800cbc8:	6023      	str	r3, [r4, #0]
 800cbca:	2378      	movs	r3, #120	; 0x78
 800cbcc:	4828      	ldr	r0, [pc, #160]	; (800cc70 <_printf_i+0x248>)
 800cbce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cbd2:	e7e3      	b.n	800cb9c <_printf_i+0x174>
 800cbd4:	0659      	lsls	r1, r3, #25
 800cbd6:	bf48      	it	mi
 800cbd8:	b2b6      	uxthmi	r6, r6
 800cbda:	e7e6      	b.n	800cbaa <_printf_i+0x182>
 800cbdc:	4615      	mov	r5, r2
 800cbde:	e7bb      	b.n	800cb58 <_printf_i+0x130>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	6826      	ldr	r6, [r4, #0]
 800cbe4:	6961      	ldr	r1, [r4, #20]
 800cbe6:	1d18      	adds	r0, r3, #4
 800cbe8:	6028      	str	r0, [r5, #0]
 800cbea:	0635      	lsls	r5, r6, #24
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	d501      	bpl.n	800cbf4 <_printf_i+0x1cc>
 800cbf0:	6019      	str	r1, [r3, #0]
 800cbf2:	e002      	b.n	800cbfa <_printf_i+0x1d2>
 800cbf4:	0670      	lsls	r0, r6, #25
 800cbf6:	d5fb      	bpl.n	800cbf0 <_printf_i+0x1c8>
 800cbf8:	8019      	strh	r1, [r3, #0]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	6123      	str	r3, [r4, #16]
 800cbfe:	4615      	mov	r5, r2
 800cc00:	e7ba      	b.n	800cb78 <_printf_i+0x150>
 800cc02:	682b      	ldr	r3, [r5, #0]
 800cc04:	1d1a      	adds	r2, r3, #4
 800cc06:	602a      	str	r2, [r5, #0]
 800cc08:	681d      	ldr	r5, [r3, #0]
 800cc0a:	6862      	ldr	r2, [r4, #4]
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f7f3 fade 	bl	80001d0 <memchr>
 800cc14:	b108      	cbz	r0, 800cc1a <_printf_i+0x1f2>
 800cc16:	1b40      	subs	r0, r0, r5
 800cc18:	6060      	str	r0, [r4, #4]
 800cc1a:	6863      	ldr	r3, [r4, #4]
 800cc1c:	6123      	str	r3, [r4, #16]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc24:	e7a8      	b.n	800cb78 <_printf_i+0x150>
 800cc26:	6923      	ldr	r3, [r4, #16]
 800cc28:	462a      	mov	r2, r5
 800cc2a:	4649      	mov	r1, r9
 800cc2c:	4640      	mov	r0, r8
 800cc2e:	47d0      	blx	sl
 800cc30:	3001      	adds	r0, #1
 800cc32:	d0ab      	beq.n	800cb8c <_printf_i+0x164>
 800cc34:	6823      	ldr	r3, [r4, #0]
 800cc36:	079b      	lsls	r3, r3, #30
 800cc38:	d413      	bmi.n	800cc62 <_printf_i+0x23a>
 800cc3a:	68e0      	ldr	r0, [r4, #12]
 800cc3c:	9b03      	ldr	r3, [sp, #12]
 800cc3e:	4298      	cmp	r0, r3
 800cc40:	bfb8      	it	lt
 800cc42:	4618      	movlt	r0, r3
 800cc44:	e7a4      	b.n	800cb90 <_printf_i+0x168>
 800cc46:	2301      	movs	r3, #1
 800cc48:	4632      	mov	r2, r6
 800cc4a:	4649      	mov	r1, r9
 800cc4c:	4640      	mov	r0, r8
 800cc4e:	47d0      	blx	sl
 800cc50:	3001      	adds	r0, #1
 800cc52:	d09b      	beq.n	800cb8c <_printf_i+0x164>
 800cc54:	3501      	adds	r5, #1
 800cc56:	68e3      	ldr	r3, [r4, #12]
 800cc58:	9903      	ldr	r1, [sp, #12]
 800cc5a:	1a5b      	subs	r3, r3, r1
 800cc5c:	42ab      	cmp	r3, r5
 800cc5e:	dcf2      	bgt.n	800cc46 <_printf_i+0x21e>
 800cc60:	e7eb      	b.n	800cc3a <_printf_i+0x212>
 800cc62:	2500      	movs	r5, #0
 800cc64:	f104 0619 	add.w	r6, r4, #25
 800cc68:	e7f5      	b.n	800cc56 <_printf_i+0x22e>
 800cc6a:	bf00      	nop
 800cc6c:	0800d7e1 	.word	0x0800d7e1
 800cc70:	0800d7f2 	.word	0x0800d7f2

0800cc74 <_putc_r>:
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	460d      	mov	r5, r1
 800cc78:	4614      	mov	r4, r2
 800cc7a:	4606      	mov	r6, r0
 800cc7c:	b118      	cbz	r0, 800cc86 <_putc_r+0x12>
 800cc7e:	6983      	ldr	r3, [r0, #24]
 800cc80:	b90b      	cbnz	r3, 800cc86 <_putc_r+0x12>
 800cc82:	f7ff fb23 	bl	800c2cc <__sinit>
 800cc86:	4b1c      	ldr	r3, [pc, #112]	; (800ccf8 <_putc_r+0x84>)
 800cc88:	429c      	cmp	r4, r3
 800cc8a:	d124      	bne.n	800ccd6 <_putc_r+0x62>
 800cc8c:	6874      	ldr	r4, [r6, #4]
 800cc8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc90:	07d8      	lsls	r0, r3, #31
 800cc92:	d405      	bmi.n	800cca0 <_putc_r+0x2c>
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	0599      	lsls	r1, r3, #22
 800cc98:	d402      	bmi.n	800cca0 <_putc_r+0x2c>
 800cc9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc9c:	f7ff fbb4 	bl	800c408 <__retarget_lock_acquire_recursive>
 800cca0:	68a3      	ldr	r3, [r4, #8]
 800cca2:	3b01      	subs	r3, #1
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	60a3      	str	r3, [r4, #8]
 800cca8:	da05      	bge.n	800ccb6 <_putc_r+0x42>
 800ccaa:	69a2      	ldr	r2, [r4, #24]
 800ccac:	4293      	cmp	r3, r2
 800ccae:	db1c      	blt.n	800ccea <_putc_r+0x76>
 800ccb0:	b2eb      	uxtb	r3, r5
 800ccb2:	2b0a      	cmp	r3, #10
 800ccb4:	d019      	beq.n	800ccea <_putc_r+0x76>
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	1c5a      	adds	r2, r3, #1
 800ccba:	6022      	str	r2, [r4, #0]
 800ccbc:	701d      	strb	r5, [r3, #0]
 800ccbe:	b2ed      	uxtb	r5, r5
 800ccc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccc2:	07da      	lsls	r2, r3, #31
 800ccc4:	d405      	bmi.n	800ccd2 <_putc_r+0x5e>
 800ccc6:	89a3      	ldrh	r3, [r4, #12]
 800ccc8:	059b      	lsls	r3, r3, #22
 800ccca:	d402      	bmi.n	800ccd2 <_putc_r+0x5e>
 800cccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccce:	f7ff fb9c 	bl	800c40a <__retarget_lock_release_recursive>
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	bd70      	pop	{r4, r5, r6, pc}
 800ccd6:	4b09      	ldr	r3, [pc, #36]	; (800ccfc <_putc_r+0x88>)
 800ccd8:	429c      	cmp	r4, r3
 800ccda:	d101      	bne.n	800cce0 <_putc_r+0x6c>
 800ccdc:	68b4      	ldr	r4, [r6, #8]
 800ccde:	e7d6      	b.n	800cc8e <_putc_r+0x1a>
 800cce0:	4b07      	ldr	r3, [pc, #28]	; (800cd00 <_putc_r+0x8c>)
 800cce2:	429c      	cmp	r4, r3
 800cce4:	bf08      	it	eq
 800cce6:	68f4      	ldreq	r4, [r6, #12]
 800cce8:	e7d1      	b.n	800cc8e <_putc_r+0x1a>
 800ccea:	4629      	mov	r1, r5
 800ccec:	4622      	mov	r2, r4
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f7ff f912 	bl	800bf18 <__swbuf_r>
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	e7e3      	b.n	800ccc0 <_putc_r+0x4c>
 800ccf8:	0800d790 	.word	0x0800d790
 800ccfc:	0800d7b0 	.word	0x0800d7b0
 800cd00:	0800d770 	.word	0x0800d770

0800cd04 <_sbrk_r>:
 800cd04:	b538      	push	{r3, r4, r5, lr}
 800cd06:	4d06      	ldr	r5, [pc, #24]	; (800cd20 <_sbrk_r+0x1c>)
 800cd08:	2300      	movs	r3, #0
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	4608      	mov	r0, r1
 800cd0e:	602b      	str	r3, [r5, #0]
 800cd10:	f7f4 f9e0 	bl	80010d4 <_sbrk>
 800cd14:	1c43      	adds	r3, r0, #1
 800cd16:	d102      	bne.n	800cd1e <_sbrk_r+0x1a>
 800cd18:	682b      	ldr	r3, [r5, #0]
 800cd1a:	b103      	cbz	r3, 800cd1e <_sbrk_r+0x1a>
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	bd38      	pop	{r3, r4, r5, pc}
 800cd20:	200006dc 	.word	0x200006dc

0800cd24 <__sread>:
 800cd24:	b510      	push	{r4, lr}
 800cd26:	460c      	mov	r4, r1
 800cd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd2c:	f000 f8a0 	bl	800ce70 <_read_r>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	bfab      	itete	ge
 800cd34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd36:	89a3      	ldrhlt	r3, [r4, #12]
 800cd38:	181b      	addge	r3, r3, r0
 800cd3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd3e:	bfac      	ite	ge
 800cd40:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd42:	81a3      	strhlt	r3, [r4, #12]
 800cd44:	bd10      	pop	{r4, pc}

0800cd46 <__swrite>:
 800cd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4a:	461f      	mov	r7, r3
 800cd4c:	898b      	ldrh	r3, [r1, #12]
 800cd4e:	05db      	lsls	r3, r3, #23
 800cd50:	4605      	mov	r5, r0
 800cd52:	460c      	mov	r4, r1
 800cd54:	4616      	mov	r6, r2
 800cd56:	d505      	bpl.n	800cd64 <__swrite+0x1e>
 800cd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f000 f868 	bl	800ce34 <_lseek_r>
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd6e:	81a3      	strh	r3, [r4, #12]
 800cd70:	4632      	mov	r2, r6
 800cd72:	463b      	mov	r3, r7
 800cd74:	4628      	mov	r0, r5
 800cd76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd7a:	f000 b817 	b.w	800cdac <_write_r>

0800cd7e <__sseek>:
 800cd7e:	b510      	push	{r4, lr}
 800cd80:	460c      	mov	r4, r1
 800cd82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd86:	f000 f855 	bl	800ce34 <_lseek_r>
 800cd8a:	1c43      	adds	r3, r0, #1
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	bf15      	itete	ne
 800cd90:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd9a:	81a3      	strheq	r3, [r4, #12]
 800cd9c:	bf18      	it	ne
 800cd9e:	81a3      	strhne	r3, [r4, #12]
 800cda0:	bd10      	pop	{r4, pc}

0800cda2 <__sclose>:
 800cda2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda6:	f000 b813 	b.w	800cdd0 <_close_r>
	...

0800cdac <_write_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4d07      	ldr	r5, [pc, #28]	; (800cdcc <_write_r+0x20>)
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	4608      	mov	r0, r1
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	602a      	str	r2, [r5, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	f7f5 fc68 	bl	8002690 <_write>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d102      	bne.n	800cdca <_write_r+0x1e>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	b103      	cbz	r3, 800cdca <_write_r+0x1e>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	200006dc 	.word	0x200006dc

0800cdd0 <_close_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4d06      	ldr	r5, [pc, #24]	; (800cdec <_close_r+0x1c>)
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	4608      	mov	r0, r1
 800cdda:	602b      	str	r3, [r5, #0]
 800cddc:	f7f4 f945 	bl	800106a <_close>
 800cde0:	1c43      	adds	r3, r0, #1
 800cde2:	d102      	bne.n	800cdea <_close_r+0x1a>
 800cde4:	682b      	ldr	r3, [r5, #0]
 800cde6:	b103      	cbz	r3, 800cdea <_close_r+0x1a>
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	bd38      	pop	{r3, r4, r5, pc}
 800cdec:	200006dc 	.word	0x200006dc

0800cdf0 <_fstat_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d07      	ldr	r5, [pc, #28]	; (800ce10 <_fstat_r+0x20>)
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	602b      	str	r3, [r5, #0]
 800cdfe:	f7f4 f940 	bl	8001082 <_fstat>
 800ce02:	1c43      	adds	r3, r0, #1
 800ce04:	d102      	bne.n	800ce0c <_fstat_r+0x1c>
 800ce06:	682b      	ldr	r3, [r5, #0]
 800ce08:	b103      	cbz	r3, 800ce0c <_fstat_r+0x1c>
 800ce0a:	6023      	str	r3, [r4, #0]
 800ce0c:	bd38      	pop	{r3, r4, r5, pc}
 800ce0e:	bf00      	nop
 800ce10:	200006dc 	.word	0x200006dc

0800ce14 <_isatty_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4d06      	ldr	r5, [pc, #24]	; (800ce30 <_isatty_r+0x1c>)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	602b      	str	r3, [r5, #0]
 800ce20:	f7f4 f93f 	bl	80010a2 <_isatty>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_isatty_r+0x1a>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_isatty_r+0x1a>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	200006dc 	.word	0x200006dc

0800ce34 <_lseek_r>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	4d07      	ldr	r5, [pc, #28]	; (800ce54 <_lseek_r+0x20>)
 800ce38:	4604      	mov	r4, r0
 800ce3a:	4608      	mov	r0, r1
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	2200      	movs	r2, #0
 800ce40:	602a      	str	r2, [r5, #0]
 800ce42:	461a      	mov	r2, r3
 800ce44:	f7f4 f938 	bl	80010b8 <_lseek>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	d102      	bne.n	800ce52 <_lseek_r+0x1e>
 800ce4c:	682b      	ldr	r3, [r5, #0]
 800ce4e:	b103      	cbz	r3, 800ce52 <_lseek_r+0x1e>
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	bd38      	pop	{r3, r4, r5, pc}
 800ce54:	200006dc 	.word	0x200006dc

0800ce58 <__malloc_lock>:
 800ce58:	4801      	ldr	r0, [pc, #4]	; (800ce60 <__malloc_lock+0x8>)
 800ce5a:	f7ff bad5 	b.w	800c408 <__retarget_lock_acquire_recursive>
 800ce5e:	bf00      	nop
 800ce60:	200006d0 	.word	0x200006d0

0800ce64 <__malloc_unlock>:
 800ce64:	4801      	ldr	r0, [pc, #4]	; (800ce6c <__malloc_unlock+0x8>)
 800ce66:	f7ff bad0 	b.w	800c40a <__retarget_lock_release_recursive>
 800ce6a:	bf00      	nop
 800ce6c:	200006d0 	.word	0x200006d0

0800ce70 <_read_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4d07      	ldr	r5, [pc, #28]	; (800ce90 <_read_r+0x20>)
 800ce74:	4604      	mov	r4, r0
 800ce76:	4608      	mov	r0, r1
 800ce78:	4611      	mov	r1, r2
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	602a      	str	r2, [r5, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	f7f4 f8d6 	bl	8001030 <_read>
 800ce84:	1c43      	adds	r3, r0, #1
 800ce86:	d102      	bne.n	800ce8e <_read_r+0x1e>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	b103      	cbz	r3, 800ce8e <_read_r+0x1e>
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	bd38      	pop	{r3, r4, r5, pc}
 800ce90:	200006dc 	.word	0x200006dc

0800ce94 <_init>:
 800ce94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce96:	bf00      	nop
 800ce98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce9a:	bc08      	pop	{r3}
 800ce9c:	469e      	mov	lr, r3
 800ce9e:	4770      	bx	lr

0800cea0 <_fini>:
 800cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea2:	bf00      	nop
 800cea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cea6:	bc08      	pop	{r3}
 800cea8:	469e      	mov	lr, r3
 800ceaa:	4770      	bx	lr
