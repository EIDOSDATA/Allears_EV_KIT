
allears_EVK_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800ce68  0800ce68  0001ce68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7c0  0800d7c0  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7c0  0800d7c0  0001d7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7c8  0800d7c8  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7c8  0800d7c8  0001d7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7cc  0800d7cc  0001d7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800d7d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  200000f0  0800d8c0  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200006e0  0800d8c0  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021088  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c0  00000000  00000000  000411a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  00046268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001910  00000000  00000000  00047e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ac2  00000000  00000000  00049738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bf3f  00000000  00000000  000721fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4130  00000000  00000000  0009e139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007650  00000000  00000000  001822bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce50 	.word	0x0800ce50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	0800ce50 	.word	0x0800ce50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <tdUsart1_handlerGet>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
UART_HandleTypeDef* tdUsart1_handlerGet(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	return &huart1;
 8000578:	4b02      	ldr	r3, [pc, #8]	; (8000584 <tdUsart1_handlerGet+0x10>)
}
 800057a:	4618      	mov	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	200003d8 	.word	0x200003d8

08000588 <USER_DMA_INIT>:

void USER_DMA_INIT(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2100      	movs	r1, #0
 8000590:	200e      	movs	r0, #14
 8000592:	f004 fc70 	bl	8004e76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000596:	200e      	movs	r0, #14
 8000598:	f004 fc89 	bl	8004eae <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	200f      	movs	r0, #15
 80005a2:	f004 fc68 	bl	8004e76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005a6:	200f      	movs	r0, #15
 80005a8:	f004 fc81 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_GPIO_EXTI_Callback>:

/*
 * STIM LIB :: EXTI CALLBACK
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Trigger Input External Interrupt Process
	 * */
	stimLib_trgInput_callback(GPIO_Pin);
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	4618      	mov	r0, r3
 80005be:	f009 fde1 	bl	800a184 <stimLib_trgInput_callback>

	/* Application Code */
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_TIM_ErrorCallback>:

/*
 * STIM LIB :: PULSE FINISH INTERRUPT
 * */
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	stimLib_timError_callback(htim);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f009 fe17 	bl	800a208 <stimLib_timError_callback>
	TD_DEBUG_PRINT(("HAL_TIM_ErrorCallback\n"));
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <HAL_TIM_ErrorCallback+0x1c>)
 80005dc:	f00b fc72 	bl	800bec4 <puts>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	0800ce68 	.word	0x0800ce68

080005ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	TD_DEBUG_PRINT(("HAL_TIM_PWM_PulseFinishedHalfCpltCallback\n"));
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 80005f6:	f00b fc65 	bl	800bec4 <puts>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	0800ce80 	.word	0x0800ce80

08000608 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	stimLib_timPwmPluseFinished_callback(htim);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f009 fe03 	bl	800a21c <stimLib_timPwmPluseFinished_callback>
	TD_DEBUG_PRINT(("HAL_TIM_PWM_PulseFinishedCallback\n"));
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000618:	f00b fc54 	bl	800bec4 <puts>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	0800ceac 	.word	0x0800ceac

08000628 <HAL_TIM_PeriodElapsedCallback>:

/*
 * TIMER INTERRUPT :: STEPUP SCHEDULER
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	stimLib_stepup_ctrlCallback(htim);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f009 fd95 	bl	800a160 <stimLib_stepup_ctrlCallback>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <HAL_ADC_ErrorCallback>:

/*
 * STIM LIB :: ADC Error Callback
 * */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
	stimLib_adcError_callback();
 8000646:	f009 fd7f 	bl	800a148 <stimLib_adcError_callback>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <HAL_ADC_LevelOutOfWindowCallback>:

/*
 * STIM LIB :: Ste-up ADC watchdog
 * */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	stimLib_adcWatchdoc_callback();
 800065a:	f009 fd65 	bl	800a128 <stimLib_adcWatchdoc_callback>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800066c:	f002 f85a 	bl	8002724 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000670:	f000 f816 	bl	80006a0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_USART3_UART_Init();
 8000674:	f000 f894 	bl	80007a0 <MX_USART3_UART_Init>
	stimLib_stimInit();
 8000678:	f009 fb50 	bl	8009d1c <stimLib_stimInit>
	USER_DMA_INIT();
 800067c:	f7ff ff84 	bl	8000588 <USER_DMA_INIT>
	MX_USART1_UART_Init();
 8000680:	f000 f85e 	bl	8000740 <MX_USART1_UART_Init>
	MX_ADC1_Init();
	MX_ADC2_Init();
	MX_USART1_UART_Init();
	/* USER CODE BEGIN 2 */
#endif
	TD_DEBUG_INIT();
 8000684:	f001 ffb4 	bl	80025f0 <tdDebugInit>
	TD_DEBUG_PRINT(("main() starts\n"));
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <main+0x34>)
 800068a:	f00b fc1b 	bl	800bec4 <puts>

	tdUart1_init();
 800068e:	f001 fd73 	bl	8002178 <tdUart1_init>
	btMsg_init();
 8000692:	f001 f8f5 	bl	8001880 <btMsg_init>

		stimLib_stimPause();
		HAL_Delay(300);
		stimLib_stimSessionStop();
#endif
		td_Schedule();
 8000696:	f000 fd59 	bl	800114c <td_Schedule>
 800069a:	e7fc      	b.n	8000696 <main+0x2e>
 800069c:	0800ced0 	.word	0x0800ced0

080006a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b096      	sub	sp, #88	; 0x58
 80006a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2244      	movs	r2, #68	; 0x44
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f00b fb64 	bl	800bd7c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80006b4:	463b      	mov	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c6:	f005 f9bd 	bl	8005a44 <HAL_PWREx_ControlVoltageScaling>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80006d0:	f000 f896 	bl	8000800 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006d4:	2310      	movs	r3, #16
 80006d6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e0:	2360      	movs	r3, #96	; 0x60
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e8:	2301      	movs	r3, #1
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 80006f0:	2328      	movs	r3, #40	; 0x28
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4618      	mov	r0, r3
 8000702:	f005 f9f5 	bl	8005af0 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x70>
	{
		Error_Handler();
 800070c:	f000 f878 	bl	8000800 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000710:	230f      	movs	r3, #15
 8000712:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2303      	movs	r3, #3
 8000716:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2104      	movs	r1, #4
 8000728:	4618      	mov	r0, r3
 800072a:	f005 fe43 	bl	80063b4 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000734:	f000 f864 	bl	8000800 <Error_Handler>
	}
}
 8000738:	bf00      	nop
 800073a:	3758      	adds	r7, #88	; 0x58
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	; (800079c <MX_USART1_UART_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART1_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_USART1_UART_Init+0x58>)
 8000784:	f007 ffe4 	bl	8008750 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800078e:	f000 f837 	bl	8000800 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200003d8 	.word	0x200003d8
 800079c:	40013800 	.word	0x40013800

080007a0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART3_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART3_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART3_UART_Init+0x58>)
 80007e4:	f007 ffb4 	bl	8008750 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 80007ee:	f000 f807 	bl	8000800 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000045c 	.word	0x2000045c
 80007fc:	40004800 	.word	0x40004800

08000800 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_MspInit+0x44>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6613      	str	r3, [r2, #96]	; 0x60
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x44>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6593      	str	r3, [r2, #88]	; 0x58
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a67      	ldr	r2, [pc, #412]	; (8000a10 <HAL_ADC_MspInit+0x1bc>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d161      	bne.n	800093a <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000876:	4b67      	ldr	r3, [pc, #412]	; (8000a14 <HAL_ADC_MspInit+0x1c0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a65      	ldr	r2, [pc, #404]	; (8000a14 <HAL_ADC_MspInit+0x1c0>)
 800087e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000880:	4b64      	ldr	r3, [pc, #400]	; (8000a14 <HAL_ADC_MspInit+0x1c0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d10b      	bne.n	80008a0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000888:	4b63      	ldr	r3, [pc, #396]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	4a62      	ldr	r2, [pc, #392]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 800088e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000894:	4b60      	ldr	r3, [pc, #384]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b5d      	ldr	r3, [pc, #372]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a4:	4a5c      	ldr	r2, [pc, #368]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ac:	4b5a      	ldr	r3, [pc, #360]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 80008ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STEP_UP_FEEDBACK_Pin;
 80008b8:	2310      	movs	r3, #16
 80008ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008bc:	230b      	movs	r3, #11
 80008be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_UP_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f004 fe1f 	bl	8005510 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 80008d2:	4b52      	ldr	r3, [pc, #328]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 80008d4:	4a52      	ldr	r2, [pc, #328]	; (8000a20 <HAL_ADC_MspInit+0x1cc>)
 80008d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80008d8:	4b50      	ldr	r3, [pc, #320]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008de:	4b4f      	ldr	r3, [pc, #316]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e4:	4b4d      	ldr	r3, [pc, #308]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ea:	4b4c      	ldr	r3, [pc, #304]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 80008f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008f8:	4b48      	ldr	r3, [pc, #288]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 80008fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000900:	4b46      	ldr	r3, [pc, #280]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 8000902:	2220      	movs	r2, #32
 8000904:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800090c:	4843      	ldr	r0, [pc, #268]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 800090e:	f004 faf7 	bl	8004f00 <HAL_DMA_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000918:	f7ff ff72 	bl	8000800 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a3f      	ldr	r2, [pc, #252]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 8000920:	64da      	str	r2, [r3, #76]	; 0x4c
 8000922:	4a3e      	ldr	r2, [pc, #248]	; (8000a1c <HAL_ADC_MspInit+0x1c8>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2101      	movs	r1, #1
 800092c:	2012      	movs	r0, #18
 800092e:	f004 faa2 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000932:	2012      	movs	r0, #18
 8000934:	f004 fabb 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000938:	e065      	b.n	8000a06 <HAL_ADC_MspInit+0x1b2>
  else if(hadc->Instance==ADC2)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a39      	ldr	r2, [pc, #228]	; (8000a24 <HAL_ADC_MspInit+0x1d0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d160      	bne.n	8000a06 <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000944:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <HAL_ADC_MspInit+0x1c0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	4a32      	ldr	r2, [pc, #200]	; (8000a14 <HAL_ADC_MspInit+0x1c0>)
 800094c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800094e:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <HAL_ADC_MspInit+0x1c0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d10b      	bne.n	800096e <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000956:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 800095c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a29      	ldr	r2, [pc, #164]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <HAL_ADC_MspInit+0x1c4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PEAK_DETECTION_R_Pin|PEAK_DETECTION_L_Pin;
 8000986:	23c0      	movs	r3, #192	; 0xc0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800098a:	230b      	movs	r3, #11
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f004 fdb8 	bl	8005510 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009a2:	4a22      	ldr	r2, [pc, #136]	; (8000a2c <HAL_ADC_MspInit+0x1d8>)
 80009a4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009cc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009d0:	2220      	movs	r2, #32
 80009d2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009da:	4813      	ldr	r0, [pc, #76]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009dc:	f004 fa90 	bl	8004f00 <HAL_DMA_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_ADC_MspInit+0x196>
      Error_Handler();
 80009e6:	f7ff ff0b 	bl	8000800 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_ADC_MspInit+0x1d4>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2101      	movs	r1, #1
 80009fa:	2012      	movs	r0, #18
 80009fc:	f004 fa3b 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a00:	2012      	movs	r0, #18
 8000a02:	f004 fa54 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	50040000 	.word	0x50040000
 8000a14:	20000570 	.word	0x20000570
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	200001d4 	.word	0x200001d4
 8000a20:	40020430 	.word	0x40020430
 8000a24:	50040100 	.word	0x50040100
 8000a28:	2000021c 	.word	0x2000021c
 8000a2c:	4002001c 	.word	0x4002001c

08000a30 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <HAL_ADC_MspDeInit+0x8c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d119      	bne.n	8000a76 <HAL_ADC_MspDeInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_ADC_CLK_ENABLED--;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <HAL_ADC_MspDeInit+0x90>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_ADC_MspDeInit+0x90>)
 8000a4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==0){
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_ADC_MspDeInit+0x90>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d105      	bne.n	8000a60 <HAL_ADC_MspDeInit+0x30>
      __HAL_RCC_ADC_CLK_DISABLE();
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_ADC_MspDeInit+0x94>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a58:	4a1a      	ldr	r2, [pc, #104]	; (8000ac4 <HAL_ADC_MspDeInit+0x94>)
 8000a5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(STEP_UP_FEEDBACK_GPIO_Port, STEP_UP_FEEDBACK_Pin);
 8000a60:	2110      	movs	r1, #16
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f004 fec5 	bl	80057f4 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 fafe 	bl	8005070 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8000a74:	e01d      	b.n	8000ab2 <HAL_ADC_MspDeInit+0x82>
  else if(hadc->Instance==ADC2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <HAL_ADC_MspDeInit+0x98>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d118      	bne.n	8000ab2 <HAL_ADC_MspDeInit+0x82>
    HAL_RCC_ADC_CLK_ENABLED--;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_ADC_MspDeInit+0x90>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_ADC_MspDeInit+0x90>)
 8000a88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==0){
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_ADC_MspDeInit+0x90>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d105      	bne.n	8000a9e <HAL_ADC_MspDeInit+0x6e>
      __HAL_RCC_ADC_CLK_DISABLE();
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_ADC_MspDeInit+0x94>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <HAL_ADC_MspDeInit+0x94>)
 8000a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOA, PEAK_DETECTION_R_Pin|PEAK_DETECTION_L_Pin);
 8000a9e:	21c0      	movs	r1, #192	; 0xc0
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f004 fea6 	bl	80057f4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aac:	4618      	mov	r0, r3
 8000aae:	f004 fadf 	bl	8005070 <HAL_DMA_DeInit>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	50040000 	.word	0x50040000
 8000ac0:	20000570 	.word	0x20000570
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	50040100 	.word	0x50040100

08000acc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a49      	ldr	r2, [pc, #292]	; (8000c00 <HAL_TIM_PWM_MspInit+0x134>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d114      	bne.n	8000b08 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ade:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <HAL_TIM_PWM_MspInit+0x138>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	4a48      	ldr	r2, [pc, #288]	; (8000c04 <HAL_TIM_PWM_MspInit+0x138>)
 8000ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aea:	4b46      	ldr	r3, [pc, #280]	; (8000c04 <HAL_TIM_PWM_MspInit+0x138>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2102      	movs	r1, #2
 8000afa:	2019      	movs	r0, #25
 8000afc:	f004 f9bb 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b00:	2019      	movs	r0, #25
 8000b02:	f004 f9d4 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b06:	e076      	b.n	8000bf6 <HAL_TIM_PWM_MspInit+0x12a>
  else if(htim_pwm->Instance==TIM2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b10:	d171      	bne.n	8000bf6 <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b12:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <HAL_TIM_PWM_MspInit+0x138>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	4a3b      	ldr	r2, [pc, #236]	; (8000c04 <HAL_TIM_PWM_MspInit+0x138>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1e:	4b39      	ldr	r3, [pc, #228]	; (8000c04 <HAL_TIM_PWM_MspInit+0x138>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000b2a:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b2c:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <HAL_TIM_PWM_MspInit+0x140>)
 8000b2e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8000b30:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b32:	2204      	movs	r2, #4
 8000b34:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b36:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b38:	2210      	movs	r2, #16
 8000b3a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3c:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000b42:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b56:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b60:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000b66:	4828      	ldr	r0, [pc, #160]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b68:	f004 f9ca 	bl	8004f00 <HAL_DMA_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 8000b72:	f7ff fe45 	bl	8000800 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8000b7c:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a20      	ldr	r2, [pc, #128]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b86:	631a      	str	r2, [r3, #48]	; 0x30
 8000b88:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000b90:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <HAL_TIM_PWM_MspInit+0x148>)
 8000b92:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bba:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000bc4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000bc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000bca:	4811      	ldr	r0, [pc, #68]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000bcc:	f004 f998 	bl	8004f00 <HAL_DMA_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_TIM_PWM_MspInit+0x10e>
      Error_Handler();
 8000bd6:	f7ff fe13 	bl	8000800 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
 8000be0:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <HAL_TIM_PWM_MspInit+0x144>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2102      	movs	r1, #2
 8000bea:	201c      	movs	r0, #28
 8000bec:	f004 f943 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf0:	201c      	movs	r0, #28
 8000bf2:	f004 f95c 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40012c00 	.word	0x40012c00
 8000c04:	40021000 	.word	0x40021000
 8000c08:	20000348 	.word	0x20000348
 8000c0c:	40020080 	.word	0x40020080
 8000c10:	20000390 	.word	0x20000390
 8000c14:	40020008 	.word	0x40020008

08000c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_TIM_Base_MspInit+0x44>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d113      	bne.n	8000c52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_TIM_Base_MspInit+0x48>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <HAL_TIM_Base_MspInit+0x48>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6593      	str	r3, [r2, #88]	; 0x58
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_TIM_Base_MspInit+0x48>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2102      	movs	r1, #2
 8000c46:	2036      	movs	r0, #54	; 0x36
 8000c48:	f004 f915 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000c4c:	2036      	movs	r0, #54	; 0x36
 8000c4e:	f004 f92e 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40001000 	.word	0x40001000
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_TIM_PWM_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <HAL_TIM_PWM_MspDeInit+0x68>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d109      	bne.n	8000c8a <HAL_TIM_PWM_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c80:	6613      	str	r3, [r2, #96]	; 0x60

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 8000c82:	2019      	movs	r0, #25
 8000c84:	f004 f921 	bl	8004eca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 8000c88:	e01c      	b.n	8000cc4 <HAL_TIM_PWM_MspDeInit+0x60>
  else if(htim_pwm->Instance==TIM2)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c92:	d117      	bne.n	8000cc4 <HAL_TIM_PWM_MspDeInit+0x60>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000c9a:	f023 0301 	bic.w	r3, r3, #1
 8000c9e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC2]);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 f9e3 	bl	8005070 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC4]);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f004 f9de 	bl	8005070 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC3]);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f004 f9d9 	bl	8005070 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8000cbe:	201c      	movs	r0, #28
 8000cc0:	f004 f903 	bl	8004eca <HAL_NVIC_DisableIRQ>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40012c00 	.word	0x40012c00
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b098      	sub	sp, #96	; 0x60
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	2234      	movs	r2, #52	; 0x34
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00b f841 	bl	800bd7c <memset>
  if(huart->Instance==USART1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a6b      	ldr	r2, [pc, #428]	; (8000eac <HAL_UART_MspInit+0x1d8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	f040 8093 	bne.w	8000e2c <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0e:	f107 0318 	add.w	r3, r7, #24
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 fd72 	bl	80067fc <HAL_RCCEx_PeriphCLKConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d1e:	f7ff fd6f 	bl	8000800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d22:	4b63      	ldr	r3, [pc, #396]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	4a62      	ldr	r2, [pc, #392]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2e:	4b60      	ldr	r3, [pc, #384]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b5d      	ldr	r3, [pc, #372]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a5c      	ldr	r2, [pc, #368]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b5a      	ldr	r3, [pc, #360]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_UART_TX_Pin|ST_UART_RX_Pin;
 8000d52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d56:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d64:	2307      	movs	r3, #7
 8000d66:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f004 fbcd 	bl	8005510 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d76:	4b4f      	ldr	r3, [pc, #316]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000d78:	4a4f      	ldr	r2, [pc, #316]	; (8000eb8 <HAL_UART_MspInit+0x1e4>)
 8000d7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000d7c:	4b4d      	ldr	r3, [pc, #308]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000d7e:	2202      	movs	r2, #2
 8000d80:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d82:	4b4c      	ldr	r3, [pc, #304]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d88:	4b4a      	ldr	r3, [pc, #296]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d8e:	4b49      	ldr	r3, [pc, #292]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d94:	4b47      	ldr	r3, [pc, #284]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d9a:	4b46      	ldr	r3, [pc, #280]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000da0:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000da6:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dac:	4841      	ldr	r0, [pc, #260]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000dae:	f004 f8a7 	bl	8004f00 <HAL_DMA_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000db8:	f7ff fd22 	bl	8000800 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3d      	ldr	r2, [pc, #244]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000dc0:	671a      	str	r2, [r3, #112]	; 0x70
 8000dc2:	4a3c      	ldr	r2, [pc, #240]	; (8000eb4 <HAL_UART_MspInit+0x1e0>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000dc8:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000dca:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <HAL_UART_MspInit+0x1ec>)
 8000dcc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dd4:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dda:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000de0:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dec:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000df2:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000dfe:	482f      	ldr	r0, [pc, #188]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000e00:	f004 f87e 	bl	8004f00 <HAL_DMA_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000e0a:	f7ff fcf9 	bl	8000800 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a2a      	ldr	r2, [pc, #168]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000e12:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e14:	4a29      	ldr	r2, [pc, #164]	; (8000ebc <HAL_UART_MspInit+0x1e8>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2025      	movs	r0, #37	; 0x25
 8000e20:	f004 f829 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e24:	2025      	movs	r0, #37	; 0x25
 8000e26:	f004 f842 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e2a:	e03b      	b.n	8000ea4 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <HAL_UART_MspInit+0x1f0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d136      	bne.n	8000ea4 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e36:	2304      	movs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f005 fcda 	bl	80067fc <HAL_RCCEx_PeriphCLKConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8000e4e:	f7ff fcd7 	bl	8000800 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_UART_MspInit+0x1dc>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e94:	2307      	movs	r3, #7
 8000e96:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <HAL_UART_MspInit+0x1f4>)
 8000ea0:	f004 fb36 	bl	8005510 <HAL_GPIO_Init>
}
 8000ea4:	bf00      	nop
 8000ea6:	3760      	adds	r7, #96	; 0x60
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40013800 	.word	0x40013800
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	200004e0 	.word	0x200004e0
 8000eb8:	40020058 	.word	0x40020058
 8000ebc:	20000528 	.word	0x20000528
 8000ec0:	40020044 	.word	0x40020044
 8000ec4:	40004800 	.word	0x40004800
 8000ec8:	48000400 	.word	0x48000400

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f001 fc60 	bl	80027dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STIM_TRIGGER_INPUT_Pin);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f004 fd67 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <DMA1_Channel1_IRQHandler+0x10>)
 8000f36:	f004 fa0c 	bl	8005352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000390 	.word	0x20000390

08000f44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <DMA1_Channel2_IRQHandler+0x10>)
 8000f4a:	f004 fa02 	bl	8005352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000021c 	.word	0x2000021c

08000f58 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <DMA1_Channel4_IRQHandler+0x10>)
 8000f5e:	f004 f9f8 	bl	8005352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000528 	.word	0x20000528

08000f6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Channel5_IRQHandler+0x10>)
 8000f72:	f004 f9ee 	bl	8005352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200004e0 	.word	0x200004e0

08000f80 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Channel7_IRQHandler+0x10>)
 8000f86:	f004 f9e4 	bl	8005352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000348 	.word	0x20000348

08000f94 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <ADC1_2_IRQHandler+0x14>)
 8000f9a:	f002 fb05 	bl	80035a8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <ADC1_2_IRQHandler+0x18>)
 8000fa0:	f002 fb02 	bl	80035a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000010c 	.word	0x2000010c
 8000fac:	20000170 	.word	0x20000170

08000fb0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fb6:	f006 fc03 	bl	80077c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000264 	.word	0x20000264

08000fc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TIM2_IRQHandler+0x10>)
 8000fca:	f006 fbf9 	bl	80077c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200002b0 	.word	0x200002b0

08000fd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <USART1_IRQHandler+0x10>)
 8000fde:	f007 fc95 	bl	800890c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200003d8 	.word	0x200003d8

08000fec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QCC_CTRL0_Pin);
 8000ff0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ff4:	f004 fd00 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QCC_CTRL1_Pin);
 8000ff8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ffc:	f004 fcfc 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM6_IRQHandler+0x10>)
 800100a:	f006 fbd9 	bl	80077c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200002fc 	.word	0x200002fc

08001018 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00a      	b.n	8001040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102a:	f3af 8000 	nop.w
 800102e:	4601      	mov	r1, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf0      	blt.n	800102a <_read+0x12>
  }

  return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107a:	605a      	str	r2, [r3, #4]
  return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_isatty>:

int _isatty(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f00a fe0e 	bl	800bd0c <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000a000 	.word	0x2000a000
 800111c:	000007ff 	.word	0x000007ff
 8001120:	20000574 	.word	0x20000574
 8001124:	200006e0 	.word	0x200006e0

08001128 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <td_Schedule>:

/*
 * POLLING SCHEDULEER :: CALL BY MAIN.C
 * */
void td_Schedule(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0

	btMsg_rcvData_handle();
 8001150:	f000 fb9c 	bl	800188c <btMsg_rcvData_handle>

	if (HAL_GetTick() - schdule_tick >= TD_SCHED_HANDLE_PERIOD)
 8001154:	f001 fb56 	bl	8002804 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <td_Schedule+0x34>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b09      	cmp	r3, #9
 8001162:	d90a      	bls.n	800117a <td_Schedule+0x2e>
	{
		td_Sys_FSM_State_Handle();
 8001164:	f000 f832 	bl	80011cc <td_Sys_FSM_State_Handle>

		/* STIM */
		td_Stim_Param_Update_Handle();
 8001168:	f000 face 	bl	8001708 <td_Stim_Param_Update_Handle>
		td_Stim_Timeout_Handle();
 800116c:	f000 fb52 	bl	8001814 <td_Stim_Timeout_Handle>

		schdule_tick = HAL_GetTick();
 8001170:	f001 fb48 	bl	8002804 <HAL_GetTick>
 8001174:	4603      	mov	r3, r0
 8001176:	4a02      	ldr	r2, [pc, #8]	; (8001180 <td_Schedule+0x34>)
 8001178:	6013      	str	r3, [r2, #0]
	}
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000578 	.word	0x20000578

08001184 <td_Get_Sys_FSM_State>:
	TD_CUR_SYS_STATE = TD_SYS_STATE_MAX;
	td_Set_Sys_FSM_State(TD_SYS_STATE_INIT);
}

td_sys_state_t td_Get_Sys_FSM_State(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	return TD_CUR_SYS_STATE;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <td_Get_Sys_FSM_State+0x14>)
 800118a:	781b      	ldrb	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000057c 	.word	0x2000057c

0800119c <td_Set_Sys_FSM_State_Start>:
	TD_CUR_SYS_STATE = TD_SYS_STATE_IDLE;
	cur_state = TD_SYS_STATE_IDLE;
}

void td_Set_Sys_FSM_State_Start()
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	cur_state = TD_SYS_STATE_RUN;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <td_Set_Sys_FSM_State_Start+0x14>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	2000057d 	.word	0x2000057d

080011b4 <td_Set_Sys_FSM_State_Stop>:

void td_Set_Sys_FSM_State_Stop()
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	cur_state = TD_SYS_STATE_IDLE;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <td_Set_Sys_FSM_State_Stop+0x14>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	2000057d 	.word	0x2000057d

080011cc <td_Sys_FSM_State_Handle>:

void td_Sys_FSM_State_Handle(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
			cur_state = TD_SYS_STATE_IDLE;
		}
	}
#endif

	if (TD_CUR_SYS_STATE != cur_state)
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <td_Sys_FSM_State_Handle+0x20>)
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <td_Sys_FSM_State_Handle+0x24>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d004      	beq.n	80011e6 <td_Sys_FSM_State_Handle+0x1a>
	{
		td_Set_Sys_FSM_State(cur_state);
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <td_Sys_FSM_State_Handle+0x24>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f807 	bl	80011f4 <td_Set_Sys_FSM_State>
#if 0
		td_Btn_Handled_Clear();
#endif
	}
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000057c 	.word	0x2000057c
 80011f0:	2000057d 	.word	0x2000057d

080011f4 <td_Set_Sys_FSM_State>:

void td_Set_Sys_FSM_State(td_sys_state_t state)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]

	if (TD_CUR_SYS_STATE == state || state >= TD_SYS_STATE_MAX)
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <td_Set_Sys_FSM_State+0x74>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	429a      	cmp	r2, r3
 8001206:	d02b      	beq.n	8001260 <td_Set_Sys_FSM_State+0x6c>
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d828      	bhi.n	8001260 <td_Set_Sys_FSM_State+0x6c>
	{
		return;
	}

	switch (state)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d81a      	bhi.n	800124a <td_Set_Sys_FSM_State+0x56>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <td_Set_Sys_FSM_State+0x28>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	0800122d 	.word	0x0800122d
 8001220:	08001235 	.word	0x08001235
 8001224:	08001257 	.word	0x08001257
 8001228:	0800123f 	.word	0x0800123f
	case TD_SYS_STATE_INIT:
		break;
	case TD_SYS_STATE_IDLE:

		/* STIM PAUSE */
		stimLib_stimPause();
 800122c:	f008 fe46 	bl	8009ebc <stimLib_stimPause>

		/* SESSION STOP */
		stimLib_stimSessionStop();
 8001230:	f008 fe00 	bl	8009e34 <stimLib_stimSessionStop>

	case TD_SYS_STATE_RUN:

		/* SESSION START */
		stimLib_stimSessionStart();
 8001234:	f008 fdd2 	bl	8009ddc <stimLib_stimSessionStart>

		/* STIM START */
		stimLib_stimStart();
 8001238:	f008 fe2f 	bl	8009e9a <stimLib_stimStart>

		break;
 800123c:	e00c      	b.n	8001258 <td_Set_Sys_FSM_State+0x64>

	case TD_SYS_STATE_ERROR:
		TD_DEBUG_PRINT(("ERROR TD STATE: %d\n", state));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4619      	mov	r1, r3
 8001242:	480a      	ldr	r0, [pc, #40]	; (800126c <td_Set_Sys_FSM_State+0x78>)
 8001244:	f00a fda2 	bl	800bd8c <iprintf>
		break;
 8001248:	e006      	b.n	8001258 <td_Set_Sys_FSM_State+0x64>

	default:
		/* Cannot be here */
		TD_DEBUG_PRINT(("UNKNOWN TD STATE: %d\n", state));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4619      	mov	r1, r3
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <td_Set_Sys_FSM_State+0x7c>)
 8001250:	f00a fd9c 	bl	800bd8c <iprintf>
		break;
 8001254:	e000      	b.n	8001258 <td_Set_Sys_FSM_State+0x64>
		break;
 8001256:	bf00      	nop
	}
	TD_CUR_SYS_STATE = state;
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <td_Set_Sys_FSM_State+0x74>)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	7013      	strb	r3, [r2, #0]
 800125e:	e000      	b.n	8001262 <td_Set_Sys_FSM_State+0x6e>
		return;
 8001260:	bf00      	nop
}
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000057c 	.word	0x2000057c
 800126c:	0800cee0 	.word	0x0800cee0
 8001270:	0800cef4 	.word	0x0800cef4

08001274 <td_Stim_Is_Started>:

/*
 * PARAMETER CHECK FUNCTION :: PARAMETER
 * */
uint8_t td_Stim_Is_Started(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
	return TD_STIM_ACTIVE;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <td_Stim_Is_Started+0x14>)
 800127a:	79db      	ldrb	r3, [r3, #7]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200005a8 	.word	0x200005a8

0800128c <td_Stim_Cur_Mode_Get>:
uint8_t td_Stim_Cur_Mode_Get(void) // RETURN STIM STATE
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	return TD_STIM_CUR_MODE;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <td_Stim_Cur_Mode_Get+0x14>)
 8001292:	781b      	ldrb	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200005a8 	.word	0x200005a8

080012a4 <td_Stim_Cur_Level_Get>:
uint8_t td_Stim_Cur_Level_Get(void) // RETURN MODE LEVEL
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	return TD_STIM_CUR_LEVEL;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <td_Stim_Cur_Level_Get+0x14>)
 80012aa:	789b      	ldrb	r3, [r3, #2]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200005a8 	.word	0x200005a8

080012bc <td_Stim_Cur_Voltage_Get>:
uint8_t td_Stim_Cur_Voltage_Get(void) // RETURN DAC LEVEL
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	return ex_pulse_data.degree;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <td_Stim_Cur_Voltage_Get+0x14>)
 80012c2:	791b      	ldrb	r3, [r3, #4]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000580 	.word	0x20000580

080012d4 <td_Stim_Cur_Detection_Level_Get>:

/*
 * STIM DETECTION LEVEL CHECK :: PARAMETER
 * */
uint8_t td_Stim_Cur_Detection_Level_Get(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	return TD_STIM_CUR_DETECTOIN_LEVEL;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <td_Stim_Cur_Detection_Level_Get+0x14>)
 80012da:	791b      	ldrb	r3, [r3, #4]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200005a8 	.word	0x200005a8

080012ec <td_Stim_Detection_LV_Check_Is_Active>:
#endif
	return 0;
}

uint8_t td_Stim_Detection_LV_Check_Is_Active(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return (TD_STIM_CUR_DETECTOIN_LEVEL > 0);
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <td_Stim_Detection_LV_Check_Is_Active+0x1c>)
 80012f2:	791b      	ldrb	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	200005a8 	.word	0x200005a8

0800130c <td_Stim_Detection_Level>:

uint8_t td_Stim_Detection_Level(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	return TD_STIM_DETECTION_LEVEL;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <td_Stim_Detection_Level+0x14>)
 8001312:	799b      	ldrb	r3, [r3, #6]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200005a8 	.word	0x200005a8

08001324 <td_Stim_Mode_Config_Update>:

/*
 * MODE CONFIG FUNCTION :: Action : BT_MODE_SET_REQ
 * */
void td_Stim_Mode_Config_Update(uint8_t mode)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	if (mode > TD_STIM_MODE_LAST || TD_STIM_CUR_MODE == mode)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b06      	cmp	r3, #6
 8001332:	d804      	bhi.n	800133e <td_Stim_Mode_Config_Update+0x1a>
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <td_Stim_Mode_Config_Update+0xb8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	429a      	cmp	r2, r3
 800133c:	d105      	bne.n	800134a <td_Stim_Mode_Config_Update+0x26>
	{
		TD_DEBUG_PRINT(("STIM MODE SET IS IGNORED: %d\r\n", mode));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	4619      	mov	r1, r3
 8001342:	4827      	ldr	r0, [pc, #156]	; (80013e0 <td_Stim_Mode_Config_Update+0xbc>)
 8001344:	f00a fd22 	bl	800bd8c <iprintf>
		return;
 8001348:	e044      	b.n	80013d4 <td_Stim_Mode_Config_Update+0xb0>
	}

	/* CHANGE TO NEW MODE */
	TD_RAW_MODE_SET_F = TD_STIM_OP_NORMAL;
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <td_Stim_Mode_Config_Update+0xc0>)
 800134c:	2201      	movs	r2, #1
 800134e:	705a      	strb	r2, [r3, #1]
	TD_RAW_STIM_MODE = mode;
 8001350:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <td_Stim_Mode_Config_Update+0xc0>)
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	70d3      	strb	r3, [r2, #3]

	/* APPLY PULSE FREQ */
	ex_pulse_data.freq = TD_STIM_MODE_CFG_PULSE_FREQ_GET(mode);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4a23      	ldr	r2, [pc, #140]	; (80013e8 <td_Stim_Mode_Config_Update+0xc4>)
 800135a:	5cd2      	ldrb	r2, [r2, r3]
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <td_Stim_Mode_Config_Update+0xc8>)
 800135e:	701a      	strb	r2, [r3, #0]

	/* APPLY GROUP PULSE DATA */
	TD_RAW_GROUP_PULSE_F = TD_STIM_MODE_CFG_GP_ENABLE_GET(mode);
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	4923      	ldr	r1, [pc, #140]	; (80013f0 <td_Stim_Mode_Config_Update+0xcc>)
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	440b      	add	r3, r1
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <td_Stim_Mode_Config_Update+0xc0>)
 8001370:	715a      	strb	r2, [r3, #5]
	TD_RAW_GROUP_PULSE_DISABLE_TIME = TD_STIM_MODE_CFG_GP_OFF_TIME_GET(mode);
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	491e      	ldr	r1, [pc, #120]	; (80013f0 <td_Stim_Mode_Config_Update+0xcc>)
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	440b      	add	r3, r1
 800137e:	3301      	adds	r3, #1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <td_Stim_Mode_Config_Update+0xc0>)
 8001386:	80da      	strh	r2, [r3, #6]
	TD_RAW_GROUP_PULSE_ENABLE_TIME = TD_STIM_MODE_CFG_GP_ON_TIME_GET(mode);
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	4919      	ldr	r1, [pc, #100]	; (80013f0 <td_Stim_Mode_Config_Update+0xcc>)
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	440b      	add	r3, r1
 8001394:	3302      	adds	r3, #2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <td_Stim_Mode_Config_Update+0xc0>)
 800139c:	811a      	strh	r2, [r3, #8]

	/* RESET STIM LEVEL */
	TD_STIM_STATE_LEVEL_UPDATE(0);
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <td_Stim_Mode_Config_Update+0xb8>)
 80013a0:	789a      	ldrb	r2, [r3, #2]
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <td_Stim_Mode_Config_Update+0xb8>)
 80013a4:	70da      	strb	r2, [r3, #3]
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <td_Stim_Mode_Config_Update+0xb8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	709a      	strb	r2, [r3, #2]
	ex_pulse_data.pulse_width = TD_STIM_LEVEL_CFG_PW_GET(0);
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <td_Stim_Mode_Config_Update+0xd0>)
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <td_Stim_Mode_Config_Update+0xc8>)
 80013b2:	805a      	strh	r2, [r3, #2]

#ifdef STIM_LIB_EVKIT_CV
	ex_pulse_data.degree = TD_STIM_LEVEL_CFG_VOLT_GET(0);
#endif
#ifdef STIM_LIB_EVKIT_CC
	ex_pulse_data.degree = TD_STIM_LEVEL_CFG_DAC_GET(0);
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <td_Stim_Mode_Config_Update+0xd0>)
 80013b6:	78da      	ldrb	r2, [r3, #3]
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <td_Stim_Mode_Config_Update+0xc8>)
 80013ba:	711a      	strb	r2, [r3, #4]
#endif

	TD_RAW_STIM_LEVEL = 0;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <td_Stim_Mode_Config_Update+0xc0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	711a      	strb	r2, [r3, #4]

	/* UPDATE MODE */
	TD_STIM_STATE_MODE_UPDATE(mode);
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <td_Stim_Mode_Config_Update+0xb8>)
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <td_Stim_Mode_Config_Update+0xb8>)
 80013c8:	705a      	strb	r2, [r3, #1]
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <td_Stim_Mode_Config_Update+0xb8>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	7013      	strb	r3, [r2, #0]

	/* STIM STOP :: SYSTEM FSM */
	td_Set_Sys_FSM_State_Stop();
 80013d0:	f7ff fef0 	bl	80011b4 <td_Set_Sys_FSM_State_Stop>
}
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200005a8 	.word	0x200005a8
 80013e0:	0800cf0c 	.word	0x0800cf0c
 80013e4:	20000594 	.word	0x20000594
 80013e8:	20000004 	.word	0x20000004
 80013ec:	20000580 	.word	0x20000580
 80013f0:	2000000c 	.word	0x2000000c
 80013f4:	20000024 	.word	0x20000024

080013f8 <td_Stim_Level_Config_Update>:

/*
 * LEVEL CONFIG FUNCTION :: Action : BT_LEVEL_SET_REQ
 * */
void td_Stim_Level_Config_Update(uint8_t level)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	/* Level 0 means to activate stimulation voltage output */
	if (level != 0 && (level > TD_STIM_LEVEL_MAX || TD_STIM_CUR_LEVEL == level))
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00d      	beq.n	8001424 <td_Stim_Level_Config_Update+0x2c>
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b17      	cmp	r3, #23
 800140c:	d804      	bhi.n	8001418 <td_Stim_Level_Config_Update+0x20>
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <td_Stim_Level_Config_Update+0x8c>)
 8001410:	789b      	ldrb	r3, [r3, #2]
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	429a      	cmp	r2, r3
 8001416:	d105      	bne.n	8001424 <td_Stim_Level_Config_Update+0x2c>
	{
		TD_DEBUG_PRINT(("STIM LEVEL SET IS IGNORED: %d\r\n", level));
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	4619      	mov	r1, r3
 800141c:	481a      	ldr	r0, [pc, #104]	; (8001488 <td_Stim_Level_Config_Update+0x90>)
 800141e:	f00a fcb5 	bl	800bd8c <iprintf>
		return;
 8001422:	e02c      	b.n	800147e <td_Stim_Level_Config_Update+0x86>
	}
	TD_RAW_STIM_LEVEL = level;
 8001424:	4a19      	ldr	r2, [pc, #100]	; (800148c <td_Stim_Level_Config_Update+0x94>)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	7113      	strb	r3, [r2, #4]
	ex_pulse_data.pulse_width = TD_STIM_LEVEL_CFG_PW_GET(level);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4a18      	ldr	r2, [pc, #96]	; (8001490 <td_Stim_Level_Config_Update+0x98>)
 800142e:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <td_Stim_Level_Config_Update+0x9c>)
 8001434:	805a      	strh	r2, [r3, #2]
#ifdef STIM_LIB_EVKIT_CV
	ex_pulse_data.degree = TD_STIM_LEVEL_CFG_VOLT_GET(level);
#endif

#ifdef STIM_LIB_EVKIT_CC
	ex_pulse_data.degree = TD_STIM_LEVEL_CFG_DAC_GET(level);
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4a15      	ldr	r2, [pc, #84]	; (8001490 <td_Stim_Level_Config_Update+0x98>)
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	78da      	ldrb	r2, [r3, #3]
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <td_Stim_Level_Config_Update+0x9c>)
 8001442:	711a      	strb	r2, [r3, #4]
#endif

	TD_RAW_PWM_CHANGE_F = 1;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <td_Stim_Level_Config_Update+0x94>)
 8001446:	2201      	movs	r2, #1
 8001448:	709a      	strb	r2, [r3, #2]
	TD_RAW_MODE_SET_F = TD_STIM_OP_NORMAL;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <td_Stim_Level_Config_Update+0x94>)
 800144c:	2201      	movs	r2, #1
 800144e:	705a      	strb	r2, [r3, #1]

	/* UPDATE LEVEL */
	TD_STIM_STATE_LEVEL_UPDATE(level);
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <td_Stim_Level_Config_Update+0x8c>)
 8001452:	789a      	ldrb	r2, [r3, #2]
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <td_Stim_Level_Config_Update+0x8c>)
 8001456:	70da      	strb	r2, [r3, #3]
 8001458:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <td_Stim_Level_Config_Update+0x8c>)
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	7093      	strb	r3, [r2, #2]
	 * 2. session Stop
	 * 3. STIM Parameter Update
	 * 4. session ReStart
	 * 5. stim ReStart
	 * */
	stimLib_stimPause();
 800145e:	f008 fd2d 	bl	8009ebc <stimLib_stimPause>
	stimLib_stimSessionStop();
 8001462:	f008 fce7 	bl	8009e34 <stimLib_stimSessionStop>

	stimLib_stimSignalConfig(&ex_pulse_data);
 8001466:	480b      	ldr	r0, [pc, #44]	; (8001494 <td_Stim_Level_Config_Update+0x9c>)
 8001468:	f008 fc76 	bl	8009d58 <stimLib_stimSignalConfig>

	if (td_Get_Sys_FSM_State() == TD_SYS_STATE_RUN)
 800146c:	f7ff fe8a 	bl	8001184 <td_Get_Sys_FSM_State>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d103      	bne.n	800147e <td_Stim_Level_Config_Update+0x86>
	{
		stimLib_stimSessionStart();
 8001476:	f008 fcb1 	bl	8009ddc <stimLib_stimSessionStart>
		stimLib_stimStart();
 800147a:	f008 fd0e 	bl	8009e9a <stimLib_stimStart>
	}
}
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200005a8 	.word	0x200005a8
 8001488:	0800cf2c 	.word	0x0800cf2c
 800148c:	20000594 	.word	0x20000594
 8001490:	20000024 	.word	0x20000024
 8001494:	20000580 	.word	0x20000580

08001498 <td_Stim_Detection_Check_Start>:

/*
 * STIM DETECTION LEVEL CHECK START
 * */
void td_Stim_Detection_Check_Start(uint8_t level)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	TD_DEBUG_PRINT(("td_Stim_Detection_Check_Start: %d\r\n", level));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4826      	ldr	r0, [pc, #152]	; (8001540 <td_Stim_Detection_Check_Start+0xa8>)
 80014a8:	f00a fc70 	bl	800bd8c <iprintf>

	/* Level 0 means stop electeric detect or reset parameters */
	if (level != 0 && (level > TD_STIM_ELDET_LEVEL_MAX || TD_STIM_CUR_DETECTOIN_LEVEL == level))
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00d      	beq.n	80014ce <td_Stim_Detection_Check_Start+0x36>
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d804      	bhi.n	80014c2 <td_Stim_Detection_Check_Start+0x2a>
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <td_Stim_Detection_Check_Start+0xac>)
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	79fa      	ldrb	r2, [r7, #7]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d105      	bne.n	80014ce <td_Stim_Detection_Check_Start+0x36>
	{
		TD_DEBUG_PRINT(("STIM DETECTION IS IGNORED: %d\r\n", level));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4619      	mov	r1, r3
 80014c6:	4820      	ldr	r0, [pc, #128]	; (8001548 <td_Stim_Detection_Check_Start+0xb0>)
 80014c8:	f00a fc60 	bl	800bd8c <iprintf>
		return;
 80014cc:	e035      	b.n	800153a <td_Stim_Detection_Check_Start+0xa2>
	}

	if (level == 0)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10d      	bne.n	80014f0 <td_Stim_Detection_Check_Start+0x58>
	{
		td_Stim_Control(0);
 80014d4:	2000      	movs	r0, #0
 80014d6:	f000 f899 	bl	800160c <td_Stim_Control>

		if (TD_STIM_PREV_ELDET_LEVEL != 0)
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <td_Stim_Detection_Check_Start+0xac>)
 80014dc:	795b      	ldrb	r3, [r3, #5]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01e      	beq.n	8001520 <td_Stim_Detection_Check_Start+0x88>
		{
			TD_STIM_DETECTION_LEVEL = td_Stim_Cur_Voltage_Get();
 80014e2:	f7ff feeb 	bl	80012bc <td_Stim_Cur_Voltage_Get>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <td_Stim_Detection_Check_Start+0xac>)
 80014ec:	719a      	strb	r2, [r3, #6]
 80014ee:	e017      	b.n	8001520 <td_Stim_Detection_Check_Start+0x88>
		}
	}
	else
	{
		TD_MANUAL_PULSE_FREQ = TD_STIM_ELDET_LEVEL_FREQ;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <td_Stim_Detection_Check_Start+0xb4>)
 80014f2:	220a      	movs	r2, #10
 80014f4:	701a      	strb	r2, [r3, #0]
		TD_MANUAL_PULSE_WIDTH = TD_STIM_ELDET_LEVEL_PW;
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <td_Stim_Detection_Check_Start+0xb4>)
 80014f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80014fc:	805a      	strh	r2, [r3, #2]
		TD_MANUAL_TARGET_VOLTAGE = TD_STIM_ELDET_LEVEL_VOLT;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <td_Stim_Detection_Check_Start+0xb4>)
 8001500:	2228      	movs	r2, #40	; 0x28
 8001502:	711a      	strb	r2, [r3, #4]
		TD_MANUAL_TARGET_DAC = TD_STIM_ELDET_LEVEL_DAC;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <td_Stim_Detection_Check_Start+0xb4>)
 8001506:	2201      	movs	r2, #1
 8001508:	715a      	strb	r2, [r3, #5]
		TD_MANUAL_GP_OFF_TIME = 0;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <td_Stim_Detection_Check_Start+0xb4>)
 800150c:	2200      	movs	r2, #0
 800150e:	719a      	strb	r2, [r3, #6]
		TD_MANUAL_GP_ON_TIME = 0;
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <td_Stim_Detection_Check_Start+0xb4>)
 8001512:	2200      	movs	r2, #0
 8001514:	71da      	strb	r2, [r3, #7]

		td_Stim_Manual_Mode_Start();
 8001516:	f000 f81d 	bl	8001554 <td_Stim_Manual_Mode_Start>

		TD_STIM_DETECTION_LEVEL = 0;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <td_Stim_Detection_Check_Start+0xac>)
 800151c:	2200      	movs	r2, #0
 800151e:	719a      	strb	r2, [r3, #6]
	}

	TD_STIM_STATE_ELDT_LEVEL_UPDATE(level);
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <td_Stim_Detection_Check_Start+0xac>)
 8001522:	791a      	ldrb	r2, [r3, #4]
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <td_Stim_Detection_Check_Start+0xac>)
 8001526:	715a      	strb	r2, [r3, #5]
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <td_Stim_Detection_Check_Start+0xac>)
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	7113      	strb	r3, [r2, #4]

	TD_DEBUG_PRINT(("STIM DETECTION LV: %d\r\n", TD_STIM_CUR_DETECTOIN_LEVEL));
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <td_Stim_Detection_Check_Start+0xac>)
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	4619      	mov	r1, r3
 8001534:	4806      	ldr	r0, [pc, #24]	; (8001550 <td_Stim_Detection_Check_Start+0xb8>)
 8001536:	f00a fc29 	bl	800bd8c <iprintf>
}
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	0800cf4c 	.word	0x0800cf4c
 8001544:	200005a8 	.word	0x200005a8
 8001548:	0800cf70 	.word	0x0800cf70
 800154c:	200005a0 	.word	0x200005a0
 8001550:	0800cf90 	.word	0x0800cf90

08001554 <td_Stim_Manual_Mode_Start>:

/*
 * MANUAL MODE START
 * */
void td_Stim_Manual_Mode_Start(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	/* Change to new mode */
	TD_RAW_MODE_SET_F = TD_STIM_OP_NORMAL;
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <td_Stim_Manual_Mode_Start+0xa8>)
 800155a:	2201      	movs	r2, #1
 800155c:	705a      	strb	r2, [r3, #1]
	TD_RAW_STIM_MODE = TD_MANUAL_MODE;
 800155e:	4b27      	ldr	r3, [pc, #156]	; (80015fc <td_Stim_Manual_Mode_Start+0xa8>)
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	70da      	strb	r2, [r3, #3]

	/* Apply group pulse */
	if (TD_MANUAL_GP_OFF_TIME == 0 || TD_MANUAL_GP_ON_TIME == 0)
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <td_Stim_Manual_Mode_Start+0xac>)
 8001566:	799b      	ldrb	r3, [r3, #6]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <td_Stim_Manual_Mode_Start+0x20>
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <td_Stim_Manual_Mode_Start+0xac>)
 800156e:	79db      	ldrb	r3, [r3, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <td_Stim_Manual_Mode_Start+0x34>
	{
		TD_RAW_GROUP_PULSE_F = 0;
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <td_Stim_Manual_Mode_Start+0xa8>)
 8001576:	2200      	movs	r2, #0
 8001578:	715a      	strb	r2, [r3, #5]
		TD_RAW_GROUP_PULSE_DISABLE_TIME = 0;
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <td_Stim_Manual_Mode_Start+0xa8>)
 800157c:	2200      	movs	r2, #0
 800157e:	80da      	strh	r2, [r3, #6]
		TD_RAW_GROUP_PULSE_ENABLE_TIME = 0;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <td_Stim_Manual_Mode_Start+0xa8>)
 8001582:	2200      	movs	r2, #0
 8001584:	811a      	strh	r2, [r3, #8]
 8001586:	e00c      	b.n	80015a2 <td_Stim_Manual_Mode_Start+0x4e>
	}
	else
	{
		TD_RAW_GROUP_PULSE_F = 1;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <td_Stim_Manual_Mode_Start+0xa8>)
 800158a:	2201      	movs	r2, #1
 800158c:	715a      	strb	r2, [r3, #5]
		TD_RAW_GROUP_PULSE_DISABLE_TIME = TD_MANUAL_GP_OFF_TIME;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <td_Stim_Manual_Mode_Start+0xac>)
 8001590:	799b      	ldrb	r3, [r3, #6]
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <td_Stim_Manual_Mode_Start+0xa8>)
 8001596:	80da      	strh	r2, [r3, #6]
		TD_RAW_GROUP_PULSE_ENABLE_TIME = TD_MANUAL_GP_ON_TIME;
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <td_Stim_Manual_Mode_Start+0xac>)
 800159a:	79db      	ldrb	r3, [r3, #7]
 800159c:	b29a      	uxth	r2, r3
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <td_Stim_Manual_Mode_Start+0xa8>)
 80015a0:	811a      	strh	r2, [r3, #8]
	}

	/* APPLY PWM FREQ, PULSE WIDTH, STEP UP TARGET VOLTAGE, TARGET CURRENT */
	ex_pulse_data.freq = TD_MANUAL_PULSE_FREQ;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <td_Stim_Manual_Mode_Start+0xac>)
 80015a4:	781a      	ldrb	r2, [r3, #0]
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <td_Stim_Manual_Mode_Start+0xb0>)
 80015a8:	701a      	strb	r2, [r3, #0]
	ex_pulse_data.pulse_width = TD_MANUAL_PULSE_WIDTH;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <td_Stim_Manual_Mode_Start+0xac>)
 80015ac:	885a      	ldrh	r2, [r3, #2]
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <td_Stim_Manual_Mode_Start+0xb0>)
 80015b0:	805a      	strh	r2, [r3, #2]
#ifdef STIM_LIB_EVKIT_CV
	ex_pulse_data.degree = TD_MANUAL_TARGET_VOLTAGE;
#endif

#ifdef STIM_LIB_EVKIT_CC
	ex_pulse_data.degree = TD_MANUAL_TARGET_DAC;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <td_Stim_Manual_Mode_Start+0xac>)
 80015b4:	795a      	ldrb	r2, [r3, #5]
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <td_Stim_Manual_Mode_Start+0xb0>)
 80015b8:	711a      	strb	r2, [r3, #4]
#endif
	stimLib_stimSignalConfig(&ex_pulse_data);
 80015ba:	4812      	ldr	r0, [pc, #72]	; (8001604 <td_Stim_Manual_Mode_Start+0xb0>)
 80015bc:	f008 fbcc 	bl	8009d58 <stimLib_stimSignalConfig>

	TD_RAW_PWM_CHANGE_F = 1;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <td_Stim_Manual_Mode_Start+0xa8>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	709a      	strb	r2, [r3, #2]

	/* Update stimulation state */
	TD_STIM_ACTIVE_CHNAGE(TD_SYS_STATE_RUN);
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <td_Stim_Manual_Mode_Start+0xb4>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	71da      	strb	r2, [r3, #7]
 80015cc:	2001      	movs	r0, #1
 80015ce:	f000 f8fd 	bl	80017cc <td_Stim_Timeout_Ctrl>

	/* Reset current mode */
	TD_STIM_STATE_MODE_UPDATE(0);
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <td_Stim_Manual_Mode_Start+0xb4>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <td_Stim_Manual_Mode_Start+0xb4>)
 80015d8:	705a      	strb	r2, [r3, #1]
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <td_Stim_Manual_Mode_Start+0xb4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

	/* Reset current level */
	TD_STIM_STATE_LEVEL_UPDATE(0);
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <td_Stim_Manual_Mode_Start+0xb4>)
 80015e2:	789a      	ldrb	r2, [r3, #2]
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <td_Stim_Manual_Mode_Start+0xb4>)
 80015e6:	70da      	strb	r2, [r3, #3]
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <td_Stim_Manual_Mode_Start+0xb4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	709a      	strb	r2, [r3, #2]
	TD_RAW_STIM_LEVEL = 0;
 80015ee:	4b03      	ldr	r3, [pc, #12]	; (80015fc <td_Stim_Manual_Mode_Start+0xa8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	711a      	strb	r2, [r3, #4]

	/* STIM START :: SYSTEM FSM */
	td_Set_Sys_FSM_State_Start();
 80015f4:	f7ff fdd2 	bl	800119c <td_Set_Sys_FSM_State_Start>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000594 	.word	0x20000594
 8001600:	200005a0 	.word	0x200005a0
 8001604:	20000580 	.word	0x20000580
 8001608:	200005a8 	.word	0x200005a8

0800160c <td_Stim_Control>:

/*
 * BLE STIM PARAMETER CONTROL FUNCTION
 * */
void td_Stim_Control(uint8_t start)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
	TD_DEBUG_PRINT(("td_Stim_Control: %d\r\n", start));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4619      	mov	r1, r3
 800161a:	4833      	ldr	r0, [pc, #204]	; (80016e8 <td_Stim_Control+0xdc>)
 800161c:	f00a fbb6 	bl	800bd8c <iprintf>

	/* IF STOPPING, ANYWAY STOP STIMUALTIONS */
	if (start != 0 && TD_STIM_ACTIVE == start)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <td_Stim_Control+0x32>
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <td_Stim_Control+0xe0>)
 8001628:	79db      	ldrb	r3, [r3, #7]
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	429a      	cmp	r2, r3
 800162e:	d106      	bne.n	800163e <td_Stim_Control+0x32>
	{
		TD_DEBUG_PRINT(("THE SAME STIM The same STIM state: %d\r\n", TD_STIM_ACTIVE));
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <td_Stim_Control+0xe0>)
 8001632:	79db      	ldrb	r3, [r3, #7]
 8001634:	4619      	mov	r1, r3
 8001636:	482e      	ldr	r0, [pc, #184]	; (80016f0 <td_Stim_Control+0xe4>)
 8001638:	f00a fba8 	bl	800bd8c <iprintf>
		return;
 800163c:	e051      	b.n	80016e2 <td_Stim_Control+0xd6>
	}

	if (start == 0)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d13f      	bne.n	80016c4 <td_Stim_Control+0xb8>
	{
		/* STOP ALL ACTIVITIES */
		TD_DEBUG_PRINT(("STOP\r\n"));
 8001644:	482b      	ldr	r0, [pc, #172]	; (80016f4 <td_Stim_Control+0xe8>)
 8001646:	f00a fc3d 	bl	800bec4 <puts>

		/* RESET ELECT DETECT */
		TD_STIM_DETECTION_LEVEL = 0; /* RESET CURRENT STIM LEVEL ALWAYS */
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <td_Stim_Control+0xe0>)
 800164c:	2200      	movs	r2, #0
 800164e:	719a      	strb	r2, [r3, #6]

		if (td_Stim_Detection_LV_Check_Is_Active() == true)
 8001650:	f7ff fe4c 	bl	80012ec <td_Stim_Detection_LV_Check_Is_Active>
 8001654:	4603      	mov	r3, r0
 8001656:	2b01      	cmp	r3, #1
 8001658:	d106      	bne.n	8001668 <td_Stim_Control+0x5c>
		{
			TD_STIM_STATE_ELDT_LEVEL_UPDATE(0);
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <td_Stim_Control+0xe0>)
 800165c:	791a      	ldrb	r2, [r3, #4]
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <td_Stim_Control+0xe0>)
 8001660:	715a      	strb	r2, [r3, #5]
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <td_Stim_Control+0xe0>)
 8001664:	2200      	movs	r2, #0
 8001666:	711a      	strb	r2, [r3, #4]
		}

		/* DEFAULT MODE SET IS 1 */
		TD_RAW_MODE_SET_F = TD_STIM_OP_NORMAL;
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <td_Stim_Control+0xec>)
 800166a:	2201      	movs	r2, #1
 800166c:	705a      	strb	r2, [r3, #1]

		/* RESET STIM LEVEL */
		TD_STIM_STATE_LEVEL_UPDATE(0);
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <td_Stim_Control+0xe0>)
 8001670:	789a      	ldrb	r2, [r3, #2]
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <td_Stim_Control+0xe0>)
 8001674:	70da      	strb	r2, [r3, #3]
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <td_Stim_Control+0xe0>)
 8001678:	2200      	movs	r2, #0
 800167a:	709a      	strb	r2, [r3, #2]

		/* PARAMETER LOAD */
		ex_pulse_data.pulse_width = TD_STIM_LEVEL_CFG_PW_GET(0);
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <td_Stim_Control+0xf0>)
 800167e:	881a      	ldrh	r2, [r3, #0]
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <td_Stim_Control+0xf4>)
 8001682:	805a      	strh	r2, [r3, #2]
#ifdef STIM_LIB_EVKIT_CV
		ex_pulse_data.degree = TD_STIM_LEVEL_CFG_VOLT_GET(0);
#endif
#ifdef STIM_LIB_EVKIT_CC
		ex_pulse_data.degree = TD_STIM_LEVEL_CFG_DAC_GET(0);
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <td_Stim_Control+0xf0>)
 8001686:	78da      	ldrb	r2, [r3, #3]
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <td_Stim_Control+0xf4>)
 800168a:	711a      	strb	r2, [r3, #4]
#endif
		TD_RAW_STIM_LEVEL = 0;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <td_Stim_Control+0xec>)
 800168e:	2200      	movs	r2, #0
 8001690:	711a      	strb	r2, [r3, #4]

		/* STIM STOP :: SYSTEM FSM */
		td_Set_Sys_FSM_State_Stop();
 8001692:	f7ff fd8f 	bl	80011b4 <td_Set_Sys_FSM_State_Stop>
		stimLib_stimSignalConfig(&ex_pulse_data);
 8001696:	481a      	ldr	r0, [pc, #104]	; (8001700 <td_Stim_Control+0xf4>)
 8001698:	f008 fb5e 	bl	8009d58 <stimLib_stimSignalConfig>

		/* GROUP PULSE SETTING */
		TD_RAW_GROUP_PULSE_F = 0;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <td_Stim_Control+0xec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	715a      	strb	r2, [r3, #5]
		TD_RAW_GROUP_PULSE_DISABLE_TIME = 0;
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <td_Stim_Control+0xec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	80da      	strh	r2, [r3, #6]
		TD_RAW_GROUP_PULSE_ENABLE_TIME = 0;
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <td_Stim_Control+0xec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	811a      	strh	r2, [r3, #8]

		TD_RAW_STIM_MODE = 0;
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <td_Stim_Control+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	70da      	strb	r2, [r3, #3]
		TD_STIM_STATE_MODE_UPDATE(0);
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <td_Stim_Control+0xe0>)
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <td_Stim_Control+0xe0>)
 80016ba:	705a      	strb	r2, [r3, #1]
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <td_Stim_Control+0xe0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e007      	b.n	80016d4 <td_Stim_Control+0xc8>
	}

	else if (start == 1)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d104      	bne.n	80016d4 <td_Stim_Control+0xc8>
	{
		TD_DEBUG_PRINT(("START\r\n"));
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <td_Stim_Control+0xf8>)
 80016cc:	f00a fbfa 	bl	800bec4 <puts>
#endif

		stimLib_stimSignalConfig(&ex_pulse_data);
#endif
		/* STIM STOP :: SYSTEM FSM */
		td_Set_Sys_FSM_State_Start();
 80016d0:	f7ff fd64 	bl	800119c <td_Set_Sys_FSM_State_Start>
	}
	TD_STIM_ACTIVE_CHNAGE(start);
 80016d4:	4a05      	ldr	r2, [pc, #20]	; (80016ec <td_Stim_Control+0xe0>)
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	71d3      	strb	r3, [r2, #7]
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f875 	bl	80017cc <td_Stim_Timeout_Ctrl>
}
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	0800cfa8 	.word	0x0800cfa8
 80016ec:	200005a8 	.word	0x200005a8
 80016f0:	0800cfc0 	.word	0x0800cfc0
 80016f4:	0800cfe8 	.word	0x0800cfe8
 80016f8:	20000594 	.word	0x20000594
 80016fc:	20000024 	.word	0x20000024
 8001700:	20000580 	.word	0x20000580
 8001704:	0800cff0 	.word	0x0800cff0

08001708 <td_Stim_Param_Update_Handle>:

/*
 * PARAMETER CONTROL FUNCTION
 * */
void td_Stim_Param_Update_Handle(void)
{
 8001708:	b598      	push	{r3, r4, r7, lr}
 800170a:	af00      	add	r7, sp, #0
	/* Send state change ind */
	if (TD_STIM_ACTIVE != td_Get_Sys_FSM_State() || TD_STIM_CUR_MODE != TD_RAW_STIM_MODE || TD_STIM_CUR_LEVEL != TD_RAW_STIM_LEVEL /*|| ElecDetEndFlag == 1*/)
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 800170e:	79dc      	ldrb	r4, [r3, #7]
 8001710:	f7ff fd38 	bl	8001184 <td_Get_Sys_FSM_State>
 8001714:	4603      	mov	r3, r0
 8001716:	429c      	cmp	r4, r3
 8001718:	d10b      	bne.n	8001732 <td_Stim_Param_Update_Handle+0x2a>
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <td_Stim_Param_Update_Handle+0xb0>)
 8001720:	78db      	ldrb	r3, [r3, #3]
 8001722:	429a      	cmp	r2, r3
 8001724:	d105      	bne.n	8001732 <td_Stim_Param_Update_Handle+0x2a>
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 8001728:	789a      	ldrb	r2, [r3, #2]
 800172a:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <td_Stim_Param_Update_Handle+0xb0>)
 800172c:	791b      	ldrb	r3, [r3, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d03d      	beq.n	80017ae <td_Stim_Param_Update_Handle+0xa6>
	{
		TD_DEBUG_PRINT(("STIM STATE CHANGE\r\n"));
 8001732:	4822      	ldr	r0, [pc, #136]	; (80017bc <td_Stim_Param_Update_Handle+0xb4>)
 8001734:	f00a fbc6 	bl	800bec4 <puts>

		TD_DEBUG_PRINT(("START: %d >> %d\r\n", TD_STIM_ACTIVE, td_Get_Sys_FSM_State()));
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 800173a:	79db      	ldrb	r3, [r3, #7]
 800173c:	461c      	mov	r4, r3
 800173e:	f7ff fd21 	bl	8001184 <td_Get_Sys_FSM_State>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4621      	mov	r1, r4
 8001748:	481d      	ldr	r0, [pc, #116]	; (80017c0 <td_Stim_Param_Update_Handle+0xb8>)
 800174a:	f00a fb1f 	bl	800bd8c <iprintf>
		TD_DEBUG_PRINT(("MODE: %d >> %d\r\n", TD_STIM_CUR_MODE, TD_RAW_STIM_MODE));
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <td_Stim_Param_Update_Handle+0xb0>)
 8001756:	78db      	ldrb	r3, [r3, #3]
 8001758:	461a      	mov	r2, r3
 800175a:	481a      	ldr	r0, [pc, #104]	; (80017c4 <td_Stim_Param_Update_Handle+0xbc>)
 800175c:	f00a fb16 	bl	800bd8c <iprintf>
		TD_DEBUG_PRINT(("LEVLE: %d >> %d\r\n", TD_STIM_CUR_LEVEL, TD_RAW_STIM_LEVEL));
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 8001762:	789b      	ldrb	r3, [r3, #2]
 8001764:	4619      	mov	r1, r3
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <td_Stim_Param_Update_Handle+0xb0>)
 8001768:	791b      	ldrb	r3, [r3, #4]
 800176a:	461a      	mov	r2, r3
 800176c:	4816      	ldr	r0, [pc, #88]	; (80017c8 <td_Stim_Param_Update_Handle+0xc0>)
 800176e:	f00a fb0d 	bl	800bd8c <iprintf>
		/* TD_DEBUG_PRINT(("El Det: %d\n", ElecDetFlag)); */

		TD_STIM_ACTIVE_CHNAGE(td_Get_Sys_FSM_State());
 8001772:	f7ff fd07 	bl	8001184 <td_Get_Sys_FSM_State>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 800177c:	71da      	strb	r2, [r3, #7]
 800177e:	f7ff fd01 	bl	8001184 <td_Get_Sys_FSM_State>
 8001782:	4603      	mov	r3, r0
 8001784:	4618      	mov	r0, r3
 8001786:	f000 f821 	bl	80017cc <td_Stim_Timeout_Ctrl>
		TD_STIM_STATE_MODE_UPDATE(TD_RAW_STIM_MODE);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 800178c:	781a      	ldrb	r2, [r3, #0]
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 8001790:	705a      	strb	r2, [r3, #1]
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <td_Stim_Param_Update_Handle+0xb0>)
 8001794:	78da      	ldrb	r2, [r3, #3]
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 8001798:	701a      	strb	r2, [r3, #0]
		TD_STIM_STATE_LEVEL_UPDATE(TD_RAW_STIM_LEVEL);
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 800179c:	789a      	ldrb	r2, [r3, #2]
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 80017a0:	70da      	strb	r2, [r3, #3]
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <td_Stim_Param_Update_Handle+0xb0>)
 80017a4:	791a      	ldrb	r2, [r3, #4]
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <td_Stim_Param_Update_Handle+0xac>)
 80017a8:	709a      	strb	r2, [r3, #2]
		 if (ElecDetEndFlag == 1)
		 {
		 TD_STIM_STATE_ELDT_LEVEL_UPDATE(0);
		 }
		 */
		bt_state_ind();
 80017aa:	f000 fcbb 	bl	8002124 <bt_state_ind>
	}
}
 80017ae:	bf00      	nop
 80017b0:	bd98      	pop	{r3, r4, r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200005a8 	.word	0x200005a8
 80017b8:	20000594 	.word	0x20000594
 80017bc:	0800cff8 	.word	0x0800cff8
 80017c0:	0800d00c 	.word	0x0800d00c
 80017c4:	0800d020 	.word	0x0800d020
 80017c8:	0800d034 	.word	0x0800d034

080017cc <td_Stim_Timeout_Ctrl>:
	td_Stim_Control(0);
	bt_state_ind();
}

void td_Stim_Timeout_Ctrl(uint8_t start)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
	if (TD_STIM_TIMEOUT_STARTED != start)
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <td_Stim_Timeout_Ctrl+0x40>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d010      	beq.n	8001804 <td_Stim_Timeout_Ctrl+0x38>
	{
		TD_STIM_TIMEOUT_CNT = 0;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <td_Stim_Timeout_Ctrl+0x40>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	805a      	strh	r2, [r3, #2]
		TD_STIM_TIMEOUT_STARTED = start;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bf14      	ite	ne
 80017ee:	2301      	movne	r3, #1
 80017f0:	2300      	moveq	r3, #0
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <td_Stim_Timeout_Ctrl+0x40>)
 80017f6:	701a      	strb	r2, [r3, #0]
		TD_DEBUG_PRINT(("STIM TIMEOUT: %d\r\n", TD_STIM_TIMEOUT_STARTED));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <td_Stim_Timeout_Ctrl+0x40>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	4804      	ldr	r0, [pc, #16]	; (8001810 <td_Stim_Timeout_Ctrl+0x44>)
 8001800:	f00a fac4 	bl	800bd8c <iprintf>
	}
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200005b0 	.word	0x200005b0
 8001810:	0800d048 	.word	0x0800d048

08001814 <td_Stim_Timeout_Handle>:

void td_Stim_Timeout_Handle(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	if (TD_STIM_TIMEOUT_STARTED == true && TD_STIM_TIMEOUT_CNT <= TD_STIM_TIMEOUT_THRESHOLD_VALUE)
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <td_Stim_Timeout_Handle+0x24>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <td_Stim_Timeout_Handle+0x18>
	{
		TD_STIM_TIMEOUT_CNT++;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <td_Stim_Timeout_Handle+0x24>)
 8001822:	885b      	ldrh	r3, [r3, #2]
 8001824:	3301      	adds	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <td_Stim_Timeout_Handle+0x24>)
 800182a:	805a      	strh	r2, [r3, #2]
		{
			TD_DEBUG_PRINT(("STIM TIMEOUT: STOP\r\n"));
			td_Stim_Force_Stop();
		}
	}
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	200005b0 	.word	0x200005b0

0800183c <bt_msg_rcv_data_init_INLINE>:
} bt_msg_rcv_state_t;

bt_msg_rcv_state_t gBtMsgState;

static __INLINE void bt_msg_rcv_data_init_INLINE(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	for (BT_MSG_RCV_IX = 0; BT_MSG_RCV_IX < BT_MSG_SIZE_MAX; BT_MSG_RCV_IX++)
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <bt_msg_rcv_data_init_INLINE+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e00c      	b.n	8001862 <bt_msg_rcv_data_init_INLINE+0x26>
	{
		BT_MSG_RCV_BUF[BT_MSG_RCV_IX] = 0;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <bt_msg_rcv_data_init_INLINE+0x40>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <bt_msg_rcv_data_init_INLINE+0x40>)
 8001850:	4413      	add	r3, r2
 8001852:	2200      	movs	r2, #0
 8001854:	705a      	strb	r2, [r3, #1]
	for (BT_MSG_RCV_IX = 0; BT_MSG_RCV_IX < BT_MSG_SIZE_MAX; BT_MSG_RCV_IX++)
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <bt_msg_rcv_data_init_INLINE+0x40>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <bt_msg_rcv_data_init_INLINE+0x40>)
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <bt_msg_rcv_data_init_INLINE+0x40>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b13      	cmp	r3, #19
 8001868:	d9ee      	bls.n	8001848 <bt_msg_rcv_data_init_INLINE+0xc>
	}

	BT_MSG_RCV_IX = 0;
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <bt_msg_rcv_data_init_INLINE+0x40>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	200005b4 	.word	0x200005b4

08001880 <btMsg_init>:

static void bt_msg_handle(uint8 *msg);

void btMsg_init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	bt_msg_rcv_data_init_INLINE();
 8001884:	f7ff ffda 	bl	800183c <bt_msg_rcv_data_init_INLINE>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <btMsg_rcvData_handle>:

void btMsg_rcvData_handle(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	static uint8 st_msg_rcv_data_len;
	uint8 i;

	do
	{
		st_msg_rcv_data_len = tdUart1Q_getData(st_msg_rcv_data,
 8001892:	2114      	movs	r1, #20
 8001894:	482f      	ldr	r0, [pc, #188]	; (8001954 <btMsg_rcvData_handle+0xc8>)
 8001896:	f000 fe4d 	bl	8002534 <tdUart1Q_getData>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <btMsg_rcvData_handle+0xcc>)
 80018a0:	701a      	strb	r2, [r3, #0]
		BT_MSG_RCV_BUF_SIZE);
		i = BT_MSG_RCV_BUF_SIZE;
 80018a2:	2314      	movs	r3, #20
 80018a4:	71fb      	strb	r3, [r7, #7]

		if (st_msg_rcv_data_len > 0)
 80018a6:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <btMsg_rcvData_handle+0xcc>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d02b      	beq.n	8001906 <btMsg_rcvData_handle+0x7a>
		{
			i = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	71fb      	strb	r3, [r7, #7]

			/* Refresh buffer flush timeout */
			BT_MSG_RCV_FLUSH_CHK_TIME = HAL_GetTick();
 80018b2:	f000 ffa7 	bl	8002804 <HAL_GetTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a28      	ldr	r2, [pc, #160]	; (800195c <btMsg_rcvData_handle+0xd0>)
 80018ba:	6193      	str	r3, [r2, #24]
		}

		while (st_msg_rcv_data_len > i)
 80018bc:	e023      	b.n	8001906 <btMsg_rcvData_handle+0x7a>
		{
			if ((st_msg_rcv_data[i] == BT_MSG_START_CODE) || BT_MSG_RCV_IX != 0)
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	4a24      	ldr	r2, [pc, #144]	; (8001954 <btMsg_rcvData_handle+0xc8>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	2bef      	cmp	r3, #239	; 0xef
 80018c6:	d003      	beq.n	80018d0 <btMsg_rcvData_handle+0x44>
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <btMsg_rcvData_handle+0xd0>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d01a      	beq.n	8001906 <btMsg_rcvData_handle+0x7a>
			{
				BT_MSG_RCV_BUF[BT_MSG_RCV_IX] = st_msg_rcv_data[i];
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	4a22      	ldr	r2, [pc, #136]	; (800195c <btMsg_rcvData_handle+0xd0>)
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <btMsg_rcvData_handle+0xc8>)
 80018da:	5cd2      	ldrb	r2, [r2, r3]
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <btMsg_rcvData_handle+0xd0>)
 80018de:	440b      	add	r3, r1
 80018e0:	705a      	strb	r2, [r3, #1]
				BT_MSG_RCV_IX++;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <btMsg_rcvData_handle+0xd0>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <btMsg_rcvData_handle+0xd0>)
 80018ec:	701a      	strb	r2, [r3, #0]
				i++;
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	3301      	adds	r3, #1
 80018f2:	71fb      	strb	r3, [r7, #7]

				if (BT_MSG_RCV_IX == BT_MSG_RCV_BUF_SIZE)
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <btMsg_rcvData_handle+0xd0>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b14      	cmp	r3, #20
 80018fa:	d104      	bne.n	8001906 <btMsg_rcvData_handle+0x7a>
				{
					bt_msg_handle(BT_MSG_RCV_BUF);
 80018fc:	4818      	ldr	r0, [pc, #96]	; (8001960 <btMsg_rcvData_handle+0xd4>)
 80018fe:	f000 f833 	bl	8001968 <bt_msg_handle>

					bt_msg_rcv_data_init_INLINE();
 8001902:	f7ff ff9b 	bl	800183c <bt_msg_rcv_data_init_INLINE>
		while (st_msg_rcv_data_len > i)
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <btMsg_rcvData_handle+0xcc>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3d6      	bcc.n	80018be <btMsg_rcvData_handle+0x32>
				}
			}
		}

	} while (st_msg_rcv_data_len > 0);
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <btMsg_rcvData_handle+0xcc>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1bc      	bne.n	8001892 <btMsg_rcvData_handle+0x6>

	if (BT_MSG_RCV_IX > 0)
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <btMsg_rcvData_handle+0xd0>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d015      	beq.n	800194c <btMsg_rcvData_handle+0xc0>
	{
		/* Check flush timeout */
		if (HAL_GetTick() - BT_MSG_RCV_FLUSH_CHK_TIME > BT_MSG_RCV_FLUSH_TIMEOUT)
 8001920:	f000 ff70 	bl	8002804 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <btMsg_rcvData_handle+0xd0>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d90b      	bls.n	800194c <btMsg_rcvData_handle+0xc0>
		{
			TD_DEBUG_PRINT(("BT_MSG: Flush timeout\n"));
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <btMsg_rcvData_handle+0xd8>)
 8001936:	f00a fac5 	bl	800bec4 <puts>
			TD_DEBUG_PRINT_DATA_HEX(BT_MSG_RCV_BUF, BT_MSG_RCV_IX);
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <btMsg_rcvData_handle+0xd0>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4619      	mov	r1, r3
 8001942:	4807      	ldr	r0, [pc, #28]	; (8001960 <btMsg_rcvData_handle+0xd4>)
 8001944:	f000 fe5c 	bl	8002600 <tdDebugPrintHex>

			bt_msg_rcv_data_init_INLINE();
 8001948:	f7ff ff78 	bl	800183c <bt_msg_rcv_data_init_INLINE>
		}
	}

}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200005d4 	.word	0x200005d4
 8001958:	200005e8 	.word	0x200005e8
 800195c:	200005b4 	.word	0x200005b4
 8001960:	200005b5 	.word	0x200005b5
 8001964:	0800d05c 	.word	0x0800d05c

08001968 <bt_msg_handle>:

static void bt_msg_handle(uint8 *msg)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	if (msg == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d079      	beq.n	8001a6a <bt_msg_handle+0x102>
		return;

	switch (msg[BT_MSG_TYPE_IX])
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3301      	adds	r3, #1
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3b01      	subs	r3, #1
 800197e:	2b0b      	cmp	r3, #11
 8001980:	d863      	bhi.n	8001a4a <bt_msg_handle+0xe2>
 8001982:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <bt_msg_handle+0x20>)
 8001984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001988:	080019b9 	.word	0x080019b9
 800198c:	08001a4b 	.word	0x08001a4b
 8001990:	080019c7 	.word	0x080019c7
 8001994:	080019d5 	.word	0x080019d5
 8001998:	080019e3 	.word	0x080019e3
 800199c:	080019f1 	.word	0x080019f1
 80019a0:	080019ff 	.word	0x080019ff
 80019a4:	08001a0d 	.word	0x08001a0d
 80019a8:	08001a19 	.word	0x08001a19
 80019ac:	08001a25 	.word	0x08001a25
 80019b0:	08001a31 	.word	0x08001a31
 80019b4:	08001a3d 	.word	0x08001a3d
	{
	case BT_STATE_REQ:
		TD_DEBUG_PRINT(("BT_STATE_REQ\n"));
 80019b8:	482e      	ldr	r0, [pc, #184]	; (8001a74 <bt_msg_handle+0x10c>)
 80019ba:	f00a fa83 	bl	800bec4 <puts>
		bt_state_req(msg);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f870 	bl	8001aa4 <bt_state_req>
		break;
 80019c4:	e052      	b.n	8001a6c <bt_msg_handle+0x104>

	case BT_MODE_SET_REQ:
		TD_DEBUG_PRINT(("BT_MODE_SET_REQ\n"));
 80019c6:	482c      	ldr	r0, [pc, #176]	; (8001a78 <bt_msg_handle+0x110>)
 80019c8:	f00a fa7c 	bl	800bec4 <puts>
		bt_mode_set_req(msg);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f879 	bl	8001ac4 <bt_mode_set_req>
		break;
 80019d2:	e04b      	b.n	8001a6c <bt_msg_handle+0x104>

	case BT_LEVEL_SET_REQ:
		TD_DEBUG_PRINT(("BT_LEVEL_SET_REQ\n"));
 80019d4:	4829      	ldr	r0, [pc, #164]	; (8001a7c <bt_msg_handle+0x114>)
 80019d6:	f00a fa75 	bl	800bec4 <puts>
		bt_level_set_req(msg);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f89c 	bl	8001b18 <bt_level_set_req>
		break;
 80019e0:	e044      	b.n	8001a6c <bt_msg_handle+0x104>

	case BT_STIMUL_REQ:
		TD_DEBUG_PRINT(("BT_STIMUL_REQ\n"));
 80019e2:	4827      	ldr	r0, [pc, #156]	; (8001a80 <bt_msg_handle+0x118>)
 80019e4:	f00a fa6e 	bl	800bec4 <puts>
		bt_stimul_req(msg);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f8cf 	bl	8001b8c <bt_stimul_req>
		break;
 80019ee:	e03d      	b.n	8001a6c <bt_msg_handle+0x104>

	case BT_ELECT_DETECT_REQ:
		TD_DEBUG_PRINT(("BT_ELECT_DETECT_REQ\n"));
 80019f0:	4824      	ldr	r0, [pc, #144]	; (8001a84 <bt_msg_handle+0x11c>)
 80019f2:	f00a fa67 	bl	800bec4 <puts>
		bt_elect_detect_req(msg);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f906 	bl	8001c08 <bt_elect_detect_req>
		break;
 80019fc:	e036      	b.n	8001a6c <bt_msg_handle+0x104>

	case BT_MAN_MODE_REQ:
		TD_DEBUG_PRINT(("BT_MAN_MODE_REQ\n"));
 80019fe:	4822      	ldr	r0, [pc, #136]	; (8001a88 <bt_msg_handle+0x120>)
 8001a00:	f00a fa60 	bl	800bec4 <puts>
		bt_man_mode_req(msg);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f937 	bl	8001c78 <bt_man_mode_req>
		break;
 8001a0a:	e02f      	b.n	8001a6c <bt_msg_handle+0x104>

	case BT_FW_VER_REQ:
		TD_DEBUG_PRINT(("BT_FW_VER_REQ\n"));
 8001a0c:	481f      	ldr	r0, [pc, #124]	; (8001a8c <bt_msg_handle+0x124>)
 8001a0e:	f00a fa59 	bl	800bec4 <puts>
		bt_fw_ver_req();
 8001a12:	f000 fa17 	bl	8001e44 <bt_fw_ver_req>
		break;
 8001a16:	e029      	b.n	8001a6c <bt_msg_handle+0x104>

	case BT_STIM_LIB_VER_REQ:
		TD_DEBUG_PRINT(("BT_STIM_LIB_VER_REQ\n"));
 8001a18:	481d      	ldr	r0, [pc, #116]	; (8001a90 <bt_msg_handle+0x128>)
 8001a1a:	f00a fa53 	bl	800bec4 <puts>
		bt_stim_lib_ver_req();
 8001a1e:	f000 fa1d 	bl	8001e5c <bt_stim_lib_ver_req>
		break;
 8001a22:	e023      	b.n	8001a6c <bt_msg_handle+0x104>

	case BT_STIM_STIMUL_TYPE_REQ:
		TD_DEBUG_PRINT(("BT_STIM_STIMUL_TYPE_REQ\n"));
 8001a24:	481b      	ldr	r0, [pc, #108]	; (8001a94 <bt_msg_handle+0x12c>)
 8001a26:	f00a fa4d 	bl	800bec4 <puts>
		bt_stim_stimul_type_req();
 8001a2a:	f000 fa23 	bl	8001e74 <bt_stim_stimul_type_req>
		break;
 8001a2e:	e01d      	b.n	8001a6c <bt_msg_handle+0x104>

	case BT_STIM_SYS_RESET_REQ:
		TD_DEBUG_PRINT(("BT_STIM_SYS_RESET_REQ\n"));
 8001a30:	4819      	ldr	r0, [pc, #100]	; (8001a98 <bt_msg_handle+0x130>)
 8001a32:	f00a fa47 	bl	800bec4 <puts>
		bt_stim_sys_reset_req();
 8001a36:	f000 fa2c 	bl	8001e92 <bt_stim_sys_reset_req>
		break;
 8001a3a:	e017      	b.n	8001a6c <bt_msg_handle+0x104>

	case BT_STIM_TRG_CFG_REQ:
		TD_DEBUG_PRINT(("BT_STIM_TRG_CFG_REQ\n"));
 8001a3c:	4817      	ldr	r0, [pc, #92]	; (8001a9c <bt_msg_handle+0x134>)
 8001a3e:	f00a fa41 	bl	800bec4 <puts>
		bt_stim_trg_cfg_req(msg);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fa30 	bl	8001ea8 <bt_stim_trg_cfg_req>
		break;
 8001a48:	e010      	b.n	8001a6c <bt_msg_handle+0x104>

	default:
		TD_DEBUG_PRINT(("Unknown BT MSG: %d\n", msg[BT_MSG_TYPE_IX]));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <bt_msg_handle+0x138>)
 8001a54:	f00a f99a 	bl	800bd8c <iprintf>
		bt_msg_res(msg[BT_MSG_TYPE_IX], BT_MSG_RES_UNKNOWN_MSG, NULL, 0);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	7818      	ldrb	r0, [r3, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2200      	movs	r2, #0
 8001a62:	2103      	movs	r1, #3
 8001a64:	f000 fb1c 	bl	80020a0 <bt_msg_res>
		break;
 8001a68:	e000      	b.n	8001a6c <bt_msg_handle+0x104>
		return;
 8001a6a:	bf00      	nop
	}
}
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	0800d074 	.word	0x0800d074
 8001a78:	0800d084 	.word	0x0800d084
 8001a7c:	0800d094 	.word	0x0800d094
 8001a80:	0800d0a8 	.word	0x0800d0a8
 8001a84:	0800d0b8 	.word	0x0800d0b8
 8001a88:	0800d0cc 	.word	0x0800d0cc
 8001a8c:	0800d0dc 	.word	0x0800d0dc
 8001a90:	0800d0ec 	.word	0x0800d0ec
 8001a94:	0800d100 	.word	0x0800d100
 8001a98:	0800d118 	.word	0x0800d118
 8001a9c:	0800d130 	.word	0x0800d130
 8001aa0:	0800d144 	.word	0x0800d144

08001aa4 <bt_state_req>:
#include "stim_lib_type.h"

#include "td_debug.h"

void bt_state_req(uint8 *msg)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	bt_msg_res(BT_STATE_REQ, BT_MSG_RES_OK, NULL, 0);
 8001aac:	2300      	movs	r3, #0
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 faf4 	bl	80020a0 <bt_msg_res>

	bt_state_ind();
 8001ab8:	f000 fb34 	bl	8002124 <bt_state_ind>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <bt_mode_set_req>:

void bt_mode_set_req(uint8 *msg)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	bt_msg_res_t rsp_code;
	uint8 mode;

	rsp_code = BT_MSG_RES_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]

	if (msg == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d01a      	beq.n	8001b0c <bt_mode_set_req+0x48>
		return;

	mode = msg[BT_MSG_DATA_IX];
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	78db      	ldrb	r3, [r3, #3]
 8001ada:	73bb      	strb	r3, [r7, #14]

	TD_DEBUG_PRINT(("mode = %d\n", mode));
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <bt_mode_set_req+0x50>)
 8001ae2:	f00a f953 	bl	800bd8c <iprintf>

	/*
	 * TODO:
	 * CHECK PLS
	 * */
	if (msg[BT_MSG_LEN_IX] == 1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d104      	bne.n	8001afa <bt_mode_set_req+0x36>
	{
		/* Handle MSG */
		td_Stim_Mode_Config_Update(mode);
 8001af0:	7bbb      	ldrb	r3, [r7, #14]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fc16 	bl	8001324 <td_Stim_Mode_Config_Update>
 8001af8:	e001      	b.n	8001afe <bt_mode_set_req+0x3a>
	}
	else
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001afa:	2302      	movs	r3, #2
 8001afc:	73fb      	strb	r3, [r7, #15]
	}

	bt_msg_res(BT_MODE_SET_REQ, rsp_code, NULL, 0);
 8001afe:	7bf9      	ldrb	r1, [r7, #15]
 8001b00:	2300      	movs	r3, #0
 8001b02:	2200      	movs	r2, #0
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 facb 	bl	80020a0 <bt_msg_res>
 8001b0a:	e000      	b.n	8001b0e <bt_mode_set_req+0x4a>
		return;
 8001b0c:	bf00      	nop
}
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	0800d158 	.word	0x0800d158

08001b18 <bt_level_set_req>:

void bt_level_set_req(uint8 *msg)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	bt_msg_res_t rsp_code;
	uint8 level;

	rsp_code = BT_MSG_RES_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]

	if (msg == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d029      	beq.n	8001b7e <bt_level_set_req+0x66>
		return;

	level = msg[BT_MSG_DATA_IX];
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	78db      	ldrb	r3, [r3, #3]
 8001b2e:	73bb      	strb	r3, [r7, #14]

	TD_DEBUG_PRINT(("level = %d\n", level));
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4814      	ldr	r0, [pc, #80]	; (8001b88 <bt_level_set_req+0x70>)
 8001b36:	f00a f929 	bl	800bd8c <iprintf>

	/*
	 * TODO:
	 * CHECK PLS
	 * */
	if (td_Stim_Cur_Mode_Get() == 0)
 8001b3a:	f7ff fba7 	bl	800128c <td_Stim_Cur_Mode_Get>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <bt_level_set_req+0x32>
	{
		rsp_code = BT_MSG_RES_INVALID_STATUS;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e012      	b.n	8001b70 <bt_level_set_req+0x58>
	}
	else if (msg[BT_MSG_LEN_IX] == 1 && (TD_BT_MSG_LEVEL_MIN <= (int8) level && level <= TD_BT_MSG_LEVEL_MAX))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d10b      	bne.n	8001b6c <bt_level_set_req+0x54>
 8001b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db07      	blt.n	8001b6c <bt_level_set_req+0x54>
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	2b17      	cmp	r3, #23
 8001b60:	d804      	bhi.n	8001b6c <bt_level_set_req+0x54>
	{
		/* Handle MSG */
		td_Stim_Level_Config_Update(level);
 8001b62:	7bbb      	ldrb	r3, [r7, #14]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fc47 	bl	80013f8 <td_Stim_Level_Config_Update>
 8001b6a:	e001      	b.n	8001b70 <bt_level_set_req+0x58>
	}
	else
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	73fb      	strb	r3, [r7, #15]
	}

	bt_msg_res(BT_LEVEL_SET_REQ, rsp_code, NULL, 0);
 8001b70:	7bf9      	ldrb	r1, [r7, #15]
 8001b72:	2300      	movs	r3, #0
 8001b74:	2200      	movs	r2, #0
 8001b76:	2004      	movs	r0, #4
 8001b78:	f000 fa92 	bl	80020a0 <bt_msg_res>
 8001b7c:	e000      	b.n	8001b80 <bt_level_set_req+0x68>
		return;
 8001b7e:	bf00      	nop

}
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	0800d164 	.word	0x0800d164

08001b8c <bt_stimul_req>:

void bt_stimul_req(uint8 *msg)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	bt_msg_res_t rsp_code;
	uint8 req;

	rsp_code = BT_MSG_RES_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

	if (msg == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d02d      	beq.n	8001bfa <bt_stimul_req+0x6e>
		return;

	req = msg[BT_MSG_DATA_IX];
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	78db      	ldrb	r3, [r3, #3]
 8001ba2:	73bb      	strb	r3, [r7, #14]

	TD_DEBUG_PRINT(("req = %d\n", req));
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4816      	ldr	r0, [pc, #88]	; (8001c04 <bt_stimul_req+0x78>)
 8001baa:	f00a f8ef 	bl	800bd8c <iprintf>

	/*
	 * TODO:
	 * CHECK PLS
	 * */
	if (td_Stim_Cur_Mode_Get() == 0 && td_Stim_Cur_Detection_Level_Get() == 0)
 8001bae:	f7ff fb6d 	bl	800128c <td_Stim_Cur_Mode_Get>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <bt_stimul_req+0x3c>
 8001bb8:	f7ff fb8c 	bl	80012d4 <td_Stim_Cur_Detection_Level_Get>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <bt_stimul_req+0x3c>
	{
		rsp_code = BT_MSG_RES_INVALID_STATUS;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	e011      	b.n	8001bec <bt_stimul_req+0x60>
	}
	else if (msg[BT_MSG_LEN_IX] == 1 && (AUL_BT_MSG_STIMUL_STOP == req || req == AUL_BT_MSG_STIMUL_START))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3302      	adds	r3, #2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d10a      	bne.n	8001be8 <bt_stimul_req+0x5c>
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <bt_stimul_req+0x52>
 8001bd8:	7bbb      	ldrb	r3, [r7, #14]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d104      	bne.n	8001be8 <bt_stimul_req+0x5c>
	{
		/* Handle MSG */
		td_Stim_Control(req);
 8001bde:	7bbb      	ldrb	r3, [r7, #14]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fd13 	bl	800160c <td_Stim_Control>
 8001be6:	e001      	b.n	8001bec <bt_stimul_req+0x60>
	}
	else
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001be8:	2302      	movs	r3, #2
 8001bea:	73fb      	strb	r3, [r7, #15]
	}

	bt_msg_res(BT_STIMUL_REQ, rsp_code, NULL, 0);
 8001bec:	7bf9      	ldrb	r1, [r7, #15]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2005      	movs	r0, #5
 8001bf4:	f000 fa54 	bl	80020a0 <bt_msg_res>
 8001bf8:	e000      	b.n	8001bfc <bt_stimul_req+0x70>
		return;
 8001bfa:	bf00      	nop

}
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	0800d170 	.word	0x0800d170

08001c08 <bt_elect_detect_req>:

void bt_elect_detect_req(uint8 *msg)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	bt_msg_res_t rsp_code;
	uint8 level;

	rsp_code = BT_MSG_RES_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]

	if (msg == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d029      	beq.n	8001c6e <bt_elect_detect_req+0x66>
		return;

	level = msg[BT_MSG_DATA_IX];
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	78db      	ldrb	r3, [r3, #3]
 8001c1e:	73bb      	strb	r3, [r7, #14]

	/*
	 * TODO:
	 * CHECK PLS
	 * */
	if (td_Stim_Detection_LV_Check_Is_Active() == false && td_Stim_Is_Started())
 8001c20:	f7ff fb64 	bl	80012ec <td_Stim_Detection_LV_Check_Is_Active>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d107      	bne.n	8001c3a <bt_elect_detect_req+0x32>
 8001c2a:	f7ff fb23 	bl	8001274 <td_Stim_Is_Started>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <bt_elect_detect_req+0x32>
	{
		rsp_code = BT_MSG_RES_INVALID_STATUS;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e012      	b.n	8001c60 <bt_elect_detect_req+0x58>
	}
	else if (msg[BT_MSG_LEN_IX] == 1 && (TD_BT_MSG_STIM_DETECTION_LEVEL_MIN <= (int8) level && level <= TD_BT_MSG_STIM_DETECTION_LEVEL_MAX))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d10b      	bne.n	8001c5c <bt_elect_detect_req+0x54>
 8001c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db07      	blt.n	8001c5c <bt_elect_detect_req+0x54>
 8001c4c:	7bbb      	ldrb	r3, [r7, #14]
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d804      	bhi.n	8001c5c <bt_elect_detect_req+0x54>
	{
		/* Handle MSG */
		td_Stim_Detection_Check_Start(level);
 8001c52:	7bbb      	ldrb	r3, [r7, #14]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fc1f 	bl	8001498 <td_Stim_Detection_Check_Start>
 8001c5a:	e001      	b.n	8001c60 <bt_elect_detect_req+0x58>
	}
	else
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	73fb      	strb	r3, [r7, #15]
	}

	bt_msg_res(BT_ELECT_DETECT_REQ, rsp_code, NULL, 0);
 8001c60:	7bf9      	ldrb	r1, [r7, #15]
 8001c62:	2300      	movs	r3, #0
 8001c64:	2200      	movs	r2, #0
 8001c66:	2006      	movs	r0, #6
 8001c68:	f000 fa1a 	bl	80020a0 <bt_msg_res>
 8001c6c:	e000      	b.n	8001c70 <bt_elect_detect_req+0x68>
		return;
 8001c6e:	bf00      	nop

}
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <bt_man_mode_req>:

void bt_man_mode_req(uint8 *msg)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	 * CHECK PLS
	 * */
	bt_msg_res_t rsp_code;
	uint8 i;

	if (msg == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80c8 	beq.w	8001e18 <bt_man_mode_req+0x1a0>
	}

	/* Check paramters */
	do
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	73fb      	strb	r3, [r7, #15]

		TD_MANUAL_PULSE_FREQ = 0;
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
		TD_MANUAL_PULSE_WIDTH = 0;
 8001c92:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	805a      	strh	r2, [r3, #2]
		TD_MANUAL_TARGET_VOLTAGE = 0;
 8001c98:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	711a      	strb	r2, [r3, #4]
		TD_MANUAL_TARGET_DAC = 0;
 8001c9e:	4b60      	ldr	r3, [pc, #384]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	715a      	strb	r2, [r3, #5]
		TD_MANUAL_GP_OFF_TIME = 0;
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	719a      	strb	r2, [r3, #6]
		TD_MANUAL_GP_ON_TIME = 0;
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	71da      	strb	r2, [r3, #7]

		/* Length */
		if (msg[BT_MSG_LEN_IX] != 6)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	f040 8086 	bne.w	8001dc8 <bt_man_mode_req+0x150>
		{
			break;
		}

		i = BT_MSG_DATA_IX;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	73bb      	strb	r3, [r7, #14]

		/* Frequency: 1byt. Range: 1 ~ 50.  Step: 1, 10, 20, ... 50 */
		TD_MANUAL_PULSE_FREQ = msg[i];
 8001cc0:	7bbb      	ldrb	r3, [r7, #14]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001cca:	701a      	strb	r2, [r3, #0]

		if (1 > TD_MANUAL_PULSE_FREQ || TD_MANUAL_PULSE_FREQ > 50)
 8001ccc:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d07a      	beq.n	8001dca <bt_man_mode_req+0x152>
 8001cd4:	4b52      	ldr	r3, [pc, #328]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b32      	cmp	r3, #50	; 0x32
 8001cda:	d876      	bhi.n	8001dca <bt_man_mode_req+0x152>
		{
			break;
		}

		if (TD_MANUAL_PULSE_FREQ >= 10)
 8001cdc:	4b50      	ldr	r3, [pc, #320]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	d90d      	bls.n	8001d00 <bt_man_mode_req+0x88>
		{
			TD_MANUAL_PULSE_FREQ = (TD_MANUAL_PULSE_FREQ / 10) * 10;
 8001ce4:	4b4e      	ldr	r3, [pc, #312]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <bt_man_mode_req+0x1ac>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	08db      	lsrs	r3, r3, #3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001cfe:	701a      	strb	r2, [r3, #0]
		}
		i++;
 8001d00:	7bbb      	ldrb	r3, [r7, #14]
 8001d02:	3301      	adds	r3, #1
 8001d04:	73bb      	strb	r3, [r7, #14]

		/* Pulse width: size 2. Range: 100 ~ 1000. Step: 100 */
		TD_MANUAL_PULSE_WIDTH = msg[i] | ((uint16) msg[i + 1] << 8);
 8001d06:	7bbb      	ldrb	r3, [r7, #14]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	7bbb      	ldrb	r3, [r7, #14]
 8001d12:	3301      	adds	r3, #1
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	440b      	add	r3, r1
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001d26:	805a      	strh	r2, [r3, #2]

		if (100 > TD_MANUAL_PULSE_WIDTH || TD_MANUAL_PULSE_WIDTH > 1000)
 8001d28:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001d2a:	885b      	ldrh	r3, [r3, #2]
 8001d2c:	2b63      	cmp	r3, #99	; 0x63
 8001d2e:	d94c      	bls.n	8001dca <bt_man_mode_req+0x152>
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001d32:	885b      	ldrh	r3, [r3, #2]
 8001d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d38:	d847      	bhi.n	8001dca <bt_man_mode_req+0x152>
		{
			break;
		}

		TD_MANUAL_PULSE_WIDTH = (TD_MANUAL_PULSE_WIDTH / 100) * 100;
 8001d3a:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001d3c:	885b      	ldrh	r3, [r3, #2]
 8001d3e:	4a3a      	ldr	r2, [pc, #232]	; (8001e28 <bt_man_mode_req+0x1b0>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	0092      	lsls	r2, r2, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	0091      	lsls	r1, r2, #2
 8001d52:	461a      	mov	r2, r3
 8001d54:	460b      	mov	r3, r1
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001d5e:	805a      	strh	r2, [r3, #2]

		i += 2;
 8001d60:	7bbb      	ldrb	r3, [r7, #14]
 8001d62:	3302      	adds	r3, #2
 8001d64:	73bb      	strb	r3, [r7, #14]
			break;
		}
		TD_MANUAL_TARGET_VOLTAGE = (TD_MANUAL_TARGET_VOLTAGE / 5) * 5;
#endif
#ifdef STIM_LIB_EVKIT_CC
		TD_MANUAL_TARGET_DAC = msg[i];
 8001d66:	7bbb      	ldrb	r3, [r7, #14]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001d70:	715a      	strb	r2, [r3, #5]
		if (TD_MANUAL_TARGET_DAC > 255)
		{
			break;
		}
#endif
		i++;
 8001d72:	7bbb      	ldrb	r3, [r7, #14]
 8001d74:	3301      	adds	r3, #1
 8001d76:	73bb      	strb	r3, [r7, #14]

		/* Group pulse: on/off each 1 size. Range: 1 ~ 60. Step: 1 */
		TD_MANUAL_GP_OFF_TIME = msg[i];
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001d82:	719a      	strb	r2, [r3, #6]
		i++;
 8001d84:	7bbb      	ldrb	r3, [r7, #14]
 8001d86:	3301      	adds	r3, #1
 8001d88:	73bb      	strb	r3, [r7, #14]
		TD_MANUAL_GP_ON_TIME = msg[i];
 8001d8a:	7bbb      	ldrb	r3, [r7, #14]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001d94:	71da      	strb	r2, [r3, #7]

		if (TD_MANUAL_GP_OFF_TIME > 60 || TD_MANUAL_GP_ON_TIME > 60)
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001d98:	799b      	ldrb	r3, [r3, #6]
 8001d9a:	2b3c      	cmp	r3, #60	; 0x3c
 8001d9c:	d815      	bhi.n	8001dca <bt_man_mode_req+0x152>
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001da0:	79db      	ldrb	r3, [r3, #7]
 8001da2:	2b3c      	cmp	r3, #60	; 0x3c
 8001da4:	d811      	bhi.n	8001dca <bt_man_mode_req+0x152>
		{
			break;
		}

		if (TD_MANUAL_GP_OFF_TIME == 0 || TD_MANUAL_GP_ON_TIME == 0)
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001da8:	799b      	ldrb	r3, [r3, #6]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <bt_man_mode_req+0x13e>
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001db0:	79db      	ldrb	r3, [r3, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <bt_man_mode_req+0x14a>
		{
			/* Group pulse is disabled */
			TD_MANUAL_GP_OFF_TIME = 0;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	719a      	strb	r2, [r3, #6]
			TD_MANUAL_GP_ON_TIME = 0;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	71da      	strb	r2, [r3, #7]
		}

		rsp_code = BT_MSG_RES_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e000      	b.n	8001dca <bt_man_mode_req+0x152>
			break;
 8001dc8:	bf00      	nop

	} while (false);

	if (rsp_code == BT_MSG_RES_OK)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <bt_man_mode_req+0x15e>
	{
		TD_DEBUG_PRINT(("Params OK\n"));
 8001dd0:	4816      	ldr	r0, [pc, #88]	; (8001e2c <bt_man_mode_req+0x1b4>)
 8001dd2:	f00a f877 	bl	800bec4 <puts>
	}

	TD_DEBUG_PRINT(("PULSE FREQ: %d\r\n", TD_MANUAL_PULSE_FREQ));
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4814      	ldr	r0, [pc, #80]	; (8001e30 <bt_man_mode_req+0x1b8>)
 8001dde:	f009 ffd5 	bl	800bd8c <iprintf>
	TD_DEBUG_PRINT(("PULSE WIDTH: %d\r\n", TD_MANUAL_PULSE_WIDTH));
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001de4:	885b      	ldrh	r3, [r3, #2]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4812      	ldr	r0, [pc, #72]	; (8001e34 <bt_man_mode_req+0x1bc>)
 8001dea:	f009 ffcf 	bl	800bd8c <iprintf>
#ifdef STIM_LIB_EVKIT_CV
	TD_DEBUG_PRINT(("TARGET VOLTAGE: %d\r\n", TD_MANUAL_TARGET_VOLTAGE));
#else
	TD_DEBUG_PRINT(("TARGET DAC: %d\r\n", TD_MANUAL_TARGET_DAC));
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001df0:	795b      	ldrb	r3, [r3, #5]
 8001df2:	4619      	mov	r1, r3
 8001df4:	4810      	ldr	r0, [pc, #64]	; (8001e38 <bt_man_mode_req+0x1c0>)
 8001df6:	f009 ffc9 	bl	800bd8c <iprintf>
#endif
	TD_DEBUG_PRINT(("GO IFF TIME: %d\r\n", TD_MANUAL_GP_OFF_TIME));
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001dfc:	799b      	ldrb	r3, [r3, #6]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480e      	ldr	r0, [pc, #56]	; (8001e3c <bt_man_mode_req+0x1c4>)
 8001e02:	f009 ffc3 	bl	800bd8c <iprintf>
	TD_DEBUG_PRINT(("GP ON TIME: %d\r\n", TD_MANUAL_GP_ON_TIME));
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <bt_man_mode_req+0x1a8>)
 8001e08:	79db      	ldrb	r3, [r3, #7]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <bt_man_mode_req+0x1c8>)
 8001e0e:	f009 ffbd 	bl	800bd8c <iprintf>

	td_Stim_Manual_Mode_Start();
 8001e12:	f7ff fb9f 	bl	8001554 <td_Stim_Manual_Mode_Start>
 8001e16:	e000      	b.n	8001e1a <bt_man_mode_req+0x1a2>
		return;
 8001e18:	bf00      	nop
}
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200005a0 	.word	0x200005a0
 8001e24:	cccccccd 	.word	0xcccccccd
 8001e28:	51eb851f 	.word	0x51eb851f
 8001e2c:	0800d17c 	.word	0x0800d17c
 8001e30:	0800d188 	.word	0x0800d188
 8001e34:	0800d19c 	.word	0x0800d19c
 8001e38:	0800d1b0 	.word	0x0800d1b0
 8001e3c:	0800d1c4 	.word	0x0800d1c4
 8001e40:	0800d1d8 	.word	0x0800d1d8

08001e44 <bt_fw_ver_req>:

void bt_fw_ver_req(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	bt_msg_res(BT_FW_VER_REQ, BT_MSG_RES_OK, (uint8*) "FW_TEST_VER", strlen("FW_TEST_VER"));
 8001e48:	230b      	movs	r3, #11
 8001e4a:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <bt_fw_ver_req+0x14>)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2008      	movs	r0, #8
 8001e50:	f000 f926 	bl	80020a0 <bt_msg_res>
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	0800d1ec 	.word	0x0800d1ec

08001e5c <bt_stim_lib_ver_req>:

void bt_stim_lib_ver_req(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	bt_msg_res(BT_STIM_LIB_VER_REQ, BT_MSG_RES_OK, (uint8*) "LIB_TEST_VER", strlen("LIB_TEST_VER"));
 8001e60:	230c      	movs	r3, #12
 8001e62:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <bt_stim_lib_ver_req+0x14>)
 8001e64:	2100      	movs	r1, #0
 8001e66:	2009      	movs	r0, #9
 8001e68:	f000 f91a 	bl	80020a0 <bt_msg_res>
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	0800d1f8 	.word	0x0800d1f8

08001e74 <bt_stim_stimul_type_req>:

void bt_stim_stimul_type_req(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
	uint8 type;
#ifdef STIM_LIB_EVKIT_CC
	type = BT_MSG_STIMUL_TYPE_CONST_CURR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef STIM_LIB_EVKIT_CV
	type = BT_MSG_STIMUL_TYPE_CONST_VOLT;
#endif
	bt_msg_res(BT_STIM_STIMUL_TYPE_REQ, BT_MSG_RES_OK, &type, 1);
 8001e7e:	1dfa      	adds	r2, r7, #7
 8001e80:	2301      	movs	r3, #1
 8001e82:	2100      	movs	r1, #0
 8001e84:	200a      	movs	r0, #10
 8001e86:	f000 f90b 	bl	80020a0 <bt_msg_res>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <bt_stim_sys_reset_req>:

void bt_stim_sys_reset_req(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
	bt_msg_res(BT_STIM_SYS_RESET_REQ, BT_MSG_RES_OK, NULL, 0);
 8001e96:	2300      	movs	r3, #0
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	200b      	movs	r0, #11
 8001e9e:	f000 f8ff 	bl	80020a0 <bt_msg_res>
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <bt_stim_trg_cfg_req>:

void bt_stim_trg_cfg_req(uint8 *msg)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	 * CHECK PLS
	 * */
	bt_msg_res_t rsp_code;
	uint8 i;

	if (msg == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80d1 	beq.w	800205a <bt_stim_trg_cfg_req+0x1b2>
	}

	/* Check paramters */
	do
	{
		rsp_code = BT_MSG_RES_INVALID_PARAM;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	73fb      	strb	r3, [r7, #15]

		ex_trg_data.volt_prestart = false;
 8001ebc:	4b69      	ldr	r3, [pc, #420]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
		ex_trg_data.trg_out_enable = false;
 8001ec2:	4b68      	ldr	r3, [pc, #416]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	705a      	strb	r2, [r3, #1]
		ex_trg_data.trg_out_active_pol = 1;
 8001ec8:	4b66      	ldr	r3, [pc, #408]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	709a      	strb	r2, [r3, #2]
		ex_trg_data.trg_in_enable = false;
 8001ece:	4b65      	ldr	r3, [pc, #404]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	70da      	strb	r2, [r3, #3]
		ex_trg_data.trg_in_active_pol = 1;
 8001ed4:	4b63      	ldr	r3, [pc, #396]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	711a      	strb	r2, [r3, #4]
		ex_trg_data.trg_in_toggled = false;
 8001eda:	4b62      	ldr	r3, [pc, #392]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	715a      	strb	r2, [r3, #5]

		/* Length */
		if (msg[BT_MSG_LEN_IX] != 6)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	f040 8088 	bne.w	8001ffc <bt_stim_trg_cfg_req+0x154>
		{
			break;
		}

		i = BT_MSG_DATA_IX;
 8001eec:	2303      	movs	r3, #3
 8001eee:	73bb      	strb	r3, [r7, #14]

		/* Voltage pre-start: 1byt. true : pre-start / false : do not pre-start :: 0 */
		ex_trg_data.volt_prestart = msg[i];
 8001ef0:	7bbb      	ldrb	r3, [r7, #14]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b58      	ldr	r3, [pc, #352]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f04:	701a      	strb	r2, [r3, #0]
		if (true != ex_trg_data.volt_prestart || false != ex_trg_data.volt_prestart)
 8001f06:	4b57      	ldr	r3, [pc, #348]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f083 0301 	eor.w	r3, r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d174      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d170      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
		{
			break;
		}
		i++;
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	73bb      	strb	r3, [r7, #14]

		/* Trigger Output Enable :: 1 */
		ex_trg_data.trg_out_enable = msg[i];
 8001f22:	7bbb      	ldrb	r3, [r7, #14]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f36:	705a      	strb	r2, [r3, #1]
		if (true != ex_trg_data.trg_out_enable || false != ex_trg_data.trg_out_enable)
 8001f38:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f3a:	785b      	ldrb	r3, [r3, #1]
 8001f3c:	f083 0301 	eor.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d15b      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d157      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
		{
			break;
		}
		i++;
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	3301      	adds	r3, #1
 8001f52:	73bb      	strb	r3, [r7, #14]

		/* Trigger Output Active Pol Setting :: 2 */
		ex_trg_data.trg_out_active_pol = msg[i];
 8001f54:	7bbb      	ldrb	r3, [r7, #14]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781a      	ldrb	r2, [r3, #0]
 8001f5c:	4b41      	ldr	r3, [pc, #260]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f5e:	709a      	strb	r2, [r3, #2]
		if (0 != ex_trg_data.trg_out_active_pol || 1 != ex_trg_data.trg_out_active_pol)
 8001f60:	4b40      	ldr	r3, [pc, #256]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f62:	789b      	ldrb	r3, [r3, #2]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d14a      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
 8001f68:	4b3e      	ldr	r3, [pc, #248]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f6a:	789b      	ldrb	r3, [r3, #2]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d146      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
		{
			break;
		}
		i++;
 8001f70:	7bbb      	ldrb	r3, [r7, #14]
 8001f72:	3301      	adds	r3, #1
 8001f74:	73bb      	strb	r3, [r7, #14]

		/* Trigger Input Enable :: 3*/
		ex_trg_data.trg_in_enable = msg[i];
 8001f76:	7bbb      	ldrb	r3, [r7, #14]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bf14      	ite	ne
 8001f82:	2301      	movne	r3, #1
 8001f84:	2300      	moveq	r3, #0
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b36      	ldr	r3, [pc, #216]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f8a:	70da      	strb	r2, [r3, #3]
		if (true != ex_trg_data.trg_in_enable || false != ex_trg_data.trg_in_enable)
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f8e:	78db      	ldrb	r3, [r3, #3]
 8001f90:	f083 0301 	eor.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d131      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
 8001f9a:	4b32      	ldr	r3, [pc, #200]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001f9c:	78db      	ldrb	r3, [r3, #3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d12d      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
		{
			break;
		}
		i++;
 8001fa2:	7bbb      	ldrb	r3, [r7, #14]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	73bb      	strb	r3, [r7, #14]

		/* Trigger Input Active Pol Setting :: 4 */
		ex_trg_data.trg_in_active_pol = msg[i];
 8001fa8:	7bbb      	ldrb	r3, [r7, #14]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001fb2:	711a      	strb	r2, [r3, #4]
		if (0 != ex_trg_data.trg_in_active_pol || 1 != ex_trg_data.trg_in_active_pol)
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001fb6:	791b      	ldrb	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d120      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
 8001fbc:	4b29      	ldr	r3, [pc, #164]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001fbe:	791b      	ldrb	r3, [r3, #4]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d11c      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
		{
			break;
		}
		i++;
 8001fc4:	7bbb      	ldrb	r3, [r7, #14]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	73bb      	strb	r3, [r7, #14]

		/* Trigger Input Toggle Active Setting :: 5 */
		ex_trg_data.trg_in_toggled = msg[i];
 8001fca:	7bbb      	ldrb	r3, [r7, #14]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf14      	ite	ne
 8001fd6:	2301      	movne	r3, #1
 8001fd8:	2300      	moveq	r3, #0
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001fde:	715a      	strb	r2, [r3, #5]
		if (true != ex_trg_data.trg_in_toggled || false != ex_trg_data.trg_in_toggled)
 8001fe0:	4b20      	ldr	r3, [pc, #128]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001fe2:	795b      	ldrb	r3, [r3, #5]
 8001fe4:	f083 0301 	eor.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d107      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8001ff0:	795b      	ldrb	r3, [r3, #5]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <bt_stim_trg_cfg_req+0x156>
		{
			break;
		}

		rsp_code = BT_MSG_RES_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	e000      	b.n	8001ffe <bt_stim_trg_cfg_req+0x156>
			break;
 8001ffc:	bf00      	nop

	} while (false);

	if (rsp_code == BT_MSG_RES_OK)
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <bt_stim_trg_cfg_req+0x162>
	{
		TD_DEBUG_PRINT(("Params OK\n"));
 8002004:	4818      	ldr	r0, [pc, #96]	; (8002068 <bt_stim_trg_cfg_req+0x1c0>)
 8002006:	f009 ff5d 	bl	800bec4 <puts>
	}

	TD_DEBUG_PRINT(("Pre-Start: %d\r\n", ex_trg_data.volt_prestart));
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4619      	mov	r1, r3
 8002010:	4816      	ldr	r0, [pc, #88]	; (800206c <bt_stim_trg_cfg_req+0x1c4>)
 8002012:	f009 febb 	bl	800bd8c <iprintf>
	TD_DEBUG_PRINT(("Trigger Output ENA: %d\r\n", ex_trg_data.trg_out_enable));
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8002018:	785b      	ldrb	r3, [r3, #1]
 800201a:	4619      	mov	r1, r3
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <bt_stim_trg_cfg_req+0x1c8>)
 800201e:	f009 feb5 	bl	800bd8c <iprintf>
	TD_DEBUG_PRINT(("Trigger Output Act POL: %d\r\n", ex_trg_data.trg_out_active_pol));
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8002024:	789b      	ldrb	r3, [r3, #2]
 8002026:	4619      	mov	r1, r3
 8002028:	4812      	ldr	r0, [pc, #72]	; (8002074 <bt_stim_trg_cfg_req+0x1cc>)
 800202a:	f009 feaf 	bl	800bd8c <iprintf>
	TD_DEBUG_PRINT(("Trigger Input ENA: %d\r\n", ex_trg_data.trg_in_enable));
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8002030:	78db      	ldrb	r3, [r3, #3]
 8002032:	4619      	mov	r1, r3
 8002034:	4810      	ldr	r0, [pc, #64]	; (8002078 <bt_stim_trg_cfg_req+0x1d0>)
 8002036:	f009 fea9 	bl	800bd8c <iprintf>
	TD_DEBUG_PRINT(("Trigger Input Act POL: %d\r\n", ex_trg_data.trg_in_active_pol));
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 800203c:	791b      	ldrb	r3, [r3, #4]
 800203e:	4619      	mov	r1, r3
 8002040:	480e      	ldr	r0, [pc, #56]	; (800207c <bt_stim_trg_cfg_req+0x1d4>)
 8002042:	f009 fea3 	bl	800bd8c <iprintf>
	TD_DEBUG_PRINT(("Trigger Input Toggled : %d\r\n", ex_trg_data.trg_in_toggled));
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8002048:	795b      	ldrb	r3, [r3, #5]
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <bt_stim_trg_cfg_req+0x1d8>)
 800204e:	f009 fe9d 	bl	800bd8c <iprintf>

	stimLib_stimTriggerConfig(&ex_trg_data);
 8002052:	4804      	ldr	r0, [pc, #16]	; (8002064 <bt_stim_trg_cfg_req+0x1bc>)
 8002054:	f007 fea1 	bl	8009d9a <stimLib_stimTriggerConfig>
 8002058:	e000      	b.n	800205c <bt_stim_trg_cfg_req+0x1b4>
		return;
 800205a:	bf00      	nop

}
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000058c 	.word	0x2000058c
 8002068:	0800d17c 	.word	0x0800d17c
 800206c:	0800d208 	.word	0x0800d208
 8002070:	0800d218 	.word	0x0800d218
 8002074:	0800d234 	.word	0x0800d234
 8002078:	0800d254 	.word	0x0800d254
 800207c:	0800d26c 	.word	0x0800d26c
 8002080:	0800d288 	.word	0x0800d288

08002084 <bt_msg_send_init_INLINE>:
#define BT_MSG_SEND()						tdUart1_sendData(BT_MSG_SEND_BUF, BT_MSG_SIZE_MAX)

uint8 gBtMsg_sendBuf[BT_MSG_SIZE_MAX];

static inline void bt_msg_send_init_INLINE(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	memset(BT_MSG_SEND_BUF, 0x00, BT_MSG_SIZE_MAX);
 8002088:	2214      	movs	r2, #20
 800208a:	2100      	movs	r1, #0
 800208c:	4803      	ldr	r0, [pc, #12]	; (800209c <bt_msg_send_init_INLINE+0x18>)
 800208e:	f009 fe75 	bl	800bd7c <memset>

	BT_MSG_SEND_BUF[BT_MSG_START_CODE_IX] = BT_MSG_START_CODE;
 8002092:	4b02      	ldr	r3, [pc, #8]	; (800209c <bt_msg_send_init_INLINE+0x18>)
 8002094:	22ef      	movs	r2, #239	; 0xef
 8002096:	701a      	strb	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200005ec 	.word	0x200005ec

080020a0 <bt_msg_res>:

void bt_msg_res(bt_msg_type_t type, bt_msg_res_t res, uint8 *data, uint8 data_len)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	603a      	str	r2, [r7, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	460b      	mov	r3, r1
 80020b0:	71bb      	strb	r3, [r7, #6]
 80020b2:	4613      	mov	r3, r2
 80020b4:	717b      	strb	r3, [r7, #5]
	if (type >= BT_MSG_TYPE_MAX || res >= BT_MSG_RES_MAX)
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d82b      	bhi.n	8002114 <bt_msg_res+0x74>
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d828      	bhi.n	8002114 <bt_msg_res+0x74>
		return;

	if (data == NULL)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <bt_msg_res+0x2e>
		data_len = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	717b      	strb	r3, [r7, #5]
 80020cc:	e004      	b.n	80020d8 <bt_msg_res+0x38>
	else if (data_len > BT_MSG_RES_DATA_LEN_MAX)
 80020ce:	797b      	ldrb	r3, [r7, #5]
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	d901      	bls.n	80020d8 <bt_msg_res+0x38>
		data_len = BT_MSG_RES_DATA_LEN_MAX;
 80020d4:	230f      	movs	r3, #15
 80020d6:	717b      	strb	r3, [r7, #5]

	bt_msg_send_init_INLINE();
 80020d8:	f7ff ffd4 	bl	8002084 <bt_msg_send_init_INLINE>

	BT_MSG_SEND_BUF[BT_MSG_TYPE_IX] = BT_MSG_RES;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <bt_msg_res+0x7c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	705a      	strb	r2, [r3, #1]
	BT_MSG_SEND_BUF[BT_MSG_LEN_IX] = BT_MSG_RES_LEN_DEFAULT + data_len;
 80020e2:	797b      	ldrb	r3, [r7, #5]
 80020e4:	3302      	adds	r3, #2
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <bt_msg_res+0x7c>)
 80020ea:	709a      	strb	r2, [r3, #2]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX] = type;
 80020ec:	4a0b      	ldr	r2, [pc, #44]	; (800211c <bt_msg_res+0x7c>)
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	70d3      	strb	r3, [r2, #3]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX + 1] = res;
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <bt_msg_res+0x7c>)
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	7113      	strb	r3, [r2, #4]

	if (data_len > 0)
 80020f8:	797b      	ldrb	r3, [r7, #5]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <bt_msg_res+0x6a>
	{
		memcpy(&BT_MSG_SEND_BUF[BT_MSG_DATA_IX + BT_MSG_RES_LEN_DEFAULT], data, data_len);
 80020fe:	797b      	ldrb	r3, [r7, #5]
 8002100:	461a      	mov	r2, r3
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	4806      	ldr	r0, [pc, #24]	; (8002120 <bt_msg_res+0x80>)
 8002106:	f009 fe2b 	bl	800bd60 <memcpy>
	}

	BT_MSG_SEND();
 800210a:	2114      	movs	r1, #20
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <bt_msg_res+0x7c>)
 800210e:	f000 f849 	bl	80021a4 <tdUart1_sendData>
 8002112:	e000      	b.n	8002116 <bt_msg_res+0x76>
		return;
 8002114:	bf00      	nop
}
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200005ec 	.word	0x200005ec
 8002120:	200005f1 	.word	0x200005f1

08002124 <bt_state_ind>:

void bt_state_ind(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	bt_msg_send_init_INLINE();
 8002128:	f7ff ffac 	bl	8002084 <bt_msg_send_init_INLINE>

#if 1
	BT_MSG_SEND_BUF[BT_MSG_TYPE_IX] = BT_STATE_IND;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <bt_state_ind+0x50>)
 800212e:	2202      	movs	r2, #2
 8002130:	705a      	strb	r2, [r3, #1]
	BT_MSG_SEND_BUF[BT_MSG_LEN_IX] = 4;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <bt_state_ind+0x50>)
 8002134:	2204      	movs	r2, #4
 8002136:	709a      	strb	r2, [r3, #2]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX] = td_Stim_Is_Started(); /* stimul start */
 8002138:	f7ff f89c 	bl	8001274 <td_Stim_Is_Started>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <bt_state_ind+0x50>)
 8002142:	70da      	strb	r2, [r3, #3]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX + 1] = td_Stim_Cur_Mode_Get(); /* mode */
 8002144:	f7ff f8a2 	bl	800128c <td_Stim_Cur_Mode_Get>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <bt_state_ind+0x50>)
 800214e:	711a      	strb	r2, [r3, #4]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX + 2] = td_Stim_Cur_Level_Get(); /* level */
 8002150:	f7ff f8a8 	bl	80012a4 <td_Stim_Cur_Level_Get>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <bt_state_ind+0x50>)
 800215a:	715a      	strb	r2, [r3, #5]
	BT_MSG_SEND_BUF[BT_MSG_DATA_IX + 3] = td_Stim_Detection_Level(); /* elect detect */
 800215c:	f7ff f8d6 	bl	800130c <td_Stim_Detection_Level>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <bt_state_ind+0x50>)
 8002166:	719a      	strb	r2, [r3, #6]
#endif

	BT_MSG_SEND();
 8002168:	2114      	movs	r1, #20
 800216a:	4802      	ldr	r0, [pc, #8]	; (8002174 <bt_state_ind+0x50>)
 800216c:	f000 f81a 	bl	80021a4 <tdUart1_sendData>
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200005ec 	.word	0x200005ec

08002178 <tdUart1_init>:

uint8_t gTdUart1_dmaTxBuf[TD_UART1_DMA_TX_BUF_SIZE];
uint8_t gTdUart1_dmaRxBuf[TD_UART1_DMA_RX_BUF_SIZE];

void tdUart1_init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	tdUart1Q_init();
 800217c:	f000 f970 	bl	8002460 <tdUart1Q_init>

	memset(TD_UART1_DMA_TX_BUF, 0, TD_UART1_DMA_TX_BUF_SIZE);
 8002180:	2214      	movs	r2, #20
 8002182:	2100      	movs	r1, #0
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <tdUart1_init+0x24>)
 8002186:	f009 fdf9 	bl	800bd7c <memset>
	memset(TD_UART1_DMA_RX_BUF, 0, TD_UART1_DMA_RX_BUF_SIZE);
 800218a:	2214      	movs	r2, #20
 800218c:	2100      	movs	r1, #0
 800218e:	4804      	ldr	r0, [pc, #16]	; (80021a0 <tdUart1_init+0x28>)
 8002190:	f009 fdf4 	bl	800bd7c <memset>

	tdUart1_receiveData();
 8002194:	f000 f85e 	bl	8002254 <tdUart1_receiveData>
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000600 	.word	0x20000600
 80021a0:	20000614 	.word	0x20000614

080021a4 <tdUart1_sendData>:

void tdUart1_sendData(uint8_t *data, uint8_t size)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
	uint32 i;
	UART_HandleTypeDef *uart_h = tdUsart1_handlerGet();
 80021b0:	f7fe f9e0 	bl	8000574 <tdUsart1_handlerGet>
 80021b4:	60b8      	str	r0, [r7, #8]

	if (data == NULL || size == 0 || uart_h == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <tdUart1_sendData+0x24>
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <tdUart1_sendData+0x24>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d103      	bne.n	80021d0 <tdUart1_sendData+0x2c>
	{
		TD_DEBUG_PRINT(("tdUart1_sendData() ERR: PARAM\n"));
 80021c8:	481f      	ldr	r0, [pc, #124]	; (8002248 <tdUart1_sendData+0xa4>)
 80021ca:	f009 fe7b 	bl	800bec4 <puts>
		return;
 80021ce:	e038      	b.n	8002242 <tdUart1_sendData+0x9e>
		TD_DEBUG_PRINT(("tdUart1_sendData() ERR: BUSY\n"));
		return;
	}
#else
	/* To be used in interrupt handler also */
	for (i = 0; (i < TD_UART1_DMA_TX_WAIT_TIME) && (uart_h->gState != HAL_UART_STATE_READY); i++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e002      	b.n	80021dc <tdUart1_sendData+0x38>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d803      	bhi.n	80021ee <tdUart1_sendData+0x4a>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d1f3      	bne.n	80021d6 <tdUart1_sendData+0x32>
		;

	if (i >= TD_UART1_DMA_TX_WAIT_TIME)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d903      	bls.n	8002200 <tdUart1_sendData+0x5c>
	{
		TD_DEBUG_PRINT(("tdUart1_sendData() ERR: BUSY\n"));
 80021f8:	4814      	ldr	r0, [pc, #80]	; (800224c <tdUart1_sendData+0xa8>)
 80021fa:	f009 fe63 	bl	800bec4 <puts>
		return;
 80021fe:	e020      	b.n	8002242 <tdUart1_sendData+0x9e>
	}
#endif

	TD_UART_DMA_TX_BUF_CLEAR();
 8002200:	2214      	movs	r2, #20
 8002202:	2100      	movs	r1, #0
 8002204:	4812      	ldr	r0, [pc, #72]	; (8002250 <tdUart1_sendData+0xac>)
 8002206:	f009 fdb9 	bl	800bd7c <memset>

	if (size > TD_UART1_DMA_TX_BUF_SIZE)
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	2b14      	cmp	r3, #20
 800220e:	d901      	bls.n	8002214 <tdUart1_sendData+0x70>
		size = TD_UART1_DMA_TX_BUF_SIZE;
 8002210:	2314      	movs	r3, #20
 8002212:	70fb      	strb	r3, [r7, #3]

	memcpy(TD_UART1_DMA_TX_BUF, data, size);
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	461a      	mov	r2, r3
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	480d      	ldr	r0, [pc, #52]	; (8002250 <tdUart1_sendData+0xac>)
 800221c:	f009 fda0 	bl	800bd60 <memcpy>

	HAL_UART_Transmit_DMA(uart_h, TD_UART1_DMA_TX_BUF, size);
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	490a      	ldr	r1, [pc, #40]	; (8002250 <tdUart1_sendData+0xac>)
 8002228:	68b8      	ldr	r0, [r7, #8]
 800222a:	f006 fadf 	bl	80087ec <HAL_UART_Transmit_DMA>
	__HAL_DMA_DISABLE_IT(uart_h->hdmatx, DMA_IT_HT);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0204 	bic.w	r2, r2, #4
 8002240:	601a      	str	r2, [r3, #0]

}
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	0800d2a8 	.word	0x0800d2a8
 800224c:	0800d2c8 	.word	0x0800d2c8
 8002250:	20000600 	.word	0x20000600

08002254 <tdUart1_receiveData>:

void tdUart1_receiveData(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
	UART_HandleTypeDef *uart_h = tdUsart1_handlerGet();
 800225a:	f7fe f98b 	bl	8000574 <tdUsart1_handlerGet>
 800225e:	6078      	str	r0, [r7, #4]

	if (uart_h == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <tdUart1_receiveData+0x1a>
	{
		TD_DEBUG_PRINT(("tdUart1_receiveData() ERR: PARAM\n"));
 8002266:	4811      	ldr	r0, [pc, #68]	; (80022ac <tdUart1_receiveData+0x58>)
 8002268:	f009 fe2c 	bl	800bec4 <puts>
		return;
 800226c:	e01b      	b.n	80022a6 <tdUart1_receiveData+0x52>
	}

	if (uart_h->RxState != HAL_UART_STATE_READY)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002272:	2b20      	cmp	r3, #32
 8002274:	d003      	beq.n	800227e <tdUart1_receiveData+0x2a>
	{
		TD_DEBUG_PRINT(("tdUart1_receiveData() ERR: BUSY\n"));
 8002276:	480e      	ldr	r0, [pc, #56]	; (80022b0 <tdUart1_receiveData+0x5c>)
 8002278:	f009 fe24 	bl	800bec4 <puts>
		return;
 800227c:	e013      	b.n	80022a6 <tdUart1_receiveData+0x52>
	}

	TD_UART_DMA_RX_BUF_CLEAR();
 800227e:	2214      	movs	r2, #20
 8002280:	2100      	movs	r1, #0
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <tdUart1_receiveData+0x60>)
 8002284:	f009 fd7a 	bl	800bd7c <memset>

	HAL_UARTEx_ReceiveToIdle_DMA(uart_h, TD_UART1_DMA_RX_BUF, TD_UART1_DMA_RX_BUF_SIZE);
 8002288:	2214      	movs	r2, #20
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <tdUart1_receiveData+0x60>)
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f007 fce9 	bl	8009c64 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(uart_h->hdmarx, DMA_IT_HT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0204 	bic.w	r2, r2, #4
 80022a4:	601a      	str	r2, [r3, #0]
}
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	0800d2e8 	.word	0x0800d2e8
 80022b0:	0800d30c 	.word	0x0800d30c
 80022b4:	20000614 	.word	0x20000614

080022b8 <HAL_UARTEx_RxEventCallback>:

/* Rx complete when Idle */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a15      	ldr	r2, [pc, #84]	; (8002320 <HAL_UARTEx_RxEventCallback+0x68>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d123      	bne.n	8002316 <HAL_UARTEx_RxEventCallback+0x5e>
	{
		TD_DEBUG_PRINT(("USART1 Rx event\n"));
 80022ce:	4815      	ldr	r0, [pc, #84]	; (8002324 <HAL_UARTEx_RxEventCallback+0x6c>)
 80022d0:	f009 fdf8 	bl	800bec4 <puts>
		memcpy(TD_UART1_DMA_RX_BUF, huart->pRxBuffPtr, Size);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	887a      	ldrh	r2, [r7, #2]
 80022da:	4619      	mov	r1, r3
 80022dc:	4812      	ldr	r0, [pc, #72]	; (8002328 <HAL_UARTEx_RxEventCallback+0x70>)
 80022de:	f009 fd3f 	bl	800bd60 <memcpy>

		HAL_UARTEx_ReceiveToIdle_DMA(huart, TD_UART1_DMA_RX_BUF, TD_UART1_DMA_RX_BUF_SIZE);
 80022e2:	2214      	movs	r2, #20
 80022e4:	4910      	ldr	r1, [pc, #64]	; (8002328 <HAL_UARTEx_RxEventCallback+0x70>)
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f007 fcbc 	bl	8009c64 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0204 	bic.w	r2, r2, #4
 80022fe:	601a      	str	r2, [r3, #0]

		tdUart1Q_putData(TD_UART1_DMA_RX_BUF, Size);
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	4619      	mov	r1, r3
 8002306:	4808      	ldr	r0, [pc, #32]	; (8002328 <HAL_UARTEx_RxEventCallback+0x70>)
 8002308:	f000 f8cc 	bl	80024a4 <tdUart1Q_putData>

		TD_UART_DMA_RX_BUF_CLEAR();
 800230c:	2214      	movs	r2, #20
 800230e:	2100      	movs	r1, #0
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <HAL_UARTEx_RxEventCallback+0x70>)
 8002312:	f009 fd33 	bl	800bd7c <memset>
	}
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40013800 	.word	0x40013800
 8002324:	0800d32c 	.word	0x0800d32c
 8002328:	20000614 	.word	0x20000614

0800232c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a06      	ldr	r2, [pc, #24]	; (8002354 <HAL_UART_RxCpltCallback+0x28>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d105      	bne.n	800234a <HAL_UART_RxCpltCallback+0x1e>
	{
		TD_DEBUG_PRINT(("USART1 Rx comlete\n"));
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <HAL_UART_RxCpltCallback+0x2c>)
 8002340:	f009 fdc0 	bl	800bec4 <puts>
		TD_DEBUG_PRINT(("Something wrong\n"));
 8002344:	4805      	ldr	r0, [pc, #20]	; (800235c <HAL_UART_RxCpltCallback+0x30>)
 8002346:	f009 fdbd 	bl	800bec4 <puts>
	}
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40013800 	.word	0x40013800
 8002358:	0800d33c 	.word	0x0800d33c
 800235c:	0800d350 	.word	0x0800d350

08002360 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <HAL_UART_RxHalfCpltCallback+0x28>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d105      	bne.n	800237e <HAL_UART_RxHalfCpltCallback+0x1e>
	{
		TD_DEBUG_PRINT(("USART1 Rx Half comlete\n"));
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <HAL_UART_RxHalfCpltCallback+0x2c>)
 8002374:	f009 fda6 	bl	800bec4 <puts>
		TD_DEBUG_PRINT(("Something wrong\n"));
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_UART_RxHalfCpltCallback+0x30>)
 800237a:	f009 fda3 	bl	800bec4 <puts>
	}
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40013800 	.word	0x40013800
 800238c:	0800d360 	.word	0x0800d360
 8002390:	0800d350 	.word	0x0800d350

08002394 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_UART_TxCpltCallback+0x20>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d102      	bne.n	80023ac <HAL_UART_TxCpltCallback+0x18>
	{
		TD_DEBUG_PRINT(("USART1 Tx comlete\n"));
 80023a6:	4804      	ldr	r0, [pc, #16]	; (80023b8 <HAL_UART_TxCpltCallback+0x24>)
 80023a8:	f009 fd8c 	bl	800bec4 <puts>
	}
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40013800 	.word	0x40013800
 80023b8:	0800d378 	.word	0x0800d378

080023bc <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a06      	ldr	r2, [pc, #24]	; (80023e4 <HAL_UART_TxHalfCpltCallback+0x28>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d105      	bne.n	80023da <HAL_UART_TxHalfCpltCallback+0x1e>
	{
		TD_DEBUG_PRINT(("USART1 Tx Half comlete\n"));
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <HAL_UART_TxHalfCpltCallback+0x2c>)
 80023d0:	f009 fd78 	bl	800bec4 <puts>
		TD_DEBUG_PRINT(("Something wrong\n"));
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <HAL_UART_TxHalfCpltCallback+0x30>)
 80023d6:	f009 fd75 	bl	800bec4 <puts>
	}
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40013800 	.word	0x40013800
 80023e8:	0800d38c 	.word	0x0800d38c
 80023ec:	0800d350 	.word	0x0800d350

080023f0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <HAL_UART_ErrorCallback+0x28>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d106      	bne.n	8002410 <HAL_UART_ErrorCallback+0x20>
	{
		TD_DEBUG_PRINT(("USART1 Error: %lx\n", huart->ErrorCode));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002408:	4619      	mov	r1, r3
 800240a:	4804      	ldr	r0, [pc, #16]	; (800241c <HAL_UART_ErrorCallback+0x2c>)
 800240c:	f009 fcbe 	bl	800bd8c <iprintf>
	}
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40013800 	.word	0x40013800
 800241c:	0800d3a4 	.word	0x0800d3a4

08002420 <td_uart1_q_buf_clear>:
} td_uart1_q_state_data_t;

td_uart1_q_state_data_t gTdUart1QState;

static inline void td_uart1_q_buf_clear(uint8 i)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
	if (i < TD_UART1_Q_BUF_NUM)
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d811      	bhi.n	8002454 <td_uart1_q_buf_clear+0x34>
	{
		memset(TD_UART1_Q_STATE_BUF(i), 0x00, TD_UART1_Q_BUF_SIZE);
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <td_uart1_q_buf_clear+0x3c>)
 800243c:	4413      	add	r3, r2
 800243e:	2214      	movs	r2, #20
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f009 fc9a 	bl	800bd7c <memset>
		TD_UART1_Q_STATE_BUF_LEN(i)= 0;
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	4a04      	ldr	r2, [pc, #16]	; (800245c <td_uart1_q_buf_clear+0x3c>)
 800244c:	4413      	add	r3, r2
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000628 	.word	0x20000628

08002460 <tdUart1Q_init>:

void tdUart1Q_init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
	uint8 i;

	for (i = 0; i < TD_UART1_Q_BUF_NUM; i++)
 8002466:	2300      	movs	r3, #0
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	e006      	b.n	800247a <tdUart1Q_init+0x1a>
	{
		td_uart1_q_buf_clear(i);
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ffd6 	bl	8002420 <td_uart1_q_buf_clear>
	for (i = 0; i < TD_UART1_Q_BUF_NUM; i++)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	3301      	adds	r3, #1
 8002478:	71fb      	strb	r3, [r7, #7]
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d9f5      	bls.n	800246c <tdUart1Q_init+0xc>
	}

	TD_UART1_Q_FRONT = 0;
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <tdUart1Q_init+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	TD_UART1_Q_REAR = 0;
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <tdUart1Q_init+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	TD_UART1_Q_ITEM_NUM = 0;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <tdUart1Q_init+0x40>)
 8002492:	2200      	movs	r2, #0
 8002494:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000628 	.word	0x20000628

080024a4 <tdUart1Q_putData>:

uint8 tdUart1Q_putData(uint8 *data, uint8 data_len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
	if (data == NULL || data_len == 0)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <tdUart1Q_putData+0x18>
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <tdUart1Q_putData+0x1c>
		return 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	e032      	b.n	8002526 <tdUart1Q_putData+0x82>

	if (data_len > TD_UART1_Q_BUF_SIZE)
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	2b14      	cmp	r3, #20
 80024c4:	d901      	bls.n	80024ca <tdUart1Q_putData+0x26>
		data_len = TD_UART1_Q_BUF_SIZE;
 80024c6:	2314      	movs	r3, #20
 80024c8:	70fb      	strb	r3, [r7, #3]

	TD_UART1_Q_REAR = (TD_UART1_Q_REAR + 1) % TD_UART1_Q_BUF_NUM;
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <tdUart1Q_putData+0x8c>)
 80024cc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80024d0:	3301      	adds	r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	bfb8      	it	lt
 80024da:	425b      	neglt	r3, r3
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <tdUart1Q_putData+0x8c>)
 80024e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	memcpy(TD_UART1_Q_STATE_BUF(TD_UART1_Q_REAR), data, data_len);
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <tdUart1Q_putData+0x8c>)
 80024e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80024ea:	461a      	mov	r2, r3
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <tdUart1Q_putData+0x8c>)
 80024f6:	4413      	add	r3, r2
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f009 fc2f 	bl	800bd60 <memcpy>
	TD_UART1_Q_STATE_BUF_LEN(TD_UART1_Q_REAR)= data_len;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <tdUart1Q_putData+0x8c>)
 8002504:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002508:	461a      	mov	r2, r3
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <tdUart1Q_putData+0x8c>)
 800250c:	4413      	add	r3, r2
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	TD_UART1_Q_ITEM_NUM++;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <tdUart1Q_putData+0x8c>)
 8002516:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800251a:	3301      	adds	r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <tdUart1Q_putData+0x8c>)
 8002520:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	return data_len;
 8002524:	78fb      	ldrb	r3, [r7, #3]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000628 	.word	0x20000628

08002534 <tdUart1Q_getData>:

uint8 tdUart1Q_getData(uint8 *data, uint8 data_len)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	70fb      	strb	r3, [r7, #3]
	if (data == NULL || data_len == 0 || TD_UART1_Q_ITEM_NUM == 0)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <tdUart1Q_getData+0x22>
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <tdUart1Q_getData+0x22>
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <tdUart1Q_getData+0xb8>)
 800254e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <tdUart1Q_getData+0x26>
		return 0;
 8002556:	2300      	movs	r3, #0
 8002558:	e044      	b.n	80025e4 <tdUart1Q_getData+0xb0>

	TD_UART1_Q_FRONT = (TD_UART1_Q_FRONT + 1) % TD_UART1_Q_BUF_NUM;
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <tdUart1Q_getData+0xb8>)
 800255c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002560:	3301      	adds	r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	bfb8      	it	lt
 800256a:	425b      	neglt	r3, r3
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <tdUart1Q_getData+0xb8>)
 8002570:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	if (TD_UART1_Q_STATE_BUF_LEN(TD_UART1_Q_FRONT)< data_len)
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <tdUart1Q_getData+0xb8>)
 8002576:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800257a:	461a      	mov	r2, r3
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <tdUart1Q_getData+0xb8>)
 800257e:	4413      	add	r3, r2
 8002580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	429a      	cmp	r2, r3
 8002588:	d908      	bls.n	800259c <tdUart1Q_getData+0x68>
	data_len = TD_UART1_Q_STATE_BUF_LEN(TD_UART1_Q_FRONT);
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <tdUart1Q_getData+0xb8>)
 800258c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002590:	461a      	mov	r2, r3
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <tdUart1Q_getData+0xb8>)
 8002594:	4413      	add	r3, r2
 8002596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800259a:	70fb      	strb	r3, [r7, #3]

	memcpy(data, TD_UART1_Q_STATE_BUF(TD_UART1_Q_FRONT), data_len);
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <tdUart1Q_getData+0xb8>)
 800259e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80025a2:	461a      	mov	r2, r3
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <tdUart1Q_getData+0xb8>)
 80025ae:	4413      	add	r3, r2
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	4619      	mov	r1, r3
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f009 fbd3 	bl	800bd60 <memcpy>

	TD_USART1_MUTEX_LOCK();
 80025ba:	200e      	movs	r0, #14
 80025bc:	f002 fc85 	bl	8004eca <HAL_NVIC_DisableIRQ>

	TD_UART1_Q_ITEM_NUM--;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <tdUart1Q_getData+0xb8>)
 80025c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <tdUart1Q_getData+0xb8>)
 80025cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	TD_USART1_MUTEX_UNLOCK();
 80025d0:	200e      	movs	r0, #14
 80025d2:	f002 fc6c 	bl	8004eae <HAL_NVIC_EnableIRQ>

	td_uart1_q_buf_clear(TD_UART1_Q_FRONT);
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <tdUart1Q_getData+0xb8>)
 80025d8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff1f 	bl	8002420 <td_uart1_q_buf_clear>

	return data_len;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000628 	.word	0x20000628

080025f0 <tdDebugInit>:
#include "td_debug.h"

#ifdef	TD_DEBUG_ENABLED

void tdDebugInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <tdDebugPrintHex>:

	TD_DEBUG_PRINT(("\n"));
}

void tdDebugPrintHex(uint8_t *data, uint16_t len)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
	uint16_t i;

	if (len == 0)
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d015      	beq.n	800263e <tdDebugPrintHex+0x3e>
	{
		return;
	}

	for (i = 0; i < len; i++)
 8002612:	2300      	movs	r3, #0
 8002614:	81fb      	strh	r3, [r7, #14]
 8002616:	e00a      	b.n	800262e <tdDebugPrintHex+0x2e>
	{
		TD_DEBUG_PRINT(("%02x ", data[i]));
 8002618:	89fb      	ldrh	r3, [r7, #14]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	4809      	ldr	r0, [pc, #36]	; (8002648 <tdDebugPrintHex+0x48>)
 8002624:	f009 fbb2 	bl	800bd8c <iprintf>
	for (i = 0; i < len; i++)
 8002628:	89fb      	ldrh	r3, [r7, #14]
 800262a:	3301      	adds	r3, #1
 800262c:	81fb      	strh	r3, [r7, #14]
 800262e:	89fa      	ldrh	r2, [r7, #14]
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	429a      	cmp	r2, r3
 8002634:	d3f0      	bcc.n	8002618 <tdDebugPrintHex+0x18>
	}

	TD_DEBUG_PRINT(("\n"));
 8002636:	200a      	movs	r0, #10
 8002638:	f009 fbc0 	bl	800bdbc <putchar>
 800263c:	e000      	b.n	8002640 <tdDebugPrintHex+0x40>
		return;
 800263e:	bf00      	nop
}
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	0800d3b8 	.word	0x0800d3b8

0800264c <_write>:

int __io_putchar(int ch);

/* With GCC, printf calls _write() */
int _write(int file, char *ptr, int len)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e009      	b.n	8002672 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	60ba      	str	r2, [r7, #8]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f80c 	bl	8002684 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	dbf1      	blt.n	800265e <_write+0x12>
	}
	return len;
 800267a:	687b      	ldr	r3, [r7, #4]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <__io_putchar>:
FILE __stdin;

int fputc(int ch, FILE *f)

#endif /* __GNUC__ */
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b0a      	cmp	r3, #10
 8002690:	d109      	bne.n	80026a6 <__io_putchar+0x22>
	{
		/* output CR  */
		while (!(TD_RETARGET_UART->ISR & UART_FLAG_TXE))
 8002692:	bf00      	nop
 8002694:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <__io_putchar+0x48>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f9      	beq.n	8002694 <__io_putchar+0x10>
			;

		TD_RETARGET_UART->TDR = '\r';
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <__io_putchar+0x48>)
 80026a2:	220d      	movs	r2, #13
 80026a4:	851a      	strh	r2, [r3, #40]	; 0x28
	}

	while (!(TD_RETARGET_UART->ISR & UART_FLAG_TXE))
 80026a6:	bf00      	nop
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <__io_putchar+0x48>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f9      	beq.n	80026a8 <__io_putchar+0x24>
		;

	TD_RETARGET_UART->TDR = (uint8_t) ch;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <__io_putchar+0x48>)
 80026ba:	b292      	uxth	r2, r2
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28

	return ch;
 80026be:	687b      	ldr	r3, [r7, #4]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40004800 	.word	0x40004800

080026d0 <Reset_Handler>:
 80026d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002708 <LoopForever+0x2>
 80026d4:	f7fe fd28 	bl	8001128 <SystemInit>
 80026d8:	480c      	ldr	r0, [pc, #48]	; (800270c <LoopForever+0x6>)
 80026da:	490d      	ldr	r1, [pc, #52]	; (8002710 <LoopForever+0xa>)
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <LoopForever+0xe>)
 80026de:	2300      	movs	r3, #0
 80026e0:	e002      	b.n	80026e8 <LoopCopyDataInit>

080026e2 <CopyDataInit>:
 80026e2:	58d4      	ldr	r4, [r2, r3]
 80026e4:	50c4      	str	r4, [r0, r3]
 80026e6:	3304      	adds	r3, #4

080026e8 <LoopCopyDataInit>:
 80026e8:	18c4      	adds	r4, r0, r3
 80026ea:	428c      	cmp	r4, r1
 80026ec:	d3f9      	bcc.n	80026e2 <CopyDataInit>
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <LoopForever+0x12>)
 80026f0:	4c0a      	ldr	r4, [pc, #40]	; (800271c <LoopForever+0x16>)
 80026f2:	2300      	movs	r3, #0
 80026f4:	e001      	b.n	80026fa <LoopFillZerobss>

080026f6 <FillZerobss>:
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	3204      	adds	r2, #4

080026fa <LoopFillZerobss>:
 80026fa:	42a2      	cmp	r2, r4
 80026fc:	d3fb      	bcc.n	80026f6 <FillZerobss>
 80026fe:	f009 fb0b 	bl	800bd18 <__libc_init_array>
 8002702:	f7fd ffb1 	bl	8000668 <main>

08002706 <LoopForever>:
 8002706:	e7fe      	b.n	8002706 <LoopForever>
 8002708:	2000a000 	.word	0x2000a000
 800270c:	20000000 	.word	0x20000000
 8002710:	200000f0 	.word	0x200000f0
 8002714:	0800d7d0 	.word	0x0800d7d0
 8002718:	200000f0 	.word	0x200000f0
 800271c:	200006e0 	.word	0x200006e0

08002720 <COMP_IRQHandler>:
 8002720:	e7fe      	b.n	8002720 <COMP_IRQHandler>
	...

08002724 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_Init+0x3c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_Init+0x3c>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273a:	2003      	movs	r0, #3
 800273c:	f002 fb90 	bl	8004e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002740:	2000      	movs	r0, #0
 8002742:	f000 f80f 	bl	8002764 <HAL_InitTick>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	71fb      	strb	r3, [r7, #7]
 8002750:	e001      	b.n	8002756 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002752:	f7fe f85b 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002756:	79fb      	ldrb	r3, [r7, #7]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40022000 	.word	0x40022000

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_InitTick+0x6c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_InitTick+0x70>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_InitTick+0x6c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fba9 	bl	8004ee6 <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10f      	bne.n	80027ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b0f      	cmp	r3, #15
 800279e:	d809      	bhi.n	80027b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a0:	2200      	movs	r2, #0
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f002 fb65 	bl	8004e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_InitTick+0x74>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e007      	b.n	80027c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e004      	b.n	80027c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e001      	b.n	80027c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000088 	.word	0x20000088
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000084 	.word	0x20000084

080027dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x20>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_IncTick+0x24>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <HAL_IncTick+0x24>)
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000088 	.word	0x20000088
 8002800:	20000658 	.word	0x20000658

08002804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return uwTick;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_GetTick+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000658 	.word	0x20000658

0800281c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	609a      	str	r2, [r3, #8]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3360      	adds	r3, #96	; 0x60
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <LL_ADC_SetOffset+0x44>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	03fff000 	.word	0x03fff000

080028cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3360      	adds	r3, #96	; 0x60
 80028da:	461a      	mov	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3360      	adds	r3, #96	; 0x60
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	615a      	str	r2, [r3, #20]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3330      	adds	r3, #48	; 0x30
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	4413      	add	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	211f      	movs	r1, #31
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	401a      	ands	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	f003 011f 	and.w	r1, r3, #31
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	431a      	orrs	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3314      	adds	r3, #20
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	0e5b      	lsrs	r3, r3, #25
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	4413      	add	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	0d1b      	lsrs	r3, r3, #20
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	2107      	movs	r1, #7
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	0d1b      	lsrs	r3, r3, #20
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f003 0318 	and.w	r3, r3, #24
 8002a72:	4908      	ldr	r1, [pc, #32]	; (8002a94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a74:	40d9      	lsrs	r1, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	400b      	ands	r3, r1
 8002a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	0007ffff 	.word	0x0007ffff

08002a98 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	0d1b      	lsrs	r3, r3, #20
 8002aae:	f003 0103 	and.w	r1, r3, #3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 0201 	and.w	r2, r3, #1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4403      	add	r3, r0
 8002ac6:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8002ad2:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	401a      	ands	r2, r3
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	400b      	ands	r3, r1
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b087      	sub	sp, #28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3320      	adds	r3, #32
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	0d1b      	lsrs	r3, r3, #20
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	4413      	add	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0419      	lsls	r1, r3, #16
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	430b      	orrs	r3, r1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 031f 	and.w	r3, r3, #31
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6093      	str	r3, [r2, #8]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba6:	d101      	bne.n	8002bac <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf6:	d101      	bne.n	8002bfc <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c46:	f043 0202 	orr.w	r2, r3, #2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <LL_ADC_IsEnabled+0x18>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <LL_ADC_IsEnabled+0x1a>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d101      	bne.n	8002c98 <LL_ADC_IsDisableOngoing+0x18>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <LL_ADC_IsDisableOngoing+0x1a>
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cb6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cba:	f043 0204 	orr.w	r2, r3, #4
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ce2:	f043 0210 	orr.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d101      	bne.n	8002d0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d101      	bne.n	8002d5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2280      	movs	r2, #128	; 0x80
 8002d76:	601a      	str	r2, [r3, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	601a      	str	r2, [r3, #0]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	605a      	str	r2, [r3, #4]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	605a      	str	r2, [r3, #4]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	605a      	str	r2, [r3, #4]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	605a      	str	r2, [r3, #4]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	605a      	str	r2, [r3, #4]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	605a      	str	r2, [r3, #4]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e131      	b.n	80030fa <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7fd fcd5 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fe68 	bl	8002b92 <LL_ADC_IsDeepPowerDownEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d004      	beq.n	8002ed2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fe4e 	bl	8002b6e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe83 	bl	8002be2 <LL_ADC_IsInternalRegulatorEnabled>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d115      	bne.n	8002f0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fe67 	bl	8002bba <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eec:	4b85      	ldr	r3, [pc, #532]	; (8003104 <HAL_ADC_Init+0x288>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	099b      	lsrs	r3, r3, #6
 8002ef2:	4a85      	ldr	r2, [pc, #532]	; (8003108 <HAL_ADC_Init+0x28c>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	3301      	adds	r3, #1
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f00:	e002      	b.n	8002f08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f9      	bne.n	8002f02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fe65 	bl	8002be2 <LL_ADC_IsInternalRegulatorEnabled>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f043 0210 	orr.w	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	f043 0201 	orr.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fed9 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 8002f44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 80ca 	bne.w	80030e8 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f040 80c6 	bne.w	80030e8 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f64:	f043 0202 	orr.w	r2, r3, #2
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fe72 	bl	8002c5a <LL_ADC_IsEnabled>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d110      	bne.n	8002f9e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f7c:	4863      	ldr	r0, [pc, #396]	; (800310c <HAL_ADC_Init+0x290>)
 8002f7e:	f7ff fe6c 	bl	8002c5a <LL_ADC_IsEnabled>
 8002f82:	4604      	mov	r4, r0
 8002f84:	4862      	ldr	r0, [pc, #392]	; (8003110 <HAL_ADC_Init+0x294>)
 8002f86:	f7ff fe68 	bl	8002c5a <LL_ADC_IsEnabled>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4323      	orrs	r3, r4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4619      	mov	r1, r3
 8002f98:	485e      	ldr	r0, [pc, #376]	; (8003114 <HAL_ADC_Init+0x298>)
 8002f9a:	f7ff fc3f 	bl	800281c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7e5b      	ldrb	r3, [r3, #25]
 8002fa2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fa8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002fae:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002fb4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fbc:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	045b      	lsls	r3, r3, #17
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_ADC_Init+0x29c>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	69b9      	ldr	r1, [r7, #24]
 8003006:	430b      	orrs	r3, r1
 8003008:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fe71 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 8003014:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fe92 	bl	8002d44 <LL_ADC_INJ_IsConversionOngoing>
 8003020:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d13d      	bne.n	80030a4 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d13a      	bne.n	80030a4 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003032:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800303a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800304a:	f023 0302 	bic.w	r3, r3, #2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	69b9      	ldr	r1, [r7, #24]
 8003054:	430b      	orrs	r3, r1
 8003056:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800305e:	2b01      	cmp	r3, #1
 8003060:	d118      	bne.n	8003094 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003078:	4311      	orrs	r1, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003084:	430a      	orrs	r2, r1
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	611a      	str	r2, [r3, #16]
 8003092:	e007      	b.n	80030a4 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d10c      	bne.n	80030c6 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f023 010f 	bic.w	r1, r3, #15
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	1e5a      	subs	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
 80030c4:	e007      	b.n	80030d6 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 020f 	bic.w	r2, r2, #15
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
 80030e6:	e007      	b.n	80030f8 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd90      	pop	{r4, r7, pc}
 8003102:	bf00      	nop
 8003104:	20000000 	.word	0x20000000
 8003108:	053e2d63 	.word	0x053e2d63
 800310c:	50040000 	.word	0x50040000
 8003110:	50040100 	.word	0x50040100
 8003114:	50040300 	.word	0x50040300
 8003118:	fff0c007 	.word	0xfff0c007

0800311c <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e111      	b.n	8003352 <HAL_ADC_DeInit+0x236>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	f043 0202 	orr.w	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	655a      	str	r2, [r3, #84]	; 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800313a:	2103      	movs	r1, #3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f001 fa69 	bl	8004614 <ADC_ConversionStop>
 8003142:	4603      	mov	r3, r0
 8003144:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003154:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f001 fb9b 	bl	8004898 <ADC_Disable>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003180:	f023 0307 	bic.w	r3, r3, #7
 8003184:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800318e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 800319e:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80031ae:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68d9      	ldr	r1, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4b68      	ldr	r3, [pc, #416]	; (800335c <HAL_ADC_DeInit+0x240>)
 80031bc:	400b      	ands	r3, r1
 80031be:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031ce:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031de:	f023 0307 	bic.w	r3, r3, #7
 80031e2:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031f2:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8003202:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a1a      	ldr	r2, [r3, #32]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003212:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003232:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b48      	ldr	r3, [pc, #288]	; (8003360 <HAL_ADC_DeInit+0x244>)
 8003240:	400b      	ands	r3, r1
 8003242:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b45      	ldr	r3, [pc, #276]	; (8003364 <HAL_ADC_DeInit+0x248>)
 8003250:	400b      	ands	r3, r1
 8003252:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b41      	ldr	r3, [pc, #260]	; (8003364 <HAL_ADC_DeInit+0x248>)
 8003260:	400b      	ands	r3, r1
 8003262:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 8003272:	f023 0307 	bic.w	r3, r3, #7
 8003276:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b39      	ldr	r3, [pc, #228]	; (8003368 <HAL_ADC_DeInit+0x24c>)
 8003284:	400b      	ands	r3, r1
 8003286:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b35      	ldr	r3, [pc, #212]	; (8003368 <HAL_ADC_DeInit+0x24c>)
 8003294:	400b      	ands	r3, r1
 8003296:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_ADC_DeInit+0x24c>)
 80032a4:	400b      	ands	r3, r1
 80032a6:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b2d      	ldr	r3, [pc, #180]	; (8003368 <HAL_ADC_DeInit+0x24c>)
 80032b4:	400b      	ands	r3, r1
 80032b6:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	0cdb      	lsrs	r3, r3, #19
 80032c6:	04db      	lsls	r3, r3, #19
 80032c8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	0cdb      	lsrs	r3, r3, #19
 80032da:	04db      	lsls	r3, r3, #19
 80032dc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	0cdb      	lsrs	r3, r3, #19
 80032ee:	04db      	lsls	r3, r3, #19
 80032f0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8003304:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003308:	4818      	ldr	r0, [pc, #96]	; (800336c <HAL_ADC_DeInit+0x250>)
 800330a:	f7ff fca6 	bl	8002c5a <LL_ADC_IsEnabled>
 800330e:	4604      	mov	r4, r0
 8003310:	4817      	ldr	r0, [pc, #92]	; (8003370 <HAL_ADC_DeInit+0x254>)
 8003312:	f7ff fca2 	bl	8002c5a <LL_ADC_IsEnabled>
 8003316:	4603      	mov	r3, r0
 8003318:	4323      	orrs	r3, r4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <HAL_ADC_DeInit+0x214>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_ADC_DeInit+0x258>)
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	4914      	ldr	r1, [pc, #80]	; (8003374 <HAL_ADC_DeInit+0x258>)
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_ADC_DeInit+0x25c>)
 8003326:	4013      	ands	r3, r2
 8003328:	608b      	str	r3, [r1, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd fb80 	bl	8000a30 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	65da      	str	r2, [r3, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	655a      	str	r2, [r3, #84]	; 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	bd90      	pop	{r4, r7, pc}
 800335a:	bf00      	nop
 800335c:	80008004 	.word	0x80008004
 8003360:	e0820830 	.word	0xe0820830
 8003364:	e0820820 	.word	0xe0820820
 8003368:	03fff000 	.word	0x03fff000
 800336c:	50040000 	.word	0x50040000
 8003370:	50040100 	.word	0x50040100
 8003374:	50040300 	.word	0x50040300
 8003378:	fe0010e0 	.word	0xfe0010e0

0800337c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003388:	4850      	ldr	r0, [pc, #320]	; (80034cc <HAL_ADC_Start_DMA+0x150>)
 800338a:	f7ff fbd4 	bl	8002b36 <LL_ADC_GetMultimode>
 800338e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fcae 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	f040 808e 	bne.w	80034be <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_Start_DMA+0x34>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e089      	b.n	80034c4 <HAL_ADC_Start_DMA+0x148>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d002      	beq.n	80033ca <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b09      	cmp	r3, #9
 80033c8:	d172      	bne.n	80034b0 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f001 f9de 	bl	800478c <ADC_Enable>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d165      	bne.n	80034a6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a37      	ldr	r2, [pc, #220]	; (80034d0 <HAL_ADC_Start_DMA+0x154>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d002      	beq.n	80033fe <HAL_ADC_Start_DMA+0x82>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	e000      	b.n	8003400 <HAL_ADC_Start_DMA+0x84>
 80033fe:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <HAL_ADC_Start_DMA+0x158>)
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	4293      	cmp	r3, r2
 8003406:	d002      	beq.n	800340e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d006      	beq.n	8003434 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f023 0206 	bic.w	r2, r3, #6
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	659a      	str	r2, [r3, #88]	; 0x58
 8003432:	e002      	b.n	800343a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <HAL_ADC_Start_DMA+0x15c>)
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	4a25      	ldr	r2, [pc, #148]	; (80034dc <HAL_ADC_Start_DMA+0x160>)
 8003448:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <HAL_ADC_Start_DMA+0x164>)
 8003450:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	221c      	movs	r2, #28
 8003458:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0210 	orr.w	r2, r2, #16
 8003470:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3340      	adds	r3, #64	; 0x40
 800348c:	4619      	mov	r1, r3
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f001 fe7f 	bl	8005194 <HAL_DMA_Start_IT>
 8003496:	4603      	mov	r3, r0
 8003498:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fc01 	bl	8002ca6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80034a4:	e00d      	b.n	80034c2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80034ae:	e008      	b.n	80034c2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034bc:	e001      	b.n	80034c2 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034be:	2302      	movs	r3, #2
 80034c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	50040300 	.word	0x50040300
 80034d0:	50040100 	.word	0x50040100
 80034d4:	50040000 	.word	0x50040000
 80034d8:	08004957 	.word	0x08004957
 80034dc:	08004a2f 	.word	0x08004a2f
 80034e0:	08004a4b 	.word	0x08004a4b

080034e4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_ADC_Stop_DMA+0x16>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e051      	b.n	800359e <HAL_ADC_Stop_DMA+0xba>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003502:	2103      	movs	r1, #3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f001 f885 	bl	8004614 <ADC_ConversionStop>
 800350a:	4603      	mov	r3, r0
 800350c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d13f      	bne.n	8003594 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003528:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d10f      	bne.n	8003552 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	4618      	mov	r0, r3
 8003538:	f001 fe8c 	bl	8005254 <HAL_DMA_Abort>
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0210 	bic.w	r2, r2, #16
 8003560:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f001 f995 	bl	8004898 <ADC_Disable>
 800356e:	4603      	mov	r3, r0
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	e002      	b.n	800357a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f001 f98f 	bl	8004898 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80035b0:	2300      	movs	r3, #0
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035c4:	4882      	ldr	r0, [pc, #520]	; (80037d0 <HAL_ADC_IRQHandler+0x228>)
 80035c6:	f7ff fab6 	bl	8002b36 <LL_ADC_GetMultimode>
 80035ca:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d017      	beq.n	8003606 <HAL_ADC_IRQHandler+0x5e>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f001 fa8e 	bl	8004b1a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2202      	movs	r2, #2
 8003604:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <HAL_ADC_IRQHandler+0x72>
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8083 	beq.w	800372c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d07d      	beq.n	800372c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff f981 	bl	8002954 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d062      	beq.n	800371e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5d      	ldr	r2, [pc, #372]	; (80037d4 <HAL_ADC_IRQHandler+0x22c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d002      	beq.n	8003668 <HAL_ADC_IRQHandler+0xc0>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	e000      	b.n	800366a <HAL_ADC_IRQHandler+0xc2>
 8003668:	4b5b      	ldr	r3, [pc, #364]	; (80037d8 <HAL_ADC_IRQHandler+0x230>)
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	4293      	cmp	r3, r2
 8003670:	d008      	beq.n	8003684 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d002      	beq.n	8003684 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b09      	cmp	r3, #9
 8003682:	d104      	bne.n	800368e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	623b      	str	r3, [r7, #32]
 800368c:	e00c      	b.n	80036a8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a50      	ldr	r2, [pc, #320]	; (80037d4 <HAL_ADC_IRQHandler+0x22c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d002      	beq.n	800369e <HAL_ADC_IRQHandler+0xf6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	e000      	b.n	80036a0 <HAL_ADC_IRQHandler+0xf8>
 800369e:	4b4e      	ldr	r3, [pc, #312]	; (80037d8 <HAL_ADC_IRQHandler+0x230>)
 80036a0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d135      	bne.n	800371e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d12e      	bne.n	800371e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fb16 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11a      	bne.n	8003706 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 020c 	bic.w	r2, r2, #12
 80036de:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d112      	bne.n	800371e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	655a      	str	r2, [r3, #84]	; 0x54
 8003704:	e00b      	b.n	800371e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	f043 0210 	orr.w	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f95c 	bl	80039dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	220c      	movs	r2, #12
 800372a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <HAL_ADC_IRQHandler+0x198>
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10b      	bne.n	8003758 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 809f 	beq.w	800388a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8099 	beq.w	800388a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff f92c 	bl	80029d2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800377a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff f8e7 	bl	8002954 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003786:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a11      	ldr	r2, [pc, #68]	; (80037d4 <HAL_ADC_IRQHandler+0x22c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d002      	beq.n	8003798 <HAL_ADC_IRQHandler+0x1f0>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	e000      	b.n	800379a <HAL_ADC_IRQHandler+0x1f2>
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <HAL_ADC_IRQHandler+0x230>)
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	4293      	cmp	r3, r2
 80037a0:	d008      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d002      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	d104      	bne.n	80037be <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	e013      	b.n	80037e6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <HAL_ADC_IRQHandler+0x22c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_ADC_IRQHandler+0x234>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	e007      	b.n	80037de <HAL_ADC_IRQHandler+0x236>
 80037ce:	bf00      	nop
 80037d0:	50040300 	.word	0x50040300
 80037d4:	50040100 	.word	0x50040100
 80037d8:	50040000 	.word	0x50040000
 80037dc:	4b7d      	ldr	r3, [pc, #500]	; (80039d4 <HAL_ADC_IRQHandler+0x42c>)
 80037de:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d047      	beq.n	800387c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <HAL_ADC_IRQHandler+0x25e>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d03f      	beq.n	800387c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003802:	2b00      	cmp	r3, #0
 8003804:	d13a      	bne.n	800387c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d133      	bne.n	800387c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d12e      	bne.n	800387c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fa8e 	bl	8002d44 <LL_ADC_INJ_IsConversionOngoing>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11a      	bne.n	8003864 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800383c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d112      	bne.n	800387c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
 8003862:	e00b      	b.n	800387c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	f043 0210 	orr.w	r2, r3, #16
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	f043 0201 	orr.w	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f001 f924 	bl	8004aca <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2260      	movs	r2, #96	; 0x60
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	d011      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x310>
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fc fed1 	bl	8000652 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d012      	beq.n	80038e8 <HAL_ADC_IRQHandler+0x340>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00d      	beq.n	80038e8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f001 f90a 	bl	8004af2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d012      	beq.n	8003918 <HAL_ADC_IRQHandler+0x370>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00d      	beq.n	8003918 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f001 f8fc 	bl	8004b06 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003916:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d036      	beq.n	8003990 <HAL_ADC_IRQHandler+0x3e8>
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d031      	beq.n	8003990 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003934:	2301      	movs	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
 8003938:	e014      	b.n	8003964 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003940:	4825      	ldr	r0, [pc, #148]	; (80039d8 <HAL_ADC_IRQHandler+0x430>)
 8003942:	f7ff f906 	bl	8002b52 <LL_ADC_GetMultiDMATransfer>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800394c:	2301      	movs	r3, #1
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
 8003950:	e008      	b.n	8003964 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003960:	2301      	movs	r3, #1
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	2b01      	cmp	r3, #1
 8003968:	d10e      	bne.n	8003988 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	f043 0202 	orr.w	r2, r3, #2
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fc fe5b 	bl	800063e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2210      	movs	r2, #16
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <HAL_ADC_IRQHandler+0x424>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	f043 0208 	orr.w	r2, r3, #8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f001 f889 	bl	8004ade <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80039cc:	bf00      	nop
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	50040000 	.word	0x50040000
 80039d8:	50040300 	.word	0x50040300

080039dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b0b6      	sub	sp, #216	; 0xd8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x22>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e3d5      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x7ce>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f95f 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 83ba 	bne.w	80041b4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b05      	cmp	r3, #5
 8003a46:	d824      	bhi.n	8003a92 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	3b02      	subs	r3, #2
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d81b      	bhi.n	8003a8a <HAL_ADC_ConfigChannel+0x86>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_ADC_ConfigChannel+0x54>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a71 	.word	0x08003a71
 8003a60:	08003a79 	.word	0x08003a79
 8003a64:	08003a81 	.word	0x08003a81
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	605a      	str	r2, [r3, #4]
          break;
 8003a6e:	e011      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2212      	movs	r2, #18
 8003a74:	605a      	str	r2, [r3, #4]
          break;
 8003a76:	e00d      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2218      	movs	r2, #24
 8003a7c:	605a      	str	r2, [r3, #4]
          break;
 8003a7e:	e009      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a86:	605a      	str	r2, [r3, #4]
          break;
 8003a88:	e004      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2206      	movs	r2, #6
 8003a8e:	605a      	str	r2, [r3, #4]
          break;
 8003a90:	e000      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003a92:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f7fe ff6a 	bl	800297a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff f923 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 8003ab0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff f943 	bl	8002d44 <LL_ADC_INJ_IsConversionOngoing>
 8003abe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 81c1 	bne.w	8003e4e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f040 81bc 	bne.w	8003e4e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ade:	d10f      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4619      	mov	r1, r3
 8003aec:	f7fe ff84 	bl	80029f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe ff18 	bl	800292e <LL_ADC_SetSamplingTimeCommonConfig>
 8003afe:	e00e      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6819      	ldr	r1, [r3, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f7fe ff73 	bl	80029f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe ff08 	bl	800292e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	08db      	lsrs	r3, r3, #3
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d00a      	beq.n	8003b56 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6919      	ldr	r1, [r3, #16]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b50:	f7fe fe98 	bl	8002884 <LL_ADC_SetOffset>
 8003b54:	e17b      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe feb5 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x17e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe feaa 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	0e9b      	lsrs	r3, r3, #26
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	e01e      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x1bc>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fe9f 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e004      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003bb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x1d4>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0e9b      	lsrs	r3, r3, #26
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	e018      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x206>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003bf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	e004      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c04:	fab3 f383 	clz	r3, r3
 8003c08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d106      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fe6e 	bl	80028f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fe52 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x244>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2101      	movs	r1, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fe47 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	0e9b      	lsrs	r3, r3, #26
 8003c42:	f003 021f 	and.w	r2, r3, #31
 8003c46:	e01e      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x282>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fe3c 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003c76:	2320      	movs	r3, #32
 8003c78:	e004      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x29a>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	0e9b      	lsrs	r3, r3, #26
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	e018      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x2cc>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003cba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003cc2:	2320      	movs	r3, #32
 8003cc4:	e004      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d106      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe fe0b 	bl	80028f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe fdef 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x30a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fde4 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003d04:	4603      	mov	r3, r0
 8003d06:	0e9b      	lsrs	r3, r3, #26
 8003d08:	f003 021f 	and.w	r2, r3, #31
 8003d0c:	e01e      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x348>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2102      	movs	r1, #2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fdd9 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	e004      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x360>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0e9b      	lsrs	r3, r3, #26
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	e016      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x38e>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003d84:	2320      	movs	r3, #32
 8003d86:	e004      	b.n	8003d92 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d106      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fdaa 	bl	80028f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2103      	movs	r1, #3
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fd8e 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x3cc>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2103      	movs	r1, #3
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fd83 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	0e9b      	lsrs	r3, r3, #26
 8003dca:	f003 021f 	and.w	r2, r3, #31
 8003dce:	e017      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x3fc>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2103      	movs	r1, #3
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe fd78 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003df2:	2320      	movs	r3, #32
 8003df4:	e003      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df8:	fab3 f383 	clz	r3, r3
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x414>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	0e9b      	lsrs	r3, r3, #26
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	e011      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x438>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003e30:	2320      	movs	r3, #32
 8003e32:	e003      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d106      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2103      	movs	r1, #3
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe fd55 	bl	80028f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe ff01 	bl	8002c5a <LL_ADC_IsEnabled>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 8140 	bne.w	80040e0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6819      	ldr	r1, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f7fe fdef 	bl	8002a50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	4a8f      	ldr	r2, [pc, #572]	; (80040b4 <HAL_ADC_ConfigChannel+0x6b0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	f040 8131 	bne.w	80040e0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10b      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x4a2>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	0e9b      	lsrs	r3, r3, #26
 8003e94:	3301      	adds	r3, #1
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2b09      	cmp	r3, #9
 8003e9c:	bf94      	ite	ls
 8003e9e:	2301      	movls	r3, #1
 8003ea0:	2300      	movhi	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	e019      	b.n	8003eda <HAL_ADC_ConfigChannel+0x4d6>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	e003      	b.n	8003eca <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	bf94      	ite	ls
 8003ed4:	2301      	movls	r3, #1
 8003ed6:	2300      	movhi	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d079      	beq.n	8003fd2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d107      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x4f6>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	0e9b      	lsrs	r3, r3, #26
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	069b      	lsls	r3, r3, #26
 8003ef4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ef8:	e015      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x522>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003f12:	2320      	movs	r3, #32
 8003f14:	e003      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f18:	fab3 f383 	clz	r3, r3
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	069b      	lsls	r3, r3, #26
 8003f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x542>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	0e9b      	lsrs	r3, r3, #26
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2101      	movs	r1, #1
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	e017      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x572>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4e:	fa93 f3a3 	rbit	r3, r3
 8003f52:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003f5e:	2320      	movs	r3, #32
 8003f60:	e003      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2101      	movs	r1, #1
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	ea42 0103 	orr.w	r1, r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x598>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	0e9b      	lsrs	r3, r3, #26
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	f003 021f 	and.w	r2, r3, #31
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	051b      	lsls	r3, r3, #20
 8003f9a:	e018      	b.n	8003fce <HAL_ADC_ConfigChannel+0x5ca>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	e003      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	f003 021f 	and.w	r2, r3, #31
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	e081      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x5ea>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	0e9b      	lsrs	r3, r3, #26
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	069b      	lsls	r3, r3, #26
 8003fe8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fec:	e015      	b.n	800401a <HAL_ADC_ConfigChannel+0x616>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	fa93 f3a3 	rbit	r3, r3
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004006:	2320      	movs	r3, #32
 8004008:	e003      	b.n	8004012 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	fab3 f383 	clz	r3, r3
 8004010:	b2db      	uxtb	r3, r3
 8004012:	3301      	adds	r3, #1
 8004014:	069b      	lsls	r3, r3, #26
 8004016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <HAL_ADC_ConfigChannel+0x636>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	0e9b      	lsrs	r3, r3, #26
 800402c:	3301      	adds	r3, #1
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2101      	movs	r1, #1
 8004034:	fa01 f303 	lsl.w	r3, r1, r3
 8004038:	e017      	b.n	800406a <HAL_ADC_ConfigChannel+0x666>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	fa93 f3a3 	rbit	r3, r3
 8004046:	61fb      	str	r3, [r7, #28]
  return result;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004052:	2320      	movs	r3, #32
 8004054:	e003      	b.n	800405e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	fab3 f383 	clz	r3, r3
 800405c:	b2db      	uxtb	r3, r3
 800405e:	3301      	adds	r3, #1
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	2101      	movs	r1, #1
 8004066:	fa01 f303 	lsl.w	r3, r1, r3
 800406a:	ea42 0103 	orr.w	r1, r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10d      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x692>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	0e9b      	lsrs	r3, r3, #26
 8004080:	3301      	adds	r3, #1
 8004082:	f003 021f 	and.w	r2, r3, #31
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	3b1e      	subs	r3, #30
 800408e:	051b      	lsls	r3, r3, #20
 8004090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004094:	e01e      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x6d0>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	613b      	str	r3, [r7, #16]
  return result;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80040ae:	2320      	movs	r3, #32
 80040b0:	e006      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x6bc>
 80040b2:	bf00      	nop
 80040b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	fab3 f383 	clz	r3, r3
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	3301      	adds	r3, #1
 80040c2:	f003 021f 	and.w	r2, r3, #31
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	3b1e      	subs	r3, #30
 80040ce:	051b      	lsls	r3, r3, #20
 80040d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040d4:	430b      	orrs	r3, r1
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	6892      	ldr	r2, [r2, #8]
 80040da:	4619      	mov	r1, r3
 80040dc:	f7fe fc8c 	bl	80029f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b3d      	ldr	r3, [pc, #244]	; (80041dc <HAL_ADC_ConfigChannel+0x7d8>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d06c      	beq.n	80041c6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040ec:	483c      	ldr	r0, [pc, #240]	; (80041e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80040ee:	f7fe fbbb 	bl	8002868 <LL_ADC_GetCommonPathInternalCh>
 80040f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a3a      	ldr	r2, [pc, #232]	; (80041e4 <HAL_ADC_ConfigChannel+0x7e0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d127      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d121      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a35      	ldr	r2, [pc, #212]	; (80041e8 <HAL_ADC_ConfigChannel+0x7e4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d157      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800411a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800411e:	4619      	mov	r1, r3
 8004120:	482f      	ldr	r0, [pc, #188]	; (80041e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004122:	f7fe fb8e 	bl	8002842 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004126:	4b31      	ldr	r3, [pc, #196]	; (80041ec <HAL_ADC_ConfigChannel+0x7e8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	4a30      	ldr	r2, [pc, #192]	; (80041f0 <HAL_ADC_ConfigChannel+0x7ec>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004140:	e002      	b.n	8004148 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3b01      	subs	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f9      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800414e:	e03a      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a27      	ldr	r2, [pc, #156]	; (80041f4 <HAL_ADC_ConfigChannel+0x7f0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d113      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x77e>
 800415a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800415e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10d      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1f      	ldr	r2, [pc, #124]	; (80041e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d12a      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004178:	4619      	mov	r1, r3
 800417a:	4819      	ldr	r0, [pc, #100]	; (80041e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800417c:	f7fe fb61 	bl	8002842 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004180:	e021      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1c      	ldr	r2, [pc, #112]	; (80041f8 <HAL_ADC_ConfigChannel+0x7f4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d11c      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800418c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d116      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d111      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041aa:	4619      	mov	r1, r3
 80041ac:	480c      	ldr	r0, [pc, #48]	; (80041e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80041ae:	f7fe fb48 	bl	8002842 <LL_ADC_SetCommonPathInternalCh>
 80041b2:	e008      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	37d8      	adds	r7, #216	; 0xd8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	80080000 	.word	0x80080000
 80041e0:	50040300 	.word	0x50040300
 80041e4:	c7520000 	.word	0xc7520000
 80041e8:	50040000 	.word	0x50040000
 80041ec:	20000000 	.word	0x20000000
 80041f0:	053e2d63 	.word	0x053e2d63
 80041f4:	cb840000 	.word	0xcb840000
 80041f8:	80000001 	.word	0x80000001

080041fc <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08e      	sub	sp, #56	; 0x38
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004214:	d003      	beq.n	800421e <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800421a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_ADC_AnalogWDGConfig+0x30>
 8004228:	2302      	movs	r3, #2
 800422a:	e1ec      	b.n	8004606 <HAL_ADC_AnalogWDGConfig+0x40a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fd5c 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 800423e:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe fd7d 	bl	8002d44 <LL_ADC_INJ_IsConversionOngoing>
 800424a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 81ca 	bne.w	80045e8 <HAL_ADC_AnalogWDGConfig+0x3ec>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 81c6 	bne.w	80045e8 <HAL_ADC_AnalogWDGConfig+0x3ec>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a9b      	ldr	r2, [pc, #620]	; (80044d0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	f040 80a2 	bne.w	80043ac <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004270:	d034      	beq.n	80042dc <HAL_ADC_AnalogWDGConfig+0xe0>
 8004272:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004276:	d856      	bhi.n	8004326 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004278:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800427c:	d04b      	beq.n	8004316 <HAL_ADC_AnalogWDGConfig+0x11a>
 800427e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004282:	d850      	bhi.n	8004326 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004284:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004288:	d01b      	beq.n	80042c2 <HAL_ADC_AnalogWDGConfig+0xc6>
 800428a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800428e:	d84a      	bhi.n	8004326 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004294:	d037      	beq.n	8004306 <HAL_ADC_AnalogWDGConfig+0x10a>
 8004296:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800429a:	d844      	bhi.n	8004326 <HAL_ADC_AnalogWDGConfig+0x12a>
 800429c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042a0:	d029      	beq.n	80042f6 <HAL_ADC_AnalogWDGConfig+0xfa>
 80042a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042a6:	d13e      	bne.n	8004326 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80042b4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80042b8:	461a      	mov	r2, r3
 80042ba:	4985      	ldr	r1, [pc, #532]	; (80044d0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80042bc:	f7fe fbec 	bl	8002a98 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 80042c0:	e039      	b.n	8004336 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80042ce:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 80042d2:	461a      	mov	r2, r3
 80042d4:	497e      	ldr	r1, [pc, #504]	; (80044d0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80042d6:	f7fe fbdf 	bl	8002a98 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 80042da:	e02c      	b.n	8004336 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80042e8:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 80042ec:	461a      	mov	r2, r3
 80042ee:	4978      	ldr	r1, [pc, #480]	; (80044d0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80042f0:	f7fe fbd2 	bl	8002a98 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80042f4:	e01f      	b.n	8004336 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a76      	ldr	r2, [pc, #472]	; (80044d4 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 80042fc:	4974      	ldr	r1, [pc, #464]	; (80044d0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fbca 	bl	8002a98 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004304:	e017      	b.n	8004336 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a73      	ldr	r2, [pc, #460]	; (80044d8 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 800430c:	4970      	ldr	r1, [pc, #448]	; (80044d0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe fbc2 	bl	8002a98 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004314:	e00f      	b.n	8004336 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a70      	ldr	r2, [pc, #448]	; (80044dc <HAL_ADC_AnalogWDGConfig+0x2e0>)
 800431c:	496c      	ldr	r1, [pc, #432]	; (80044d0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fbba 	bl	8002a98 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004324:	e007      	b.n	8004336 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	4968      	ldr	r1, [pc, #416]	; (80044d0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fbb2 	bl	8002a98 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004334:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	08db      	lsrs	r3, r3, #3
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6819      	ldr	r1, [r3, #0]
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004372:	f7fe fbbe 	bl	8002af2 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe fcef 	bl	8002d6a <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	7b1b      	ldrb	r3, [r3, #12]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fd0f 	bl	8002dbc <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800439e:	e12c      	b.n	80045fa <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fd39 	bl	8002e1c <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80043aa:	e126      	b.n	80045fa <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80043b4:	d01d      	beq.n	80043f2 <HAL_ADC_AnalogWDGConfig+0x1f6>
 80043b6:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80043ba:	f200 8093 	bhi.w	80044e4 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80043be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043c2:	d07b      	beq.n	80044bc <HAL_ADC_AnalogWDGConfig+0x2c0>
 80043c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043c8:	f200 808c 	bhi.w	80044e4 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80043cc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80043d0:	d00f      	beq.n	80043f2 <HAL_ADC_AnalogWDGConfig+0x1f6>
 80043d2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80043d6:	f200 8085 	bhi.w	80044e4 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80043da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043de:	d06d      	beq.n	80044bc <HAL_ADC_AnalogWDGConfig+0x2c0>
 80043e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e4:	d87e      	bhi.n	80044e4 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80043e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043ea:	d067      	beq.n	80044bc <HAL_ADC_AnalogWDGConfig+0x2c0>
 80043ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043f0:	d178      	bne.n	80044e4 <HAL_ADC_AnalogWDGConfig+0x2e8>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a3a      	ldr	r2, [pc, #232]	; (80044e0 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d12f      	bne.n	800445c <HAL_ADC_AnalogWDGConfig+0x260>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004404:	2b00      	cmp	r3, #0
 8004406:	d108      	bne.n	800441a <HAL_ADC_AnalogWDGConfig+0x21e>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	0e9b      	lsrs	r3, r3, #26
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	2201      	movs	r2, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	e016      	b.n	8004448 <HAL_ADC_AnalogWDGConfig+0x24c>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	61bb      	str	r3, [r7, #24]
  return result;
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_ADC_AnalogWDGConfig+0x23a>
    return 32U;
 8004432:	2320      	movs	r3, #32
 8004434:	e003      	b.n	800443e <HAL_ADC_AnalogWDGConfig+0x242>
  return __builtin_clz(value);
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	2201      	movs	r2, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	430b      	orrs	r3, r1
 8004456:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 800445a:	e04c      	b.n	80044f6 <HAL_ADC_AnalogWDGConfig+0x2fa>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004464:	2b00      	cmp	r3, #0
 8004466:	d108      	bne.n	800447a <HAL_ADC_AnalogWDGConfig+0x27e>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	0e9b      	lsrs	r3, r3, #26
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2201      	movs	r2, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	e016      	b.n	80044a8 <HAL_ADC_AnalogWDGConfig+0x2ac>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	60fb      	str	r3, [r7, #12]
  return result;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_ADC_AnalogWDGConfig+0x29a>
    return 32U;
 8004492:	2320      	movs	r3, #32
 8004494:	e003      	b.n	800449e <HAL_ADC_AnalogWDGConfig+0x2a2>
  return __builtin_clz(value);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fab3 f383 	clz	r3, r3
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	2201      	movs	r2, #1
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	430b      	orrs	r3, r1
 80044b6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80044ba:	e01c      	b.n	80044f6 <HAL_ADC_AnalogWDGConfig+0x2fa>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a05      	ldr	r2, [pc, #20]	; (80044dc <HAL_ADC_AnalogWDGConfig+0x2e0>)
 80044c6:	4619      	mov	r1, r3
 80044c8:	f7fe fae6 	bl	8002a98 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80044cc:	e013      	b.n	80044f6 <HAL_ADC_AnalogWDGConfig+0x2fa>
 80044ce:	bf00      	nop
 80044d0:	7dc00000 	.word	0x7dc00000
 80044d4:	0087ffff 	.word	0x0087ffff
 80044d8:	0107ffff 	.word	0x0107ffff
 80044dc:	0187ffff 	.word	0x0187ffff
 80044e0:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2200      	movs	r2, #0
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7fe fad2 	bl	8002a98 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80044f4:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0318 	and.w	r3, r3, #24
 8004500:	2b18      	cmp	r3, #24
 8004502:	d00f      	beq.n	8004524 <HAL_ADC_AnalogWDGConfig+0x328>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	08db      	lsrs	r3, r3, #3
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	f1c3 0302 	rsb	r3, r3, #2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	f003 031e 	and.w	r3, r3, #30
 800451e:	fa22 f303 	lsr.w	r3, r2, r3
 8004522:	e002      	b.n	800452a <HAL_ADC_AnalogWDGConfig+0x32e>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0318 	and.w	r3, r3, #24
 8004536:	2b18      	cmp	r3, #24
 8004538:	d00f      	beq.n	800455a <HAL_ADC_AnalogWDGConfig+0x35e>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	08db      	lsrs	r3, r3, #3
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	f1c3 0302 	rsb	r3, r3, #2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	f003 031e 	and.w	r3, r3, #30
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
 8004558:	e002      	b.n	8004560 <HAL_ADC_AnalogWDGConfig+0x364>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6819      	ldr	r1, [r3, #0]
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456e:	f7fe fac0 	bl	8002af2 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a26      	ldr	r2, [pc, #152]	; (8004610 <HAL_ADC_AnalogWDGConfig+0x414>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d11a      	bne.n	80045b2 <HAL_ADC_AnalogWDGConfig+0x3b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe fbf9 	bl	8002d84 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	7b1b      	ldrb	r3, [r3, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_ADC_AnalogWDGConfig+0x3aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe fc1c 	bl	8002ddc <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80045a4:	e029      	b.n	80045fa <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe fc46 	bl	8002e3c <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80045b0:	e023      	b.n	80045fa <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fbec 	bl	8002da0 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	7b1b      	ldrb	r3, [r3, #12]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d105      	bne.n	80045dc <HAL_ADC_AnalogWDGConfig+0x3e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe fc11 	bl	8002dfc <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80045da:	e00e      	b.n	80045fa <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fe fc3b 	bl	8002e5c <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80045e6:	e008      	b.n	80045fa <HAL_ADC_AnalogWDGConfig+0x3fe>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004606:	4618      	mov	r0, r3
 8004608:	3738      	adds	r7, #56	; 0x38
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	0017ffff 	.word	0x0017ffff

08004614 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fb63 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 8004630:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe fb84 	bl	8002d44 <LL_ADC_INJ_IsConversionOngoing>
 800463c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8098 	beq.w	800477c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d02a      	beq.n	80046b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	7e5b      	ldrb	r3, [r3, #25]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d126      	bne.n	80046b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	7e1b      	ldrb	r3, [r3, #24]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d122      	bne.n	80046b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800466a:	2301      	movs	r3, #1
 800466c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800466e:	e014      	b.n	800469a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	4a45      	ldr	r2, [pc, #276]	; (8004788 <ADC_ConversionStop+0x174>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d90d      	bls.n	8004694 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	f043 0210 	orr.w	r2, r3, #16
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	f043 0201 	orr.w	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e074      	b.n	800477e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	3301      	adds	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d1e3      	bne.n	8004670 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2240      	movs	r2, #64	; 0x40
 80046ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d014      	beq.n	80046e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe fb1b 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00c      	beq.n	80046e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fad8 	bl	8002c80 <LL_ADC_IsDisableOngoing>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d104      	bne.n	80046e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe faf7 	bl	8002cce <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d014      	beq.n	8004710 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe fb2a 	bl	8002d44 <LL_ADC_INJ_IsConversionOngoing>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00c      	beq.n	8004710 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fac0 	bl	8002c80 <LL_ADC_IsDisableOngoing>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fb06 	bl	8002d1c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d005      	beq.n	8004722 <ADC_ConversionStop+0x10e>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d105      	bne.n	8004728 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800471c:	230c      	movs	r3, #12
 800471e:	617b      	str	r3, [r7, #20]
        break;
 8004720:	e005      	b.n	800472e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004722:	2308      	movs	r3, #8
 8004724:	617b      	str	r3, [r7, #20]
        break;
 8004726:	e002      	b.n	800472e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004728:	2304      	movs	r3, #4
 800472a:	617b      	str	r3, [r7, #20]
        break;
 800472c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800472e:	f7fe f869 	bl	8002804 <HAL_GetTick>
 8004732:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004734:	e01b      	b.n	800476e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004736:	f7fe f865 	bl	8002804 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b05      	cmp	r3, #5
 8004742:	d914      	bls.n	800476e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	4013      	ands	r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	f043 0210 	orr.w	r2, r3, #16
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	f043 0201 	orr.w	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e007      	b.n	800477e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1dc      	bne.n	8004736 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3720      	adds	r7, #32
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	a33fffff 	.word	0xa33fffff

0800478c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004794:	2300      	movs	r3, #0
 8004796:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe fa5c 	bl	8002c5a <LL_ADC_IsEnabled>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d169      	bne.n	800487c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	4b36      	ldr	r3, [pc, #216]	; (8004888 <ADC_Enable+0xfc>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	f043 0210 	orr.w	r2, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	f043 0201 	orr.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e055      	b.n	800487e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe fa17 	bl	8002c0a <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80047dc:	482b      	ldr	r0, [pc, #172]	; (800488c <ADC_Enable+0x100>)
 80047de:	f7fe f843 	bl	8002868 <LL_ADC_GetCommonPathInternalCh>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047ec:	4b28      	ldr	r3, [pc, #160]	; (8004890 <ADC_Enable+0x104>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	099b      	lsrs	r3, r3, #6
 80047f2:	4a28      	ldr	r2, [pc, #160]	; (8004894 <ADC_Enable+0x108>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004806:	e002      	b.n	800480e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	3b01      	subs	r3, #1
 800480c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f9      	bne.n	8004808 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004814:	f7fd fff6 	bl	8002804 <HAL_GetTick>
 8004818:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800481a:	e028      	b.n	800486e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe fa1a 	bl	8002c5a <LL_ADC_IsEnabled>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fe f9ea 	bl	8002c0a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004836:	f7fd ffe5 	bl	8002804 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d914      	bls.n	800486e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d00d      	beq.n	800486e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	f043 0210 	orr.w	r2, r3, #16
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004862:	f043 0201 	orr.w	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e007      	b.n	800487e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d1cf      	bne.n	800481c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	8000003f 	.word	0x8000003f
 800488c:	50040300 	.word	0x50040300
 8004890:	20000000 	.word	0x20000000
 8004894:	053e2d63 	.word	0x053e2d63

08004898 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe f9eb 	bl	8002c80 <LL_ADC_IsDisableOngoing>
 80048aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fe f9d2 	bl	8002c5a <LL_ADC_IsEnabled>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d047      	beq.n	800494c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d144      	bne.n	800494c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030d 	and.w	r3, r3, #13
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10c      	bne.n	80048ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe f9ac 	bl	8002c32 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2203      	movs	r2, #3
 80048e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048e2:	f7fd ff8f 	bl	8002804 <HAL_GetTick>
 80048e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048e8:	e029      	b.n	800493e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	f043 0210 	orr.w	r2, r3, #16
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	f043 0201 	orr.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e023      	b.n	800494e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004906:	f7fd ff7d 	bl	8002804 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d914      	bls.n	800493e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f043 0210 	orr.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e007      	b.n	800494e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1dc      	bne.n	8004906 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800496c:	2b00      	cmp	r3, #0
 800496e:	d14b      	bne.n	8004a08 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004974:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d021      	beq.n	80049ce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fd ffe0 	bl	8002954 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d032      	beq.n	8004a00 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d12b      	bne.n	8004a00 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d11f      	bne.n	8004a00 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c4:	f043 0201 	orr.w	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
 80049cc:	e018      	b.n	8004a00 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d111      	bne.n	8004a00 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	f043 0201 	orr.w	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7fe ffeb 	bl	80039dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a06:	e00e      	b.n	8004a26 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7fb fe12 	bl	800063e <HAL_ADC_ErrorCallback>
}
 8004a1a:	e004      	b.n	8004a26 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7fe ffd7 	bl	80039f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	f043 0204 	orr.w	r2, r3, #4
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7fb fde4 	bl	800063e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <LL_ADC_IsEnabled>:
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <LL_ADC_IsEnabled+0x18>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <LL_ADC_IsEnabled+0x1a>
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <LL_ADC_REG_IsConversionOngoing>:
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d101      	bne.n	8004abc <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b09f      	sub	sp, #124	; 0x7c
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e089      	b.n	8004c62 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004b56:	2300      	movs	r3, #0
 8004b58:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a42      	ldr	r2, [pc, #264]	; (8004c6c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d102      	bne.n	8004b6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b68:	4b41      	ldr	r3, [pc, #260]	; (8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	e001      	b.n	8004b72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e068      	b.n	8004c62 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff ff86 	bl	8004aa4 <LL_ADC_REG_IsConversionOngoing>
 8004b98:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff80 	bl	8004aa4 <LL_ADC_REG_IsConversionOngoing>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d14a      	bne.n	8004c40 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d147      	bne.n	8004c40 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bb0:	4b30      	ldr	r3, [pc, #192]	; (8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004bb2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d027      	beq.n	8004c0c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bce:	035b      	lsls	r3, r3, #13
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bd8:	4824      	ldr	r0, [pc, #144]	; (8004c6c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004bda:	f7ff ff50 	bl	8004a7e <LL_ADC_IsEnabled>
 8004bde:	4604      	mov	r4, r0
 8004be0:	4823      	ldr	r0, [pc, #140]	; (8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004be2:	f7ff ff4c 	bl	8004a7e <LL_ADC_IsEnabled>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4323      	orrs	r3, r4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d132      	bne.n	8004c54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004bf6:	f023 030f 	bic.w	r3, r3, #15
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	6811      	ldr	r1, [r2, #0]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	6892      	ldr	r2, [r2, #8]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	431a      	orrs	r2, r3
 8004c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c08:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c0a:	e023      	b.n	8004c54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c16:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c18:	4814      	ldr	r0, [pc, #80]	; (8004c6c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004c1a:	f7ff ff30 	bl	8004a7e <LL_ADC_IsEnabled>
 8004c1e:	4604      	mov	r4, r0
 8004c20:	4813      	ldr	r0, [pc, #76]	; (8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004c22:	f7ff ff2c 	bl	8004a7e <LL_ADC_IsEnabled>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4323      	orrs	r3, r4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d112      	bne.n	8004c54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c36:	f023 030f 	bic.w	r3, r3, #15
 8004c3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c3c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c3e:	e009      	b.n	8004c54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	f043 0220 	orr.w	r2, r3, #32
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004c52:	e000      	b.n	8004c56 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	377c      	adds	r7, #124	; 0x7c
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd90      	pop	{r4, r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	50040000 	.word	0x50040000
 8004c70:	50040100 	.word	0x50040100
 8004c74:	50040300 	.word	0x50040300

08004c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c88:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <__NVIC_SetPriorityGrouping+0x44>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c94:	4013      	ands	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004caa:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <__NVIC_SetPriorityGrouping+0x44>)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	60d3      	str	r3, [r2, #12]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	e000ed00 	.word	0xe000ed00

08004cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	0a1b      	lsrs	r3, r3, #8
 8004cca:	f003 0307 	and.w	r3, r3, #7
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	e000ed00 	.word	0xe000ed00

08004cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	db0b      	blt.n	8004d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	f003 021f 	and.w	r2, r3, #31
 8004cf4:	4907      	ldr	r1, [pc, #28]	; (8004d14 <__NVIC_EnableIRQ+0x38>)
 8004cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8004d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	e000e100 	.word	0xe000e100

08004d18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	db12      	blt.n	8004d50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	f003 021f 	and.w	r2, r3, #31
 8004d30:	490a      	ldr	r1, [pc, #40]	; (8004d5c <__NVIC_DisableIRQ+0x44>)
 8004d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	2001      	movs	r0, #1
 8004d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d3e:	3320      	adds	r3, #32
 8004d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d44:	f3bf 8f4f 	dsb	sy
}
 8004d48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d4a:	f3bf 8f6f 	isb	sy
}
 8004d4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	e000e100 	.word	0xe000e100

08004d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	6039      	str	r1, [r7, #0]
 8004d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	db0a      	blt.n	8004d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	490c      	ldr	r1, [pc, #48]	; (8004dac <__NVIC_SetPriority+0x4c>)
 8004d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7e:	0112      	lsls	r2, r2, #4
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	440b      	add	r3, r1
 8004d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d88:	e00a      	b.n	8004da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	4908      	ldr	r1, [pc, #32]	; (8004db0 <__NVIC_SetPriority+0x50>)
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	3b04      	subs	r3, #4
 8004d98:	0112      	lsls	r2, r2, #4
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	761a      	strb	r2, [r3, #24]
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	e000e100 	.word	0xe000e100
 8004db0:	e000ed00 	.word	0xe000ed00

08004db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	; 0x24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f1c3 0307 	rsb	r3, r3, #7
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	bf28      	it	cs
 8004dd2:	2304      	movcs	r3, #4
 8004dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	2b06      	cmp	r3, #6
 8004ddc:	d902      	bls.n	8004de4 <NVIC_EncodePriority+0x30>
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	3b03      	subs	r3, #3
 8004de2:	e000      	b.n	8004de6 <NVIC_EncodePriority+0x32>
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43da      	mvns	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	401a      	ands	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	43d9      	mvns	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e0c:	4313      	orrs	r3, r2
         );
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3724      	adds	r7, #36	; 0x24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e2c:	d301      	bcc.n	8004e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e00f      	b.n	8004e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <SysTick_Config+0x40>)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e3a:	210f      	movs	r1, #15
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	f7ff ff8e 	bl	8004d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <SysTick_Config+0x40>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e4a:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <SysTick_Config+0x40>)
 8004e4c:	2207      	movs	r2, #7
 8004e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	e000e010 	.word	0xe000e010

08004e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ff05 	bl	8004c78 <__NVIC_SetPriorityGrouping>
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b086      	sub	sp, #24
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e88:	f7ff ff1a 	bl	8004cc0 <__NVIC_GetPriorityGrouping>
 8004e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	f7ff ff8e 	bl	8004db4 <NVIC_EncodePriority>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff ff5d 	bl	8004d60 <__NVIC_SetPriority>
}
 8004ea6:	bf00      	nop
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff ff0d 	bl	8004cdc <__NVIC_EnableIRQ>
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ff1d 	bl	8004d18 <__NVIC_DisableIRQ>
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ff94 	bl	8004e1c <SysTick_Config>
 8004ef4:	4603      	mov	r3, r0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e098      	b.n	8005044 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	4b4d      	ldr	r3, [pc, #308]	; (8005050 <HAL_DMA_Init+0x150>)
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d80f      	bhi.n	8004f3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b4b      	ldr	r3, [pc, #300]	; (8005054 <HAL_DMA_Init+0x154>)
 8004f26:	4413      	add	r3, r2
 8004f28:	4a4b      	ldr	r2, [pc, #300]	; (8005058 <HAL_DMA_Init+0x158>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	091b      	lsrs	r3, r3, #4
 8004f30:	009a      	lsls	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a48      	ldr	r2, [pc, #288]	; (800505c <HAL_DMA_Init+0x15c>)
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40
 8004f3c:	e00e      	b.n	8004f5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	4b46      	ldr	r3, [pc, #280]	; (8005060 <HAL_DMA_Init+0x160>)
 8004f46:	4413      	add	r3, r2
 8004f48:	4a43      	ldr	r2, [pc, #268]	; (8005058 <HAL_DMA_Init+0x158>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	009a      	lsls	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a42      	ldr	r2, [pc, #264]	; (8005064 <HAL_DMA_Init+0x164>)
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb6:	d039      	beq.n	800502c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	4a27      	ldr	r2, [pc, #156]	; (800505c <HAL_DMA_Init+0x15c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d11a      	bne.n	8004ff8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004fc2:	4b29      	ldr	r3, [pc, #164]	; (8005068 <HAL_DMA_Init+0x168>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f003 031c 	and.w	r3, r3, #28
 8004fce:	210f      	movs	r1, #15
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	4924      	ldr	r1, [pc, #144]	; (8005068 <HAL_DMA_Init+0x168>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004fdc:	4b22      	ldr	r3, [pc, #136]	; (8005068 <HAL_DMA_Init+0x168>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6859      	ldr	r1, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe8:	f003 031c 	and.w	r3, r3, #28
 8004fec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff0:	491d      	ldr	r1, [pc, #116]	; (8005068 <HAL_DMA_Init+0x168>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]
 8004ff6:	e019      	b.n	800502c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ff8:	4b1c      	ldr	r3, [pc, #112]	; (800506c <HAL_DMA_Init+0x16c>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005000:	f003 031c 	and.w	r3, r3, #28
 8005004:	210f      	movs	r1, #15
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	43db      	mvns	r3, r3
 800500c:	4917      	ldr	r1, [pc, #92]	; (800506c <HAL_DMA_Init+0x16c>)
 800500e:	4013      	ands	r3, r2
 8005010:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005012:	4b16      	ldr	r3, [pc, #88]	; (800506c <HAL_DMA_Init+0x16c>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6859      	ldr	r1, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	f003 031c 	and.w	r3, r3, #28
 8005022:	fa01 f303 	lsl.w	r3, r1, r3
 8005026:	4911      	ldr	r1, [pc, #68]	; (800506c <HAL_DMA_Init+0x16c>)
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	40020407 	.word	0x40020407
 8005054:	bffdfff8 	.word	0xbffdfff8
 8005058:	cccccccd 	.word	0xcccccccd
 800505c:	40020000 	.word	0x40020000
 8005060:	bffdfbf8 	.word	0xbffdfbf8
 8005064:	40020400 	.word	0x40020400
 8005068:	400200a8 	.word	0x400200a8
 800506c:	400204a8 	.word	0x400204a8

08005070 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e072      	b.n	8005168 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	4b36      	ldr	r3, [pc, #216]	; (8005174 <HAL_DMA_DeInit+0x104>)
 800509a:	429a      	cmp	r2, r3
 800509c:	d80f      	bhi.n	80050be <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	4b34      	ldr	r3, [pc, #208]	; (8005178 <HAL_DMA_DeInit+0x108>)
 80050a6:	4413      	add	r3, r2
 80050a8:	4a34      	ldr	r2, [pc, #208]	; (800517c <HAL_DMA_DeInit+0x10c>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	009a      	lsls	r2, r3, #2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a31      	ldr	r2, [pc, #196]	; (8005180 <HAL_DMA_DeInit+0x110>)
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40
 80050bc:	e00e      	b.n	80050dc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <HAL_DMA_DeInit+0x114>)
 80050c6:	4413      	add	r3, r2
 80050c8:	4a2c      	ldr	r2, [pc, #176]	; (800517c <HAL_DMA_DeInit+0x10c>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	009a      	lsls	r2, r3, #2
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a2b      	ldr	r2, [pc, #172]	; (8005188 <HAL_DMA_DeInit+0x118>)
 80050da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e8:	f003 021c 	and.w	r2, r3, #28
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	2101      	movs	r1, #1
 80050f2:	fa01 f202 	lsl.w	r2, r1, r2
 80050f6:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	4a20      	ldr	r2, [pc, #128]	; (8005180 <HAL_DMA_DeInit+0x110>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10d      	bne.n	800511e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005102:	4b22      	ldr	r3, [pc, #136]	; (800518c <HAL_DMA_DeInit+0x11c>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	f003 031c 	and.w	r3, r3, #28
 800510e:	210f      	movs	r1, #15
 8005110:	fa01 f303 	lsl.w	r3, r1, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	491d      	ldr	r1, [pc, #116]	; (800518c <HAL_DMA_DeInit+0x11c>)
 8005118:	4013      	ands	r3, r2
 800511a:	600b      	str	r3, [r1, #0]
 800511c:	e00c      	b.n	8005138 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800511e:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <HAL_DMA_DeInit+0x120>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f003 031c 	and.w	r3, r3, #28
 800512a:	210f      	movs	r1, #15
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	4917      	ldr	r1, [pc, #92]	; (8005190 <HAL_DMA_DeInit+0x120>)
 8005134:	4013      	ands	r3, r2
 8005136:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40020407 	.word	0x40020407
 8005178:	bffdfff8 	.word	0xbffdfff8
 800517c:	cccccccd 	.word	0xcccccccd
 8005180:	40020000 	.word	0x40020000
 8005184:	bffdfbf8 	.word	0xbffdfbf8
 8005188:	40020400 	.word	0x40020400
 800518c:	400200a8 	.word	0x400200a8
 8005190:	400204a8 	.word	0x400204a8

08005194 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_DMA_Start_IT+0x20>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e04b      	b.n	800524c <HAL_DMA_Start_IT+0xb8>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d13a      	bne.n	800523e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f95f 	bl	80054b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 020e 	orr.w	r2, r2, #14
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e00f      	b.n	800522c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0204 	bic.w	r2, r2, #4
 800521a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 020a 	orr.w	r2, r2, #10
 800522a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e005      	b.n	800524a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d008      	beq.n	800527e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2204      	movs	r2, #4
 8005270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e022      	b.n	80052c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 020e 	bic.w	r2, r2, #14
 800528c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	f003 021c 	and.w	r2, r3, #28
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2101      	movs	r1, #1
 80052ac:	fa01 f202 	lsl.w	r2, r1, r2
 80052b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d005      	beq.n	80052f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2204      	movs	r2, #4
 80052ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
 80052f2:	e029      	b.n	8005348 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 020e 	bic.w	r2, r2, #14
 8005302:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0201 	bic.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005318:	f003 021c 	and.w	r2, r3, #28
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2101      	movs	r1, #1
 8005322:	fa01 f202 	lsl.w	r2, r1, r2
 8005326:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
    }
  }
  return status;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	f003 031c 	and.w	r3, r3, #28
 8005372:	2204      	movs	r2, #4
 8005374:	409a      	lsls	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4013      	ands	r3, r2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d026      	beq.n	80053cc <HAL_DMA_IRQHandler+0x7a>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d021      	beq.n	80053cc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d107      	bne.n	80053a6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0204 	bic.w	r2, r2, #4
 80053a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	f003 021c 	and.w	r2, r3, #28
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	2104      	movs	r1, #4
 80053b4:	fa01 f202 	lsl.w	r2, r1, r2
 80053b8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d071      	beq.n	80054a6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80053ca:	e06c      	b.n	80054a6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d0:	f003 031c 	and.w	r3, r3, #28
 80053d4:	2202      	movs	r2, #2
 80053d6:	409a      	lsls	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02e      	beq.n	800543e <HAL_DMA_IRQHandler+0xec>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d029      	beq.n	800543e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 020a 	bic.w	r2, r2, #10
 8005406:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005414:	f003 021c 	and.w	r2, r3, #28
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	2102      	movs	r1, #2
 800541e:	fa01 f202 	lsl.w	r2, r1, r2
 8005422:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d038      	beq.n	80054a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800543c:	e033      	b.n	80054a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	f003 031c 	and.w	r3, r3, #28
 8005446:	2208      	movs	r2, #8
 8005448:	409a      	lsls	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d02a      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x156>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b00      	cmp	r3, #0
 800545a:	d025      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 020e 	bic.w	r2, r2, #14
 800546a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005470:	f003 021c 	and.w	r2, r3, #28
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	2101      	movs	r1, #1
 800547a:	fa01 f202 	lsl.w	r2, r1, r2
 800547e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054a6:	bf00      	nop
 80054a8:	bf00      	nop
}
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c2:	f003 021c 	and.w	r2, r3, #28
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2101      	movs	r1, #1
 80054cc:	fa01 f202 	lsl.w	r2, r1, r2
 80054d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b10      	cmp	r3, #16
 80054e0:	d108      	bne.n	80054f4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054f2:	e007      	b.n	8005504 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	60da      	str	r2, [r3, #12]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800551e:	e14e      	b.n	80057be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2101      	movs	r1, #1
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	4013      	ands	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8140 	beq.w	80057b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d005      	beq.n	8005550 <HAL_GPIO_Init+0x40>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d130      	bne.n	80055b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	2203      	movs	r2, #3
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4013      	ands	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005586:	2201      	movs	r2, #1
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43db      	mvns	r3, r3
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4013      	ands	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	f003 0201 	and.w	r2, r3, #1
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d017      	beq.n	80055ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	2203      	movs	r2, #3
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43db      	mvns	r3, r3
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4013      	ands	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d123      	bne.n	8005642 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	08da      	lsrs	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3208      	adds	r2, #8
 8005602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005606:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	220f      	movs	r2, #15
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4013      	ands	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	08da      	lsrs	r2, r3, #3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3208      	adds	r2, #8
 800563c:	6939      	ldr	r1, [r7, #16]
 800563e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	2203      	movs	r2, #3
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4013      	ands	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 0203 	and.w	r2, r3, #3
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 809a 	beq.w	80057b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005684:	4b55      	ldr	r3, [pc, #340]	; (80057dc <HAL_GPIO_Init+0x2cc>)
 8005686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005688:	4a54      	ldr	r2, [pc, #336]	; (80057dc <HAL_GPIO_Init+0x2cc>)
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	6613      	str	r3, [r2, #96]	; 0x60
 8005690:	4b52      	ldr	r3, [pc, #328]	; (80057dc <HAL_GPIO_Init+0x2cc>)
 8005692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800569c:	4a50      	ldr	r2, [pc, #320]	; (80057e0 <HAL_GPIO_Init+0x2d0>)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	089b      	lsrs	r3, r3, #2
 80056a2:	3302      	adds	r3, #2
 80056a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	220f      	movs	r2, #15
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	43db      	mvns	r3, r3
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4013      	ands	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056c6:	d013      	beq.n	80056f0 <HAL_GPIO_Init+0x1e0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a46      	ldr	r2, [pc, #280]	; (80057e4 <HAL_GPIO_Init+0x2d4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00d      	beq.n	80056ec <HAL_GPIO_Init+0x1dc>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a45      	ldr	r2, [pc, #276]	; (80057e8 <HAL_GPIO_Init+0x2d8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <HAL_GPIO_Init+0x1d8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a44      	ldr	r2, [pc, #272]	; (80057ec <HAL_GPIO_Init+0x2dc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d101      	bne.n	80056e4 <HAL_GPIO_Init+0x1d4>
 80056e0:	2303      	movs	r3, #3
 80056e2:	e006      	b.n	80056f2 <HAL_GPIO_Init+0x1e2>
 80056e4:	2307      	movs	r3, #7
 80056e6:	e004      	b.n	80056f2 <HAL_GPIO_Init+0x1e2>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e002      	b.n	80056f2 <HAL_GPIO_Init+0x1e2>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_GPIO_Init+0x1e2>
 80056f0:	2300      	movs	r3, #0
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	f002 0203 	and.w	r2, r2, #3
 80056f8:	0092      	lsls	r2, r2, #2
 80056fa:	4093      	lsls	r3, r2
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005702:	4937      	ldr	r1, [pc, #220]	; (80057e0 <HAL_GPIO_Init+0x2d0>)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	089b      	lsrs	r3, r3, #2
 8005708:	3302      	adds	r3, #2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005710:	4b37      	ldr	r3, [pc, #220]	; (80057f0 <HAL_GPIO_Init+0x2e0>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	43db      	mvns	r3, r3
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4013      	ands	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005734:	4a2e      	ldr	r2, [pc, #184]	; (80057f0 <HAL_GPIO_Init+0x2e0>)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800573a:	4b2d      	ldr	r3, [pc, #180]	; (80057f0 <HAL_GPIO_Init+0x2e0>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	43db      	mvns	r3, r3
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4013      	ands	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800575e:	4a24      	ldr	r2, [pc, #144]	; (80057f0 <HAL_GPIO_Init+0x2e0>)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005764:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <HAL_GPIO_Init+0x2e0>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	43db      	mvns	r3, r3
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4013      	ands	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005788:	4a19      	ldr	r2, [pc, #100]	; (80057f0 <HAL_GPIO_Init+0x2e0>)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800578e:	4b18      	ldr	r3, [pc, #96]	; (80057f0 <HAL_GPIO_Init+0x2e0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	43db      	mvns	r3, r3
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4013      	ands	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057b2:	4a0f      	ldr	r2, [pc, #60]	; (80057f0 <HAL_GPIO_Init+0x2e0>)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	3301      	adds	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f47f aea9 	bne.w	8005520 <HAL_GPIO_Init+0x10>
  }
}
 80057ce:	bf00      	nop
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40021000 	.word	0x40021000
 80057e0:	40010000 	.word	0x40010000
 80057e4:	48000400 	.word	0x48000400
 80057e8:	48000800 	.word	0x48000800
 80057ec:	48000c00 	.word	0x48000c00
 80057f0:	40010400 	.word	0x40010400

080057f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005802:	e0b1      	b.n	8005968 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005804:	2201      	movs	r2, #1
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	4013      	ands	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80a4 	beq.w	8005962 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800581a:	4a5a      	ldr	r2, [pc, #360]	; (8005984 <HAL_GPIO_DeInit+0x190>)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	089b      	lsrs	r3, r3, #2
 8005820:	3302      	adds	r3, #2
 8005822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005826:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	220f      	movs	r2, #15
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4013      	ands	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005842:	d013      	beq.n	800586c <HAL_GPIO_DeInit+0x78>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a50      	ldr	r2, [pc, #320]	; (8005988 <HAL_GPIO_DeInit+0x194>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00d      	beq.n	8005868 <HAL_GPIO_DeInit+0x74>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a4f      	ldr	r2, [pc, #316]	; (800598c <HAL_GPIO_DeInit+0x198>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d007      	beq.n	8005864 <HAL_GPIO_DeInit+0x70>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a4e      	ldr	r2, [pc, #312]	; (8005990 <HAL_GPIO_DeInit+0x19c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d101      	bne.n	8005860 <HAL_GPIO_DeInit+0x6c>
 800585c:	2303      	movs	r3, #3
 800585e:	e006      	b.n	800586e <HAL_GPIO_DeInit+0x7a>
 8005860:	2307      	movs	r3, #7
 8005862:	e004      	b.n	800586e <HAL_GPIO_DeInit+0x7a>
 8005864:	2302      	movs	r3, #2
 8005866:	e002      	b.n	800586e <HAL_GPIO_DeInit+0x7a>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <HAL_GPIO_DeInit+0x7a>
 800586c:	2300      	movs	r3, #0
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	f002 0203 	and.w	r2, r2, #3
 8005874:	0092      	lsls	r2, r2, #2
 8005876:	4093      	lsls	r3, r2
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	429a      	cmp	r2, r3
 800587c:	d132      	bne.n	80058e4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800587e:	4b45      	ldr	r3, [pc, #276]	; (8005994 <HAL_GPIO_DeInit+0x1a0>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	43db      	mvns	r3, r3
 8005886:	4943      	ldr	r1, [pc, #268]	; (8005994 <HAL_GPIO_DeInit+0x1a0>)
 8005888:	4013      	ands	r3, r2
 800588a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800588c:	4b41      	ldr	r3, [pc, #260]	; (8005994 <HAL_GPIO_DeInit+0x1a0>)
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	43db      	mvns	r3, r3
 8005894:	493f      	ldr	r1, [pc, #252]	; (8005994 <HAL_GPIO_DeInit+0x1a0>)
 8005896:	4013      	ands	r3, r2
 8005898:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800589a:	4b3e      	ldr	r3, [pc, #248]	; (8005994 <HAL_GPIO_DeInit+0x1a0>)
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	493c      	ldr	r1, [pc, #240]	; (8005994 <HAL_GPIO_DeInit+0x1a0>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80058a8:	4b3a      	ldr	r3, [pc, #232]	; (8005994 <HAL_GPIO_DeInit+0x1a0>)
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	43db      	mvns	r3, r3
 80058b0:	4938      	ldr	r1, [pc, #224]	; (8005994 <HAL_GPIO_DeInit+0x1a0>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	220f      	movs	r2, #15
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80058c6:	4a2f      	ldr	r2, [pc, #188]	; (8005984 <HAL_GPIO_DeInit+0x190>)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	089b      	lsrs	r3, r3, #2
 80058cc:	3302      	adds	r3, #2
 80058ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	43da      	mvns	r2, r3
 80058d6:	482b      	ldr	r0, [pc, #172]	; (8005984 <HAL_GPIO_DeInit+0x190>)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	089b      	lsrs	r3, r3, #2
 80058dc:	400a      	ands	r2, r1
 80058de:	3302      	adds	r3, #2
 80058e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	2103      	movs	r1, #3
 80058ee:	fa01 f303 	lsl.w	r3, r1, r3
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	08da      	lsrs	r2, r3, #3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3208      	adds	r2, #8
 8005900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	220f      	movs	r2, #15
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43db      	mvns	r3, r3
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	08d2      	lsrs	r2, r2, #3
 8005918:	4019      	ands	r1, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3208      	adds	r2, #8
 800591e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	2103      	movs	r1, #3
 800592c:	fa01 f303 	lsl.w	r3, r1, r3
 8005930:	43db      	mvns	r3, r3
 8005932:	401a      	ands	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	2101      	movs	r1, #1
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	43db      	mvns	r3, r3
 8005946:	401a      	ands	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	2103      	movs	r1, #3
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	43db      	mvns	r3, r3
 800595c:	401a      	ands	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	3301      	adds	r3, #1
 8005966:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	f47f af47 	bne.w	8005804 <HAL_GPIO_DeInit+0x10>
  }
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	40010000 	.word	0x40010000
 8005988:	48000400 	.word	0x48000400
 800598c:	48000800 	.word	0x48000800
 8005990:	48000c00 	.word	0x48000c00
 8005994:	40010400 	.word	0x40010400

08005998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	887b      	ldrh	r3, [r7, #2]
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
 80059b4:	e001      	b.n	80059ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
 80059d4:	4613      	mov	r3, r2
 80059d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059d8:	787b      	ldrb	r3, [r7, #1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059de:	887a      	ldrh	r2, [r7, #2]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059e4:	e002      	b.n	80059ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059e6:	887a      	ldrh	r2, [r7, #2]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a02:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d006      	beq.n	8005a1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a0e:	4a05      	ldr	r2, [pc, #20]	; (8005a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fa fdca 	bl	80005b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40010400 	.word	0x40010400

08005a28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a2c:	4b04      	ldr	r3, [pc, #16]	; (8005a40 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40007000 	.word	0x40007000

08005a44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a52:	d130      	bne.n	8005ab6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a54:	4b23      	ldr	r3, [pc, #140]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a60:	d038      	beq.n	8005ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a62:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a72:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2232      	movs	r2, #50	; 0x32
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	0c9b      	lsrs	r3, r3, #18
 8005a84:	3301      	adds	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a88:	e002      	b.n	8005a90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a90:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a9c:	d102      	bne.n	8005aa4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f2      	bne.n	8005a8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab0:	d110      	bne.n	8005ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e00f      	b.n	8005ad6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac2:	d007      	beq.n	8005ad4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ac4:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005acc:	4a05      	ldr	r2, [pc, #20]	; (8005ae4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ad2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40007000 	.word	0x40007000
 8005ae8:	20000000 	.word	0x20000000
 8005aec:	431bde83 	.word	0x431bde83

08005af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f000 bc4f 	b.w	80063a2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b04:	4b97      	ldr	r3, [pc, #604]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b0e:	4b95      	ldr	r3, [pc, #596]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80e6 	beq.w	8005cf2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <HAL_RCC_OscConfig+0x4c>
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	f040 808d 	bne.w	8005c4e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	f040 8089 	bne.w	8005c4e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b3c:	4b89      	ldr	r3, [pc, #548]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <HAL_RCC_OscConfig+0x66>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f000 bc26 	b.w	80063a2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b5a:	4b82      	ldr	r3, [pc, #520]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <HAL_RCC_OscConfig+0x80>
 8005b66:	4b7f      	ldr	r3, [pc, #508]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b6e:	e005      	b.n	8005b7c <HAL_RCC_OscConfig+0x8c>
 8005b70:	4b7c      	ldr	r3, [pc, #496]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b76:	091b      	lsrs	r3, r3, #4
 8005b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d224      	bcs.n	8005bca <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fdd9 	bl	800673c <RCC_SetFlashLatencyFromMSIRange>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f000 bc06 	b.w	80063a2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b96:	4b73      	ldr	r3, [pc, #460]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a72      	ldr	r2, [pc, #456]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005b9c:	f043 0308 	orr.w	r3, r3, #8
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	4b70      	ldr	r3, [pc, #448]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	496d      	ldr	r1, [pc, #436]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bb4:	4b6b      	ldr	r3, [pc, #428]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	4968      	ldr	r1, [pc, #416]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	604b      	str	r3, [r1, #4]
 8005bc8:	e025      	b.n	8005c16 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bca:	4b66      	ldr	r3, [pc, #408]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a65      	ldr	r2, [pc, #404]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005bd0:	f043 0308 	orr.w	r3, r3, #8
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	4b63      	ldr	r3, [pc, #396]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	4960      	ldr	r1, [pc, #384]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005be8:	4b5e      	ldr	r3, [pc, #376]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	495b      	ldr	r1, [pc, #364]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d109      	bne.n	8005c16 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fd98 	bl	800673c <RCC_SetFlashLatencyFromMSIRange>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e3c5      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c16:	f000 fccd 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	4b51      	ldr	r3, [pc, #324]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	4950      	ldr	r1, [pc, #320]	; (8005d68 <HAL_RCC_OscConfig+0x278>)
 8005c28:	5ccb      	ldrb	r3, [r1, r3]
 8005c2a:	f003 031f 	and.w	r3, r3, #31
 8005c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c32:	4a4e      	ldr	r2, [pc, #312]	; (8005d6c <HAL_RCC_OscConfig+0x27c>)
 8005c34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c36:	4b4e      	ldr	r3, [pc, #312]	; (8005d70 <HAL_RCC_OscConfig+0x280>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fc fd92 	bl	8002764 <HAL_InitTick>
 8005c40:	4603      	mov	r3, r0
 8005c42:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d052      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	e3a9      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d032      	beq.n	8005cbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c56:	4b43      	ldr	r3, [pc, #268]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a42      	ldr	r2, [pc, #264]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c62:	f7fc fdcf 	bl	8002804 <HAL_GetTick>
 8005c66:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c6a:	f7fc fdcb 	bl	8002804 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e392      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c7c:	4b39      	ldr	r3, [pc, #228]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0f0      	beq.n	8005c6a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c88:	4b36      	ldr	r3, [pc, #216]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a35      	ldr	r2, [pc, #212]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c8e:	f043 0308 	orr.w	r3, r3, #8
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	4b33      	ldr	r3, [pc, #204]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	4930      	ldr	r1, [pc, #192]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ca6:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	492b      	ldr	r1, [pc, #172]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	604b      	str	r3, [r1, #4]
 8005cba:	e01a      	b.n	8005cf2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005cbc:	4b29      	ldr	r3, [pc, #164]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a28      	ldr	r2, [pc, #160]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cc8:	f7fc fd9c 	bl	8002804 <HAL_GetTick>
 8005ccc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cd0:	f7fc fd98 	bl	8002804 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e35f      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ce2:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1f0      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x1e0>
 8005cee:	e000      	b.n	8005cf2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d073      	beq.n	8005de6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_OscConfig+0x220>
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	2b0c      	cmp	r3, #12
 8005d08:	d10e      	bne.n	8005d28 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d10b      	bne.n	8005d28 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d10:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d063      	beq.n	8005de4 <HAL_RCC_OscConfig+0x2f4>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d15f      	bne.n	8005de4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e33c      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d30:	d106      	bne.n	8005d40 <HAL_RCC_OscConfig+0x250>
 8005d32:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a0b      	ldr	r2, [pc, #44]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e025      	b.n	8005d8c <HAL_RCC_OscConfig+0x29c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d48:	d114      	bne.n	8005d74 <HAL_RCC_OscConfig+0x284>
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a05      	ldr	r2, [pc, #20]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4b03      	ldr	r3, [pc, #12]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a02      	ldr	r2, [pc, #8]	; (8005d64 <HAL_RCC_OscConfig+0x274>)
 8005d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	e013      	b.n	8005d8c <HAL_RCC_OscConfig+0x29c>
 8005d64:	40021000 	.word	0x40021000
 8005d68:	0800d578 	.word	0x0800d578
 8005d6c:	20000000 	.word	0x20000000
 8005d70:	20000084 	.word	0x20000084
 8005d74:	4b8f      	ldr	r3, [pc, #572]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a8e      	ldr	r2, [pc, #568]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	4b8c      	ldr	r3, [pc, #560]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a8b      	ldr	r2, [pc, #556]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d013      	beq.n	8005dbc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fc fd36 	bl	8002804 <HAL_GetTick>
 8005d98:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d9c:	f7fc fd32 	bl	8002804 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b64      	cmp	r3, #100	; 0x64
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e2f9      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dae:	4b81      	ldr	r3, [pc, #516]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x2ac>
 8005dba:	e014      	b.n	8005de6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fc fd22 	bl	8002804 <HAL_GetTick>
 8005dc0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc4:	f7fc fd1e 	bl	8002804 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b64      	cmp	r3, #100	; 0x64
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e2e5      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dd6:	4b77      	ldr	r3, [pc, #476]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x2d4>
 8005de2:	e000      	b.n	8005de6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d060      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d005      	beq.n	8005e04 <HAL_RCC_OscConfig+0x314>
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	2b0c      	cmp	r3, #12
 8005dfc:	d119      	bne.n	8005e32 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d116      	bne.n	8005e32 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e04:	4b6b      	ldr	r3, [pc, #428]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <HAL_RCC_OscConfig+0x32c>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e2c2      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1c:	4b65      	ldr	r3, [pc, #404]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	061b      	lsls	r3, r3, #24
 8005e2a:	4962      	ldr	r1, [pc, #392]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e30:	e040      	b.n	8005eb4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d023      	beq.n	8005e82 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e3a:	4b5e      	ldr	r3, [pc, #376]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a5d      	ldr	r2, [pc, #372]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e46:	f7fc fcdd 	bl	8002804 <HAL_GetTick>
 8005e4a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e4e:	f7fc fcd9 	bl	8002804 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e2a0      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e60:	4b54      	ldr	r3, [pc, #336]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6c:	4b51      	ldr	r3, [pc, #324]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	061b      	lsls	r3, r3, #24
 8005e7a:	494e      	ldr	r1, [pc, #312]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	604b      	str	r3, [r1, #4]
 8005e80:	e018      	b.n	8005eb4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e82:	4b4c      	ldr	r3, [pc, #304]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a4b      	ldr	r2, [pc, #300]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8e:	f7fc fcb9 	bl	8002804 <HAL_GetTick>
 8005e92:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e96:	f7fc fcb5 	bl	8002804 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e27c      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ea8:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1f0      	bne.n	8005e96 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8082 	beq.w	8005fc6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d05f      	beq.n	8005f8a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8005eca:	4b3a      	ldr	r3, [pc, #232]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d037      	beq.n	8005f50 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d006      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e254      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01b      	beq.n	8005f3a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8005f02:	4b2c      	ldr	r3, [pc, #176]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f08:	4a2a      	ldr	r2, [pc, #168]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005f0a:	f023 0301 	bic.w	r3, r3, #1
 8005f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f12:	f7fc fc77 	bl	8002804 <HAL_GetTick>
 8005f16:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f1a:	f7fc fc73 	bl	8002804 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b11      	cmp	r3, #17
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e23a      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f2c:	4b21      	ldr	r3, [pc, #132]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1ef      	bne.n	8005f1a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005f3a:	4b1e      	ldr	r3, [pc, #120]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f40:	f023 0210 	bic.w	r2, r3, #16
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	491a      	ldr	r1, [pc, #104]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f50:	4b18      	ldr	r3, [pc, #96]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f56:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f60:	f7fc fc50 	bl	8002804 <HAL_GetTick>
 8005f64:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f68:	f7fc fc4c 	bl	8002804 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b11      	cmp	r3, #17
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e213      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f7a:	4b0e      	ldr	r3, [pc, #56]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0ef      	beq.n	8005f68 <HAL_RCC_OscConfig+0x478>
 8005f88:	e01d      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f90:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <HAL_RCC_OscConfig+0x4c4>)
 8005f92:	f023 0301 	bic.w	r3, r3, #1
 8005f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9a:	f7fc fc33 	bl	8002804 <HAL_GetTick>
 8005f9e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fa0:	e00a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fa2:	f7fc fc2f 	bl	8002804 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b11      	cmp	r3, #17
 8005fae:	d903      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e1f6      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
 8005fb4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fb8:	4ba9      	ldr	r3, [pc, #676]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8005fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1ed      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80bd 	beq.w	800614e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005fda:	4ba1      	ldr	r3, [pc, #644]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10e      	bne.n	8006004 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe6:	4b9e      	ldr	r3, [pc, #632]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fea:	4a9d      	ldr	r2, [pc, #628]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8005fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ff2:	4b9b      	ldr	r3, [pc, #620]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006004:	4b97      	ldr	r3, [pc, #604]	; (8006264 <HAL_RCC_OscConfig+0x774>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d118      	bne.n	8006042 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006010:	4b94      	ldr	r3, [pc, #592]	; (8006264 <HAL_RCC_OscConfig+0x774>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a93      	ldr	r2, [pc, #588]	; (8006264 <HAL_RCC_OscConfig+0x774>)
 8006016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601c:	f7fc fbf2 	bl	8002804 <HAL_GetTick>
 8006020:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006024:	f7fc fbee 	bl	8002804 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e1b5      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006036:	4b8b      	ldr	r3, [pc, #556]	; (8006264 <HAL_RCC_OscConfig+0x774>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f0      	beq.n	8006024 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d02c      	beq.n	80060a8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800604e:	4b84      	ldr	r3, [pc, #528]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8006050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006054:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006060:	497f      	ldr	r1, [pc, #508]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d010      	beq.n	8006096 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006074:	4b7a      	ldr	r3, [pc, #488]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	4a79      	ldr	r2, [pc, #484]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 800607c:	f043 0304 	orr.w	r3, r3, #4
 8006080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006084:	4b76      	ldr	r3, [pc, #472]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	4a75      	ldr	r2, [pc, #468]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 800608c:	f043 0301 	orr.w	r3, r3, #1
 8006090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006094:	e018      	b.n	80060c8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006096:	4b72      	ldr	r3, [pc, #456]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	4a70      	ldr	r2, [pc, #448]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060a6:	e00f      	b.n	80060c8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060a8:	4b6d      	ldr	r3, [pc, #436]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ae:	4a6c      	ldr	r2, [pc, #432]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80060b8:	4b69      	ldr	r3, [pc, #420]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060be:	4a68      	ldr	r2, [pc, #416]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 80060c0:	f023 0304 	bic.w	r3, r3, #4
 80060c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d016      	beq.n	80060fe <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d0:	f7fc fb98 	bl	8002804 <HAL_GetTick>
 80060d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060d6:	e00a      	b.n	80060ee <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d8:	f7fc fb94 	bl	8002804 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e159      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ee:	4b5c      	ldr	r3, [pc, #368]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 80060f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0ed      	beq.n	80060d8 <HAL_RCC_OscConfig+0x5e8>
 80060fc:	e01d      	b.n	800613a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fe:	f7fc fb81 	bl	8002804 <HAL_GetTick>
 8006102:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006104:	e00a      	b.n	800611c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006106:	f7fc fb7d 	bl	8002804 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f241 3288 	movw	r2, #5000	; 0x1388
 8006114:	4293      	cmp	r3, r2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e142      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800611c:	4b50      	ldr	r3, [pc, #320]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1ed      	bne.n	8006106 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800612a:	4b4d      	ldr	r3, [pc, #308]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006130:	4a4b      	ldr	r2, [pc, #300]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8006132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800613a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800613e:	2b01      	cmp	r3, #1
 8006140:	d105      	bne.n	800614e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006142:	4b47      	ldr	r3, [pc, #284]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8006144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006146:	4a46      	ldr	r2, [pc, #280]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8006148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800614c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d03c      	beq.n	80061d4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01c      	beq.n	800619c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006162:	4b3f      	ldr	r3, [pc, #252]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8006164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006168:	4a3d      	ldr	r2, [pc, #244]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 800616a:	f043 0301 	orr.w	r3, r3, #1
 800616e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006172:	f7fc fb47 	bl	8002804 <HAL_GetTick>
 8006176:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800617a:	f7fc fb43 	bl	8002804 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e10a      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800618c:	4b34      	ldr	r3, [pc, #208]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 800618e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0ef      	beq.n	800617a <HAL_RCC_OscConfig+0x68a>
 800619a:	e01b      	b.n	80061d4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800619c:	4b30      	ldr	r3, [pc, #192]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 800619e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061a2:	4a2f      	ldr	r2, [pc, #188]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ac:	f7fc fb2a 	bl	8002804 <HAL_GetTick>
 80061b0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061b4:	f7fc fb26 	bl	8002804 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e0ed      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061c6:	4b26      	ldr	r3, [pc, #152]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 80061c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1ef      	bne.n	80061b4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 80e1 	beq.w	80063a0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	f040 80b5 	bne.w	8006352 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80061e8:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f003 0203 	and.w	r2, r3, #3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d124      	bne.n	8006246 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006206:	3b01      	subs	r3, #1
 8006208:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	429a      	cmp	r2, r3
 800620c:	d11b      	bne.n	8006246 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800621a:	429a      	cmp	r2, r3
 800621c:	d113      	bne.n	8006246 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	085b      	lsrs	r3, r3, #1
 800622a:	3b01      	subs	r3, #1
 800622c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800622e:	429a      	cmp	r2, r3
 8006230:	d109      	bne.n	8006246 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	3b01      	subs	r3, #1
 8006240:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006242:	429a      	cmp	r2, r3
 8006244:	d05f      	beq.n	8006306 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	2b0c      	cmp	r3, #12
 800624a:	d05a      	beq.n	8006302 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a03      	ldr	r2, [pc, #12]	; (8006260 <HAL_RCC_OscConfig+0x770>)
 8006252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006256:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006258:	f7fc fad4 	bl	8002804 <HAL_GetTick>
 800625c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800625e:	e00c      	b.n	800627a <HAL_RCC_OscConfig+0x78a>
 8006260:	40021000 	.word	0x40021000
 8006264:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006268:	f7fc facc 	bl	8002804 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e093      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800627a:	4b4c      	ldr	r3, [pc, #304]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006286:	4b49      	ldr	r3, [pc, #292]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	4b49      	ldr	r3, [pc, #292]	; (80063b0 <HAL_RCC_OscConfig+0x8c0>)
 800628c:	4013      	ands	r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006296:	3a01      	subs	r2, #1
 8006298:	0112      	lsls	r2, r2, #4
 800629a:	4311      	orrs	r1, r2
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062a0:	0212      	lsls	r2, r2, #8
 80062a2:	4311      	orrs	r1, r2
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062a8:	0852      	lsrs	r2, r2, #1
 80062aa:	3a01      	subs	r2, #1
 80062ac:	0552      	lsls	r2, r2, #21
 80062ae:	4311      	orrs	r1, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80062b4:	0852      	lsrs	r2, r2, #1
 80062b6:	3a01      	subs	r2, #1
 80062b8:	0652      	lsls	r2, r2, #25
 80062ba:	430a      	orrs	r2, r1
 80062bc:	493b      	ldr	r1, [pc, #236]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80062c2:	4b3a      	ldr	r3, [pc, #232]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a39      	ldr	r2, [pc, #228]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 80062c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062cc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062ce:	4b37      	ldr	r3, [pc, #220]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	4a36      	ldr	r2, [pc, #216]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 80062d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062d8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80062da:	f7fc fa93 	bl	8002804 <HAL_GetTick>
 80062de:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062e2:	f7fc fa8f 	bl	8002804 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e056      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062f4:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006300:	e04e      	b.n	80063a0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e04d      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006306:	4b29      	ldr	r3, [pc, #164]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d146      	bne.n	80063a0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006312:	4b26      	ldr	r3, [pc, #152]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a25      	ldr	r2, [pc, #148]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 8006318:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800631c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800631e:	4b23      	ldr	r3, [pc, #140]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	4a22      	ldr	r2, [pc, #136]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 8006324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006328:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800632a:	f7fc fa6b 	bl	8002804 <HAL_GetTick>
 800632e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006332:	f7fc fa67 	bl	8002804 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e02e      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006344:	4b19      	ldr	r3, [pc, #100]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <HAL_RCC_OscConfig+0x842>
 8006350:	e026      	b.n	80063a0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	2b0c      	cmp	r3, #12
 8006356:	d021      	beq.n	800639c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006358:	4b14      	ldr	r3, [pc, #80]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a13      	ldr	r2, [pc, #76]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 800635e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fc fa4e 	bl	8002804 <HAL_GetTick>
 8006368:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800636c:	f7fc fa4a 	bl	8002804 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e011      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800638a:	4b08      	ldr	r3, [pc, #32]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	4a07      	ldr	r2, [pc, #28]	; (80063ac <HAL_RCC_OscConfig+0x8bc>)
 8006390:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006394:	f023 0303 	bic.w	r3, r3, #3
 8006398:	60d3      	str	r3, [r2, #12]
 800639a:	e001      	b.n	80063a0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3728      	adds	r7, #40	; 0x28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40021000 	.word	0x40021000
 80063b0:	f99f808c 	.word	0xf99f808c

080063b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0e7      	b.n	8006598 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063c8:	4b75      	ldr	r3, [pc, #468]	; (80065a0 <HAL_RCC_ClockConfig+0x1ec>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d910      	bls.n	80063f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d6:	4b72      	ldr	r3, [pc, #456]	; (80065a0 <HAL_RCC_ClockConfig+0x1ec>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f023 0207 	bic.w	r2, r3, #7
 80063de:	4970      	ldr	r1, [pc, #448]	; (80065a0 <HAL_RCC_ClockConfig+0x1ec>)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e6:	4b6e      	ldr	r3, [pc, #440]	; (80065a0 <HAL_RCC_ClockConfig+0x1ec>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d001      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0cf      	b.n	8006598 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d010      	beq.n	8006426 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	4b66      	ldr	r3, [pc, #408]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006410:	429a      	cmp	r2, r3
 8006412:	d908      	bls.n	8006426 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006414:	4b63      	ldr	r3, [pc, #396]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	4960      	ldr	r1, [pc, #384]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006422:	4313      	orrs	r3, r2
 8006424:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d04c      	beq.n	80064cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b03      	cmp	r3, #3
 8006438:	d107      	bne.n	800644a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800643a:	4b5a      	ldr	r3, [pc, #360]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d121      	bne.n	800648a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e0a6      	b.n	8006598 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d107      	bne.n	8006462 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006452:	4b54      	ldr	r3, [pc, #336]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d115      	bne.n	800648a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e09a      	b.n	8006598 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d107      	bne.n	800647a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800646a:	4b4e      	ldr	r3, [pc, #312]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e08e      	b.n	8006598 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800647a:	4b4a      	ldr	r3, [pc, #296]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e086      	b.n	8006598 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800648a:	4b46      	ldr	r3, [pc, #280]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f023 0203 	bic.w	r2, r3, #3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4943      	ldr	r1, [pc, #268]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006498:	4313      	orrs	r3, r2
 800649a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800649c:	f7fc f9b2 	bl	8002804 <HAL_GetTick>
 80064a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064a2:	e00a      	b.n	80064ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a4:	f7fc f9ae 	bl	8002804 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e06e      	b.n	8006598 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ba:	4b3a      	ldr	r3, [pc, #232]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 020c 	and.w	r2, r3, #12
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d1eb      	bne.n	80064a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d010      	beq.n	80064fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d208      	bcs.n	80064fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e8:	4b2e      	ldr	r3, [pc, #184]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	492b      	ldr	r1, [pc, #172]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064fa:	4b29      	ldr	r3, [pc, #164]	; (80065a0 <HAL_RCC_ClockConfig+0x1ec>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d210      	bcs.n	800652a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006508:	4b25      	ldr	r3, [pc, #148]	; (80065a0 <HAL_RCC_ClockConfig+0x1ec>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f023 0207 	bic.w	r2, r3, #7
 8006510:	4923      	ldr	r1, [pc, #140]	; (80065a0 <HAL_RCC_ClockConfig+0x1ec>)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	4313      	orrs	r3, r2
 8006516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006518:	4b21      	ldr	r3, [pc, #132]	; (80065a0 <HAL_RCC_ClockConfig+0x1ec>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d001      	beq.n	800652a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e036      	b.n	8006598 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	d008      	beq.n	8006548 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006536:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	4918      	ldr	r1, [pc, #96]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006544:	4313      	orrs	r3, r2
 8006546:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d009      	beq.n	8006568 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006554:	4b13      	ldr	r3, [pc, #76]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	4910      	ldr	r1, [pc, #64]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006564:	4313      	orrs	r3, r2
 8006566:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006568:	f000 f824 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 800656c:	4602      	mov	r2, r0
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <HAL_RCC_ClockConfig+0x1f0>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	091b      	lsrs	r3, r3, #4
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	490b      	ldr	r1, [pc, #44]	; (80065a8 <HAL_RCC_ClockConfig+0x1f4>)
 800657a:	5ccb      	ldrb	r3, [r1, r3]
 800657c:	f003 031f 	and.w	r3, r3, #31
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
 8006584:	4a09      	ldr	r2, [pc, #36]	; (80065ac <HAL_RCC_ClockConfig+0x1f8>)
 8006586:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006588:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <HAL_RCC_ClockConfig+0x1fc>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f7fc f8e9 	bl	8002764 <HAL_InitTick>
 8006592:	4603      	mov	r3, r0
 8006594:	72fb      	strb	r3, [r7, #11]

  return status;
 8006596:	7afb      	ldrb	r3, [r7, #11]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40022000 	.word	0x40022000
 80065a4:	40021000 	.word	0x40021000
 80065a8:	0800d578 	.word	0x0800d578
 80065ac:	20000000 	.word	0x20000000
 80065b0:	20000084 	.word	0x20000084

080065b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b089      	sub	sp, #36	; 0x24
 80065b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	2300      	movs	r3, #0
 80065c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065c2:	4b3e      	ldr	r3, [pc, #248]	; (80066bc <HAL_RCC_GetSysClockFreq+0x108>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 030c 	and.w	r3, r3, #12
 80065ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065cc:	4b3b      	ldr	r3, [pc, #236]	; (80066bc <HAL_RCC_GetSysClockFreq+0x108>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x34>
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	2b0c      	cmp	r3, #12
 80065e0:	d121      	bne.n	8006626 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d11e      	bne.n	8006626 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80065e8:	4b34      	ldr	r3, [pc, #208]	; (80066bc <HAL_RCC_GetSysClockFreq+0x108>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d107      	bne.n	8006604 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80065f4:	4b31      	ldr	r3, [pc, #196]	; (80066bc <HAL_RCC_GetSysClockFreq+0x108>)
 80065f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	61fb      	str	r3, [r7, #28]
 8006602:	e005      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006604:	4b2d      	ldr	r3, [pc, #180]	; (80066bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006610:	4a2b      	ldr	r2, [pc, #172]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006618:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10d      	bne.n	800663c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006624:	e00a      	b.n	800663c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b04      	cmp	r3, #4
 800662a:	d102      	bne.n	8006632 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800662c:	4b25      	ldr	r3, [pc, #148]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	e004      	b.n	800663c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b08      	cmp	r3, #8
 8006636:	d101      	bne.n	800663c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006638:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800663a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	2b0c      	cmp	r3, #12
 8006640:	d134      	bne.n	80066ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006642:	4b1e      	ldr	r3, [pc, #120]	; (80066bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b02      	cmp	r3, #2
 8006650:	d003      	beq.n	800665a <HAL_RCC_GetSysClockFreq+0xa6>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d003      	beq.n	8006660 <HAL_RCC_GetSysClockFreq+0xac>
 8006658:	e005      	b.n	8006666 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800665a:	4b1a      	ldr	r3, [pc, #104]	; (80066c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800665c:	617b      	str	r3, [r7, #20]
      break;
 800665e:	e005      	b.n	800666c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006660:	4b19      	ldr	r3, [pc, #100]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006662:	617b      	str	r3, [r7, #20]
      break;
 8006664:	e002      	b.n	800666c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	617b      	str	r3, [r7, #20]
      break;
 800666a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800666c:	4b13      	ldr	r3, [pc, #76]	; (80066bc <HAL_RCC_GetSysClockFreq+0x108>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	3301      	adds	r3, #1
 8006678:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800667a:	4b10      	ldr	r3, [pc, #64]	; (80066bc <HAL_RCC_GetSysClockFreq+0x108>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	0a1b      	lsrs	r3, r3, #8
 8006680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	fb03 f202 	mul.w	r2, r3, r2
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006692:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	0e5b      	lsrs	r3, r3, #25
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	3301      	adds	r3, #1
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80066ac:	69bb      	ldr	r3, [r7, #24]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3724      	adds	r7, #36	; 0x24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40021000 	.word	0x40021000
 80066c0:	0800d590 	.word	0x0800d590
 80066c4:	00f42400 	.word	0x00f42400
 80066c8:	007a1200 	.word	0x007a1200

080066cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80066d2:	681b      	ldr	r3, [r3, #0]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000000 	.word	0x20000000

080066e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80066e8:	f7ff fff0 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 80066ec:	4602      	mov	r2, r0
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	0a1b      	lsrs	r3, r3, #8
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	4904      	ldr	r1, [pc, #16]	; (800670c <HAL_RCC_GetPCLK1Freq+0x28>)
 80066fa:	5ccb      	ldrb	r3, [r1, r3]
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006704:	4618      	mov	r0, r3
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40021000 	.word	0x40021000
 800670c:	0800d588 	.word	0x0800d588

08006710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006714:	f7ff ffda 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 8006718:	4602      	mov	r2, r0
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_RCC_GetPCLK2Freq+0x24>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	0adb      	lsrs	r3, r3, #11
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	4904      	ldr	r1, [pc, #16]	; (8006738 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006726:	5ccb      	ldrb	r3, [r1, r3]
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006730:	4618      	mov	r0, r3
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40021000 	.word	0x40021000
 8006738:	0800d588 	.word	0x0800d588

0800673c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006748:	4b2a      	ldr	r3, [pc, #168]	; (80067f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800674a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006754:	f7ff f968 	bl	8005a28 <HAL_PWREx_GetVoltageRange>
 8006758:	6178      	str	r0, [r7, #20]
 800675a:	e014      	b.n	8006786 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800675e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006760:	4a24      	ldr	r2, [pc, #144]	; (80067f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006766:	6593      	str	r3, [r2, #88]	; 0x58
 8006768:	4b22      	ldr	r3, [pc, #136]	; (80067f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800676a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006774:	f7ff f958 	bl	8005a28 <HAL_PWREx_GetVoltageRange>
 8006778:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800677a:	4b1e      	ldr	r3, [pc, #120]	; (80067f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800677c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677e:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006784:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800678c:	d10b      	bne.n	80067a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b80      	cmp	r3, #128	; 0x80
 8006792:	d919      	bls.n	80067c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2ba0      	cmp	r3, #160	; 0xa0
 8006798:	d902      	bls.n	80067a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800679a:	2302      	movs	r3, #2
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	e013      	b.n	80067c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80067a0:	2301      	movs	r3, #1
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	e010      	b.n	80067c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b80      	cmp	r3, #128	; 0x80
 80067aa:	d902      	bls.n	80067b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80067ac:	2303      	movs	r3, #3
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	e00a      	b.n	80067c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b80      	cmp	r3, #128	; 0x80
 80067b6:	d102      	bne.n	80067be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80067b8:	2302      	movs	r3, #2
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	e004      	b.n	80067c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b70      	cmp	r3, #112	; 0x70
 80067c2:	d101      	bne.n	80067c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80067c4:	2301      	movs	r3, #1
 80067c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80067c8:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f023 0207 	bic.w	r2, r3, #7
 80067d0:	4909      	ldr	r1, [pc, #36]	; (80067f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80067d8:	4b07      	ldr	r3, [pc, #28]	; (80067f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d001      	beq.n	80067ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40022000 	.word	0x40022000

080067fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006804:	2300      	movs	r3, #0
 8006806:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006808:	2300      	movs	r3, #0
 800680a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 809e 	beq.w	8006956 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800681a:	2300      	movs	r3, #0
 800681c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800681e:	4b46      	ldr	r3, [pc, #280]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800682e:	2300      	movs	r3, #0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00d      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006834:	4b40      	ldr	r3, [pc, #256]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006838:	4a3f      	ldr	r2, [pc, #252]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800683a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800683e:	6593      	str	r3, [r2, #88]	; 0x58
 8006840:	4b3d      	ldr	r3, [pc, #244]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800684c:	2301      	movs	r3, #1
 800684e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006850:	4b3a      	ldr	r3, [pc, #232]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a39      	ldr	r2, [pc, #228]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800685c:	f7fb ffd2 	bl	8002804 <HAL_GetTick>
 8006860:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006862:	e009      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006864:	f7fb ffce 	bl	8002804 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d902      	bls.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	74fb      	strb	r3, [r7, #19]
        break;
 8006876:	e005      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006878:	4b30      	ldr	r3, [pc, #192]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0ef      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8006884:	7cfb      	ldrb	r3, [r7, #19]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d15a      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800688a:	4b2b      	ldr	r3, [pc, #172]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800688c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006894:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01e      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xde>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d019      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068a6:	4b24      	ldr	r3, [pc, #144]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80068a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068b2:	4b21      	ldr	r3, [pc, #132]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b8:	4a1f      	ldr	r2, [pc, #124]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80068ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068c2:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c8:	4a1b      	ldr	r2, [pc, #108]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80068ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068d2:	4a19      	ldr	r2, [pc, #100]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d016      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fb ff8e 	bl	8002804 <HAL_GetTick>
 80068e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ea:	e00b      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ec:	f7fb ff8a 	bl	8002804 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d902      	bls.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	74fb      	strb	r3, [r7, #19]
            break;
 8006902:	e006      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006904:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0ec      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006912:	7cfb      	ldrb	r3, [r7, #19]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10b      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	4904      	ldr	r1, [pc, #16]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006928:	4313      	orrs	r3, r2
 800692a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800692e:	e009      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006930:	7cfb      	ldrb	r3, [r7, #19]
 8006932:	74bb      	strb	r3, [r7, #18]
 8006934:	e006      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006936:	bf00      	nop
 8006938:	40021000 	.word	0x40021000
 800693c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006940:	7cfb      	ldrb	r3, [r7, #19]
 8006942:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006944:	7c7b      	ldrb	r3, [r7, #17]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d105      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800694a:	4b6e      	ldr	r3, [pc, #440]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800694c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694e:	4a6d      	ldr	r2, [pc, #436]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006954:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006962:	4b68      	ldr	r3, [pc, #416]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006968:	f023 0203 	bic.w	r2, r3, #3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4964      	ldr	r1, [pc, #400]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006984:	4b5f      	ldr	r3, [pc, #380]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698a:	f023 020c 	bic.w	r2, r3, #12
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	495c      	ldr	r1, [pc, #368]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006994:	4313      	orrs	r3, r2
 8006996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069a6:	4b57      	ldr	r3, [pc, #348]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	4953      	ldr	r1, [pc, #332]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069c8:	4b4e      	ldr	r3, [pc, #312]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	494b      	ldr	r1, [pc, #300]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069ea:	4b46      	ldr	r3, [pc, #280]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	4942      	ldr	r1, [pc, #264]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a0c:	4b3d      	ldr	r3, [pc, #244]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	493a      	ldr	r1, [pc, #232]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a2e:	4b35      	ldr	r3, [pc, #212]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	4931      	ldr	r1, [pc, #196]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a50:	4b2c      	ldr	r3, [pc, #176]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	4929      	ldr	r1, [pc, #164]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a72:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	4920      	ldr	r1, [pc, #128]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a94:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	4918      	ldr	r1, [pc, #96]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ab2:	d105      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ab4:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	4a12      	ldr	r2, [pc, #72]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006abe:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d015      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006acc:	4b0d      	ldr	r3, [pc, #52]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	490a      	ldr	r1, [pc, #40]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aea:	d105      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aec:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4a04      	ldr	r2, [pc, #16]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006af6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006af8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	40021000 	.word	0x40021000

08006b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e049      	b.n	8006bae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fa f872 	bl	8000c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f001 f9fe 	bl	8007f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a1a      	ldr	r2, [r3, #32]
 8006bc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10f      	bne.n	8006bee <HAL_TIM_Base_Stop+0x38>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6a1a      	ldr	r2, [r3, #32]
 8006bd4:	f240 4344 	movw	r3, #1092	; 0x444
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d107      	bne.n	8006bee <HAL_TIM_Base_Stop+0x38>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d001      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e03b      	b.n	8006c94 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a19      	ldr	r2, [pc, #100]	; (8006ca0 <HAL_TIM_Base_Start_IT+0x9c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d009      	beq.n	8006c52 <HAL_TIM_Base_Start_IT+0x4e>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c46:	d004      	beq.n	8006c52 <HAL_TIM_Base_Start_IT+0x4e>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d115      	bne.n	8006c7e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <HAL_TIM_Base_Start_IT+0xa4>)
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b06      	cmp	r3, #6
 8006c62:	d015      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x8c>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6a:	d011      	beq.n	8006c90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0201 	orr.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7c:	e008      	b.n	8006c90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0201 	orr.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	e000      	b.n	8006c92 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	00010007 	.word	0x00010007

08006cac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0201 	bic.w	r2, r2, #1
 8006cc2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6a1a      	ldr	r2, [r3, #32]
 8006cca:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10f      	bne.n	8006cf4 <HAL_TIM_Base_Stop_IT+0x48>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
 8006cda:	f240 4344 	movw	r3, #1092	; 0x444
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d107      	bne.n	8006cf4 <HAL_TIM_Base_Stop_IT+0x48>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0201 	bic.w	r2, r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e049      	b.n	8006db0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f841 	bl	8006db8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f001 f8fd 	bl	8007f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_TIM_OC_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                       uint16_t Length)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <HAL_TIM_OC_Start_DMA+0x2c>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	bf0c      	ite	eq
 8006df0:	2301      	moveq	r3, #1
 8006df2:	2300      	movne	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	e03c      	b.n	8006e72 <HAL_TIM_OC_Start_DMA+0xa6>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d109      	bne.n	8006e12 <HAL_TIM_OC_Start_DMA+0x46>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	bf0c      	ite	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	e02f      	b.n	8006e72 <HAL_TIM_OC_Start_DMA+0xa6>
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d109      	bne.n	8006e2c <HAL_TIM_OC_Start_DMA+0x60>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	bf0c      	ite	eq
 8006e24:	2301      	moveq	r3, #1
 8006e26:	2300      	movne	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	e022      	b.n	8006e72 <HAL_TIM_OC_Start_DMA+0xa6>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b0c      	cmp	r3, #12
 8006e30:	d109      	bne.n	8006e46 <HAL_TIM_OC_Start_DMA+0x7a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	bf0c      	ite	eq
 8006e3e:	2301      	moveq	r3, #1
 8006e40:	2300      	movne	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	e015      	b.n	8006e72 <HAL_TIM_OC_Start_DMA+0xa6>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d109      	bne.n	8006e60 <HAL_TIM_OC_Start_DMA+0x94>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	bf0c      	ite	eq
 8006e58:	2301      	moveq	r3, #1
 8006e5a:	2300      	movne	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	e008      	b.n	8006e72 <HAL_TIM_OC_Start_DMA+0xa6>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	bf0c      	ite	eq
 8006e6c:	2301      	moveq	r3, #1
 8006e6e:	2300      	movne	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_TIM_OC_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006e76:	2302      	movs	r3, #2
 8006e78:	e18d      	b.n	8007196 <HAL_TIM_OC_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <HAL_TIM_OC_Start_DMA+0xc8>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	bf0c      	ite	eq
 8006e8c:	2301      	moveq	r3, #1
 8006e8e:	2300      	movne	r3, #0
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	e03c      	b.n	8006f0e <HAL_TIM_OC_Start_DMA+0x142>
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d109      	bne.n	8006eae <HAL_TIM_OC_Start_DMA+0xe2>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	bf0c      	ite	eq
 8006ea6:	2301      	moveq	r3, #1
 8006ea8:	2300      	movne	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	e02f      	b.n	8006f0e <HAL_TIM_OC_Start_DMA+0x142>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d109      	bne.n	8006ec8 <HAL_TIM_OC_Start_DMA+0xfc>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e022      	b.n	8006f0e <HAL_TIM_OC_Start_DMA+0x142>
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b0c      	cmp	r3, #12
 8006ecc:	d109      	bne.n	8006ee2 <HAL_TIM_OC_Start_DMA+0x116>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	bf0c      	ite	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	2300      	movne	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	e015      	b.n	8006f0e <HAL_TIM_OC_Start_DMA+0x142>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b10      	cmp	r3, #16
 8006ee6:	d109      	bne.n	8006efc <HAL_TIM_OC_Start_DMA+0x130>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	e008      	b.n	8006f0e <HAL_TIM_OC_Start_DMA+0x142>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d034      	beq.n	8006f7c <HAL_TIM_OC_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <HAL_TIM_OC_Start_DMA+0x152>
 8006f18:	887b      	ldrh	r3, [r7, #2]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_TIM_OC_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e139      	b.n	8007196 <HAL_TIM_OC_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_OC_Start_DMA+0x166>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f30:	e026      	b.n	8006f80 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_OC_Start_DMA+0x176>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f40:	e01e      	b.n	8006f80 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d104      	bne.n	8006f52 <HAL_TIM_OC_Start_DMA+0x186>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f50:	e016      	b.n	8006f80 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	d104      	bne.n	8006f62 <HAL_TIM_OC_Start_DMA+0x196>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f60:	e00e      	b.n	8006f80 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b10      	cmp	r3, #16
 8006f66:	d104      	bne.n	8006f72 <HAL_TIM_OC_Start_DMA+0x1a6>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f70:	e006      	b.n	8006f80 <HAL_TIM_OC_Start_DMA+0x1b4>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f7a:	e001      	b.n	8006f80 <HAL_TIM_OC_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e10a      	b.n	8007196 <HAL_TIM_OC_Start_DMA+0x3ca>
  }

  switch (Channel)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b0c      	cmp	r3, #12
 8006f84:	f200 80ae 	bhi.w	80070e4 <HAL_TIM_OC_Start_DMA+0x318>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <HAL_TIM_OC_Start_DMA+0x1c4>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fc5 	.word	0x08006fc5
 8006f94:	080070e5 	.word	0x080070e5
 8006f98:	080070e5 	.word	0x080070e5
 8006f9c:	080070e5 	.word	0x080070e5
 8006fa0:	0800700d 	.word	0x0800700d
 8006fa4:	080070e5 	.word	0x080070e5
 8006fa8:	080070e5 	.word	0x080070e5
 8006fac:	080070e5 	.word	0x080070e5
 8006fb0:	08007055 	.word	0x08007055
 8006fb4:	080070e5 	.word	0x080070e5
 8006fb8:	080070e5 	.word	0x080070e5
 8006fbc:	080070e5 	.word	0x080070e5
 8006fc0:	0800709d 	.word	0x0800709d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	4a75      	ldr	r2, [pc, #468]	; (80071a0 <HAL_TIM_OC_Start_DMA+0x3d4>)
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	4a74      	ldr	r2, [pc, #464]	; (80071a4 <HAL_TIM_OC_Start_DMA+0x3d8>)
 8006fd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	4a73      	ldr	r2, [pc, #460]	; (80071a8 <HAL_TIM_OC_Start_DMA+0x3dc>)
 8006fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3334      	adds	r3, #52	; 0x34
 8006fe8:	461a      	mov	r2, r3
 8006fea:	887b      	ldrh	r3, [r7, #2]
 8006fec:	f7fe f8d2 	bl	8005194 <HAL_DMA_Start_IT>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <HAL_TIM_OC_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e0cd      	b.n	8007196 <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007008:	60da      	str	r2, [r3, #12]
      break;
 800700a:	e06e      	b.n	80070ea <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	4a63      	ldr	r2, [pc, #396]	; (80071a0 <HAL_TIM_OC_Start_DMA+0x3d4>)
 8007012:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007018:	4a62      	ldr	r2, [pc, #392]	; (80071a4 <HAL_TIM_OC_Start_DMA+0x3d8>)
 800701a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	4a61      	ldr	r2, [pc, #388]	; (80071a8 <HAL_TIM_OC_Start_DMA+0x3dc>)
 8007022:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3338      	adds	r3, #56	; 0x38
 8007030:	461a      	mov	r2, r3
 8007032:	887b      	ldrh	r3, [r7, #2]
 8007034:	f7fe f8ae 	bl	8005194 <HAL_DMA_Start_IT>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <HAL_TIM_OC_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e0a9      	b.n	8007196 <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007050:	60da      	str	r2, [r3, #12]
      break;
 8007052:	e04a      	b.n	80070ea <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	4a51      	ldr	r2, [pc, #324]	; (80071a0 <HAL_TIM_OC_Start_DMA+0x3d4>)
 800705a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	4a50      	ldr	r2, [pc, #320]	; (80071a4 <HAL_TIM_OC_Start_DMA+0x3d8>)
 8007062:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	4a4f      	ldr	r2, [pc, #316]	; (80071a8 <HAL_TIM_OC_Start_DMA+0x3dc>)
 800706a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	333c      	adds	r3, #60	; 0x3c
 8007078:	461a      	mov	r2, r3
 800707a:	887b      	ldrh	r3, [r7, #2]
 800707c:	f7fe f88a 	bl	8005194 <HAL_DMA_Start_IT>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_TIM_OC_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e085      	b.n	8007196 <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007098:	60da      	str	r2, [r3, #12]
      break;
 800709a:	e026      	b.n	80070ea <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a0:	4a3f      	ldr	r2, [pc, #252]	; (80071a0 <HAL_TIM_OC_Start_DMA+0x3d4>)
 80070a2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a8:	4a3e      	ldr	r2, [pc, #248]	; (80071a4 <HAL_TIM_OC_Start_DMA+0x3d8>)
 80070aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	4a3d      	ldr	r2, [pc, #244]	; (80071a8 <HAL_TIM_OC_Start_DMA+0x3dc>)
 80070b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3340      	adds	r3, #64	; 0x40
 80070c0:	461a      	mov	r2, r3
 80070c2:	887b      	ldrh	r3, [r7, #2]
 80070c4:	f7fe f866 	bl	8005194 <HAL_DMA_Start_IT>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <HAL_TIM_OC_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e061      	b.n	8007196 <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070e0:	60da      	str	r2, [r3, #12]
      break;
 80070e2:	e002      	b.n	80070ea <HAL_TIM_OC_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
      break;
 80070e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d151      	bne.n	8007194 <HAL_TIM_OC_Start_DMA+0x3c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2201      	movs	r2, #1
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 fa07 	bl	800850c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <HAL_TIM_OC_Start_DMA+0x3e0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d009      	beq.n	800711c <HAL_TIM_OC_Start_DMA+0x350>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a28      	ldr	r2, [pc, #160]	; (80071b0 <HAL_TIM_OC_Start_DMA+0x3e4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d004      	beq.n	800711c <HAL_TIM_OC_Start_DMA+0x350>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a27      	ldr	r2, [pc, #156]	; (80071b4 <HAL_TIM_OC_Start_DMA+0x3e8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d101      	bne.n	8007120 <HAL_TIM_OC_Start_DMA+0x354>
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <HAL_TIM_OC_Start_DMA+0x356>
 8007120:	2300      	movs	r3, #0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <HAL_TIM_OC_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007134:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a1c      	ldr	r2, [pc, #112]	; (80071ac <HAL_TIM_OC_Start_DMA+0x3e0>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d009      	beq.n	8007154 <HAL_TIM_OC_Start_DMA+0x388>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007148:	d004      	beq.n	8007154 <HAL_TIM_OC_Start_DMA+0x388>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <HAL_TIM_OC_Start_DMA+0x3e4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d115      	bne.n	8007180 <HAL_TIM_OC_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <HAL_TIM_OC_Start_DMA+0x3ec>)
 800715c:	4013      	ands	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2b06      	cmp	r3, #6
 8007164:	d015      	beq.n	8007192 <HAL_TIM_OC_Start_DMA+0x3c6>
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800716c:	d011      	beq.n	8007192 <HAL_TIM_OC_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0201 	orr.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717e:	e008      	b.n	8007192 <HAL_TIM_OC_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	e000      	b.n	8007194 <HAL_TIM_OC_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007192:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	08007e39 	.word	0x08007e39
 80071a4:	08007ee1 	.word	0x08007ee1
 80071a8:	08007da7 	.word	0x08007da7
 80071ac:	40012c00 	.word	0x40012c00
 80071b0:	40014000 	.word	0x40014000
 80071b4:	40014400 	.word	0x40014400
 80071b8:	00010007 	.word	0x00010007

080071bc <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b0c      	cmp	r3, #12
 80071ce:	d855      	bhi.n	800727c <HAL_TIM_OC_Stop_DMA+0xc0>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <HAL_TIM_OC_Stop_DMA+0x1c>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	0800720d 	.word	0x0800720d
 80071dc:	0800727d 	.word	0x0800727d
 80071e0:	0800727d 	.word	0x0800727d
 80071e4:	0800727d 	.word	0x0800727d
 80071e8:	08007229 	.word	0x08007229
 80071ec:	0800727d 	.word	0x0800727d
 80071f0:	0800727d 	.word	0x0800727d
 80071f4:	0800727d 	.word	0x0800727d
 80071f8:	08007245 	.word	0x08007245
 80071fc:	0800727d 	.word	0x0800727d
 8007200:	0800727d 	.word	0x0800727d
 8007204:	0800727d 	.word	0x0800727d
 8007208:	08007261 	.word	0x08007261
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800721a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe f855 	bl	80052d0 <HAL_DMA_Abort_IT>
      break;
 8007226:	e02c      	b.n	8007282 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007236:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	4618      	mov	r0, r3
 800723e:	f7fe f847 	bl	80052d0 <HAL_DMA_Abort_IT>
      break;
 8007242:	e01e      	b.n	8007282 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007252:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe f839 	bl	80052d0 <HAL_DMA_Abort_IT>
      break;
 800725e:	e010      	b.n	8007282 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800726e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007274:	4618      	mov	r0, r3
 8007276:	f7fe f82b 	bl	80052d0 <HAL_DMA_Abort_IT>
      break;
 800727a:	e002      	b.n	8007282 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	73fb      	strb	r3, [r7, #15]
      break;
 8007280:	bf00      	nop
  }

  if (status == HAL_OK)
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d176      	bne.n	8007376 <HAL_TIM_OC_Stop_DMA+0x1ba>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2200      	movs	r2, #0
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f001 f93b 	bl	800850c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a39      	ldr	r2, [pc, #228]	; (8007380 <HAL_TIM_OC_Stop_DMA+0x1c4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_TIM_OC_Stop_DMA+0xf8>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a37      	ldr	r2, [pc, #220]	; (8007384 <HAL_TIM_OC_Stop_DMA+0x1c8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_TIM_OC_Stop_DMA+0xf8>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a36      	ldr	r2, [pc, #216]	; (8007388 <HAL_TIM_OC_Stop_DMA+0x1cc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d101      	bne.n	80072b8 <HAL_TIM_OC_Stop_DMA+0xfc>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <HAL_TIM_OC_Stop_DMA+0xfe>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d017      	beq.n	80072ee <HAL_TIM_OC_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80072c8:	4013      	ands	r3, r2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10f      	bne.n	80072ee <HAL_TIM_OC_Stop_DMA+0x132>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6a1a      	ldr	r2, [r3, #32]
 80072d4:	f240 4344 	movw	r3, #1092	; 0x444
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d107      	bne.n	80072ee <HAL_TIM_OC_Stop_DMA+0x132>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6a1a      	ldr	r2, [r3, #32]
 80072f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80072f8:	4013      	ands	r3, r2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10f      	bne.n	800731e <HAL_TIM_OC_Stop_DMA+0x162>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	f240 4344 	movw	r3, #1092	; 0x444
 8007308:	4013      	ands	r3, r2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d107      	bne.n	800731e <HAL_TIM_OC_Stop_DMA+0x162>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <HAL_TIM_OC_Stop_DMA+0x172>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800732c:	e023      	b.n	8007376 <HAL_TIM_OC_Stop_DMA+0x1ba>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b04      	cmp	r3, #4
 8007332:	d104      	bne.n	800733e <HAL_TIM_OC_Stop_DMA+0x182>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800733c:	e01b      	b.n	8007376 <HAL_TIM_OC_Stop_DMA+0x1ba>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b08      	cmp	r3, #8
 8007342:	d104      	bne.n	800734e <HAL_TIM_OC_Stop_DMA+0x192>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800734c:	e013      	b.n	8007376 <HAL_TIM_OC_Stop_DMA+0x1ba>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b0c      	cmp	r3, #12
 8007352:	d104      	bne.n	800735e <HAL_TIM_OC_Stop_DMA+0x1a2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800735c:	e00b      	b.n	8007376 <HAL_TIM_OC_Stop_DMA+0x1ba>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b10      	cmp	r3, #16
 8007362:	d104      	bne.n	800736e <HAL_TIM_OC_Stop_DMA+0x1b2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800736c:	e003      	b.n	8007376 <HAL_TIM_OC_Stop_DMA+0x1ba>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007376:	7bfb      	ldrb	r3, [r7, #15]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40014000 	.word	0x40014000
 8007388:	40014400 	.word	0x40014400

0800738c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e049      	b.n	8007432 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d106      	bne.n	80073b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7f9 fb8a 	bl	8000acc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4619      	mov	r1, r3
 80073ca:	4610      	mov	r0, r2
 80073cc:	f000 fdbc 	bl	8007f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6a1a      	ldr	r2, [r3, #32]
 8007450:	f241 1311 	movw	r3, #4369	; 0x1111
 8007454:	4013      	ands	r3, r2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10f      	bne.n	800747a <HAL_TIM_PWM_DeInit+0x40>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6a1a      	ldr	r2, [r3, #32]
 8007460:	f240 4344 	movw	r3, #1092	; 0x444
 8007464:	4013      	ands	r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d107      	bne.n	800747a <HAL_TIM_PWM_DeInit+0x40>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0201 	bic.w	r2, r2, #1
 8007478:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7f9 fbf2 	bl	8000c64 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d109      	bne.n	8007518 <HAL_TIM_PWM_Start+0x24>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	bf14      	ite	ne
 8007510:	2301      	movne	r3, #1
 8007512:	2300      	moveq	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	e03c      	b.n	8007592 <HAL_TIM_PWM_Start+0x9e>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b04      	cmp	r3, #4
 800751c:	d109      	bne.n	8007532 <HAL_TIM_PWM_Start+0x3e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	bf14      	ite	ne
 800752a:	2301      	movne	r3, #1
 800752c:	2300      	moveq	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	e02f      	b.n	8007592 <HAL_TIM_PWM_Start+0x9e>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b08      	cmp	r3, #8
 8007536:	d109      	bne.n	800754c <HAL_TIM_PWM_Start+0x58>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b01      	cmp	r3, #1
 8007542:	bf14      	ite	ne
 8007544:	2301      	movne	r3, #1
 8007546:	2300      	moveq	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	e022      	b.n	8007592 <HAL_TIM_PWM_Start+0x9e>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b0c      	cmp	r3, #12
 8007550:	d109      	bne.n	8007566 <HAL_TIM_PWM_Start+0x72>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	e015      	b.n	8007592 <HAL_TIM_PWM_Start+0x9e>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b10      	cmp	r3, #16
 800756a:	d109      	bne.n	8007580 <HAL_TIM_PWM_Start+0x8c>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	bf14      	ite	ne
 8007578:	2301      	movne	r3, #1
 800757a:	2300      	moveq	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e008      	b.n	8007592 <HAL_TIM_PWM_Start+0x9e>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	bf14      	ite	ne
 800758c:	2301      	movne	r3, #1
 800758e:	2300      	moveq	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e07e      	b.n	8007698 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <HAL_TIM_PWM_Start+0xb6>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a8:	e023      	b.n	80075f2 <HAL_TIM_PWM_Start+0xfe>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d104      	bne.n	80075ba <HAL_TIM_PWM_Start+0xc6>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b8:	e01b      	b.n	80075f2 <HAL_TIM_PWM_Start+0xfe>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d104      	bne.n	80075ca <HAL_TIM_PWM_Start+0xd6>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c8:	e013      	b.n	80075f2 <HAL_TIM_PWM_Start+0xfe>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b0c      	cmp	r3, #12
 80075ce:	d104      	bne.n	80075da <HAL_TIM_PWM_Start+0xe6>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075d8:	e00b      	b.n	80075f2 <HAL_TIM_PWM_Start+0xfe>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d104      	bne.n	80075ea <HAL_TIM_PWM_Start+0xf6>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075e8:	e003      	b.n	80075f2 <HAL_TIM_PWM_Start+0xfe>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2202      	movs	r2, #2
 80075ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2201      	movs	r2, #1
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 ff86 	bl	800850c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a26      	ldr	r2, [pc, #152]	; (80076a0 <HAL_TIM_PWM_Start+0x1ac>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d009      	beq.n	800761e <HAL_TIM_PWM_Start+0x12a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a25      	ldr	r2, [pc, #148]	; (80076a4 <HAL_TIM_PWM_Start+0x1b0>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d004      	beq.n	800761e <HAL_TIM_PWM_Start+0x12a>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a23      	ldr	r2, [pc, #140]	; (80076a8 <HAL_TIM_PWM_Start+0x1b4>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d101      	bne.n	8007622 <HAL_TIM_PWM_Start+0x12e>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <HAL_TIM_PWM_Start+0x130>
 8007622:	2300      	movs	r3, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d007      	beq.n	8007638 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007636:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a18      	ldr	r2, [pc, #96]	; (80076a0 <HAL_TIM_PWM_Start+0x1ac>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d009      	beq.n	8007656 <HAL_TIM_PWM_Start+0x162>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764a:	d004      	beq.n	8007656 <HAL_TIM_PWM_Start+0x162>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a14      	ldr	r2, [pc, #80]	; (80076a4 <HAL_TIM_PWM_Start+0x1b0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d115      	bne.n	8007682 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	4b13      	ldr	r3, [pc, #76]	; (80076ac <HAL_TIM_PWM_Start+0x1b8>)
 800765e:	4013      	ands	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b06      	cmp	r3, #6
 8007666:	d015      	beq.n	8007694 <HAL_TIM_PWM_Start+0x1a0>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766e:	d011      	beq.n	8007694 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	e008      	b.n	8007694 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0201 	orr.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	e000      	b.n	8007696 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007694:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	40012c00 	.word	0x40012c00
 80076a4:	40014000 	.word	0x40014000
 80076a8:	40014400 	.word	0x40014400
 80076ac:	00010007 	.word	0x00010007

080076b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2200      	movs	r2, #0
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 ff22 	bl	800850c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a39      	ldr	r2, [pc, #228]	; (80077b4 <HAL_TIM_PWM_Stop+0x104>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d009      	beq.n	80076e6 <HAL_TIM_PWM_Stop+0x36>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a38      	ldr	r2, [pc, #224]	; (80077b8 <HAL_TIM_PWM_Stop+0x108>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d004      	beq.n	80076e6 <HAL_TIM_PWM_Stop+0x36>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a36      	ldr	r2, [pc, #216]	; (80077bc <HAL_TIM_PWM_Stop+0x10c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d101      	bne.n	80076ea <HAL_TIM_PWM_Stop+0x3a>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e000      	b.n	80076ec <HAL_TIM_PWM_Stop+0x3c>
 80076ea:	2300      	movs	r3, #0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d017      	beq.n	8007720 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6a1a      	ldr	r2, [r3, #32]
 80076f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10f      	bne.n	8007720 <HAL_TIM_PWM_Stop+0x70>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6a1a      	ldr	r2, [r3, #32]
 8007706:	f240 4344 	movw	r3, #1092	; 0x444
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d107      	bne.n	8007720 <HAL_TIM_PWM_Stop+0x70>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800771e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6a1a      	ldr	r2, [r3, #32]
 8007726:	f241 1311 	movw	r3, #4369	; 0x1111
 800772a:	4013      	ands	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10f      	bne.n	8007750 <HAL_TIM_PWM_Stop+0xa0>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6a1a      	ldr	r2, [r3, #32]
 8007736:	f240 4344 	movw	r3, #1092	; 0x444
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d107      	bne.n	8007750 <HAL_TIM_PWM_Stop+0xa0>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0201 	bic.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <HAL_TIM_PWM_Stop+0xb0>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800775e:	e023      	b.n	80077a8 <HAL_TIM_PWM_Stop+0xf8>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b04      	cmp	r3, #4
 8007764:	d104      	bne.n	8007770 <HAL_TIM_PWM_Stop+0xc0>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800776e:	e01b      	b.n	80077a8 <HAL_TIM_PWM_Stop+0xf8>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b08      	cmp	r3, #8
 8007774:	d104      	bne.n	8007780 <HAL_TIM_PWM_Stop+0xd0>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800777e:	e013      	b.n	80077a8 <HAL_TIM_PWM_Stop+0xf8>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b0c      	cmp	r3, #12
 8007784:	d104      	bne.n	8007790 <HAL_TIM_PWM_Stop+0xe0>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800778e:	e00b      	b.n	80077a8 <HAL_TIM_PWM_Stop+0xf8>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b10      	cmp	r3, #16
 8007794:	d104      	bne.n	80077a0 <HAL_TIM_PWM_Stop+0xf0>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800779e:	e003      	b.n	80077a8 <HAL_TIM_PWM_Stop+0xf8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40014000 	.word	0x40014000
 80077bc:	40014400 	.word	0x40014400

080077c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d122      	bne.n	800781c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d11b      	bne.n	800781c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f06f 0202 	mvn.w	r2, #2
 80077ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fabb 	bl	8007d7e <HAL_TIM_IC_CaptureCallback>
 8007808:	e005      	b.n	8007816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 faad 	bl	8007d6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7f8 fef9 	bl	8000608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b04      	cmp	r3, #4
 8007828:	d122      	bne.n	8007870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b04      	cmp	r3, #4
 8007836:	d11b      	bne.n	8007870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f06f 0204 	mvn.w	r2, #4
 8007840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2202      	movs	r2, #2
 8007846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa91 	bl	8007d7e <HAL_TIM_IC_CaptureCallback>
 800785c:	e005      	b.n	800786a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa83 	bl	8007d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7f8 fecf 	bl	8000608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f003 0308 	and.w	r3, r3, #8
 800787a:	2b08      	cmp	r3, #8
 800787c:	d122      	bne.n	80078c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f003 0308 	and.w	r3, r3, #8
 8007888:	2b08      	cmp	r3, #8
 800788a:	d11b      	bne.n	80078c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f06f 0208 	mvn.w	r2, #8
 8007894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2204      	movs	r2, #4
 800789a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fa67 	bl	8007d7e <HAL_TIM_IC_CaptureCallback>
 80078b0:	e005      	b.n	80078be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa59 	bl	8007d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7f8 fea5 	bl	8000608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b10      	cmp	r3, #16
 80078d0:	d122      	bne.n	8007918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f003 0310 	and.w	r3, r3, #16
 80078dc:	2b10      	cmp	r3, #16
 80078de:	d11b      	bne.n	8007918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f06f 0210 	mvn.w	r2, #16
 80078e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2208      	movs	r2, #8
 80078ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa3d 	bl	8007d7e <HAL_TIM_IC_CaptureCallback>
 8007904:	e005      	b.n	8007912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa2f 	bl	8007d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7f8 fe7b 	bl	8000608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b01      	cmp	r3, #1
 8007924:	d10e      	bne.n	8007944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b01      	cmp	r3, #1
 8007932:	d107      	bne.n	8007944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f06f 0201 	mvn.w	r2, #1
 800793c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7f8 fe72 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794e:	2b80      	cmp	r3, #128	; 0x80
 8007950:	d10e      	bne.n	8007970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795c:	2b80      	cmp	r3, #128	; 0x80
 800795e:	d107      	bne.n	8007970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fedc 	bl	8008728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797e:	d10e      	bne.n	800799e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798a:	2b80      	cmp	r3, #128	; 0x80
 800798c:	d107      	bne.n	800799e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fecf 	bl	800873c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a8:	2b40      	cmp	r3, #64	; 0x40
 80079aa:	d10e      	bne.n	80079ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b6:	2b40      	cmp	r3, #64	; 0x40
 80079b8:	d107      	bne.n	80079ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f9e4 	bl	8007d92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d10e      	bne.n	80079f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f003 0320 	and.w	r3, r3, #32
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	d107      	bne.n	80079f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f06f 0220 	mvn.w	r2, #32
 80079ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fe8f 	bl	8008714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_TIM_OC_ConfigChannel+0x1e>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e066      	b.n	8007aec <HAL_TIM_OC_ConfigChannel+0xec>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b14      	cmp	r3, #20
 8007a2a:	d857      	bhi.n	8007adc <HAL_TIM_OC_ConfigChannel+0xdc>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a89 	.word	0x08007a89
 8007a38:	08007add 	.word	0x08007add
 8007a3c:	08007add 	.word	0x08007add
 8007a40:	08007add 	.word	0x08007add
 8007a44:	08007a97 	.word	0x08007a97
 8007a48:	08007add 	.word	0x08007add
 8007a4c:	08007add 	.word	0x08007add
 8007a50:	08007add 	.word	0x08007add
 8007a54:	08007aa5 	.word	0x08007aa5
 8007a58:	08007add 	.word	0x08007add
 8007a5c:	08007add 	.word	0x08007add
 8007a60:	08007add 	.word	0x08007add
 8007a64:	08007ab3 	.word	0x08007ab3
 8007a68:	08007add 	.word	0x08007add
 8007a6c:	08007add 	.word	0x08007add
 8007a70:	08007add 	.word	0x08007add
 8007a74:	08007ac1 	.word	0x08007ac1
 8007a78:	08007add 	.word	0x08007add
 8007a7c:	08007add 	.word	0x08007add
 8007a80:	08007add 	.word	0x08007add
 8007a84:	08007acf 	.word	0x08007acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fabe 	bl	8008010 <TIM_OC1_SetConfig>
      break;
 8007a94:	e025      	b.n	8007ae2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fb33 	bl	8008108 <TIM_OC2_SetConfig>
      break;
 8007aa2:	e01e      	b.n	8007ae2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fba6 	bl	80081fc <TIM_OC3_SetConfig>
      break;
 8007ab0:	e017      	b.n	8007ae2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fc17 	bl	80082ec <TIM_OC4_SetConfig>
      break;
 8007abe:	e010      	b.n	8007ae2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68b9      	ldr	r1, [r7, #8]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fc6e 	bl	80083a8 <TIM_OC5_SetConfig>
      break;
 8007acc:	e009      	b.n	8007ae2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fcbf 	bl	8008458 <TIM_OC6_SetConfig>
      break;
 8007ada:	e002      	b.n	8007ae2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e0ff      	b.n	8007d12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b14      	cmp	r3, #20
 8007b1e:	f200 80f0 	bhi.w	8007d02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b22:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b7d 	.word	0x08007b7d
 8007b2c:	08007d03 	.word	0x08007d03
 8007b30:	08007d03 	.word	0x08007d03
 8007b34:	08007d03 	.word	0x08007d03
 8007b38:	08007bbd 	.word	0x08007bbd
 8007b3c:	08007d03 	.word	0x08007d03
 8007b40:	08007d03 	.word	0x08007d03
 8007b44:	08007d03 	.word	0x08007d03
 8007b48:	08007bff 	.word	0x08007bff
 8007b4c:	08007d03 	.word	0x08007d03
 8007b50:	08007d03 	.word	0x08007d03
 8007b54:	08007d03 	.word	0x08007d03
 8007b58:	08007c3f 	.word	0x08007c3f
 8007b5c:	08007d03 	.word	0x08007d03
 8007b60:	08007d03 	.word	0x08007d03
 8007b64:	08007d03 	.word	0x08007d03
 8007b68:	08007c81 	.word	0x08007c81
 8007b6c:	08007d03 	.word	0x08007d03
 8007b70:	08007d03 	.word	0x08007d03
 8007b74:	08007d03 	.word	0x08007d03
 8007b78:	08007cc1 	.word	0x08007cc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68b9      	ldr	r1, [r7, #8]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fa44 	bl	8008010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699a      	ldr	r2, [r3, #24]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f042 0208 	orr.w	r2, r2, #8
 8007b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699a      	ldr	r2, [r3, #24]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0204 	bic.w	r2, r2, #4
 8007ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6999      	ldr	r1, [r3, #24]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	619a      	str	r2, [r3, #24]
      break;
 8007bba:	e0a5      	b.n	8007d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 faa0 	bl	8008108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6999      	ldr	r1, [r3, #24]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	021a      	lsls	r2, r3, #8
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	619a      	str	r2, [r3, #24]
      break;
 8007bfc:	e084      	b.n	8007d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 faf9 	bl	80081fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	69da      	ldr	r2, [r3, #28]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f042 0208 	orr.w	r2, r2, #8
 8007c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69da      	ldr	r2, [r3, #28]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 0204 	bic.w	r2, r2, #4
 8007c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69d9      	ldr	r1, [r3, #28]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	61da      	str	r2, [r3, #28]
      break;
 8007c3c:	e064      	b.n	8007d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fb51 	bl	80082ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69da      	ldr	r2, [r3, #28]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69da      	ldr	r2, [r3, #28]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69d9      	ldr	r1, [r3, #28]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	021a      	lsls	r2, r3, #8
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	61da      	str	r2, [r3, #28]
      break;
 8007c7e:	e043      	b.n	8007d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fb8e 	bl	80083a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 0208 	orr.w	r2, r2, #8
 8007c9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0204 	bic.w	r2, r2, #4
 8007caa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007cbe:	e023      	b.n	8007d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68b9      	ldr	r1, [r7, #8]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fbc6 	bl	8008458 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	021a      	lsls	r2, r3, #8
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d00:	e002      	b.n	8007d08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	75fb      	strb	r3, [r7, #23]
      break;
 8007d06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop

08007d1c <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d101      	bne.n	8007d34 <HAL_TIM_GenerateEvent+0x18>
 8007d30:	2302      	movs	r3, #2
 8007d32:	e014      	b.n	8007d5e <HAL_TIM_GenerateEvent+0x42>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d107      	bne.n	8007dce <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dcc:	e02a      	b.n	8007e24 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d107      	bne.n	8007de8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007de6:	e01d      	b.n	8007e24 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d107      	bne.n	8007e02 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2204      	movs	r2, #4
 8007df6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e00:	e010      	b.n	8007e24 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d107      	bne.n	8007e1c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2208      	movs	r2, #8
 8007e10:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e1a:	e003      	b.n	8007e24 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7f8 fbd1 	bl	80005cc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	771a      	strb	r2, [r3, #28]
}
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d10b      	bne.n	8007e68 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d136      	bne.n	8007ecc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e66:	e031      	b.n	8007ecc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d10b      	bne.n	8007e8a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2202      	movs	r2, #2
 8007e76:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d125      	bne.n	8007ecc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e88:	e020      	b.n	8007ecc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d10b      	bne.n	8007eac <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2204      	movs	r2, #4
 8007e98:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d114      	bne.n	8007ecc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eaa:	e00f      	b.n	8007ecc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d10a      	bne.n	8007ecc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2208      	movs	r2, #8
 8007eba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d103      	bne.n	8007ecc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7f8 fb9b 	bl	8000608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	771a      	strb	r2, [r3, #28]
}
 8007ed8:	bf00      	nop
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d103      	bne.n	8007f00 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2201      	movs	r2, #1
 8007efc:	771a      	strb	r2, [r3, #28]
 8007efe:	e019      	b.n	8007f34 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d103      	bne.n	8007f12 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	771a      	strb	r2, [r3, #28]
 8007f10:	e010      	b.n	8007f34 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d103      	bne.n	8007f24 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2204      	movs	r2, #4
 8007f20:	771a      	strb	r2, [r3, #28]
 8007f22:	e007      	b.n	8007f34 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d102      	bne.n	8007f34 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2208      	movs	r2, #8
 8007f32:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f7f8 fb59 	bl	80005ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	771a      	strb	r2, [r3, #28]
}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a2a      	ldr	r2, [pc, #168]	; (8008004 <TIM_Base_SetConfig+0xbc>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d003      	beq.n	8007f68 <TIM_Base_SetConfig+0x20>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f66:	d108      	bne.n	8007f7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a21      	ldr	r2, [pc, #132]	; (8008004 <TIM_Base_SetConfig+0xbc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00b      	beq.n	8007f9a <TIM_Base_SetConfig+0x52>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f88:	d007      	beq.n	8007f9a <TIM_Base_SetConfig+0x52>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a1e      	ldr	r2, [pc, #120]	; (8008008 <TIM_Base_SetConfig+0xc0>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d003      	beq.n	8007f9a <TIM_Base_SetConfig+0x52>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a1d      	ldr	r2, [pc, #116]	; (800800c <TIM_Base_SetConfig+0xc4>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d108      	bne.n	8007fac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a0c      	ldr	r2, [pc, #48]	; (8008004 <TIM_Base_SetConfig+0xbc>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d007      	beq.n	8007fe8 <TIM_Base_SetConfig+0xa0>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a0b      	ldr	r2, [pc, #44]	; (8008008 <TIM_Base_SetConfig+0xc0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d003      	beq.n	8007fe8 <TIM_Base_SetConfig+0xa0>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a0a      	ldr	r2, [pc, #40]	; (800800c <TIM_Base_SetConfig+0xc4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d103      	bne.n	8007ff0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	691a      	ldr	r2, [r3, #16]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	615a      	str	r2, [r3, #20]
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40012c00 	.word	0x40012c00
 8008008:	40014000 	.word	0x40014000
 800800c:	40014400 	.word	0x40014400

08008010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f023 0201 	bic.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800803e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0303 	bic.w	r3, r3, #3
 800804a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f023 0302 	bic.w	r3, r3, #2
 800805c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4313      	orrs	r3, r2
 8008066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a24      	ldr	r2, [pc, #144]	; (80080fc <TIM_OC1_SetConfig+0xec>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d007      	beq.n	8008080 <TIM_OC1_SetConfig+0x70>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a23      	ldr	r2, [pc, #140]	; (8008100 <TIM_OC1_SetConfig+0xf0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_OC1_SetConfig+0x70>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a22      	ldr	r2, [pc, #136]	; (8008104 <TIM_OC1_SetConfig+0xf4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d10c      	bne.n	800809a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f023 0308 	bic.w	r3, r3, #8
 8008086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	4313      	orrs	r3, r2
 8008090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f023 0304 	bic.w	r3, r3, #4
 8008098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a17      	ldr	r2, [pc, #92]	; (80080fc <TIM_OC1_SetConfig+0xec>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d007      	beq.n	80080b2 <TIM_OC1_SetConfig+0xa2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a16      	ldr	r2, [pc, #88]	; (8008100 <TIM_OC1_SetConfig+0xf0>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d003      	beq.n	80080b2 <TIM_OC1_SetConfig+0xa2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a15      	ldr	r2, [pc, #84]	; (8008104 <TIM_OC1_SetConfig+0xf4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d111      	bne.n	80080d6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	621a      	str	r2, [r3, #32]
}
 80080f0:	bf00      	nop
 80080f2:	371c      	adds	r7, #28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400

08008108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f023 0210 	bic.w	r2, r3, #16
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	021b      	lsls	r3, r3, #8
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f023 0320 	bic.w	r3, r3, #32
 8008156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	011b      	lsls	r3, r3, #4
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4313      	orrs	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a22      	ldr	r2, [pc, #136]	; (80081f0 <TIM_OC2_SetConfig+0xe8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d10d      	bne.n	8008188 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	011b      	lsls	r3, r3, #4
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	4313      	orrs	r3, r2
 800817e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008186:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a19      	ldr	r2, [pc, #100]	; (80081f0 <TIM_OC2_SetConfig+0xe8>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d007      	beq.n	80081a0 <TIM_OC2_SetConfig+0x98>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a18      	ldr	r2, [pc, #96]	; (80081f4 <TIM_OC2_SetConfig+0xec>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_OC2_SetConfig+0x98>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <TIM_OC2_SetConfig+0xf0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d113      	bne.n	80081c8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	621a      	str	r2, [r3, #32]
}
 80081e2:	bf00      	nop
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	40012c00 	.word	0x40012c00
 80081f4:	40014000 	.word	0x40014000
 80081f8:	40014400 	.word	0x40014400

080081fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800822a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0303 	bic.w	r3, r3, #3
 8008236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a21      	ldr	r2, [pc, #132]	; (80082e0 <TIM_OC3_SetConfig+0xe4>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d10d      	bne.n	800827a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	021b      	lsls	r3, r3, #8
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	4313      	orrs	r3, r2
 8008270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a18      	ldr	r2, [pc, #96]	; (80082e0 <TIM_OC3_SetConfig+0xe4>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d007      	beq.n	8008292 <TIM_OC3_SetConfig+0x96>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a17      	ldr	r2, [pc, #92]	; (80082e4 <TIM_OC3_SetConfig+0xe8>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_OC3_SetConfig+0x96>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a16      	ldr	r2, [pc, #88]	; (80082e8 <TIM_OC3_SetConfig+0xec>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d113      	bne.n	80082ba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	621a      	str	r2, [r3, #32]
}
 80082d4:	bf00      	nop
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	40012c00 	.word	0x40012c00
 80082e4:	40014000 	.word	0x40014000
 80082e8:	40014400 	.word	0x40014400

080082ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800831a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800833a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	031b      	lsls	r3, r3, #12
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a14      	ldr	r2, [pc, #80]	; (800839c <TIM_OC4_SetConfig+0xb0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d007      	beq.n	8008360 <TIM_OC4_SetConfig+0x74>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a13      	ldr	r2, [pc, #76]	; (80083a0 <TIM_OC4_SetConfig+0xb4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d003      	beq.n	8008360 <TIM_OC4_SetConfig+0x74>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a12      	ldr	r2, [pc, #72]	; (80083a4 <TIM_OC4_SetConfig+0xb8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d109      	bne.n	8008374 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	019b      	lsls	r3, r3, #6
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	621a      	str	r2, [r3, #32]
}
 800838e:	bf00      	nop
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40012c00 	.word	0x40012c00
 80083a0:	40014000 	.word	0x40014000
 80083a4:	40014400 	.word	0x40014400

080083a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	041b      	lsls	r3, r3, #16
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a13      	ldr	r2, [pc, #76]	; (800844c <TIM_OC5_SetConfig+0xa4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d007      	beq.n	8008412 <TIM_OC5_SetConfig+0x6a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a12      	ldr	r2, [pc, #72]	; (8008450 <TIM_OC5_SetConfig+0xa8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d003      	beq.n	8008412 <TIM_OC5_SetConfig+0x6a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a11      	ldr	r2, [pc, #68]	; (8008454 <TIM_OC5_SetConfig+0xac>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d109      	bne.n	8008426 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008418:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	621a      	str	r2, [r3, #32]
}
 8008440:	bf00      	nop
 8008442:	371c      	adds	r7, #28
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	40012c00 	.word	0x40012c00
 8008450:	40014000 	.word	0x40014000
 8008454:	40014400 	.word	0x40014400

08008458 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800848a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	021b      	lsls	r3, r3, #8
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800849e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	051b      	lsls	r3, r3, #20
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a14      	ldr	r2, [pc, #80]	; (8008500 <TIM_OC6_SetConfig+0xa8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d007      	beq.n	80084c4 <TIM_OC6_SetConfig+0x6c>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a13      	ldr	r2, [pc, #76]	; (8008504 <TIM_OC6_SetConfig+0xac>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d003      	beq.n	80084c4 <TIM_OC6_SetConfig+0x6c>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a12      	ldr	r2, [pc, #72]	; (8008508 <TIM_OC6_SetConfig+0xb0>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d109      	bne.n	80084d8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	029b      	lsls	r3, r3, #10
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	685a      	ldr	r2, [r3, #4]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	621a      	str	r2, [r3, #32]
}
 80084f2:	bf00      	nop
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40012c00 	.word	0x40012c00
 8008504:	40014000 	.word	0x40014000
 8008508:	40014400 	.word	0x40014400

0800850c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f003 031f 	and.w	r3, r3, #31
 800851e:	2201      	movs	r2, #1
 8008520:	fa02 f303 	lsl.w	r3, r2, r3
 8008524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1a      	ldr	r2, [r3, #32]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	43db      	mvns	r3, r3
 800852e:	401a      	ands	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a1a      	ldr	r2, [r3, #32]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f003 031f 	and.w	r3, r3, #31
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	fa01 f303 	lsl.w	r3, r1, r3
 8008544:	431a      	orrs	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	621a      	str	r2, [r3, #32]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
	...

08008558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008568:	2b01      	cmp	r3, #1
 800856a:	d101      	bne.n	8008570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800856c:	2302      	movs	r3, #2
 800856e:	e04f      	b.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a21      	ldr	r2, [pc, #132]	; (800861c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d108      	bne.n	80085ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a14      	ldr	r2, [pc, #80]	; (800861c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d009      	beq.n	80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d8:	d004      	beq.n	80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a10      	ldr	r2, [pc, #64]	; (8008620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d10c      	bne.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	40012c00 	.word	0x40012c00
 8008620:	40014000 	.word	0x40014000

08008624 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008638:	2b01      	cmp	r3, #1
 800863a:	d101      	bne.n	8008640 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800863c:	2302      	movs	r3, #2
 800863e:	e060      	b.n	8008702 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	4313      	orrs	r3, r2
 8008654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4313      	orrs	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	041b      	lsls	r3, r3, #16
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a14      	ldr	r2, [pc, #80]	; (8008710 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d115      	bne.n	80086f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	051b      	lsls	r3, r3, #20
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	40012c00 	.word	0x40012c00

08008714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e040      	b.n	80087e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008766:	2b00      	cmp	r3, #0
 8008768:	d106      	bne.n	8008778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7f8 faae 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2224      	movs	r2, #36	; 0x24
 800877c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 0201 	bic.w	r2, r2, #1
 800878c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fb9e 	bl	8008ed0 <UART_SetConfig>
 8008794:	4603      	mov	r3, r0
 8008796:	2b01      	cmp	r3, #1
 8008798:	d101      	bne.n	800879e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e022      	b.n	80087e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fdec 	bl	8009384 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f042 0201 	orr.w	r2, r2, #1
 80087da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fe73 	bl	80094c8 <UART_CheckIdleState>
 80087e2:	4603      	mov	r3, r0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4613      	mov	r3, r2
 80087f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d178      	bne.n	80088f4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <HAL_UART_Transmit_DMA+0x22>
 8008808:	88fb      	ldrh	r3, [r7, #6]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e071      	b.n	80088f6 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <HAL_UART_Transmit_DMA+0x34>
 800881c:	2302      	movs	r3, #2
 800881e:	e06a      	b.n	80088f6 <HAL_UART_Transmit_DMA+0x10a>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	88fa      	ldrh	r2, [r7, #6]
 8008832:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	88fa      	ldrh	r2, [r7, #6]
 800883a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2221      	movs	r2, #33	; 0x21
 800884a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d02b      	beq.n	80088ac <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008858:	4a29      	ldr	r2, [pc, #164]	; (8008900 <HAL_UART_Transmit_DMA+0x114>)
 800885a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008860:	4a28      	ldr	r2, [pc, #160]	; (8008904 <HAL_UART_Transmit_DMA+0x118>)
 8008862:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008868:	4a27      	ldr	r2, [pc, #156]	; (8008908 <HAL_UART_Transmit_DMA+0x11c>)
 800886a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008870:	2200      	movs	r2, #0
 8008872:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887c:	4619      	mov	r1, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3328      	adds	r3, #40	; 0x28
 8008884:	461a      	mov	r2, r3
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	f7fc fc84 	bl	8005194 <HAL_DMA_Start_IT>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00c      	beq.n	80088ac <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2210      	movs	r2, #16
 8008896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2220      	movs	r2, #32
 80088a6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e024      	b.n	80088f6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2240      	movs	r2, #64	; 0x40
 80088b2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3308      	adds	r3, #8
 80088c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	613b      	str	r3, [r7, #16]
   return(result);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3308      	adds	r3, #8
 80088da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088dc:	623a      	str	r2, [r7, #32]
 80088de:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	69f9      	ldr	r1, [r7, #28]
 80088e2:	6a3a      	ldr	r2, [r7, #32]
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e5      	bne.n	80088bc <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	e000      	b.n	80088f6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80088f4:	2302      	movs	r3, #2
  }
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3728      	adds	r7, #40	; 0x28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	08009943 	.word	0x08009943
 8008904:	080099dd 	.word	0x080099dd
 8008908:	08009b55 	.word	0x08009b55

0800890c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b0ba      	sub	sp, #232	; 0xe8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008932:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008936:	f640 030f 	movw	r3, #2063	; 0x80f
 800893a:	4013      	ands	r3, r2
 800893c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008944:	2b00      	cmp	r3, #0
 8008946:	d115      	bne.n	8008974 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894c:	f003 0320 	and.w	r3, r3, #32
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00f      	beq.n	8008974 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008958:	f003 0320 	and.w	r3, r3, #32
 800895c:	2b00      	cmp	r3, #0
 800895e:	d009      	beq.n	8008974 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 82a6 	beq.w	8008eb6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
      }
      return;
 8008972:	e2a0      	b.n	8008eb6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 8117 	beq.w	8008bac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800897e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800898a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800898e:	4b85      	ldr	r3, [pc, #532]	; (8008ba4 <HAL_UART_IRQHandler+0x298>)
 8008990:	4013      	ands	r3, r2
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 810a 	beq.w	8008bac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d011      	beq.n	80089c8 <HAL_UART_IRQHandler+0xbc>
 80089a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2201      	movs	r2, #1
 80089b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089be:	f043 0201 	orr.w	r2, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d011      	beq.n	80089f8 <HAL_UART_IRQHandler+0xec>
 80089d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2202      	movs	r2, #2
 80089e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089ee:	f043 0204 	orr.w	r2, r3, #4
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d011      	beq.n	8008a28 <HAL_UART_IRQHandler+0x11c>
 8008a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2204      	movs	r2, #4
 8008a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a1e:	f043 0202 	orr.w	r2, r3, #2
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a2c:	f003 0308 	and.w	r3, r3, #8
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d017      	beq.n	8008a64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a38:	f003 0320 	and.w	r3, r3, #32
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00b      	beq.n	8008a64 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2208      	movs	r2, #8
 8008a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a5a:	f043 0208 	orr.w	r2, r3, #8
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d012      	beq.n	8008a96 <HAL_UART_IRQHandler+0x18a>
 8008a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00c      	beq.n	8008a96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a8c:	f043 0220 	orr.w	r2, r3, #32
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 820c 	beq.w	8008eba <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00d      	beq.n	8008aca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d007      	beq.n	8008aca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ade:	2b40      	cmp	r3, #64	; 0x40
 8008ae0:	d005      	beq.n	8008aee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ae6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d04f      	beq.n	8008b8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fec4 	bl	800987c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afe:	2b40      	cmp	r3, #64	; 0x40
 8008b00:	d141      	bne.n	8008b86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3308      	adds	r3, #8
 8008b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1d9      	bne.n	8008b02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d013      	beq.n	8008b7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5a:	4a13      	ldr	r2, [pc, #76]	; (8008ba8 <HAL_UART_IRQHandler+0x29c>)
 8008b5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fc fbb4 	bl	80052d0 <HAL_DMA_Abort_IT>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d017      	beq.n	8008b9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008b78:	4610      	mov	r0, r2
 8008b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b7c:	e00f      	b.n	8008b9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7f9 fc36 	bl	80023f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b84:	e00b      	b.n	8008b9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7f9 fc32 	bl	80023f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b8c:	e007      	b.n	8008b9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7f9 fc2e 	bl	80023f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008b9c:	e18d      	b.n	8008eba <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b9e:	bf00      	nop
    return;
 8008ba0:	e18b      	b.n	8008eba <HAL_UART_IRQHandler+0x5ae>
 8008ba2:	bf00      	nop
 8008ba4:	04000120 	.word	0x04000120
 8008ba8:	08009bd1 	.word	0x08009bd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	f040 8146 	bne.w	8008e42 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bba:	f003 0310 	and.w	r3, r3, #16
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f000 813f 	beq.w	8008e42 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bc8:	f003 0310 	and.w	r3, r3, #16
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 8138 	beq.w	8008e42 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2210      	movs	r2, #16
 8008bd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be4:	2b40      	cmp	r3, #64	; 0x40
 8008be6:	f040 80b4 	bne.w	8008d52 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008bf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 815f 	beq.w	8008ebe <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	f080 8157 	bcs.w	8008ebe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0320 	and.w	r3, r3, #32
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f040 8085 	bne.w	8008d36 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1da      	bne.n	8008c2c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c88:	f023 0301 	bic.w	r3, r3, #1
 8008c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3308      	adds	r3, #8
 8008c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ca2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1e1      	bne.n	8008c76 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008cd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e3      	bne.n	8008cb2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2220      	movs	r2, #32
 8008cee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cfe:	e853 3f00 	ldrex	r3, [r3]
 8008d02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d06:	f023 0310 	bic.w	r3, r3, #16
 8008d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d18:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e4      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fc fa8f 	bl	8005254 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7f9 fab4 	bl	80022b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d50:	e0b5      	b.n	8008ebe <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 80a7 	beq.w	8008ec2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 80a2 	beq.w	8008ec2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008da0:	647b      	str	r3, [r7, #68]	; 0x44
 8008da2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e4      	bne.n	8008d7e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3308      	adds	r3, #8
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	e853 3f00 	ldrex	r3, [r3]
 8008dc2:	623b      	str	r3, [r7, #32]
   return(result);
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	f023 0301 	bic.w	r3, r3, #1
 8008dca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008dd8:	633a      	str	r2, [r7, #48]	; 0x30
 8008dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008de0:	e841 2300 	strex	r3, r2, [r1]
 8008de4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1e3      	bne.n	8008db4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2220      	movs	r2, #32
 8008df0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	e853 3f00 	ldrex	r3, [r3]
 8008e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f023 0310 	bic.w	r3, r3, #16
 8008e12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e20:	61fb      	str	r3, [r7, #28]
 8008e22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	69b9      	ldr	r1, [r7, #24]
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e4      	bne.n	8008dfe <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7f9 fa3c 	bl	80022b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e40:	e03f      	b.n	8008ec2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00e      	beq.n	8008e6c <HAL_UART_IRQHandler+0x560>
 8008e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d008      	beq.n	8008e6c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fef3 	bl	8009c50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e6a:	e02d      	b.n	8008ec8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00e      	beq.n	8008e96 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d008      	beq.n	8008e96 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01c      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	4798      	blx	r3
    }
    return;
 8008e94:	e017      	b.n	8008ec6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d012      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x5bc>
 8008ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00c      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fea4 	bl	8009bfc <UART_EndTransmit_IT>
    return;
 8008eb4:	e008      	b.n	8008ec8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008eb6:	bf00      	nop
 8008eb8:	e006      	b.n	8008ec8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008eba:	bf00      	nop
 8008ebc:	e004      	b.n	8008ec8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008ebe:	bf00      	nop
 8008ec0:	e002      	b.n	8008ec8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008ec2:	bf00      	nop
 8008ec4:	e000      	b.n	8008ec8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008ec6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008ec8:	37e8      	adds	r7, #232	; 0xe8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop

08008ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ed4:	b08a      	sub	sp, #40	; 0x28
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	4b9e      	ldr	r3, [pc, #632]	; (8009178 <UART_SetConfig+0x2a8>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	6812      	ldr	r2, [r2, #0]
 8008f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f08:	430b      	orrs	r3, r1
 8008f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a93      	ldr	r2, [pc, #588]	; (800917c <UART_SetConfig+0x2ac>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d004      	beq.n	8008f3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a8a      	ldr	r2, [pc, #552]	; (8009180 <UART_SetConfig+0x2b0>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d126      	bne.n	8008fa8 <UART_SetConfig+0xd8>
 8008f5a:	4b8a      	ldr	r3, [pc, #552]	; (8009184 <UART_SetConfig+0x2b4>)
 8008f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f60:	f003 0303 	and.w	r3, r3, #3
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	d81b      	bhi.n	8008fa0 <UART_SetConfig+0xd0>
 8008f68:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <UART_SetConfig+0xa0>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008f81 	.word	0x08008f81
 8008f74:	08008f91 	.word	0x08008f91
 8008f78:	08008f89 	.word	0x08008f89
 8008f7c:	08008f99 	.word	0x08008f99
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f86:	e0ab      	b.n	80090e0 <UART_SetConfig+0x210>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f8e:	e0a7      	b.n	80090e0 <UART_SetConfig+0x210>
 8008f90:	2304      	movs	r3, #4
 8008f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f96:	e0a3      	b.n	80090e0 <UART_SetConfig+0x210>
 8008f98:	2308      	movs	r3, #8
 8008f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008f9e:	e09f      	b.n	80090e0 <UART_SetConfig+0x210>
 8008fa0:	2310      	movs	r3, #16
 8008fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fa6:	e09b      	b.n	80090e0 <UART_SetConfig+0x210>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a76      	ldr	r2, [pc, #472]	; (8009188 <UART_SetConfig+0x2b8>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d138      	bne.n	8009024 <UART_SetConfig+0x154>
 8008fb2:	4b74      	ldr	r3, [pc, #464]	; (8009184 <UART_SetConfig+0x2b4>)
 8008fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fb8:	f003 030c 	and.w	r3, r3, #12
 8008fbc:	2b0c      	cmp	r3, #12
 8008fbe:	d82d      	bhi.n	800901c <UART_SetConfig+0x14c>
 8008fc0:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <UART_SetConfig+0xf8>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	08008ffd 	.word	0x08008ffd
 8008fcc:	0800901d 	.word	0x0800901d
 8008fd0:	0800901d 	.word	0x0800901d
 8008fd4:	0800901d 	.word	0x0800901d
 8008fd8:	0800900d 	.word	0x0800900d
 8008fdc:	0800901d 	.word	0x0800901d
 8008fe0:	0800901d 	.word	0x0800901d
 8008fe4:	0800901d 	.word	0x0800901d
 8008fe8:	08009005 	.word	0x08009005
 8008fec:	0800901d 	.word	0x0800901d
 8008ff0:	0800901d 	.word	0x0800901d
 8008ff4:	0800901d 	.word	0x0800901d
 8008ff8:	08009015 	.word	0x08009015
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009002:	e06d      	b.n	80090e0 <UART_SetConfig+0x210>
 8009004:	2302      	movs	r3, #2
 8009006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800900a:	e069      	b.n	80090e0 <UART_SetConfig+0x210>
 800900c:	2304      	movs	r3, #4
 800900e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009012:	e065      	b.n	80090e0 <UART_SetConfig+0x210>
 8009014:	2308      	movs	r3, #8
 8009016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800901a:	e061      	b.n	80090e0 <UART_SetConfig+0x210>
 800901c:	2310      	movs	r3, #16
 800901e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009022:	e05d      	b.n	80090e0 <UART_SetConfig+0x210>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a58      	ldr	r2, [pc, #352]	; (800918c <UART_SetConfig+0x2bc>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d125      	bne.n	800907a <UART_SetConfig+0x1aa>
 800902e:	4b55      	ldr	r3, [pc, #340]	; (8009184 <UART_SetConfig+0x2b4>)
 8009030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009034:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009038:	2b30      	cmp	r3, #48	; 0x30
 800903a:	d016      	beq.n	800906a <UART_SetConfig+0x19a>
 800903c:	2b30      	cmp	r3, #48	; 0x30
 800903e:	d818      	bhi.n	8009072 <UART_SetConfig+0x1a2>
 8009040:	2b20      	cmp	r3, #32
 8009042:	d00a      	beq.n	800905a <UART_SetConfig+0x18a>
 8009044:	2b20      	cmp	r3, #32
 8009046:	d814      	bhi.n	8009072 <UART_SetConfig+0x1a2>
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <UART_SetConfig+0x182>
 800904c:	2b10      	cmp	r3, #16
 800904e:	d008      	beq.n	8009062 <UART_SetConfig+0x192>
 8009050:	e00f      	b.n	8009072 <UART_SetConfig+0x1a2>
 8009052:	2300      	movs	r3, #0
 8009054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009058:	e042      	b.n	80090e0 <UART_SetConfig+0x210>
 800905a:	2302      	movs	r3, #2
 800905c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009060:	e03e      	b.n	80090e0 <UART_SetConfig+0x210>
 8009062:	2304      	movs	r3, #4
 8009064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009068:	e03a      	b.n	80090e0 <UART_SetConfig+0x210>
 800906a:	2308      	movs	r3, #8
 800906c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009070:	e036      	b.n	80090e0 <UART_SetConfig+0x210>
 8009072:	2310      	movs	r3, #16
 8009074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009078:	e032      	b.n	80090e0 <UART_SetConfig+0x210>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a3f      	ldr	r2, [pc, #252]	; (800917c <UART_SetConfig+0x2ac>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d12a      	bne.n	80090da <UART_SetConfig+0x20a>
 8009084:	4b3f      	ldr	r3, [pc, #252]	; (8009184 <UART_SetConfig+0x2b4>)
 8009086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800908a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800908e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009092:	d01a      	beq.n	80090ca <UART_SetConfig+0x1fa>
 8009094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009098:	d81b      	bhi.n	80090d2 <UART_SetConfig+0x202>
 800909a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800909e:	d00c      	beq.n	80090ba <UART_SetConfig+0x1ea>
 80090a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090a4:	d815      	bhi.n	80090d2 <UART_SetConfig+0x202>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <UART_SetConfig+0x1e2>
 80090aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ae:	d008      	beq.n	80090c2 <UART_SetConfig+0x1f2>
 80090b0:	e00f      	b.n	80090d2 <UART_SetConfig+0x202>
 80090b2:	2300      	movs	r3, #0
 80090b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090b8:	e012      	b.n	80090e0 <UART_SetConfig+0x210>
 80090ba:	2302      	movs	r3, #2
 80090bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090c0:	e00e      	b.n	80090e0 <UART_SetConfig+0x210>
 80090c2:	2304      	movs	r3, #4
 80090c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090c8:	e00a      	b.n	80090e0 <UART_SetConfig+0x210>
 80090ca:	2308      	movs	r3, #8
 80090cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090d0:	e006      	b.n	80090e0 <UART_SetConfig+0x210>
 80090d2:	2310      	movs	r3, #16
 80090d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090d8:	e002      	b.n	80090e0 <UART_SetConfig+0x210>
 80090da:	2310      	movs	r3, #16
 80090dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a25      	ldr	r2, [pc, #148]	; (800917c <UART_SetConfig+0x2ac>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	f040 808a 	bne.w	8009200 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	d824      	bhi.n	800913e <UART_SetConfig+0x26e>
 80090f4:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <UART_SetConfig+0x22c>)
 80090f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	08009121 	.word	0x08009121
 8009100:	0800913f 	.word	0x0800913f
 8009104:	08009129 	.word	0x08009129
 8009108:	0800913f 	.word	0x0800913f
 800910c:	0800912f 	.word	0x0800912f
 8009110:	0800913f 	.word	0x0800913f
 8009114:	0800913f 	.word	0x0800913f
 8009118:	0800913f 	.word	0x0800913f
 800911c:	08009137 	.word	0x08009137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009120:	f7fd fae0 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 8009124:	61f8      	str	r0, [r7, #28]
        break;
 8009126:	e010      	b.n	800914a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009128:	4b19      	ldr	r3, [pc, #100]	; (8009190 <UART_SetConfig+0x2c0>)
 800912a:	61fb      	str	r3, [r7, #28]
        break;
 800912c:	e00d      	b.n	800914a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800912e:	f7fd fa41 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8009132:	61f8      	str	r0, [r7, #28]
        break;
 8009134:	e009      	b.n	800914a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800913a:	61fb      	str	r3, [r7, #28]
        break;
 800913c:	e005      	b.n	800914a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009148:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 8109 	beq.w	8009364 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	4613      	mov	r3, r2
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	4413      	add	r3, r2
 800915c:	69fa      	ldr	r2, [r7, #28]
 800915e:	429a      	cmp	r2, r3
 8009160:	d305      	bcc.n	800916e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009168:	69fa      	ldr	r2, [r7, #28]
 800916a:	429a      	cmp	r2, r3
 800916c:	d912      	bls.n	8009194 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009174:	e0f6      	b.n	8009364 <UART_SetConfig+0x494>
 8009176:	bf00      	nop
 8009178:	efff69f3 	.word	0xefff69f3
 800917c:	40008000 	.word	0x40008000
 8009180:	40013800 	.word	0x40013800
 8009184:	40021000 	.word	0x40021000
 8009188:	40004400 	.word	0x40004400
 800918c:	40004800 	.word	0x40004800
 8009190:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	2200      	movs	r2, #0
 8009198:	461c      	mov	r4, r3
 800919a:	4615      	mov	r5, r2
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	022b      	lsls	r3, r5, #8
 80091a6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80091aa:	0222      	lsls	r2, r4, #8
 80091ac:	68f9      	ldr	r1, [r7, #12]
 80091ae:	6849      	ldr	r1, [r1, #4]
 80091b0:	0849      	lsrs	r1, r1, #1
 80091b2:	2000      	movs	r0, #0
 80091b4:	4688      	mov	r8, r1
 80091b6:	4681      	mov	r9, r0
 80091b8:	eb12 0a08 	adds.w	sl, r2, r8
 80091bc:	eb43 0b09 	adc.w	fp, r3, r9
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ce:	4650      	mov	r0, sl
 80091d0:	4659      	mov	r1, fp
 80091d2:	f7f7 f84d 	bl	8000270 <__aeabi_uldivmod>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4613      	mov	r3, r2
 80091dc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091e4:	d308      	bcc.n	80091f8 <UART_SetConfig+0x328>
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091ec:	d204      	bcs.n	80091f8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	60da      	str	r2, [r3, #12]
 80091f6:	e0b5      	b.n	8009364 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80091fe:	e0b1      	b.n	8009364 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	69db      	ldr	r3, [r3, #28]
 8009204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009208:	d15d      	bne.n	80092c6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800920a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800920e:	2b08      	cmp	r3, #8
 8009210:	d827      	bhi.n	8009262 <UART_SetConfig+0x392>
 8009212:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <UART_SetConfig+0x348>)
 8009214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009218:	0800923d 	.word	0x0800923d
 800921c:	08009245 	.word	0x08009245
 8009220:	0800924d 	.word	0x0800924d
 8009224:	08009263 	.word	0x08009263
 8009228:	08009253 	.word	0x08009253
 800922c:	08009263 	.word	0x08009263
 8009230:	08009263 	.word	0x08009263
 8009234:	08009263 	.word	0x08009263
 8009238:	0800925b 	.word	0x0800925b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800923c:	f7fd fa52 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 8009240:	61f8      	str	r0, [r7, #28]
        break;
 8009242:	e014      	b.n	800926e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009244:	f7fd fa64 	bl	8006710 <HAL_RCC_GetPCLK2Freq>
 8009248:	61f8      	str	r0, [r7, #28]
        break;
 800924a:	e010      	b.n	800926e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800924c:	4b4c      	ldr	r3, [pc, #304]	; (8009380 <UART_SetConfig+0x4b0>)
 800924e:	61fb      	str	r3, [r7, #28]
        break;
 8009250:	e00d      	b.n	800926e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009252:	f7fd f9af 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8009256:	61f8      	str	r0, [r7, #28]
        break;
 8009258:	e009      	b.n	800926e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800925a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800925e:	61fb      	str	r3, [r7, #28]
        break;
 8009260:	e005      	b.n	800926e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800926c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d077      	beq.n	8009364 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	005a      	lsls	r2, r3, #1
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	085b      	lsrs	r3, r3, #1
 800927e:	441a      	add	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	fbb2 f3f3 	udiv	r3, r2, r3
 8009288:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	2b0f      	cmp	r3, #15
 800928e:	d916      	bls.n	80092be <UART_SetConfig+0x3ee>
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009296:	d212      	bcs.n	80092be <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	b29b      	uxth	r3, r3
 800929c:	f023 030f 	bic.w	r3, r3, #15
 80092a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	085b      	lsrs	r3, r3, #1
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	8afb      	ldrh	r3, [r7, #22]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	8afa      	ldrh	r2, [r7, #22]
 80092ba:	60da      	str	r2, [r3, #12]
 80092bc:	e052      	b.n	8009364 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80092c4:	e04e      	b.n	8009364 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092ca:	2b08      	cmp	r3, #8
 80092cc:	d827      	bhi.n	800931e <UART_SetConfig+0x44e>
 80092ce:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <UART_SetConfig+0x404>)
 80092d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d4:	080092f9 	.word	0x080092f9
 80092d8:	08009301 	.word	0x08009301
 80092dc:	08009309 	.word	0x08009309
 80092e0:	0800931f 	.word	0x0800931f
 80092e4:	0800930f 	.word	0x0800930f
 80092e8:	0800931f 	.word	0x0800931f
 80092ec:	0800931f 	.word	0x0800931f
 80092f0:	0800931f 	.word	0x0800931f
 80092f4:	08009317 	.word	0x08009317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092f8:	f7fd f9f4 	bl	80066e4 <HAL_RCC_GetPCLK1Freq>
 80092fc:	61f8      	str	r0, [r7, #28]
        break;
 80092fe:	e014      	b.n	800932a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009300:	f7fd fa06 	bl	8006710 <HAL_RCC_GetPCLK2Freq>
 8009304:	61f8      	str	r0, [r7, #28]
        break;
 8009306:	e010      	b.n	800932a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009308:	4b1d      	ldr	r3, [pc, #116]	; (8009380 <UART_SetConfig+0x4b0>)
 800930a:	61fb      	str	r3, [r7, #28]
        break;
 800930c:	e00d      	b.n	800932a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800930e:	f7fd f951 	bl	80065b4 <HAL_RCC_GetSysClockFreq>
 8009312:	61f8      	str	r0, [r7, #28]
        break;
 8009314:	e009      	b.n	800932a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800931a:	61fb      	str	r3, [r7, #28]
        break;
 800931c:	e005      	b.n	800932a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009328:	bf00      	nop
    }

    if (pclk != 0U)
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d019      	beq.n	8009364 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	085a      	lsrs	r2, r3, #1
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	441a      	add	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009342:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	2b0f      	cmp	r3, #15
 8009348:	d909      	bls.n	800935e <UART_SetConfig+0x48e>
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009350:	d205      	bcs.n	800935e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	b29a      	uxth	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	60da      	str	r2, [r3, #12]
 800935c:	e002      	b.n	8009364 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009370:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009374:	4618      	mov	r0, r3
 8009376:	3728      	adds	r7, #40	; 0x28
 8009378:	46bd      	mov	sp, r7
 800937a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800937e:	bf00      	nop
 8009380:	00f42400 	.word	0x00f42400

08009384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00a      	beq.n	80093ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00a      	beq.n	80093f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	f003 0308 	and.w	r3, r3, #8
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00a      	beq.n	8009414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	430a      	orrs	r2, r1
 8009412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009418:	f003 0310 	and.w	r3, r3, #16
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00a      	beq.n	8009436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	430a      	orrs	r2, r1
 8009434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00a      	beq.n	8009458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009460:	2b00      	cmp	r3, #0
 8009462:	d01a      	beq.n	800949a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009482:	d10a      	bne.n	800949a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	605a      	str	r2, [r3, #4]
  }
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af02      	add	r7, sp, #8
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094d8:	f7f9 f994 	bl	8002804 <HAL_GetTick>
 80094dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d10e      	bne.n	800950a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f82d 	bl	800955a <UART_WaitOnFlagUntilTimeout>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e023      	b.n	8009552 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b04      	cmp	r3, #4
 8009516:	d10e      	bne.n	8009536 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f817 	bl	800955a <UART_WaitOnFlagUntilTimeout>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e00d      	b.n	8009552 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2220      	movs	r2, #32
 8009540:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b09c      	sub	sp, #112	; 0x70
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	603b      	str	r3, [r7, #0]
 8009566:	4613      	mov	r3, r2
 8009568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800956a:	e0a5      	b.n	80096b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800956c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009572:	f000 80a1 	beq.w	80096b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009576:	f7f9 f945 	bl	8002804 <HAL_GetTick>
 800957a:	4602      	mov	r2, r0
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009582:	429a      	cmp	r2, r3
 8009584:	d302      	bcc.n	800958c <UART_WaitOnFlagUntilTimeout+0x32>
 8009586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009588:	2b00      	cmp	r3, #0
 800958a:	d13e      	bne.n	800960a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009594:	e853 3f00 	ldrex	r3, [r3]
 8009598:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800959a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095a0:	667b      	str	r3, [r7, #100]	; 0x64
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1e6      	bne.n	800958c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3308      	adds	r3, #8
 80095c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d0:	f023 0301 	bic.w	r3, r3, #1
 80095d4:	663b      	str	r3, [r7, #96]	; 0x60
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3308      	adds	r3, #8
 80095dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095de:	64ba      	str	r2, [r7, #72]	; 0x48
 80095e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80095ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e5      	bne.n	80095be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2220      	movs	r2, #32
 80095f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2220      	movs	r2, #32
 80095fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e067      	b.n	80096da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0304 	and.w	r3, r3, #4
 8009614:	2b00      	cmp	r3, #0
 8009616:	d04f      	beq.n	80096b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009626:	d147      	bne.n	80096b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009630:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	461a      	mov	r2, r3
 800964e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009650:	637b      	str	r3, [r7, #52]	; 0x34
 8009652:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e6      	bne.n	8009632 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3308      	adds	r3, #8
 800966a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	613b      	str	r3, [r7, #16]
   return(result);
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f023 0301 	bic.w	r3, r3, #1
 800967a:	66bb      	str	r3, [r7, #104]	; 0x68
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3308      	adds	r3, #8
 8009682:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009684:	623a      	str	r2, [r7, #32]
 8009686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	69f9      	ldr	r1, [r7, #28]
 800968a:	6a3a      	ldr	r2, [r7, #32]
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	61bb      	str	r3, [r7, #24]
   return(result);
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e5      	bne.n	8009664 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2220      	movs	r2, #32
 800969c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2220      	movs	r2, #32
 80096a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e010      	b.n	80096da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	69da      	ldr	r2, [r3, #28]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	4013      	ands	r3, r2
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	bf0c      	ite	eq
 80096c8:	2301      	moveq	r3, #1
 80096ca:	2300      	movne	r3, #0
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	461a      	mov	r2, r3
 80096d0:	79fb      	ldrb	r3, [r7, #7]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	f43f af4a 	beq.w	800956c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3770      	adds	r7, #112	; 0x70
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
	...

080096e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b096      	sub	sp, #88	; 0x58
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	4613      	mov	r3, r2
 80096f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	88fa      	ldrh	r2, [r7, #6]
 80096fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2222      	movs	r2, #34	; 0x22
 800970c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009712:	2b00      	cmp	r3, #0
 8009714:	d02b      	beq.n	800976e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971a:	4a42      	ldr	r2, [pc, #264]	; (8009824 <UART_Start_Receive_DMA+0x140>)
 800971c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009722:	4a41      	ldr	r2, [pc, #260]	; (8009828 <UART_Start_Receive_DMA+0x144>)
 8009724:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972a:	4a40      	ldr	r2, [pc, #256]	; (800982c <UART_Start_Receive_DMA+0x148>)
 800972c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009732:	2200      	movs	r2, #0
 8009734:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3324      	adds	r3, #36	; 0x24
 8009740:	4619      	mov	r1, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009746:	461a      	mov	r2, r3
 8009748:	88fb      	ldrh	r3, [r7, #6]
 800974a:	f7fb fd23 	bl	8005194 <HAL_DMA_Start_IT>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00c      	beq.n	800976e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2210      	movs	r2, #16
 8009758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2220      	movs	r2, #32
 8009768:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e055      	b.n	800981a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d018      	beq.n	80097b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009792:	657b      	str	r3, [r7, #84]	; 0x54
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	461a      	mov	r2, r3
 800979a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800979c:	64bb      	str	r3, [r7, #72]	; 0x48
 800979e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e6      	bne.n	800977e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	f043 0301 	orr.w	r3, r3, #1
 80097c6:	653b      	str	r3, [r7, #80]	; 0x50
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3308      	adds	r3, #8
 80097ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097d0:	637a      	str	r2, [r7, #52]	; 0x34
 80097d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e5      	bne.n	80097b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3308      	adds	r3, #8
 80097ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	e853 3f00 	ldrex	r3, [r3]
 80097f2:	613b      	str	r3, [r7, #16]
   return(result);
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3308      	adds	r3, #8
 8009802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009804:	623a      	str	r2, [r7, #32]
 8009806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009808:	69f9      	ldr	r1, [r7, #28]
 800980a:	6a3a      	ldr	r2, [r7, #32]
 800980c:	e841 2300 	strex	r3, r2, [r1]
 8009810:	61bb      	str	r3, [r7, #24]
   return(result);
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1e5      	bne.n	80097e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3758      	adds	r7, #88	; 0x58
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	080099f9 	.word	0x080099f9
 8009828:	08009b1d 	.word	0x08009b1d
 800982c:	08009b55 	.word	0x08009b55

08009830 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009830:	b480      	push	{r7}
 8009832:	b089      	sub	sp, #36	; 0x24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	60bb      	str	r3, [r7, #8]
   return(result);
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800984c:	61fb      	str	r3, [r7, #28]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	61bb      	str	r3, [r7, #24]
 8009858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985a:	6979      	ldr	r1, [r7, #20]
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	e841 2300 	strex	r3, r2, [r1]
 8009862:	613b      	str	r3, [r7, #16]
   return(result);
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1e6      	bne.n	8009838 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2220      	movs	r2, #32
 800986e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009870:	bf00      	nop
 8009872:	3724      	adds	r7, #36	; 0x24
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b095      	sub	sp, #84	; 0x54
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009898:	64fb      	str	r3, [r7, #76]	; 0x4c
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	461a      	mov	r2, r3
 80098a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a2:	643b      	str	r3, [r7, #64]	; 0x40
 80098a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098aa:	e841 2300 	strex	r3, r2, [r1]
 80098ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1e6      	bne.n	8009884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3308      	adds	r3, #8
 80098bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	f023 0301 	bic.w	r3, r3, #1
 80098cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3308      	adds	r3, #8
 80098d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e5      	bne.n	80098b6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d118      	bne.n	8009924 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	e853 3f00 	ldrex	r3, [r3]
 80098fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	f023 0310 	bic.w	r3, r3, #16
 8009906:	647b      	str	r3, [r7, #68]	; 0x44
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	461a      	mov	r2, r3
 800990e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009910:	61bb      	str	r3, [r7, #24]
 8009912:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009914:	6979      	ldr	r1, [r7, #20]
 8009916:	69ba      	ldr	r2, [r7, #24]
 8009918:	e841 2300 	strex	r3, r2, [r1]
 800991c:	613b      	str	r3, [r7, #16]
   return(result);
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e6      	bne.n	80098f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2220      	movs	r2, #32
 8009928:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009936:	bf00      	nop
 8009938:	3754      	adds	r7, #84	; 0x54
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b090      	sub	sp, #64	; 0x40
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	d137      	bne.n	80099ce <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800995e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009960:	2200      	movs	r2, #0
 8009962:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3308      	adds	r3, #8
 800996c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	e853 3f00 	ldrex	r3, [r3]
 8009974:	623b      	str	r3, [r7, #32]
   return(result);
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800997c:	63bb      	str	r3, [r7, #56]	; 0x38
 800997e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3308      	adds	r3, #8
 8009984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009986:	633a      	str	r2, [r7, #48]	; 0x30
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800998c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e5      	bne.n	8009966 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800999a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	e853 3f00 	ldrex	r3, [r3]
 80099a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ae:	637b      	str	r3, [r7, #52]	; 0x34
 80099b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	461a      	mov	r2, r3
 80099b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b8:	61fb      	str	r3, [r7, #28]
 80099ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099bc:	69b9      	ldr	r1, [r7, #24]
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	e841 2300 	strex	r3, r2, [r1]
 80099c4:	617b      	str	r3, [r7, #20]
   return(result);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1e6      	bne.n	800999a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099cc:	e002      	b.n	80099d4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80099ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80099d0:	f7f8 fce0 	bl	8002394 <HAL_UART_TxCpltCallback>
}
 80099d4:	bf00      	nop
 80099d6:	3740      	adds	r7, #64	; 0x40
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f7f8 fce6 	bl	80023bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099f0:	bf00      	nop
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b09c      	sub	sp, #112	; 0x70
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a04:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0320 	and.w	r3, r3, #32
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d170      	bne.n	8009af6 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8009a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a16:	2200      	movs	r2, #0
 8009a18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e6      	bne.n	8009a1c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3308      	adds	r3, #8
 8009a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a60:	f023 0301 	bic.w	r3, r3, #1
 8009a64:	667b      	str	r3, [r7, #100]	; 0x64
 8009a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a6e:	647a      	str	r2, [r7, #68]	; 0x44
 8009a70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a76:	e841 2300 	strex	r3, r2, [r1]
 8009a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e5      	bne.n	8009a4e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3308      	adds	r3, #8
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	623b      	str	r3, [r7, #32]
   return(result);
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a98:	663b      	str	r3, [r7, #96]	; 0x60
 8009a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009aa2:	633a      	str	r2, [r7, #48]	; 0x30
 8009aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1e5      	bne.n	8009a82 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab8:	2220      	movs	r2, #32
 8009aba:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d118      	bne.n	8009af6 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f023 0310 	bic.w	r3, r3, #16
 8009ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ae2:	61fb      	str	r3, [r7, #28]
 8009ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae6:	69b9      	ldr	r1, [r7, #24]
 8009ae8:	69fa      	ldr	r2, [r7, #28]
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	617b      	str	r3, [r7, #20]
   return(result);
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1e6      	bne.n	8009ac4 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d107      	bne.n	8009b0e <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b04:	4619      	mov	r1, r3
 8009b06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b08:	f7f8 fbd6 	bl	80022b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b0c:	e002      	b.n	8009b14 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8009b0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b10:	f7f8 fc0c 	bl	800232c <HAL_UART_RxCpltCallback>
}
 8009b14:	bf00      	nop
 8009b16:	3770      	adds	r7, #112	; 0x70
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b28:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d109      	bne.n	8009b46 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b38:	085b      	lsrs	r3, r3, #1
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f7f8 fbba 	bl	80022b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b44:	e002      	b.n	8009b4c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7f8 fc0a 	bl	8002360 <HAL_UART_RxHalfCpltCallback>
}
 8009b4c:	bf00      	nop
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b66:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b78:	2b80      	cmp	r3, #128	; 0x80
 8009b7a:	d109      	bne.n	8009b90 <UART_DMAError+0x3c>
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	2b21      	cmp	r3, #33	; 0x21
 8009b80:	d106      	bne.n	8009b90 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009b8a:	6978      	ldr	r0, [r7, #20]
 8009b8c:	f7ff fe50 	bl	8009830 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9a:	2b40      	cmp	r3, #64	; 0x40
 8009b9c:	d109      	bne.n	8009bb2 <UART_DMAError+0x5e>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b22      	cmp	r3, #34	; 0x22
 8009ba2:	d106      	bne.n	8009bb2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009bac:	6978      	ldr	r0, [r7, #20]
 8009bae:	f7ff fe65 	bl	800987c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bb8:	f043 0210 	orr.w	r2, r3, #16
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bc2:	6978      	ldr	r0, [r7, #20]
 8009bc4:	f7f8 fc14 	bl	80023f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bc8:	bf00      	nop
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7f8 fbfe 	bl	80023f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bf4:	bf00      	nop
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b088      	sub	sp, #32
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	e853 3f00 	ldrex	r3, [r3]
 8009c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c18:	61fb      	str	r3, [r7, #28]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	61bb      	str	r3, [r7, #24]
 8009c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6979      	ldr	r1, [r7, #20]
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e6      	bne.n	8009c04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2220      	movs	r2, #32
 8009c3a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7f8 fba6 	bl	8002394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c48:	bf00      	nop
 8009c4a:	3720      	adds	r7, #32
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08c      	sub	sp, #48	; 0x30
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c76:	2b20      	cmp	r3, #32
 8009c78:	d14a      	bne.n	8009d10 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8009c80:	88fb      	ldrh	r3, [r7, #6]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e043      	b.n	8009d12 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d101      	bne.n	8009c98 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8009c94:	2302      	movs	r3, #2
 8009c96:	e03c      	b.n	8009d12 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	68b9      	ldr	r1, [r7, #8]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7ff fd19 	bl	80096e4 <UART_Start_Receive_DMA>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d124      	bne.n	8009d0a <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d11d      	bne.n	8009d04 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2210      	movs	r2, #16
 8009cce:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	e853 3f00 	ldrex	r3, [r3]
 8009cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f043 0310 	orr.w	r3, r3, #16
 8009ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
 8009cf0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf2:	6a39      	ldr	r1, [r7, #32]
 8009cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf6:	e841 2300 	strex	r3, r2, [r1]
 8009cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1e6      	bne.n	8009cd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8009d02:	e002      	b.n	8009d0a <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d0e:	e000      	b.n	8009d12 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8009d10:	2302      	movs	r3, #2
  }
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3730      	adds	r7, #48	; 0x30
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
	...

08009d1c <stimLib_stimInit>:
/*
 BRIEF
 - Initalize stimulation library. Preempt system resources and peripherals.
 */
stim_lib_rsp_t stimLib_stimInit(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
	stim_lib_rsp_t rslt;

	TD_DEBUG_PRINT(("STIM_LIB: stimLib_stimInit()\n"));
 8009d22:	480c      	ldr	r0, [pc, #48]	; (8009d54 <stimLib_stimInit+0x38>)
 8009d24:	f002 f8ce 	bl	800bec4 <puts>

	if (stimLib_stateGet() != stim_lib_state_uninitialized)
 8009d28:	f001 f8e0 	bl	800aeec <stimLib_stateGet>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <stimLib_stimInit+0x1a>
	{
		return stim_lib_stim_rsp_invalid_status;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e00a      	b.n	8009d4c <stimLib_stimInit+0x30>
	}

	rslt = stimLib_initResrc();
 8009d36:	f000 f977 	bl	800a028 <stimLib_initResrc>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	71fb      	strb	r3, [r7, #7]

	if (rslt == stim_lib_stim_rsp_ok)
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d102      	bne.n	8009d4a <stimLib_stimInit+0x2e>
	{
		stimLib_stateSet(stim_lib_state_idle);
 8009d44:	2001      	movs	r0, #1
 8009d46:	f001 f8dd 	bl	800af04 <stimLib_stateSet>
	}

	return rslt;
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	0800d3cc 	.word	0x0800d3cc

08009d58 <stimLib_stimSignalConfig>:
/*
 BRIEF
 - Setup signal pusle of stimulation configuration.
 */
stim_lib_rsp_t stimLib_stimSignalConfig(stim_signal_cfg_t *signal_cfg)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
	if (signal_cfg == NULL || stimLib_signalParamCheck(signal_cfg) == false)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d008      	beq.n	8009d78 <stimLib_stimSignalConfig+0x20>
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f001 f9cc 	bl	800b104 <stimLib_signalParamCheck>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f083 0301 	eor.w	r3, r3, #1
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <stimLib_stimSignalConfig+0x24>
	{
		return stim_lib_stim_rsp_invalid_parameter;
 8009d78:	2304      	movs	r3, #4
 8009d7a:	e00a      	b.n	8009d92 <stimLib_stimSignalConfig+0x3a>
	}

	if (stimLib_stateGet() == stim_lib_state_idle)
 8009d7c:	f001 f8b6 	bl	800aeec <stimLib_stateGet>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d104      	bne.n	8009d90 <stimLib_stimSignalConfig+0x38>
	{
		stimLib_stateSigParamSet(signal_cfg);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 f92c 	bl	800afe4 <stimLib_stateSigParamSet>

		return stim_lib_stim_rsp_ok;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	e000      	b.n	8009d92 <stimLib_stimSignalConfig+0x3a>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009d90:	2303      	movs	r3, #3
	}
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <stimLib_stimTriggerConfig>:
/*
 BRIEF
 - Setup trigger of stimulation configuration.
 */
stim_lib_rsp_t stimLib_stimTriggerConfig(stim_trg_cfg_t *trg_cfg)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
	if (trg_cfg == NULL || stimLib_triggerParamCheck(trg_cfg) == false)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d008      	beq.n	8009dba <stimLib_stimTriggerConfig+0x20>
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 f9e3 	bl	800b174 <stimLib_triggerParamCheck>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f083 0301 	eor.w	r3, r3, #1
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <stimLib_stimTriggerConfig+0x24>
	{
		return stim_lib_stim_rsp_invalid_parameter;
 8009dba:	2304      	movs	r3, #4
 8009dbc:	e00a      	b.n	8009dd4 <stimLib_stimTriggerConfig+0x3a>
	}

	if (stimLib_stateGet() == stim_lib_state_idle)
 8009dbe:	f001 f895 	bl	800aeec <stimLib_stateGet>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d104      	bne.n	8009dd2 <stimLib_stimTriggerConfig+0x38>
	{
		stimLib_stateTrgParamSet(trg_cfg);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 f92f 	bl	800b02c <stimLib_stateTrgParamSet>

		return stim_lib_stim_rsp_ok;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e000      	b.n	8009dd4 <stimLib_stimTriggerConfig+0x3a>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009dd2:	2303      	movs	r3, #3
	}

}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <stimLib_stimSessionStart>:
/*
 BRIEF
 - Start stimulation session.
 */
stim_lib_rsp_t stimLib_stimSessionStart(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
	bool param_rslt;

	if (stimLib_stateGet() == stim_lib_state_idle)
 8009de2:	f001 f883 	bl	800aeec <stimLib_stateGet>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d11a      	bne.n	8009e22 <stimLib_stimSessionStart+0x46>
	{
		param_rslt = stimLib_stateSigParamCheck();
 8009dec:	f001 f94a 	bl	800b084 <stimLib_stateSigParamCheck>
 8009df0:	4603      	mov	r3, r0
 8009df2:	71fb      	strb	r3, [r7, #7]

		if (param_rslt == true)
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d011      	beq.n	8009e1e <stimLib_stimSessionStart+0x42>
		{
			param_rslt = stimLib_paramSetting();
 8009dfa:	f001 f9cb 	bl	800b194 <stimLib_paramSetting>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	71fb      	strb	r3, [r7, #7]

			/* VOLTAGE CONTROL PRESTART */
			if (STIM_LIB_STATE_TRG_VOLT_PRESTART == true)
 8009e02:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <stimLib_stimSessionStart+0x50>)
 8009e04:	7c1b      	ldrb	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <stimLib_stimSessionStart+0x32>
				 * STEP UP VOLTAGE CONTROL START
				 *
				 * START STEPUP PULSE TIMER :: TIMER 1
				 * START STEPUP FEEDBACK TIMER :: TIMER 6
				 * */
				stimLib_stepupStart();
 8009e0a:	f001 feb3 	bl	800bb74 <stimLib_stepupStart>
			}

			stimLib_stateSet(stim_lib_state_session_idle);
 8009e0e:	2002      	movs	r0, #2
 8009e10:	f001 f878 	bl	800af04 <stimLib_stateSet>
			TD_DEBUG_PRINT(("STIM_LIB: Session Start >> Session IDLE\n"));
 8009e14:	4806      	ldr	r0, [pc, #24]	; (8009e30 <stimLib_stimSessionStart+0x54>)
 8009e16:	f002 f855 	bl	800bec4 <puts>

			return stim_lib_stim_rsp_ok;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e002      	b.n	8009e24 <stimLib_stimSessionStart+0x48>
		}
		else
		{
			return stim_lib_stim_rsp_invalid_parameter;
 8009e1e:	2304      	movs	r3, #4
 8009e20:	e000      	b.n	8009e24 <stimLib_stimSessionStart+0x48>
		}
	}

	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009e22:	2303      	movs	r3, #3
	}
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	20000660 	.word	0x20000660
 8009e30:	0800d3ec 	.word	0x0800d3ec

08009e34 <stimLib_stimSessionStop>:
/*
 BRIEF
 - Stop stimulation session.
 */
stim_lib_rsp_t stimLib_stimSessionStop(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
	uint32_t tick;

	tick = HAL_GetTick();
 8009e3a:	f7f8 fce3 	bl	8002804 <HAL_GetTick>
 8009e3e:	6078      	str	r0, [r7, #4]

	while (stimLib_stateGet() == stim_lib_state_stim_stopping
 8009e40:	bf00      	nop
 8009e42:	f001 f853 	bl	800aeec <stimLib_stateGet>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	d107      	bne.n	8009e5c <stimLib_stimSessionStop+0x28>
			&& stimLib_getTick() - tick < STIM_LIB_SESSION_VALID_TIME)
 8009e4c:	f000 f84c 	bl	8009ee8 <stimLib_getTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e5a:	d3f2      	bcc.n	8009e42 <stimLib_stimSessionStop+0xe>
		;

	if (stimLib_getTick() - tick >= STIM_LIB_SESSION_VALID_TIME)
 8009e5c:	f000 f844 	bl	8009ee8 <stimLib_getTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e6a:	d303      	bcc.n	8009e74 <stimLib_stimSessionStop+0x40>
	{
		/* ERROR */
		stimLib_errorHandle();
 8009e6c:	f000 f844 	bl	8009ef8 <stimLib_errorHandle>

		return stim_lib_stim_rsp_system_fault;
 8009e70:	2306      	movs	r3, #6
 8009e72:	e00e      	b.n	8009e92 <stimLib_stimSessionStop+0x5e>
	}

	if (stimLib_stateGet() == stim_lib_state_session_idle) // if (stimLib_stateGet() == stim_lib_state_session_idle)
 8009e74:	f001 f83a 	bl	800aeec <stimLib_stateGet>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d108      	bne.n	8009e90 <stimLib_stimSessionStop+0x5c>
	{
		stimLib_stepupStop();
 8009e7e:	f001 fe89 	bl	800bb94 <stimLib_stepupStop>

		stimLib_paramClear();
 8009e82:	f001 f998 	bl	800b1b6 <stimLib_paramClear>

		stimLib_stateSet(stim_lib_state_idle);
 8009e86:	2001      	movs	r0, #1
 8009e88:	f001 f83c 	bl	800af04 <stimLib_stateSet>

		return stim_lib_stim_rsp_ok;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e000      	b.n	8009e92 <stimLib_stimSessionStop+0x5e>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009e90:	2303      	movs	r3, #3
	}
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <stimLib_stimStart>:
/*
 BRIEF
 - Start stimulation signal output in a session.
 */
stim_lib_rsp_t stimLib_stimStart(void)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	af00      	add	r7, sp, #0

	if (stimLib_stateGet() == stim_lib_state_session_idle)
 8009e9e:	f001 f825 	bl	800aeec <stimLib_stateGet>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d106      	bne.n	8009eb6 <stimLib_stimStart+0x1c>
	{
		stimLib_stimPulseStart();
 8009ea8:	f001 f98e 	bl	800b1c8 <stimLib_stimPulseStart>
		stimLib_stateSet(stim_lib_state_stimulating);
 8009eac:	2003      	movs	r0, #3
 8009eae:	f001 f829 	bl	800af04 <stimLib_stateSet>

		return stim_lib_stim_rsp_ok;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	e000      	b.n	8009eb8 <stimLib_stimStart+0x1e>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009eb6:	2303      	movs	r3, #3
	}
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <stimLib_stimPause>:
/*
 BRIEF
 - Pause stimulation signal output in a session.
 */
stim_lib_rsp_t stimLib_stimPause(void)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0
	if (stimLib_stateGet() == stim_lib_state_stimulating)
 8009ec0:	f001 f814 	bl	800aeec <stimLib_stateGet>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d103      	bne.n	8009ed2 <stimLib_stimPause+0x16>
		/* To save puls start time */
		stimLib_stimPulseSetiing();

		stimLib_stateSet(stim_lib_state_session_idle);
#else
		stimLib_stimStopDelayRaw();
 8009eca:	f000 f9db 	bl	800a284 <stimLib_stimStopDelayRaw>

#endif

		return stim_lib_stim_rsp_ok;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e000      	b.n	8009ed4 <stimLib_stimPause+0x18>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8009ed2:	2303      	movs	r3, #3
	}
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <stimLib_chkSystem>:
#include "stim_lib_common.h"

#include "td_debug.h"

bool stimLib_chkSystem(void)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	af00      	add	r7, sp, #0
#ifdef	STM32L412xx
	return true;
 8009edc:	2301      	movs	r3, #1
#else
	return false;
#endif

}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <stimLib_getTick>:

uint32_t stimLib_getTick(void)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8009eec:	f7f8 fc8a 	bl	8002804 <HAL_GetTick>
 8009ef0:	4603      	mov	r3, r0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <stimLib_errorHandle>:
#include "stim_lib_error.h"

#include "td_debug.h"

void stimLib_errorHandle(void)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	af00      	add	r7, sp, #0
	 1. Stop voltage
	 2. Stop Stimulation
	 3. Set state to error
	 ...
	 */
	stimLib_stepupStop();
 8009efc:	f001 fe4a 	bl	800bb94 <stimLib_stepupStop>
	stimLib_stimPulseStop();
 8009f00:	f001 f97c 	bl	800b1fc <stimLib_stimPulseStop>
	stimLib_paramClear();
 8009f04:	f001 f957 	bl	800b1b6 <stimLib_paramClear>
	stimLib_stateSet(stim_lib_state_error);
 8009f08:	2005      	movs	r0, #5
 8009f0a:	f000 fffb 	bl	800af04 <stimLib_stateSet>

	sitmLib_appErrorHandle_callback();
 8009f0e:	f000 f807 	bl	8009f20 <sitmLib_appErrorHandle_callback>

	TD_DEBUG_PRINT(("STIM_LIB: ERROR!!\n"));
 8009f12:	4802      	ldr	r0, [pc, #8]	; (8009f1c <stimLib_errorHandle+0x24>)
 8009f14:	f001 ffd6 	bl	800bec4 <puts>
}
 8009f18:	bf00      	nop
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	0800d414 	.word	0x0800d414

08009f20 <sitmLib_appErrorHandle_callback>:

void sitmLib_appErrorHandle_callback(void)
{
 8009f20:	b480      	push	{r7}
 8009f22:	af00      	add	r7, sp, #0
}
 8009f24:	bf00      	nop
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
	...

08009f30 <stimLib_initResource>:

#define STIM_LIB_RESOURCE_INIT_ERROR				false
#define STIM_LIB_RESOURCE_INIT_OK					true

static void stimLib_initResource(bool *resource_check)
{
 8009f30:	b590      	push	{r4, r7, lr}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	uint8_t i;

	if (resource_check == NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d06d      	beq.n	800a01a <stimLib_initResource+0xea>
	{
		return;
	}

	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 8009f3e:	2300      	movs	r3, #0
 8009f40:	73fb      	strb	r3, [r7, #15]
 8009f42:	e007      	b.n	8009f54 <stimLib_initResource+0x24>
	{
		resource_check[i] = false;
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	4413      	add	r3, r2
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	701a      	strb	r2, [r3, #0]
	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	3301      	adds	r3, #1
 8009f52:	73fb      	strb	r3, [r7, #15]
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	2b06      	cmp	r3, #6
 8009f58:	d9f4      	bls.n	8009f44 <stimLib_initResource+0x14>
	}

	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]
 8009f5e:	e058      	b.n	800a012 <stimLib_initResource+0xe2>
	{
		switch (i)
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	2b06      	cmp	r3, #6
 8009f64:	d848      	bhi.n	8009ff8 <stimLib_initResource+0xc8>
 8009f66:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <stimLib_initResource+0x3c>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	08009f89 	.word	0x08009f89
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009fa9 	.word	0x08009fa9
 8009f78:	08009fb9 	.word	0x08009fb9
 8009f7c:	08009fc9 	.word	0x08009fc9
 8009f80:	08009fd9 	.word	0x08009fd9
 8009f84:	08009fe9 	.word	0x08009fe9
		{

		case stim_lib_resrc_dma:
			resource_check[i] = stimLib_dmaInit();
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	18d4      	adds	r4, r2, r3
 8009f8e:	f000 fa31 	bl	800a3f4 <stimLib_dmaInit>
 8009f92:	4603      	mov	r3, r0
 8009f94:	7023      	strb	r3, [r4, #0]
			break;
 8009f96:	e030      	b.n	8009ffa <stimLib_initResource+0xca>

		case stim_lib_resrc_tim1:
			resource_check[i] = stimLib_tim1_Init();
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	18d4      	adds	r4, r2, r3
 8009f9e:	f000 fa63 	bl	800a468 <stimLib_tim1_Init>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	7023      	strb	r3, [r4, #0]
			break;
 8009fa6:	e028      	b.n	8009ffa <stimLib_initResource+0xca>

		case stim_lib_resrc_tim2:
			resource_check[i] = stimLib_tim2_Init();
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	18d4      	adds	r4, r2, r3
 8009fae:	f000 faef 	bl	800a590 <stimLib_tim2_Init>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	7023      	strb	r3, [r4, #0]
			break;
 8009fb6:	e020      	b.n	8009ffa <stimLib_initResource+0xca>

		case stim_lib_resrc_tim6:
			resource_check[i] = stimLib_tim6_Init();
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	18d4      	adds	r4, r2, r3
 8009fbe:	f000 fbb1 	bl	800a724 <stimLib_tim6_Init>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	7023      	strb	r3, [r4, #0]
			break;
 8009fc6:	e018      	b.n	8009ffa <stimLib_initResource+0xca>

		case stim_lib_resrc_adc1:
			resource_check[i] = stimLib_adc1_Init();
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	18d4      	adds	r4, r2, r3
 8009fce:	f000 fc07 	bl	800a7e0 <stimLib_adc1_Init>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	7023      	strb	r3, [r4, #0]
			break;
 8009fd6:	e010      	b.n	8009ffa <stimLib_initResource+0xca>

		case stim_lib_resrc_adc2:
			resource_check[i] = stimLib_adc2_Init();
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	18d4      	adds	r4, r2, r3
 8009fde:	f000 fca7 	bl	800a930 <stimLib_adc2_Init>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	7023      	strb	r3, [r4, #0]
			break;
 8009fe6:	e008      	b.n	8009ffa <stimLib_initResource+0xca>

		case stim_lib_resrc_gpio:
			resource_check[i] = stimLib_gpioInit();
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	18d4      	adds	r4, r2, r3
 8009fee:	f000 f993 	bl	800a318 <stimLib_gpioInit>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	7023      	strb	r3, [r4, #0]
			break;
 8009ff6:	e000      	b.n	8009ffa <stimLib_initResource+0xca>

		default:
			break;
 8009ff8:	bf00      	nop
		}

		if (resource_check[i] == false)
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	4413      	add	r3, r2
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	f083 0301 	eor.w	r3, r3, #1
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d108      	bne.n	800a01e <stimLib_initResource+0xee>
	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	3301      	adds	r3, #1
 800a010:	73fb      	strb	r3, [r7, #15]
 800a012:	7bfb      	ldrb	r3, [r7, #15]
 800a014:	2b06      	cmp	r3, #6
 800a016:	d9a3      	bls.n	8009f60 <stimLib_initResource+0x30>
 800a018:	e002      	b.n	800a020 <stimLib_initResource+0xf0>
		return;
 800a01a:	bf00      	nop
 800a01c:	e000      	b.n	800a020 <stimLib_initResource+0xf0>
		{
			break;
 800a01e:	bf00      	nop
		}
	}
}
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	bd90      	pop	{r4, r7, pc}
 800a026:	bf00      	nop

0800a028 <stimLib_initResrc>:

uint8_t stimLib_initResrc(void)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
	uint8_t i;
	bool resrc_chk[stim_lib_resrc_max] =
 800a02e:	463b      	mov	r3, r7
 800a030:	2200      	movs	r2, #0
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	f8c3 2003 	str.w	r2, [r3, #3]
	{ false, };

	/* Check system environment */
	if (stimLib_chkSystem() == false)
 800a038:	f7ff ff4e 	bl	8009ed8 <stimLib_chkSystem>
 800a03c:	4603      	mov	r3, r0
 800a03e:	f083 0301 	eor.w	r3, r3, #1
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <stimLib_initResrc+0x24>
	{
		return stim_lib_stim_rsp_unsupported;
 800a048:	2305      	movs	r3, #5
 800a04a:	e04f      	b.n	800a0ec <stimLib_initResrc+0xc4>
	}

	/* Check system clock */
	if (SystemCoreClock != STIM_LIB_SYSTEM_CLOCK_HZ)
 800a04c:	4b29      	ldr	r3, [pc, #164]	; (800a0f4 <stimLib_initResrc+0xcc>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a29      	ldr	r2, [pc, #164]	; (800a0f8 <stimLib_initResrc+0xd0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d001      	beq.n	800a05a <stimLib_initResrc+0x32>
	{
		return stim_lib_stim_rsp_unsupported;
 800a056:	2305      	movs	r3, #5
 800a058:	e048      	b.n	800a0ec <stimLib_initResrc+0xc4>
	}

	if (stimLib_stateGet() != stim_lib_state_uninitialized)
 800a05a:	f000 ff47 	bl	800aeec <stimLib_stateGet>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <stimLib_initResrc+0x40>
	{
		return stim_lib_stim_rsp_invalid_status;
 800a064:	2303      	movs	r3, #3
 800a066:	e041      	b.n	800a0ec <stimLib_initResrc+0xc4>
	}
	else
	{
		/* Resource Init */
		stimLib_initResource(resrc_chk);
 800a068:	463b      	mov	r3, r7
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7ff ff60 	bl	8009f30 <stimLib_initResource>
	}

	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 800a070:	2300      	movs	r3, #0
 800a072:	71fb      	strb	r3, [r7, #7]
 800a074:	e00c      	b.n	800a090 <stimLib_initResrc+0x68>
	{
		if (resrc_chk[i] == false)
 800a076:	79fb      	ldrb	r3, [r7, #7]
 800a078:	3308      	adds	r3, #8
 800a07a:	443b      	add	r3, r7
 800a07c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800a080:	f083 0301 	eor.w	r3, r3, #1
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d106      	bne.n	800a098 <stimLib_initResrc+0x70>
	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	3301      	adds	r3, #1
 800a08e:	71fb      	strb	r3, [r7, #7]
 800a090:	79fb      	ldrb	r3, [r7, #7]
 800a092:	2b06      	cmp	r3, #6
 800a094:	d9ef      	bls.n	800a076 <stimLib_initResrc+0x4e>
 800a096:	e000      	b.n	800a09a <stimLib_initResrc+0x72>
		{
			break;
 800a098:	bf00      	nop
		}
	}

	if (i == stim_lib_resrc_max)
 800a09a:	79fb      	ldrb	r3, [r7, #7]
 800a09c:	2b07      	cmp	r3, #7
 800a09e:	d101      	bne.n	800a0a4 <stimLib_initResrc+0x7c>
	{
		return stim_lib_stim_rsp_ok;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	e023      	b.n	800a0ec <stimLib_initResrc+0xc4>
	}
	else
	{
		/* Keep the order of stim_lib_resrc_t elements */
		switch (i)
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	2b06      	cmp	r3, #6
 800a0a8:	d81e      	bhi.n	800a0e8 <stimLib_initResrc+0xc0>
 800a0aa:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <stimLib_initResrc+0x88>)
 800a0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b0:	0800a0e5 	.word	0x0800a0e5
 800a0b4:	0800a0e1 	.word	0x0800a0e1
 800a0b8:	0800a0dd 	.word	0x0800a0dd
 800a0bc:	0800a0d9 	.word	0x0800a0d9
 800a0c0:	0800a0d5 	.word	0x0800a0d5
 800a0c4:	0800a0d1 	.word	0x0800a0d1
 800a0c8:	0800a0cd 	.word	0x0800a0cd
		{
		case stim_lib_resrc_gpio:
			stimLib_gpioDeinit();
 800a0cc:	f000 fcb4 	bl	800aa38 <stimLib_gpioDeinit>

		case stim_lib_resrc_adc2:
			stimLib_adc2_Deinit();
 800a0d0:	f000 fd0a 	bl	800aae8 <stimLib_adc2_Deinit>

		case stim_lib_resrc_adc1:
			stimLib_adc1_Deinit();
 800a0d4:	f000 fcfe 	bl	800aad4 <stimLib_adc1_Deinit>

		case stim_lib_resrc_tim6:
			stimLib_tim6_Deinit();
 800a0d8:	f000 fcf2 	bl	800aac0 <stimLib_tim6_Deinit>

		case stim_lib_resrc_tim2:
			stimLib_tim2_Deinit();
 800a0dc:	f000 fce6 	bl	800aaac <stimLib_tim2_Deinit>

		case stim_lib_resrc_tim1:
			stimLib_tim1_Deinit();
 800a0e0:	f000 fcda 	bl	800aa98 <stimLib_tim1_Deinit>

		case stim_lib_resrc_dma:
			stimLib_dmaDeinit();
 800a0e4:	f000 fcc0 	bl	800aa68 <stimLib_dmaDeinit>

		default:
			break;
 800a0e8:	bf00      	nop
		}

		return stim_lib_stim_rsp_failed;
 800a0ea:	2301      	movs	r3, #1
	}

}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20000000 	.word	0x20000000
 800a0f8:	04c4b400 	.word	0x04c4b400

0800a0fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a100:	f3bf 8f4f 	dsb	sy
}
 800a104:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a106:	4b06      	ldr	r3, [pc, #24]	; (800a120 <__NVIC_SystemReset+0x24>)
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a10e:	4904      	ldr	r1, [pc, #16]	; (800a120 <__NVIC_SystemReset+0x24>)
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <__NVIC_SystemReset+0x28>)
 800a112:	4313      	orrs	r3, r2
 800a114:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a116:	f3bf 8f4f 	dsb	sy
}
 800a11a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a11c:	bf00      	nop
 800a11e:	e7fd      	b.n	800a11c <__NVIC_SystemReset+0x20>
 800a120:	e000ed00 	.word	0xe000ed00
 800a124:	05fa0004 	.word	0x05fa0004

0800a128 <stimLib_adcWatchdoc_callback>:
/*
 * ADC WATCH DOC INTERRUPT
 * Calling from "HAL_ADC_LevelOutOfWindowCallback()" Function
 * */
void stimLib_adcWatchdoc_callback(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
	TD_DEBUG_PRINT(
 800a12c:	4804      	ldr	r0, [pc, #16]	; (800a140 <stimLib_adcWatchdoc_callback+0x18>)
 800a12e:	f001 fec9 	bl	800bec4 <puts>
			("WATCH DOC INTERRUPT :: stimLib_adcWatchdoc_callback()\r\n"));
	TD_DEBUG_PRINT(("SYSTEM ALL STOP AND RESETs\r\n"));
 800a132:	4804      	ldr	r0, [pc, #16]	; (800a144 <stimLib_adcWatchdoc_callback+0x1c>)
 800a134:	f001 fec6 	bl	800bec4 <puts>

	stimLib_errorHandle();
 800a138:	f7ff fede 	bl	8009ef8 <stimLib_errorHandle>
	/*
	 TODO:

	 Move to error handle
	 */
	NVIC_SystemReset();
 800a13c:	f7ff ffde 	bl	800a0fc <__NVIC_SystemReset>
 800a140:	0800d428 	.word	0x0800d428
 800a144:	0800d460 	.word	0x0800d460

0800a148 <stimLib_adcError_callback>:
/*
 * ADC WATCH DOC INTERRUPT
 * Calling from "HAL_ADC_ErrorCallback()" Function
 * */
void stimLib_adcError_callback(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
	TD_DEBUG_PRINT(("ADC ERROR :: stimLib_adcError_callback()\r\n"));
 800a14c:	4803      	ldr	r0, [pc, #12]	; (800a15c <stimLib_adcError_callback+0x14>)
 800a14e:	f001 feb9 	bl	800bec4 <puts>

	stimLib_errorHandle();
 800a152:	f7ff fed1 	bl	8009ef8 <stimLib_errorHandle>
	/*
	 TODO:

	 Move to error handle
	 */
	NVIC_SystemReset();
 800a156:	f7ff ffd1 	bl	800a0fc <__NVIC_SystemReset>
 800a15a:	bf00      	nop
 800a15c:	0800d47c 	.word	0x0800d47c

0800a160 <stimLib_stepup_ctrlCallback>:
/*
 * STEPUP CONTROL CALLBACK
 * Calling from "HAL_TIM_PeriodElapsedCallback()" Function
 * */
void stimLib_stepup_ctrlCallback(TIM_HandleTypeDef *htim)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a04      	ldr	r2, [pc, #16]	; (800a180 <stimLib_stepup_ctrlCallback+0x20>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d101      	bne.n	800a176 <stimLib_stepup_ctrlCallback+0x16>
	{
		stimLib_stepup_ctrlScheduler();
 800a172:	f001 fa53 	bl	800b61c <stimLib_stepup_ctrlScheduler>
	}
}
 800a176:	bf00      	nop
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	40001000 	.word	0x40001000

0800a184 <stimLib_trgInput_callback>:
/*
 * Trigger Input Callback
 * Calling from "HAL_GPIO_EXTI_Callback()" Function
 * */
void stimLib_trgInput_callback(uint16_t gpio_pin)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	80fb      	strh	r3, [r7, #6]
	if (STIM_LIB_TRG_INPUT_PIN_IS_ENABLED(gpio_pin))
 800a18e:	88fb      	ldrh	r3, [r7, #6]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d132      	bne.n	800a1fa <stimLib_trgInput_callback+0x76>
 800a194:	4b1b      	ldr	r3, [pc, #108]	; (800a204 <stimLib_trgInput_callback+0x80>)
 800a196:	7cdb      	ldrb	r3, [r3, #19]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d02e      	beq.n	800a1fa <stimLib_trgInput_callback+0x76>
	{
		if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_LOW())
 800a19c:	4b19      	ldr	r3, [pc, #100]	; (800a204 <stimLib_trgInput_callback+0x80>)
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d106      	bne.n	800a1b2 <stimLib_trgInput_callback+0x2e>
 800a1a4:	4b17      	ldr	r3, [pc, #92]	; (800a204 <stimLib_trgInput_callback+0x80>)
 800a1a6:	7d5b      	ldrb	r3, [r3, #21]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <stimLib_trgInput_callback+0x2e>
		{
			stim_lib_trg_input_active_low_hanlde();
 800a1ac:	f000 f846 	bl	800a23c <stim_lib_trg_input_active_low_hanlde>
 800a1b0:	e023      	b.n	800a1fa <stimLib_trgInput_callback+0x76>
		}

		else if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_HIGH())
 800a1b2:	4b14      	ldr	r3, [pc, #80]	; (800a204 <stimLib_trgInput_callback+0x80>)
 800a1b4:	7d1b      	ldrb	r3, [r3, #20]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d106      	bne.n	800a1c8 <stimLib_trgInput_callback+0x44>
 800a1ba:	4b12      	ldr	r3, [pc, #72]	; (800a204 <stimLib_trgInput_callback+0x80>)
 800a1bc:	7d5b      	ldrb	r3, [r3, #21]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d002      	beq.n	800a1c8 <stimLib_trgInput_callback+0x44>
		{
			stim_lib_trg_input_active_high_handle();
 800a1c2:	f000 f84d 	bl	800a260 <stim_lib_trg_input_active_high_handle>
 800a1c6:	e018      	b.n	800a1fa <stimLib_trgInput_callback+0x76>
		}

		else if (STIM_LIB_TRG_INPUT_IS_FALLING_EDGE(
 800a1c8:	4b0e      	ldr	r3, [pc, #56]	; (800a204 <stimLib_trgInput_callback+0x80>)
 800a1ca:	7d1b      	ldrb	r3, [r3, #20]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d106      	bne.n	800a1de <stimLib_trgInput_callback+0x5a>
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	; (800a204 <stimLib_trgInput_callback+0x80>)
 800a1d2:	7d5b      	ldrb	r3, [r3, #21]
 800a1d4:	f083 0301 	eor.w	r3, r3, #1
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <stimLib_trgInput_callback+0x70>
		) || STIM_LIB_TRG_INPUT_IS_RISING_EDGE())
 800a1de:	4b09      	ldr	r3, [pc, #36]	; (800a204 <stimLib_trgInput_callback+0x80>)
 800a1e0:	7d1b      	ldrb	r3, [r3, #20]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d109      	bne.n	800a1fa <stimLib_trgInput_callback+0x76>
 800a1e6:	4b07      	ldr	r3, [pc, #28]	; (800a204 <stimLib_trgInput_callback+0x80>)
 800a1e8:	7d5b      	ldrb	r3, [r3, #21]
 800a1ea:	f083 0301 	eor.w	r3, r3, #1
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <stimLib_trgInput_callback+0x76>
			/*
			 * STIM START
			 * Initiate stimulation by trigger input.
			 * RISING EDGE and FALLING EDGE
			 * */
			stimLib_stimStart();
 800a1f4:	f7ff fe51 	bl	8009e9a <stimLib_stimStart>
		}
	}
}
 800a1f8:	e7ff      	b.n	800a1fa <stimLib_trgInput_callback+0x76>
 800a1fa:	bf00      	nop
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000660 	.word	0x20000660

0800a208 <stimLib_timError_callback>:

void stimLib_timError_callback(TIM_HandleTypeDef *htim)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
	stimLib_errorHandle();
 800a210:	f7ff fe72 	bl	8009ef8 <stimLib_errorHandle>
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <stimLib_timPwmPluseFinished_callback>:

void stimLib_timPwmPluseFinished_callback(TIM_HandleTypeDef *htim)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a22c:	d101      	bne.n	800a232 <stimLib_timPwmPluseFinished_callback+0x16>
	{
		stimLib_stimPulseStop();
 800a22e:	f000 ffe5 	bl	800b1fc <stimLib_stimPulseStop>
	}
}
 800a232:	bf00      	nop
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <stim_lib_trg_input_active_low_hanlde>:

/* Define static functions */
static void stim_lib_trg_input_active_low_hanlde(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	af00      	add	r7, sp, #0
	if (STIM_LIB_TRG_INPUT_PIN_IS_HIGH())
 800a240:	2101      	movs	r1, #1
 800a242:	4806      	ldr	r0, [pc, #24]	; (800a25c <stim_lib_trg_input_active_low_hanlde+0x20>)
 800a244:	f7fb fba8 	bl	8005998 <HAL_GPIO_ReadPin>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d102      	bne.n	800a254 <stim_lib_trg_input_active_low_hanlde+0x18>
		/*
		 * Force low of TIM PIO outputs
		 * CAUTION: OCREF must be normalized in PWM mode. Refer to TIM stop Function, stimLib_stimStopRaw()
		 * Stop when the toggle signal is HIGH.
		 * */
		stimLib_stimStopDelayRaw();
 800a24e:	f000 f819 	bl	800a284 <stimLib_stimStopDelayRaw>
		 * Initiate stimulation by trigger input.
		 * Start when the toggle signal is LOW.
		 * */
		stimLib_stimStart();
	}
}
 800a252:	e001      	b.n	800a258 <stim_lib_trg_input_active_low_hanlde+0x1c>
		stimLib_stimStart();
 800a254:	f7ff fe21 	bl	8009e9a <stimLib_stimStart>
}
 800a258:	bf00      	nop
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	48000400 	.word	0x48000400

0800a260 <stim_lib_trg_input_active_high_handle>:

static void stim_lib_trg_input_active_high_handle(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	af00      	add	r7, sp, #0
	if (STIM_LIB_TRG_INPUT_PIN_IS_LOW())
 800a264:	2101      	movs	r1, #1
 800a266:	4806      	ldr	r0, [pc, #24]	; (800a280 <stim_lib_trg_input_active_high_handle+0x20>)
 800a268:	f7fb fb96 	bl	8005998 <HAL_GPIO_ReadPin>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d102      	bne.n	800a278 <stim_lib_trg_input_active_high_handle+0x18>
		/*
		 * Force low of TIM PIO outputs
		 * CAUTION: OCREF must be normalized in PWM mode. Refer to TIM stop Function, stimLib_stimStopRaw()
		 * Stop when the toggle signal is LOW.
		 * */
		stimLib_stimStopDelayRaw();
 800a272:	f000 f807 	bl	800a284 <stimLib_stimStopDelayRaw>
		 * Initiate stimulation by trigger input.
		 * Start when the toggle signal is HIGH.
		 * */
		stimLib_stimStart();
	}
}
 800a276:	e001      	b.n	800a27c <stim_lib_trg_input_active_high_handle+0x1c>
		stimLib_stimStart();
 800a278:	f7ff fe0f 	bl	8009e9a <stimLib_stimStart>
}
 800a27c:	bf00      	nop
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	48000400 	.word	0x48000400

0800a284 <stimLib_stimStopDelayRaw>:
#include "stim_lib_common.h"

#define STIM_LIB_PLUS_OUTPUT_OFF_TIME()						for (int i = 0; i < 0xffff; i++) /* Delay */

void stimLib_stimStopDelayRaw(void)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
	if (stimLib_stateGet() == stim_lib_state_stimulating)
 800a28a:	f000 fe2f 	bl	800aeec <stimLib_stateGet>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b03      	cmp	r3, #3
 800a292:	d139      	bne.n	800a308 <stimLib_stimStopDelayRaw+0x84>
	{
		/*
		 * I had a problem with not going straight to LOW when ending the pulse.
		 * At the end of the pulse, I change the OC mode immediately to drop the GPIO to the LOW level.
		 * */
		TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 800a294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a298:	699a      	ldr	r2, [r3, #24]
 800a29a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a29e:	4b1c      	ldr	r3, [pc, #112]	; (800a310 <stimLib_stimStopDelayRaw+0x8c>)
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	618b      	str	r3, [r1, #24]
		TIM2->CCMR1 |= (TIM_OCMODE_FORCED_INACTIVE)
 800a2a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a2ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2b6:	6193      	str	r3, [r2, #24]
				| (TIM_OCMODE_FORCED_INACTIVE << 8U);

		TIM2->CCMR2 &= ~(TIM_CCMR2_OC3M | TIM_CCMR2_OC4M);
 800a2b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2bc:	69da      	ldr	r2, [r3, #28]
 800a2be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a2c2:	4b13      	ldr	r3, [pc, #76]	; (800a310 <stimLib_stimStopDelayRaw+0x8c>)
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	61cb      	str	r3, [r1, #28]
		TIM2->CCMR2 |= (TIM_OCMODE_FORCED_INACTIVE)
 800a2c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a2d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2da:	61d3      	str	r3, [r2, #28]

		/*
		 * Since it must be used not only in the polling method but also inside the interrupt, the Delay function is avoided and replaced with a For statement.
		 * stimLib_delay(STIM_LIB_PLUS_OUTPUT_OFF_TIME);
		 * */
		STIM_LIB_PLUS_OUTPUT_OFF_TIME();
 800a2dc:	2300      	movs	r3, #0
 800a2de:	607b      	str	r3, [r7, #4]
 800a2e0:	e002      	b.n	800a2e8 <stimLib_stimStopDelayRaw+0x64>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	607b      	str	r3, [r7, #4]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	ddf7      	ble.n	800a2e2 <stimLib_stimStopDelayRaw+0x5e>

		/*
		 * TIM2 CH3 DMA TC INTERRUPT ENABLE
		 * */
		__HAL_DMA_ENABLE_IT(&hdma_tim2_ch3, (DMA_IT_TC));
 800a2f2:	4b08      	ldr	r3, [pc, #32]	; (800a314 <stimLib_stimStopDelayRaw+0x90>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	4b06      	ldr	r3, [pc, #24]	; (800a314 <stimLib_stimStopDelayRaw+0x90>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f042 0202 	orr.w	r2, r2, #2
 800a300:	601a      	str	r2, [r3, #0]

		stimLib_stateSet(stim_lib_state_stim_stopping);
 800a302:	2004      	movs	r0, #4
 800a304:	f000 fdfe 	bl	800af04 <stimLib_stateSet>
	}
}
 800a308:	bf00      	nop
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	fefe8f8f 	.word	0xfefe8f8f
 800a314:	20000390 	.word	0x20000390

0800a318 <stimLib_gpioInit>:
#include "stim_lib_stim_cfg.h"
#include "stim_lib_state.h"

/* INIT FUNCTION */
bool stimLib_gpioInit(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08a      	sub	sp, #40	; 0x28
 800a31c:	af00      	add	r7, sp, #0
	/* GPIO INIT */
	GPIO_InitTypeDef GPIO_InitStruct =
 800a31e:	f107 0314 	add.w	r3, r7, #20
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	605a      	str	r2, [r3, #4]
 800a328:	609a      	str	r2, [r3, #8]
 800a32a:	60da      	str	r2, [r3, #12]
 800a32c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800a32e:	4b2e      	ldr	r3, [pc, #184]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a332:	4a2d      	ldr	r2, [pc, #180]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a334:	f043 0304 	orr.w	r3, r3, #4
 800a338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a33a:	4b2b      	ldr	r3, [pc, #172]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a33c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33e:	f003 0304 	and.w	r3, r3, #4
 800a342:	613b      	str	r3, [r7, #16]
 800a344:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800a346:	4b28      	ldr	r3, [pc, #160]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a34a:	4a27      	ldr	r2, [pc, #156]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a350:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a352:	4b25      	ldr	r3, [pc, #148]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a35e:	4b22      	ldr	r3, [pc, #136]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a362:	4a21      	ldr	r2, [pc, #132]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a364:	f043 0301 	orr.w	r3, r3, #1
 800a368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a36a:	4b1f      	ldr	r3, [pc, #124]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a36c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	60bb      	str	r3, [r7, #8]
 800a374:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a376:	4b1c      	ldr	r3, [pc, #112]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37a:	4a1b      	ldr	r2, [pc, #108]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a37c:	f043 0302 	orr.w	r3, r3, #2
 800a380:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a382:	4b19      	ldr	r3, [pc, #100]	; (800a3e8 <stimLib_gpioInit+0xd0>)
 800a384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	607b      	str	r3, [r7, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]

	/* Configure GPIO pin Output Level */
	/* DAC and PEAK DISCHARGE SW */
	HAL_GPIO_WritePin(GPIOB,
 800a38e:	2200      	movs	r2, #0
 800a390:	f241 11fe 	movw	r1, #4606	; 0x11fe
 800a394:	4815      	ldr	r0, [pc, #84]	; (800a3ec <stimLib_gpioInit+0xd4>)
 800a396:	f7fb fb17 	bl	80059c8 <HAL_GPIO_WritePin>
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN, GPIO_PIN_RESET);

	/* PEAK DETECTION */
	HAL_GPIO_WritePin(STIM_LIB_PEAK_DETECTION_PWR_SW_GPIO_PORT,
 800a39a:	2200      	movs	r2, #0
 800a39c:	2108      	movs	r1, #8
 800a39e:	4814      	ldr	r0, [pc, #80]	; (800a3f0 <stimLib_gpioInit+0xd8>)
 800a3a0:	f7fb fb12 	bl	80059c8 <HAL_GPIO_WritePin>
	STIM_LIB_PEAK_DETECTION_PWR_SW_PIN, GPIO_PIN_RESET);

	/* Configure GPIO pin : DAC and PEAK DISCHARGE SW */
	GPIO_InitStruct.Pin = STIM_LIB_DAC_N0_PIN | STIM_LIB_DAC_N1_PIN
 800a3a4:	f241 13fe 	movw	r3, #4606	; 0x11fe
 800a3a8:	617b      	str	r3, [r7, #20]
			| STIM_LIB_PEAK_DISCHG_SW_PIN | STIM_LIB_DAC_N2_PIN
			| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN | STIM_LIB_DAC_N5_PIN
			| STIM_LIB_DAC_N6_PIN | STIM_LIB_DAC_N7_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3b6:	f107 0314 	add.w	r3, r7, #20
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	480b      	ldr	r0, [pc, #44]	; (800a3ec <stimLib_gpioInit+0xd4>)
 800a3be:	f7fb f8a7 	bl	8005510 <HAL_GPIO_Init>

	/* Configure GPIO pin : PEAK_DETECTION_PWR_SW_Pin */
	GPIO_InitStruct.Pin = STIM_LIB_PEAK_DETECTION_PWR_SW_PIN;
 800a3c2:	2308      	movs	r3, #8
 800a3c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(STIM_LIB_PEAK_DETECTION_PWR_SW_GPIO_PORT, &GPIO_InitStruct);
 800a3d2:	f107 0314 	add.w	r3, r7, #20
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4805      	ldr	r0, [pc, #20]	; (800a3f0 <stimLib_gpioInit+0xd8>)
 800a3da:	f7fb f899 	bl	8005510 <HAL_GPIO_Init>

	return true;
 800a3de:	2301      	movs	r3, #1
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3728      	adds	r7, #40	; 0x28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	40021000 	.word	0x40021000
 800a3ec:	48000400 	.word	0x48000400
 800a3f0:	48001c00 	.word	0x48001c00

0800a3f4 <stimLib_dmaInit>:

bool stimLib_dmaInit(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800a3fa:	4b1a      	ldr	r3, [pc, #104]	; (800a464 <stimLib_dmaInit+0x70>)
 800a3fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3fe:	4a19      	ldr	r2, [pc, #100]	; (800a464 <stimLib_dmaInit+0x70>)
 800a400:	f043 0301 	orr.w	r3, r3, #1
 800a404:	6493      	str	r3, [r2, #72]	; 0x48
 800a406:	4b17      	ldr	r3, [pc, #92]	; (800a464 <stimLib_dmaInit+0x70>)
 800a408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	607b      	str	r3, [r7, #4]
 800a410:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800a412:	4b14      	ldr	r3, [pc, #80]	; (800a464 <stimLib_dmaInit+0x70>)
 800a414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a416:	4a13      	ldr	r2, [pc, #76]	; (800a464 <stimLib_dmaInit+0x70>)
 800a418:	f043 0302 	orr.w	r3, r3, #2
 800a41c:	6493      	str	r3, [r2, #72]	; 0x48
 800a41e:	4b11      	ldr	r3, [pc, #68]	; (800a464 <stimLib_dmaInit+0x70>)
 800a420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	603b      	str	r3, [r7, #0]
 800a428:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */

	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800a42a:	2200      	movs	r2, #0
 800a42c:	2101      	movs	r1, #1
 800a42e:	200b      	movs	r0, #11
 800a430:	f7fa fd21 	bl	8004e76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a434:	200b      	movs	r0, #11
 800a436:	f7fa fd3a 	bl	8004eae <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 800a43a:	2200      	movs	r2, #0
 800a43c:	2101      	movs	r1, #1
 800a43e:	200c      	movs	r0, #12
 800a440:	f7fa fd19 	bl	8004e76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a444:	200c      	movs	r0, #12
 800a446:	f7fa fd32 	bl	8004eae <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 800a44a:	2200      	movs	r2, #0
 800a44c:	2101      	movs	r1, #1
 800a44e:	2011      	movs	r0, #17
 800a450:	f7fa fd11 	bl	8004e76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800a454:	2011      	movs	r0, #17
 800a456:	f7fa fd2a 	bl	8004eae <HAL_NVIC_EnableIRQ>

	return STIM_LIB_RESOURCE_INIT_OK;
 800a45a:	2301      	movs	r3, #1
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	40021000 	.word	0x40021000

0800a468 <stimLib_tim1_Init>:

bool stimLib_tim1_Init(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b096      	sub	sp, #88	; 0x58
 800a46c:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig =
 800a46e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	605a      	str	r2, [r3, #4]
 800a478:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 800a47a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a47e:	2200      	movs	r2, #0
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	605a      	str	r2, [r3, #4]
 800a484:	609a      	str	r2, [r3, #8]
 800a486:	60da      	str	r2, [r3, #12]
 800a488:	611a      	str	r2, [r3, #16]
 800a48a:	615a      	str	r2, [r3, #20]
 800a48c:	619a      	str	r2, [r3, #24]
	{ 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 800a48e:	1d3b      	adds	r3, r7, #4
 800a490:	222c      	movs	r2, #44	; 0x2c
 800a492:	2100      	movs	r1, #0
 800a494:	4618      	mov	r0, r3
 800a496:	f001 fc71 	bl	800bd7c <memset>
	{ 0 };

	htim1.Instance = TIM1;
 800a49a:	4b3b      	ldr	r3, [pc, #236]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a49c:	4a3b      	ldr	r2, [pc, #236]	; (800a58c <stimLib_tim1_Init+0x124>)
 800a49e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 3;
 800a4a0:	4b39      	ldr	r3, [pc, #228]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800a4a6:	4b38      	ldr	r3, [pc, #224]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a4a8:	2210      	movs	r2, #16
 800a4aa:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9999;
 800a4ac:	4b36      	ldr	r3, [pc, #216]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a4ae:	f242 720f 	movw	r2, #9999	; 0x270f
 800a4b2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4b4:	4b34      	ldr	r3, [pc, #208]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800a4ba:	4b33      	ldr	r3, [pc, #204]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a4c0:	4b31      	ldr	r3, [pc, #196]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a4c2:	2280      	movs	r2, #128	; 0x80
 800a4c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a4c6:	4830      	ldr	r0, [pc, #192]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a4c8:	f7fc ff60 	bl	800738c <HAL_TIM_PWM_Init>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <stimLib_tim1_Init+0x6e>
	{
		return false;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	e053      	b.n	800a57e <stimLib_tim1_Init+0x116>
	}
	/* MSP :: Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
	stimLib_tim_pwmmspInit(&htim1);
 800a4d6:	482c      	ldr	r0, [pc, #176]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a4d8:	f000 fbec 	bl	800acb4 <stimLib_tim_pwmmspInit>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a4e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4826      	ldr	r0, [pc, #152]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a4f0:	f7fe f832 	bl	8008558 <HAL_TIMEx_MasterConfigSynchronization>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <stimLib_tim1_Init+0x96>
	{
		return false;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e03f      	b.n	800a57e <stimLib_tim1_Init+0x116>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a4fe:	2360      	movs	r3, #96	; 0x60
 800a500:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a506:	2300      	movs	r3, #0
 800a508:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a50a:	2300      	movs	r3, #0
 800a50c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a50e:	2300      	movs	r3, #0
 800a510:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a512:	2300      	movs	r3, #0
 800a514:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a516:	2300      	movs	r3, #0
 800a518:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a51a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a51e:	2200      	movs	r2, #0
 800a520:	4619      	mov	r1, r3
 800a522:	4819      	ldr	r0, [pc, #100]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a524:	f7fd fae6 	bl	8007af4 <HAL_TIM_PWM_ConfigChannel>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <stimLib_tim1_Init+0xca>
	{
		return false;
 800a52e:	2300      	movs	r3, #0
 800a530:	e025      	b.n	800a57e <stimLib_tim1_Init+0x116>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a532:	2300      	movs	r3, #0
 800a534:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a536:	2300      	movs	r3, #0
 800a538:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a542:	2300      	movs	r3, #0
 800a544:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a54a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a550:	2300      	movs	r3, #0
 800a552:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a558:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a55e:	2300      	movs	r3, #0
 800a560:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a562:	1d3b      	adds	r3, r7, #4
 800a564:	4619      	mov	r1, r3
 800a566:	4808      	ldr	r0, [pc, #32]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a568:	f7fe f85c 	bl	8008624 <HAL_TIMEx_ConfigBreakDeadTime>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <stimLib_tim1_Init+0x10e>
	{
		return false;
 800a572:	2300      	movs	r3, #0
 800a574:	e003      	b.n	800a57e <stimLib_tim1_Init+0x116>
	}

	/* MSP :: TIMER GPIO */
	stimLib_tim_msppostInit(&htim1);
 800a576:	4804      	ldr	r0, [pc, #16]	; (800a588 <stimLib_tim1_Init+0x120>)
 800a578:	f000 fc5e 	bl	800ae38 <stimLib_tim_msppostInit>

	return STIM_LIB_RESOURCE_INIT_OK;
 800a57c:	2301      	movs	r3, #1
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3758      	adds	r7, #88	; 0x58
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000264 	.word	0x20000264
 800a58c:	40012c00 	.word	0x40012c00

0800a590 <stimLib_tim2_Init>:

bool stimLib_tim2_Init(void)
{
 800a590:	b590      	push	{r4, r7, lr}
 800a592:	b08b      	sub	sp, #44	; 0x2c
 800a594:	af00      	add	r7, sp, #0
	/* TIMER2 SETTING */
	TIM_MasterConfigTypeDef sMasterConfig =
 800a596:	f107 031c 	add.w	r3, r7, #28
 800a59a:	2200      	movs	r2, #0
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	605a      	str	r2, [r3, #4]
 800a5a0:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 800a5a2:	463b      	mov	r3, r7
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	605a      	str	r2, [r3, #4]
 800a5aa:	609a      	str	r2, [r3, #8]
 800a5ac:	60da      	str	r2, [r3, #12]
 800a5ae:	611a      	str	r2, [r3, #16]
 800a5b0:	615a      	str	r2, [r3, #20]
 800a5b2:	619a      	str	r2, [r3, #24]
	{ 0 };
	htim2.Instance = TIM2;
 800a5b4:	4b58      	ldr	r3, [pc, #352]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a5b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a5ba:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = STIM_LIB_SIGNAL_PSC_INPUT;
 800a5bc:	f7fc f886 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	4a56      	ldr	r2, [pc, #344]	; (800a71c <stimLib_tim2_Init+0x18c>)
 800a5c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	2350      	movs	r3, #80	; 0x50
 800a5cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	4b50      	ldr	r3, [pc, #320]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a5d6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5d8:	4b4f      	ldr	r3, [pc, #316]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	609a      	str	r2, [r3, #8]
	if (STIM_LIB_STATE_SIG_FREQ == 0)
 800a5de:	4b50      	ldr	r3, [pc, #320]	; (800a720 <stimLib_tim2_Init+0x190>)
 800a5e0:	791b      	ldrb	r3, [r3, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d102      	bne.n	800a5ec <stimLib_tim2_Init+0x5c>
	{
		STIM_LIB_STATE_SIG_FREQ = 1;
 800a5e6:	4b4e      	ldr	r3, [pc, #312]	; (800a720 <stimLib_tim2_Init+0x190>)
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	711a      	strb	r2, [r3, #4]
	}
	htim2.Init.Period = STIM_LIB_SIGNAL_ARR_INPUT;
 800a5ec:	f7fc f86e 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	f7fc f86b 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	4a48      	ldr	r2, [pc, #288]	; (800a71c <stimLib_tim2_Init+0x18c>)
 800a5fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5fe:	461a      	mov	r2, r3
 800a600:	2350      	movs	r3, #80	; 0x50
 800a602:	fb93 f3f2 	sdiv	r3, r3, r2
 800a606:	fbb4 f3f3 	udiv	r3, r4, r3
 800a60a:	4a45      	ldr	r2, [pc, #276]	; (800a720 <stimLib_tim2_Init+0x190>)
 800a60c:	7912      	ldrb	r2, [r2, #4]
 800a60e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a612:	3b01      	subs	r3, #1
 800a614:	461a      	mov	r2, r3
 800a616:	4b40      	ldr	r3, [pc, #256]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a618:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a61a:	4b3f      	ldr	r3, [pc, #252]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a620:	4b3d      	ldr	r3, [pc, #244]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a622:	2280      	movs	r2, #128	; 0x80
 800a624:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a626:	483c      	ldr	r0, [pc, #240]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a628:	f7fc feb0 	bl	800738c <HAL_TIM_PWM_Init>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <stimLib_tim2_Init+0xa6>
	{
		return false;
 800a632:	2300      	movs	r3, #0
 800a634:	e06b      	b.n	800a70e <stimLib_tim2_Init+0x17e>
	}
	/* MSP :: Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
	stimLib_tim_pwmmspInit(&htim2);
 800a636:	4838      	ldr	r0, [pc, #224]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a638:	f000 fb3c 	bl	800acb4 <stimLib_tim_pwmmspInit>

	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800a63c:	4836      	ldr	r0, [pc, #216]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a63e:	f7fc fb64 	bl	8006d0a <HAL_TIM_OC_Init>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <stimLib_tim2_Init+0xbc>
	{
		return false;
 800a648:	2300      	movs	r3, #0
 800a64a:	e060      	b.n	800a70e <stimLib_tim2_Init+0x17e>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800a64c:	2350      	movs	r3, #80	; 0x50
 800a64e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a650:	2300      	movs	r3, #0
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a654:	f107 031c 	add.w	r3, r7, #28
 800a658:	4619      	mov	r1, r3
 800a65a:	482f      	ldr	r0, [pc, #188]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a65c:	f7fd ff7c 	bl	8008558 <HAL_TIMEx_MasterConfigSynchronization>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <stimLib_tim2_Init+0xda>
	{
		return false;
 800a666:	2300      	movs	r3, #0
 800a668:	e051      	b.n	800a70e <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 1 :: TRIGGER OUTPUT */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a66a:	2360      	movs	r3, #96	; 0x60
 800a66c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_TRG_OUTPUT_PULSE_TIME;
 800a66e:	4b2c      	ldr	r3, [pc, #176]	; (800a720 <stimLib_tim2_Init+0x190>)
 800a670:	88db      	ldrh	r3, [r3, #6]
 800a672:	330f      	adds	r3, #15
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	607b      	str	r3, [r7, #4]

	if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_low)
 800a678:	4b29      	ldr	r3, [pc, #164]	; (800a720 <stimLib_tim2_Init+0x190>)
 800a67a:	7c9b      	ldrb	r3, [r3, #18]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d102      	bne.n	800a686 <stimLib_tim2_Init+0xf6>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800a680:	2302      	movs	r3, #2
 800a682:	60bb      	str	r3, [r7, #8]
 800a684:	e005      	b.n	800a692 <stimLib_tim2_Init+0x102>
	}
	else if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_high)
 800a686:	4b26      	ldr	r3, [pc, #152]	; (800a720 <stimLib_tim2_Init+0x190>)
 800a688:	7c9b      	ldrb	r3, [r3, #18]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d101      	bne.n	800a692 <stimLib_tim2_Init+0x102>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a68e:	2300      	movs	r3, #0
 800a690:	60bb      	str	r3, [r7, #8]
	}

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC,
 800a692:	463b      	mov	r3, r7
 800a694:	2200      	movs	r2, #0
 800a696:	4619      	mov	r1, r3
 800a698:	481f      	ldr	r0, [pc, #124]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a69a:	f7fd fa2b 	bl	8007af4 <HAL_TIM_PWM_ConfigChannel>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <stimLib_tim2_Init+0x118>
	STIM_LIB_PULSE_TRG_OUT_TIM_CH) != HAL_OK)
	{
		return false;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e032      	b.n	800a70e <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 2 :: ANODE PULSE */
	sConfigOC.Pulse = STIM_LIB_ANODE_PULSE_TIME;
 800a6a8:	4b1d      	ldr	r3, [pc, #116]	; (800a720 <stimLib_tim2_Init+0x190>)
 800a6aa:	88db      	ldrh	r3, [r3, #6]
 800a6ac:	330a      	adds	r3, #10
 800a6ae:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC,
 800a6b4:	463b      	mov	r3, r7
 800a6b6:	2204      	movs	r2, #4
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4817      	ldr	r0, [pc, #92]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a6bc:	f7fd fa1a 	bl	8007af4 <HAL_TIM_PWM_ConfigChannel>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <stimLib_tim2_Init+0x13a>
	STIM_LIB_PULSE_ANODE_TIM_CH) != HAL_OK)
	{
		return false;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e021      	b.n	800a70e <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 3 :: CATHODE PULSE */
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800a6ca:	2330      	movs	r3, #48	; 0x30
 800a6cc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_CATHODE_PULSE_TIME1;
 800a6ce:	4b14      	ldr	r3, [pc, #80]	; (800a720 <stimLib_tim2_Init+0x190>)
 800a6d0:	88db      	ldrh	r3, [r3, #6]
 800a6d2:	3314      	adds	r3, #20
 800a6d4:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC,
 800a6d6:	463b      	mov	r3, r7
 800a6d8:	2208      	movs	r2, #8
 800a6da:	4619      	mov	r1, r3
 800a6dc:	480e      	ldr	r0, [pc, #56]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a6de:	f7fd f98f 	bl	8007a00 <HAL_TIM_OC_ConfigChannel>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <stimLib_tim2_Init+0x15c>
	STIM_LIB_PULSE_CATHODE_TIM_CH) != HAL_OK)
	{
		return false;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e010      	b.n	800a70e <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 4 :: DAC_ON_N PULSE or STIM DISCHARGE PULSE */
#if 1
	sConfigOC.Pulse = STIM_LIB_SIGNAL_GLICH_TIME;
 800a6ec:	2305      	movs	r3, #5
 800a6ee:	607b      	str	r3, [r7, #4]
#else
					sConfigOC.Pulse = STIM_LIB_DISCHARGE_PULSE_TIME1;
		#endif
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC,
 800a6f0:	463b      	mov	r3, r7
 800a6f2:	220c      	movs	r2, #12
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4808      	ldr	r0, [pc, #32]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a6f8:	f7fd f982 	bl	8007a00 <HAL_TIM_OC_ConfigChannel>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <stimLib_tim2_Init+0x176>
	STIM_LIB_PULSE_DAC_ON_TIM_CH) != HAL_OK)
	{
		return false;
 800a702:	2300      	movs	r3, #0
 800a704:	e003      	b.n	800a70e <stimLib_tim2_Init+0x17e>
	}

	/* MSP :: TIMER GPIO */
	stimLib_tim_msppostInit(&htim2);
 800a706:	4804      	ldr	r0, [pc, #16]	; (800a718 <stimLib_tim2_Init+0x188>)
 800a708:	f000 fb96 	bl	800ae38 <stimLib_tim_msppostInit>

	return STIM_LIB_RESOURCE_INIT_OK;
 800a70c:	2301      	movs	r3, #1
}
 800a70e:	4618      	mov	r0, r3
 800a710:	372c      	adds	r7, #44	; 0x2c
 800a712:	46bd      	mov	sp, r7
 800a714:	bd90      	pop	{r4, r7, pc}
 800a716:	bf00      	nop
 800a718:	200002b0 	.word	0x200002b0
 800a71c:	04c4b400 	.word	0x04c4b400
 800a720:	20000660 	.word	0x20000660

0800a724 <stimLib_tim6_Init>:

bool stimLib_tim6_Init(void)
{
 800a724:	b590      	push	{r4, r7, lr}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig =
 800a72a:	1d3b      	adds	r3, r7, #4
 800a72c:	2200      	movs	r2, #0
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	605a      	str	r2, [r3, #4]
 800a732:	609a      	str	r2, [r3, #8]
	{ 0 };

	htim6.Instance = TIM6;
 800a734:	4b26      	ldr	r3, [pc, #152]	; (800a7d0 <stimLib_tim6_Init+0xac>)
 800a736:	4a27      	ldr	r2, [pc, #156]	; (800a7d4 <stimLib_tim6_Init+0xb0>)
 800a738:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = STIM_LIB_STEPUP_PSC_INPUT;
 800a73a:	f7fb ffc7 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800a73e:	4603      	mov	r3, r0
 800a740:	4a25      	ldr	r2, [pc, #148]	; (800a7d8 <stimLib_tim6_Init+0xb4>)
 800a742:	fbb2 f3f3 	udiv	r3, r2, r3
 800a746:	461a      	mov	r2, r3
 800a748:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a74c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a750:	3b01      	subs	r3, #1
 800a752:	461a      	mov	r2, r3
 800a754:	4b1e      	ldr	r3, [pc, #120]	; (800a7d0 <stimLib_tim6_Init+0xac>)
 800a756:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a758:	4b1d      	ldr	r3, [pc, #116]	; (800a7d0 <stimLib_tim6_Init+0xac>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = STIM_LIB_STEPUP_ARR_INPUT;
 800a75e:	f7fb ffb5 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800a762:	4604      	mov	r4, r0
 800a764:	f7fb ffb2 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800a768:	4603      	mov	r3, r0
 800a76a:	4a1b      	ldr	r2, [pc, #108]	; (800a7d8 <stimLib_tim6_Init+0xb4>)
 800a76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a770:	461a      	mov	r2, r3
 800a772:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a776:	fb93 f3f2 	sdiv	r3, r3, r2
 800a77a:	fbb4 f3f3 	udiv	r3, r4, r3
 800a77e:	4a17      	ldr	r2, [pc, #92]	; (800a7dc <stimLib_tim6_Init+0xb8>)
 800a780:	fba2 2303 	umull	r2, r3, r2, r3
 800a784:	08db      	lsrs	r3, r3, #3
 800a786:	3b01      	subs	r3, #1
 800a788:	461a      	mov	r2, r3
 800a78a:	4b11      	ldr	r3, [pc, #68]	; (800a7d0 <stimLib_tim6_Init+0xac>)
 800a78c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a78e:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <stimLib_tim6_Init+0xac>)
 800a790:	2280      	movs	r2, #128	; 0x80
 800a792:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a794:	480e      	ldr	r0, [pc, #56]	; (800a7d0 <stimLib_tim6_Init+0xac>)
 800a796:	f7fc f9b7 	bl	8006b08 <HAL_TIM_Base_Init>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <stimLib_tim6_Init+0x80>
	{
		return false;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	e011      	b.n	800a7c8 <stimLib_tim6_Init+0xa4>
	}

	/* MSP :: TIMER 6 :: HAL_TIM_BASE_INIT >> HAL_TIM_Base_MspInit */
	stimLib_tim_basemspInit(&htim6);
 800a7a4:	480a      	ldr	r0, [pc, #40]	; (800a7d0 <stimLib_tim6_Init+0xac>)
 800a7a6:	f000 fb21 	bl	800adec <stimLib_tim_basemspInit>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a7b2:	1d3b      	adds	r3, r7, #4
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4806      	ldr	r0, [pc, #24]	; (800a7d0 <stimLib_tim6_Init+0xac>)
 800a7b8:	f7fd fece 	bl	8008558 <HAL_TIMEx_MasterConfigSynchronization>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <stimLib_tim6_Init+0xa2>
	{
		return false;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e000      	b.n	800a7c8 <stimLib_tim6_Init+0xa4>
	}

	return STIM_LIB_RESOURCE_INIT_OK;
 800a7c6:	2301      	movs	r3, #1
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd90      	pop	{r4, r7, pc}
 800a7d0:	200002fc 	.word	0x200002fc
 800a7d4:	40001000 	.word	0x40001000
 800a7d8:	04c4b400 	.word	0x04c4b400
 800a7dc:	cccccccd 	.word	0xcccccccd

0800a7e0 <stimLib_adc1_Init>:

bool stimLib_adc1_Init(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b090      	sub	sp, #64	; 0x40
 800a7e4:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode =
 800a7e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	605a      	str	r2, [r3, #4]
 800a7f0:	609a      	str	r2, [r3, #8]
	{ 0 };
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig =
 800a7f2:	f107 031c 	add.w	r3, r7, #28
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	605a      	str	r2, [r3, #4]
 800a7fc:	609a      	str	r2, [r3, #8]
 800a7fe:	60da      	str	r2, [r3, #12]
 800a800:	611a      	str	r2, [r3, #16]
 800a802:	615a      	str	r2, [r3, #20]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 800a804:	1d3b      	adds	r3, r7, #4
 800a806:	2200      	movs	r2, #0
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	605a      	str	r2, [r3, #4]
 800a80c:	609a      	str	r2, [r3, #8]
 800a80e:	60da      	str	r2, [r3, #12]
 800a810:	611a      	str	r2, [r3, #16]
 800a812:	615a      	str	r2, [r3, #20]
	{ 0 };

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800a814:	4b42      	ldr	r3, [pc, #264]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a816:	4a43      	ldr	r2, [pc, #268]	; (800a924 <stimLib_adc1_Init+0x144>)
 800a818:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a81a:	4b41      	ldr	r3, [pc, #260]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a820:	4b3f      	ldr	r3, [pc, #252]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a822:	2200      	movs	r2, #0
 800a824:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a826:	4b3e      	ldr	r3, [pc, #248]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a828:	2200      	movs	r2, #0
 800a82a:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a82c:	4b3c      	ldr	r3, [pc, #240]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a82e:	2200      	movs	r2, #0
 800a830:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a832:	4b3b      	ldr	r3, [pc, #236]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a834:	2208      	movs	r2, #8
 800a836:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800a838:	4b39      	ldr	r3, [pc, #228]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800a83e:	4b38      	ldr	r3, [pc, #224]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a840:	2201      	movs	r2, #1
 800a842:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800a844:	4b36      	ldr	r3, [pc, #216]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a846:	2201      	movs	r2, #1
 800a848:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a84a:	4b35      	ldr	r3, [pc, #212]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a852:	4b33      	ldr	r3, [pc, #204]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a854:	2200      	movs	r2, #0
 800a856:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a858:	4b31      	ldr	r3, [pc, #196]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800a85e:	4b30      	ldr	r3, [pc, #192]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a866:	4b2e      	ldr	r3, [pc, #184]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a86c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800a86e:	4b2c      	ldr	r3, [pc, #176]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a876:	482a      	ldr	r0, [pc, #168]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a878:	f7f8 fb00 	bl	8002e7c <HAL_ADC_Init>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <stimLib_adc1_Init+0xa6>
	{
		return false;
 800a882:	2300      	movs	r3, #0
 800a884:	e047      	b.n	800a916 <stimLib_adc1_Init+0x136>
	}

	/* MSP SETTING */
	stimLib_adc_mspInit(&hadc1);
 800a886:	4826      	ldr	r0, [pc, #152]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a888:	f000 f938 	bl	800aafc <stimLib_adc_mspInit>
	/* Set ADC error code to none */
	ADC_CLEAR_ERRORCODE(&hadc1);
 800a88c:	4b24      	ldr	r3, [pc, #144]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a88e:	2200      	movs	r2, #0
 800a890:	659a      	str	r2, [r3, #88]	; 0x58
	/* Initialize Lock */
	hadc1.Lock = HAL_UNLOCKED;
 800a892:	4b23      	ldr	r3, [pc, #140]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800a89a:	2300      	movs	r3, #0
 800a89c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a89e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	481e      	ldr	r0, [pc, #120]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a8a6:	f7fa f943 	bl	8004b30 <HAL_ADCEx_MultiModeConfigChannel>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <stimLib_adc1_Init+0xd4>
	{
		return false;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	e030      	b.n	800a916 <stimLib_adc1_Init+0x136>
	}

	/** Configure Analog WatchDog 1
	 */
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800a8b4:	4b1c      	ldr	r3, [pc, #112]	; (800a928 <stimLib_adc1_Init+0x148>)
 800a8b6:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800a8b8:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800a8bc:	623b      	str	r3, [r7, #32]
	AnalogWDGConfig.Channel = ADC_CHANNEL_9;
 800a8be:	4b1b      	ldr	r3, [pc, #108]	; (800a92c <stimLib_adc1_Init+0x14c>)
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24
	AnalogWDGConfig.ITMode = ENABLE;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	AnalogWDGConfig.HighThreshold = 2600;
 800a8c8:	f640 2328 	movw	r3, #2600	; 0xa28
 800a8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	AnalogWDGConfig.LowThreshold = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800a8d2:	f107 031c 	add.w	r3, r7, #28
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4811      	ldr	r0, [pc, #68]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a8da:	f7f9 fc8f 	bl	80041fc <HAL_ADC_AnalogWDGConfig>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d001      	beq.n	800a8e8 <stimLib_adc1_Init+0x108>
	{
		return false;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	e016      	b.n	800a916 <stimLib_adc1_Init+0x136>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800a8e8:	4b10      	ldr	r3, [pc, #64]	; (800a92c <stimLib_adc1_Init+0x14c>)
 800a8ea:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800a8ec:	2306      	movs	r3, #6
 800a8ee:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a8f4:	237f      	movs	r3, #127	; 0x7f
 800a8f6:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a8f8:	2304      	movs	r3, #4
 800a8fa:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a900:	1d3b      	adds	r3, r7, #4
 800a902:	4619      	mov	r1, r3
 800a904:	4806      	ldr	r0, [pc, #24]	; (800a920 <stimLib_adc1_Init+0x140>)
 800a906:	f7f9 f87d 	bl	8003a04 <HAL_ADC_ConfigChannel>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <stimLib_adc1_Init+0x134>
	{
		return false;
 800a910:	2300      	movs	r3, #0
 800a912:	e000      	b.n	800a916 <stimLib_adc1_Init+0x136>
	}
	return STIM_LIB_RESOURCE_INIT_OK;
 800a914:	2301      	movs	r3, #1
}
 800a916:	4618      	mov	r0, r3
 800a918:	3740      	adds	r7, #64	; 0x40
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	2000010c 	.word	0x2000010c
 800a924:	50040000 	.word	0x50040000
 800a928:	7dc00000 	.word	0x7dc00000
 800a92c:	25b00200 	.word	0x25b00200

0800a930 <stimLib_adc2_Init>:

bool stimLib_adc2_Init(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig =
 800a936:	463b      	mov	r3, r7
 800a938:	2200      	movs	r2, #0
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	605a      	str	r2, [r3, #4]
 800a93e:	609a      	str	r2, [r3, #8]
 800a940:	60da      	str	r2, [r3, #12]
 800a942:	611a      	str	r2, [r3, #16]
 800a944:	615a      	str	r2, [r3, #20]
	{ 0 };

	/** Common config
	 */
	hadc2.Instance = ADC2;
 800a946:	4b38      	ldr	r3, [pc, #224]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a948:	4a38      	ldr	r2, [pc, #224]	; (800aa2c <stimLib_adc2_Init+0xfc>)
 800a94a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a94c:	4b36      	ldr	r3, [pc, #216]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a94e:	2200      	movs	r2, #0
 800a950:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a952:	4b35      	ldr	r3, [pc, #212]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a954:	2200      	movs	r2, #0
 800a956:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a958:	4b33      	ldr	r3, [pc, #204]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	60da      	str	r2, [r3, #12]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a95e:	4b32      	ldr	r3, [pc, #200]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a960:	2201      	movs	r2, #1
 800a962:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a964:	4b30      	ldr	r3, [pc, #192]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a966:	2208      	movs	r2, #8
 800a968:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800a96a:	4b2f      	ldr	r3, [pc, #188]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800a970:	4b2d      	ldr	r3, [pc, #180]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a972:	2200      	movs	r2, #0
 800a974:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 2;
 800a976:	4b2c      	ldr	r3, [pc, #176]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a978:	2202      	movs	r2, #2
 800a97a:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a97c:	4b2a      	ldr	r3, [pc, #168]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800a984:	4b28      	ldr	r3, [pc, #160]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a986:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800a98a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800a98c:	4b26      	ldr	r3, [pc, #152]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a98e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a992:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.DMAContinuousRequests = ENABLE;
 800a994:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a99c:	4b22      	ldr	r3, [pc, #136]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a99e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9a2:	635a      	str	r2, [r3, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 800a9a4:	4b20      	ldr	r3, [pc, #128]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a9ac:	481e      	ldr	r0, [pc, #120]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a9ae:	f7f8 fa65 	bl	8002e7c <HAL_ADC_Init>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <stimLib_adc2_Init+0x8c>
	{
		return false;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e030      	b.n	800aa1e <stimLib_adc2_Init+0xee>
	}
	/* MSP SETTING */
	stimLib_adc_mspInit(&hadc2);
 800a9bc:	481a      	ldr	r0, [pc, #104]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a9be:	f000 f89d 	bl	800aafc <stimLib_adc_mspInit>
	/* Set ADC error code to none */
	ADC_CLEAR_ERRORCODE(&hadc2);
 800a9c2:	4b19      	ldr	r3, [pc, #100]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	659a      	str	r2, [r3, #88]	; 0x58
	/* Initialize Lock */
	hadc2.Lock = HAL_UNLOCKED;
 800a9c8:	4b17      	ldr	r3, [pc, #92]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 800a9d0:	4b17      	ldr	r3, [pc, #92]	; (800aa30 <stimLib_adc2_Init+0x100>)
 800a9d2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800a9d4:	2306      	movs	r3, #6
 800a9d6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800a9d8:	2304      	movs	r3, #4
 800a9da:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a9dc:	237f      	movs	r3, #127	; 0x7f
 800a9de:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a9e0:	2304      	movs	r3, #4
 800a9e2:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a9e8:	463b      	mov	r3, r7
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	480e      	ldr	r0, [pc, #56]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800a9ee:	f7f9 f809 	bl	8003a04 <HAL_ADC_ConfigChannel>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <stimLib_adc2_Init+0xcc>
	{
		return false;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e010      	b.n	800aa1e <stimLib_adc2_Init+0xee>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 800a9fc:	4b0d      	ldr	r3, [pc, #52]	; (800aa34 <stimLib_adc2_Init+0x104>)
 800a9fe:	603b      	str	r3, [r7, #0]
	sConfig.Channel = ADC_CHANNEL_12;
 800aa00:	4b0c      	ldr	r3, [pc, #48]	; (800aa34 <stimLib_adc2_Init+0x104>)
 800aa02:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800aa04:	230c      	movs	r3, #12
 800aa06:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800aa08:	463b      	mov	r3, r7
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	4806      	ldr	r0, [pc, #24]	; (800aa28 <stimLib_adc2_Init+0xf8>)
 800aa0e:	f7f8 fff9 	bl	8003a04 <HAL_ADC_ConfigChannel>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d001      	beq.n	800aa1c <stimLib_adc2_Init+0xec>
	{
		return false;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	e000      	b.n	800aa1e <stimLib_adc2_Init+0xee>
	}
	return STIM_LIB_RESOURCE_INIT_OK;
 800aa1c:	2301      	movs	r3, #1
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20000170 	.word	0x20000170
 800aa2c:	50040100 	.word	0x50040100
 800aa30:	2e300800 	.word	0x2e300800
 800aa34:	32601000 	.word	0x32601000

0800aa38 <stimLib_gpioDeinit>:

/* DEINIT FUNCTION */
void stimLib_gpioDeinit(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOA,
 800aa3c:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800aa40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa44:	f7fa fed6 	bl	80057f4 <HAL_GPIO_DeInit>
			STIM_LIB_STEP_UP_SW_PIN | STIM_LIB_STEP_UP_FEEDBACK_PIN
					| STIM_LIB_STIM_ANODE_PIN | STIM_LIB_STIM_CATHODE_PIN
					| STIM_LIB_DAC_ON_N_PIN | STIM_LIB_STIM_TRIGGER_OUTPUT_PIN
					| STIM_LIB_PEAK_DETECTION_R_PIN
					| STIM_LIB_PEAK_DETECTION_L_PIN);
	HAL_GPIO_DeInit(GPIOB,
 800aa48:	f241 11ff 	movw	r1, #4607	; 0x11ff
 800aa4c:	4804      	ldr	r0, [pc, #16]	; (800aa60 <stimLib_gpioDeinit+0x28>)
 800aa4e:	f7fa fed1 	bl	80057f4 <HAL_GPIO_DeInit>
			STIM_LIB_STIM_TRIGGER_INPUT_PIN | STIM_LIB_DAC_N0_PIN
					| STIM_LIB_DAC_N1_PIN | STIM_LIB_DAC_N2_PIN
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN | STIM_LIB_PEAK_DISCHG_SW_PIN);
	HAL_GPIO_DeInit(STIM_LIB_PEAK_DETECTION_PWR_SW_GPIO_PORT,
 800aa52:	2108      	movs	r1, #8
 800aa54:	4803      	ldr	r0, [pc, #12]	; (800aa64 <stimLib_gpioDeinit+0x2c>)
 800aa56:	f7fa fecd 	bl	80057f4 <HAL_GPIO_DeInit>
	STIM_LIB_PEAK_DETECTION_PWR_SW_PIN);
}
 800aa5a:	bf00      	nop
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	48000400 	.word	0x48000400
 800aa64:	48001c00 	.word	0x48001c00

0800aa68 <stimLib_dmaDeinit>:

void stimLib_dmaDeinit(void)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	af00      	add	r7, sp, #0
	HAL_DMA_DeInit(&hdma_adc1);
 800aa6c:	4806      	ldr	r0, [pc, #24]	; (800aa88 <stimLib_dmaDeinit+0x20>)
 800aa6e:	f7fa faff 	bl	8005070 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 800aa72:	4806      	ldr	r0, [pc, #24]	; (800aa8c <stimLib_dmaDeinit+0x24>)
 800aa74:	f7fa fafc 	bl	8005070 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim2_ch2_ch4);
 800aa78:	4805      	ldr	r0, [pc, #20]	; (800aa90 <stimLib_dmaDeinit+0x28>)
 800aa7a:	f7fa faf9 	bl	8005070 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim2_ch3);
 800aa7e:	4805      	ldr	r0, [pc, #20]	; (800aa94 <stimLib_dmaDeinit+0x2c>)
 800aa80:	f7fa faf6 	bl	8005070 <HAL_DMA_DeInit>
}
 800aa84:	bf00      	nop
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	200001d4 	.word	0x200001d4
 800aa8c:	2000021c 	.word	0x2000021c
 800aa90:	20000348 	.word	0x20000348
 800aa94:	20000390 	.word	0x20000390

0800aa98 <stimLib_tim1_Deinit>:

void stimLib_tim1_Deinit(void)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_DeInit(&htim1);
 800aa9c:	4802      	ldr	r0, [pc, #8]	; (800aaa8 <stimLib_tim1_Deinit+0x10>)
 800aa9e:	f7fc fccc 	bl	800743a <HAL_TIM_PWM_DeInit>
}
 800aaa2:	bf00      	nop
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000264 	.word	0x20000264

0800aaac <stimLib_tim2_Deinit>:

void stimLib_tim2_Deinit(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_DeInit(&htim2);
 800aab0:	4802      	ldr	r0, [pc, #8]	; (800aabc <stimLib_tim2_Deinit+0x10>)
 800aab2:	f7fc fcc2 	bl	800743a <HAL_TIM_PWM_DeInit>
}
 800aab6:	bf00      	nop
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	200002b0 	.word	0x200002b0

0800aac0 <stimLib_tim6_Deinit>:

void stimLib_tim6_Deinit(void)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_DeInit(&htim6);
 800aac4:	4802      	ldr	r0, [pc, #8]	; (800aad0 <stimLib_tim6_Deinit+0x10>)
 800aac6:	f7fc fcb8 	bl	800743a <HAL_TIM_PWM_DeInit>
}
 800aaca:	bf00      	nop
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	200002fc 	.word	0x200002fc

0800aad4 <stimLib_adc1_Deinit>:

void stimLib_adc1_Deinit(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 800aad8:	4802      	ldr	r0, [pc, #8]	; (800aae4 <stimLib_adc1_Deinit+0x10>)
 800aada:	f7f8 fb1f 	bl	800311c <HAL_ADC_DeInit>
}
 800aade:	bf00      	nop
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	2000010c 	.word	0x2000010c

0800aae8 <stimLib_adc2_Deinit>:

void stimLib_adc2_Deinit(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc2);
 800aaec:	4802      	ldr	r0, [pc, #8]	; (800aaf8 <stimLib_adc2_Deinit+0x10>)
 800aaee:	f7f8 fb15 	bl	800311c <HAL_ADC_DeInit>
}
 800aaf2:	bf00      	nop
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20000170 	.word	0x20000170

0800aafc <stimLib_adc_mspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED = 0;

/* BASE TIMER MSP INIT :: NON APPLICATION JUST STIMLIB */
void stimLib_adc_mspInit(ADC_HandleTypeDef *hadc)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b08c      	sub	sp, #48	; 0x30
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800ab04:	f107 031c 	add.w	r3, r7, #28
 800ab08:	2200      	movs	r2, #0
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	605a      	str	r2, [r3, #4]
 800ab0e:	609a      	str	r2, [r3, #8]
 800ab10:	60da      	str	r2, [r3, #12]
 800ab12:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (hadc->Instance == ADC1)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a5e      	ldr	r2, [pc, #376]	; (800ac94 <stimLib_adc_mspInit+0x198>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d15c      	bne.n	800abd8 <stimLib_adc_mspInit+0xdc>
	{
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		HAL_RCC_ADC_CLK_ENABLED++;
 800ab1e:	4b5e      	ldr	r3, [pc, #376]	; (800ac98 <stimLib_adc_mspInit+0x19c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3301      	adds	r3, #1
 800ab24:	4a5c      	ldr	r2, [pc, #368]	; (800ac98 <stimLib_adc_mspInit+0x19c>)
 800ab26:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_ADC_CLK_ENABLED == 1)
 800ab28:	4b5b      	ldr	r3, [pc, #364]	; (800ac98 <stimLib_adc_mspInit+0x19c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d10b      	bne.n	800ab48 <stimLib_adc_mspInit+0x4c>
		{
			__HAL_RCC_ADC_CLK_ENABLE();
 800ab30:	4b5a      	ldr	r3, [pc, #360]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800ab32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab34:	4a59      	ldr	r2, [pc, #356]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800ab36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ab3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab3c:	4b57      	ldr	r3, [pc, #348]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800ab3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab44:	61bb      	str	r3, [r7, #24]
 800ab46:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800ab48:	4b54      	ldr	r3, [pc, #336]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800ab4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab4c:	4a53      	ldr	r2, [pc, #332]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800ab4e:	f043 0301 	orr.w	r3, r3, #1
 800ab52:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab54:	4b51      	ldr	r3, [pc, #324]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800ab56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	617b      	str	r3, [r7, #20]
 800ab5e:	697b      	ldr	r3, [r7, #20]
		/**ADC1 GPIO Configuration
		 PA4     ------> ADC1_IN9
		 */
		GPIO_InitStruct.Pin = STIM_LIB_STEP_UP_FEEDBACK_PIN;
 800ab60:	2310      	movs	r3, #16
 800ab62:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800ab64:	230b      	movs	r3, #11
 800ab66:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(STIM_LIB_STEP_UP_FEEDBACK_GPIO_PORT, &GPIO_InitStruct);
 800ab6c:	f107 031c 	add.w	r3, r7, #28
 800ab70:	4619      	mov	r1, r3
 800ab72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab76:	f7fa fccb 	bl	8005510 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA2_Channel3;
 800ab7a:	4b49      	ldr	r3, [pc, #292]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800ab7c:	4a49      	ldr	r2, [pc, #292]	; (800aca4 <stimLib_adc_mspInit+0x1a8>)
 800ab7e:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_0;
 800ab80:	4b47      	ldr	r3, [pc, #284]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ab86:	4b46      	ldr	r3, [pc, #280]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab8c:	4b44      	ldr	r3, [pc, #272]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ab92:	4b43      	ldr	r3, [pc, #268]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800ab94:	2280      	movs	r2, #128	; 0x80
 800ab96:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ab98:	4b41      	ldr	r3, [pc, #260]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800ab9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab9e:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800aba0:	4b3f      	ldr	r3, [pc, #252]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800aba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aba6:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800aba8:	4b3d      	ldr	r3, [pc, #244]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800abaa:	2220      	movs	r2, #32
 800abac:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800abae:	4b3c      	ldr	r3, [pc, #240]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800abb4:	483a      	ldr	r0, [pc, #232]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800abb6:	f7fa f9a3 	bl	8004f00 <HAL_DMA_Init>
		{
			//Error_Handler();
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a38      	ldr	r2, [pc, #224]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800abbe:	64da      	str	r2, [r3, #76]	; 0x4c
 800abc0:	4a37      	ldr	r2, [pc, #220]	; (800aca0 <stimLib_adc_mspInit+0x1a4>)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6293      	str	r3, [r2, #40]	; 0x28

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800abc6:	2200      	movs	r2, #0
 800abc8:	2101      	movs	r1, #1
 800abca:	2012      	movs	r0, #18
 800abcc:	f7fa f953 	bl	8004e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800abd0:	2012      	movs	r0, #18
 800abd2:	f7fa f96c 	bl	8004eae <HAL_NVIC_EnableIRQ>

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc2);

	}

}
 800abd6:	e058      	b.n	800ac8a <stimLib_adc_mspInit+0x18e>
	else if (hadc->Instance == ADC2)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a32      	ldr	r2, [pc, #200]	; (800aca8 <stimLib_adc_mspInit+0x1ac>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d153      	bne.n	800ac8a <stimLib_adc_mspInit+0x18e>
		HAL_RCC_ADC_CLK_ENABLED++;
 800abe2:	4b2d      	ldr	r3, [pc, #180]	; (800ac98 <stimLib_adc_mspInit+0x19c>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3301      	adds	r3, #1
 800abe8:	4a2b      	ldr	r2, [pc, #172]	; (800ac98 <stimLib_adc_mspInit+0x19c>)
 800abea:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_ADC_CLK_ENABLED == 1)
 800abec:	4b2a      	ldr	r3, [pc, #168]	; (800ac98 <stimLib_adc_mspInit+0x19c>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d10b      	bne.n	800ac0c <stimLib_adc_mspInit+0x110>
			__HAL_RCC_ADC_CLK_ENABLE();
 800abf4:	4b29      	ldr	r3, [pc, #164]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800abf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abf8:	4a28      	ldr	r2, [pc, #160]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800abfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800abfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac00:	4b26      	ldr	r3, [pc, #152]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800ac02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac08:	613b      	str	r3, [r7, #16]
 800ac0a:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800ac0c:	4b23      	ldr	r3, [pc, #140]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800ac0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac10:	4a22      	ldr	r2, [pc, #136]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800ac12:	f043 0301 	orr.w	r3, r3, #1
 800ac16:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac18:	4b20      	ldr	r3, [pc, #128]	; (800ac9c <stimLib_adc_mspInit+0x1a0>)
 800ac1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac1c:	f003 0301 	and.w	r3, r3, #1
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = STIM_LIB_PEAK_DETECTION_R_PIN
 800ac24:	23c0      	movs	r3, #192	; 0xc0
 800ac26:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800ac28:	230b      	movs	r3, #11
 800ac2a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac30:	f107 031c 	add.w	r3, r7, #28
 800ac34:	4619      	mov	r1, r3
 800ac36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac3a:	f7fa fc69 	bl	8005510 <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA1_Channel2;
 800ac3e:	4b1b      	ldr	r3, [pc, #108]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac40:	4a1b      	ldr	r2, [pc, #108]	; (800acb0 <stimLib_adc_mspInit+0x1b4>)
 800ac42:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Request = DMA_REQUEST_0;
 800ac44:	4b19      	ldr	r3, [pc, #100]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac4a:	4b18      	ldr	r3, [pc, #96]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac50:	4b16      	ldr	r3, [pc, #88]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ac56:	4b15      	ldr	r3, [pc, #84]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac58:	2280      	movs	r2, #128	; 0x80
 800ac5a:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ac5c:	4b13      	ldr	r3, [pc, #76]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac62:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ac64:	4b11      	ldr	r3, [pc, #68]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac6a:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800ac6c:	4b0f      	ldr	r3, [pc, #60]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac6e:	2220      	movs	r2, #32
 800ac70:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800ac72:	4b0e      	ldr	r3, [pc, #56]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800ac78:	480c      	ldr	r0, [pc, #48]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac7a:	f7fa f941 	bl	8004f00 <HAL_DMA_Init>
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc2);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a0a      	ldr	r2, [pc, #40]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac82:	64da      	str	r2, [r3, #76]	; 0x4c
 800ac84:	4a09      	ldr	r2, [pc, #36]	; (800acac <stimLib_adc_mspInit+0x1b0>)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6293      	str	r3, [r2, #40]	; 0x28
}
 800ac8a:	bf00      	nop
 800ac8c:	3730      	adds	r7, #48	; 0x30
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	50040000 	.word	0x50040000
 800ac98:	2000065c 	.word	0x2000065c
 800ac9c:	40021000 	.word	0x40021000
 800aca0:	200001d4 	.word	0x200001d4
 800aca4:	40020430 	.word	0x40020430
 800aca8:	50040100 	.word	0x50040100
 800acac:	2000021c 	.word	0x2000021c
 800acb0:	4002001c 	.word	0x4002001c

0800acb4 <stimLib_tim_pwmmspInit>:

void stimLib_tim_pwmmspInit(TIM_HandleTypeDef *htim_pwm)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
	if (htim_pwm->Instance == TIM1)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a44      	ldr	r2, [pc, #272]	; (800add4 <stimLib_tim_pwmmspInit+0x120>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d114      	bne.n	800acf0 <stimLib_tim_pwmmspInit+0x3c>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 800acc6:	4b44      	ldr	r3, [pc, #272]	; (800add8 <stimLib_tim_pwmmspInit+0x124>)
 800acc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acca:	4a43      	ldr	r2, [pc, #268]	; (800add8 <stimLib_tim_pwmmspInit+0x124>)
 800accc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800acd0:	6613      	str	r3, [r2, #96]	; 0x60
 800acd2:	4b41      	ldr	r3, [pc, #260]	; (800add8 <stimLib_tim_pwmmspInit+0x124>)
 800acd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acda:	60fb      	str	r3, [r7, #12]
 800acdc:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 800acde:	2200      	movs	r2, #0
 800ace0:	2102      	movs	r1, #2
 800ace2:	2019      	movs	r0, #25
 800ace4:	f7fa f8c7 	bl	8004e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800ace8:	2019      	movs	r0, #25
 800acea:	f7fa f8e0 	bl	8004eae <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}

}
 800acee:	e06c      	b.n	800adca <stimLib_tim_pwmmspInit+0x116>
	else if (htim_pwm->Instance == TIM2)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf8:	d167      	bne.n	800adca <stimLib_tim_pwmmspInit+0x116>
		__HAL_RCC_TIM2_CLK_ENABLE();
 800acfa:	4b37      	ldr	r3, [pc, #220]	; (800add8 <stimLib_tim_pwmmspInit+0x124>)
 800acfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acfe:	4a36      	ldr	r2, [pc, #216]	; (800add8 <stimLib_tim_pwmmspInit+0x124>)
 800ad00:	f043 0301 	orr.w	r3, r3, #1
 800ad04:	6593      	str	r3, [r2, #88]	; 0x58
 800ad06:	4b34      	ldr	r3, [pc, #208]	; (800add8 <stimLib_tim_pwmmspInit+0x124>)
 800ad08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	60bb      	str	r3, [r7, #8]
 800ad10:	68bb      	ldr	r3, [r7, #8]
		hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 800ad12:	4b32      	ldr	r3, [pc, #200]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad14:	4a32      	ldr	r2, [pc, #200]	; (800ade0 <stimLib_tim_pwmmspInit+0x12c>)
 800ad16:	601a      	str	r2, [r3, #0]
		hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 800ad18:	4b30      	ldr	r3, [pc, #192]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad1a:	2204      	movs	r2, #4
 800ad1c:	605a      	str	r2, [r3, #4]
		hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad1e:	4b2f      	ldr	r3, [pc, #188]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad20:	2210      	movs	r2, #16
 800ad22:	609a      	str	r2, [r3, #8]
		hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad24:	4b2d      	ldr	r3, [pc, #180]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	60da      	str	r2, [r3, #12]
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800ad2a:	4b2c      	ldr	r3, [pc, #176]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad2c:	2280      	movs	r2, #128	; 0x80
 800ad2e:	611a      	str	r2, [r3, #16]
		hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ad30:	4b2a      	ldr	r3, [pc, #168]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad36:	615a      	str	r2, [r3, #20]
		hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ad38:	4b28      	ldr	r3, [pc, #160]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad3e:	619a      	str	r2, [r3, #24]
		hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 800ad40:	4b26      	ldr	r3, [pc, #152]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad42:	2220      	movs	r2, #32
 800ad44:	61da      	str	r2, [r3, #28]
		hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ad46:	4b25      	ldr	r3, [pc, #148]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad48:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ad4c:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800ad4e:	4823      	ldr	r0, [pc, #140]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad50:	f7fa f8d6 	bl	8004f00 <HAL_DMA_Init>
		__HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC2], hdma_tim2_ch2_ch4);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a21      	ldr	r2, [pc, #132]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad58:	629a      	str	r2, [r3, #40]	; 0x28
 800ad5a:	4a20      	ldr	r2, [pc, #128]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6293      	str	r3, [r2, #40]	; 0x28
		__HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC4], hdma_tim2_ch2_ch4);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a1e      	ldr	r2, [pc, #120]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad64:	631a      	str	r2, [r3, #48]	; 0x30
 800ad66:	4a1d      	ldr	r2, [pc, #116]	; (800addc <stimLib_tim_pwmmspInit+0x128>)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6293      	str	r3, [r2, #40]	; 0x28
		hdma_tim2_ch3.Instance = DMA1_Channel1;
 800ad6c:	4b1d      	ldr	r3, [pc, #116]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800ad6e:	4a1e      	ldr	r2, [pc, #120]	; (800ade8 <stimLib_tim_pwmmspInit+0x134>)
 800ad70:	601a      	str	r2, [r3, #0]
		hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 800ad72:	4b1c      	ldr	r3, [pc, #112]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800ad74:	2204      	movs	r2, #4
 800ad76:	605a      	str	r2, [r3, #4]
		hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad78:	4b1a      	ldr	r3, [pc, #104]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800ad7a:	2210      	movs	r2, #16
 800ad7c:	609a      	str	r2, [r3, #8]
		hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad7e:	4b19      	ldr	r3, [pc, #100]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	60da      	str	r2, [r3, #12]
		hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800ad84:	4b17      	ldr	r3, [pc, #92]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800ad86:	2280      	movs	r2, #128	; 0x80
 800ad88:	611a      	str	r2, [r3, #16]
		hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ad8a:	4b16      	ldr	r3, [pc, #88]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800ad8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad90:	615a      	str	r2, [r3, #20]
		hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ad92:	4b14      	ldr	r3, [pc, #80]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800ad94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad98:	619a      	str	r2, [r3, #24]
		hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 800ad9a:	4b12      	ldr	r3, [pc, #72]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800ad9c:	2220      	movs	r2, #32
 800ad9e:	61da      	str	r2, [r3, #28]
		hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ada0:	4b10      	ldr	r3, [pc, #64]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800ada2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ada6:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800ada8:	480e      	ldr	r0, [pc, #56]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800adaa:	f7fa f8a9 	bl	8004f00 <HAL_DMA_Init>
		__HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC3], hdma_tim2_ch3);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a0c      	ldr	r2, [pc, #48]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800adb2:	62da      	str	r2, [r3, #44]	; 0x2c
 800adb4:	4a0b      	ldr	r2, [pc, #44]	; (800ade4 <stimLib_tim_pwmmspInit+0x130>)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6293      	str	r3, [r2, #40]	; 0x28
		HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800adba:	2200      	movs	r2, #0
 800adbc:	2102      	movs	r1, #2
 800adbe:	201c      	movs	r0, #28
 800adc0:	f7fa f859 	bl	8004e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800adc4:	201c      	movs	r0, #28
 800adc6:	f7fa f872 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 800adca:	bf00      	nop
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	40012c00 	.word	0x40012c00
 800add8:	40021000 	.word	0x40021000
 800addc:	20000348 	.word	0x20000348
 800ade0:	40020080 	.word	0x40020080
 800ade4:	20000390 	.word	0x20000390
 800ade8:	40020008 	.word	0x40020008

0800adec <stimLib_tim_basemspInit>:

void stimLib_tim_basemspInit(TIM_HandleTypeDef *htim_base)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM6)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a0d      	ldr	r2, [pc, #52]	; (800ae30 <stimLib_tim_basemspInit+0x44>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d113      	bne.n	800ae26 <stimLib_tim_basemspInit+0x3a>
	{
		__HAL_RCC_TIM6_CLK_ENABLE();
 800adfe:	4b0d      	ldr	r3, [pc, #52]	; (800ae34 <stimLib_tim_basemspInit+0x48>)
 800ae00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae02:	4a0c      	ldr	r2, [pc, #48]	; (800ae34 <stimLib_tim_basemspInit+0x48>)
 800ae04:	f043 0310 	orr.w	r3, r3, #16
 800ae08:	6593      	str	r3, [r2, #88]	; 0x58
 800ae0a:	4b0a      	ldr	r3, [pc, #40]	; (800ae34 <stimLib_tim_basemspInit+0x48>)
 800ae0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae0e:	f003 0310 	and.w	r3, r3, #16
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 800ae16:	2200      	movs	r2, #0
 800ae18:	2102      	movs	r1, #2
 800ae1a:	2036      	movs	r0, #54	; 0x36
 800ae1c:	f7fa f82b 	bl	8004e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800ae20:	2036      	movs	r0, #54	; 0x36
 800ae22:	f7fa f844 	bl	8004eae <HAL_NVIC_EnableIRQ>
	}
}
 800ae26:	bf00      	nop
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	40001000 	.word	0x40001000
 800ae34:	40021000 	.word	0x40021000

0800ae38 <stimLib_tim_msppostInit>:

/* TIMER PWM MSP INIT :: NVIC and DMA */
/* TIMER CONTROL PIN MSP INIT */
void stimLib_tim_msppostInit(TIM_HandleTypeDef *htim)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b08a      	sub	sp, #40	; 0x28
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800ae40:	f107 0314 	add.w	r3, r7, #20
 800ae44:	2200      	movs	r2, #0
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	605a      	str	r2, [r3, #4]
 800ae4a:	609a      	str	r2, [r3, #8]
 800ae4c:	60da      	str	r2, [r3, #12]
 800ae4e:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (htim->Instance == TIM1)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a23      	ldr	r2, [pc, #140]	; (800aee4 <stimLib_tim_msppostInit+0xac>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d11e      	bne.n	800ae98 <stimLib_tim_msppostInit+0x60>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800ae5a:	4b23      	ldr	r3, [pc, #140]	; (800aee8 <stimLib_tim_msppostInit+0xb0>)
 800ae5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae5e:	4a22      	ldr	r2, [pc, #136]	; (800aee8 <stimLib_tim_msppostInit+0xb0>)
 800ae60:	f043 0301 	orr.w	r3, r3, #1
 800ae64:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae66:	4b20      	ldr	r3, [pc, #128]	; (800aee8 <stimLib_tim_msppostInit+0xb0>)
 800ae68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6a:	f003 0301 	and.w	r3, r3, #1
 800ae6e:	613b      	str	r3, [r7, #16]
 800ae70:	693b      	ldr	r3, [r7, #16]
		/**TIM1 GPIO Configuration
		 PA8     ------> TIM1_CH1
		 */
		GPIO_InitStruct.Pin = STIM_LIB_STEP_UP_SW_PIN;
 800ae72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae76:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae80:	2300      	movs	r3, #0
 800ae82:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ae84:	2301      	movs	r3, #1
 800ae86:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(STIM_LIB_STEP_UP_SW_GPIO_PORT, &GPIO_InitStruct);
 800ae88:	f107 0314 	add.w	r3, r7, #20
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae92:	f7fa fb3d 	bl	8005510 <HAL_GPIO_Init>
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	}
}
 800ae96:	e021      	b.n	800aedc <stimLib_tim_msppostInit+0xa4>
	else if (htim->Instance == TIM2)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea0:	d11c      	bne.n	800aedc <stimLib_tim_msppostInit+0xa4>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800aea2:	4b11      	ldr	r3, [pc, #68]	; (800aee8 <stimLib_tim_msppostInit+0xb0>)
 800aea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aea6:	4a10      	ldr	r2, [pc, #64]	; (800aee8 <stimLib_tim_msppostInit+0xb0>)
 800aea8:	f043 0301 	orr.w	r3, r3, #1
 800aeac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aeae:	4b0e      	ldr	r3, [pc, #56]	; (800aee8 <stimLib_tim_msppostInit+0xb0>)
 800aeb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	60fb      	str	r3, [r7, #12]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = STIM_LIB_STIM_ANODE_PIN
 800aeba:	232e      	movs	r3, #46	; 0x2e
 800aebc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aebe:	2302      	movs	r3, #2
 800aec0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aec6:	2303      	movs	r3, #3
 800aec8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800aeca:	2301      	movs	r3, #1
 800aecc:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aece:	f107 0314 	add.w	r3, r7, #20
 800aed2:	4619      	mov	r1, r3
 800aed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aed8:	f7fa fb1a 	bl	8005510 <HAL_GPIO_Init>
}
 800aedc:	bf00      	nop
 800aede:	3728      	adds	r7, #40	; 0x28
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	40012c00 	.word	0x40012c00
 800aee8:	40021000 	.word	0x40021000

0800aeec <stimLib_stateGet>:
{ 0, 0, 0, NULL }, /* 10Hz, Pulse Width 1ms, DAC 1, no callback */

{ false, false, 0, false, 0, false } };

stim_lib_state_t stimLib_stateGet()
{
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0
	return STIM_LIB_CUR_STATE;
 800aef0:	4b03      	ldr	r3, [pc, #12]	; (800af00 <stimLib_stateGet+0x14>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	20000660 	.word	0x20000660

0800af04 <stimLib_stateSet>:

bool stimLib_stateSet(stim_lib_state_t set_state)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	4603      	mov	r3, r0
 800af0c:	71fb      	strb	r3, [r7, #7]
	bool rslt = false;
 800af0e:	2300      	movs	r3, #0
 800af10:	73fb      	strb	r3, [r7, #15]

	if (STIM_LIB_CUR_STATE != set_state)
 800af12:	4b33      	ldr	r3, [pc, #204]	; (800afe0 <stimLib_stateSet+0xdc>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	79fa      	ldrb	r2, [r7, #7]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d059      	beq.n	800afd0 <stimLib_stateSet+0xcc>
	{
		switch (set_state)
 800af1c:	79fb      	ldrb	r3, [r7, #7]
 800af1e:	2b05      	cmp	r3, #5
 800af20:	d844      	bhi.n	800afac <stimLib_stateSet+0xa8>
 800af22:	a201      	add	r2, pc, #4	; (adr r2, 800af28 <stimLib_stateSet+0x24>)
 800af24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af28:	0800af41 	.word	0x0800af41
 800af2c:	0800af4f 	.word	0x0800af4f
 800af30:	0800af75 	.word	0x0800af75
 800af34:	0800af8b 	.word	0x0800af8b
 800af38:	0800af99 	.word	0x0800af99
 800af3c:	0800afa7 	.word	0x0800afa7
		{
		case stim_lib_state_uninitialized:
			if (STIM_LIB_CUR_STATE == stim_lib_state_idle)
 800af40:	4b27      	ldr	r3, [pc, #156]	; (800afe0 <stimLib_stateSet+0xdc>)
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d134      	bne.n	800afb2 <stimLib_stateSet+0xae>
			{
				rslt = true;
 800af48:	2301      	movs	r3, #1
 800af4a:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800af4c:	e031      	b.n	800afb2 <stimLib_stateSet+0xae>

		case stim_lib_state_idle:
			if (STIM_LIB_CUR_STATE == stim_lib_state_uninitialized
 800af4e:	4b24      	ldr	r3, [pc, #144]	; (800afe0 <stimLib_stateSet+0xdc>)
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00b      	beq.n	800af6e <stimLib_stateSet+0x6a>
					|| STIM_LIB_CUR_STATE == stim_lib_state_session_idle
 800af56:	4b22      	ldr	r3, [pc, #136]	; (800afe0 <stimLib_stateSet+0xdc>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d007      	beq.n	800af6e <stimLib_stateSet+0x6a>
					|| STIM_LIB_CUR_STATE == stim_lib_state_stimulating
 800af5e:	4b20      	ldr	r3, [pc, #128]	; (800afe0 <stimLib_stateSet+0xdc>)
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	2b03      	cmp	r3, #3
 800af64:	d003      	beq.n	800af6e <stimLib_stateSet+0x6a>
					|| STIM_LIB_CUR_STATE == stim_lib_state_stim_stopping)
 800af66:	4b1e      	ldr	r3, [pc, #120]	; (800afe0 <stimLib_stateSet+0xdc>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b04      	cmp	r3, #4
 800af6c:	d123      	bne.n	800afb6 <stimLib_stateSet+0xb2>
			{
				rslt = true;
 800af6e:	2301      	movs	r3, #1
 800af70:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800af72:	e020      	b.n	800afb6 <stimLib_stateSet+0xb2>

		case stim_lib_state_session_idle:
			if (STIM_LIB_CUR_STATE == stim_lib_state_idle
 800af74:	4b1a      	ldr	r3, [pc, #104]	; (800afe0 <stimLib_stateSet+0xdc>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d003      	beq.n	800af84 <stimLib_stateSet+0x80>
					|| STIM_LIB_CUR_STATE == stim_lib_state_stim_stopping)
 800af7c:	4b18      	ldr	r3, [pc, #96]	; (800afe0 <stimLib_stateSet+0xdc>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	2b04      	cmp	r3, #4
 800af82:	d11a      	bne.n	800afba <stimLib_stateSet+0xb6>
			{
				rslt = true;
 800af84:	2301      	movs	r3, #1
 800af86:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800af88:	e017      	b.n	800afba <stimLib_stateSet+0xb6>

		case stim_lib_state_stimulating:
			if (STIM_LIB_CUR_STATE == stim_lib_state_session_idle)
 800af8a:	4b15      	ldr	r3, [pc, #84]	; (800afe0 <stimLib_stateSet+0xdc>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d115      	bne.n	800afbe <stimLib_stateSet+0xba>
			{
				rslt = true;
 800af92:	2301      	movs	r3, #1
 800af94:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800af96:	e012      	b.n	800afbe <stimLib_stateSet+0xba>

		case stim_lib_state_stim_stopping:
			if (STIM_LIB_CUR_STATE == stim_lib_state_stimulating)
 800af98:	4b11      	ldr	r3, [pc, #68]	; (800afe0 <stimLib_stateSet+0xdc>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	d110      	bne.n	800afc2 <stimLib_stateSet+0xbe>
			{
				rslt = true;
 800afa0:	2301      	movs	r3, #1
 800afa2:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800afa4:	e00d      	b.n	800afc2 <stimLib_stateSet+0xbe>

		case stim_lib_state_error:
			rslt = true;
 800afa6:	2301      	movs	r3, #1
 800afa8:	73fb      	strb	r3, [r7, #15]
			break;
 800afaa:	e00b      	b.n	800afc4 <stimLib_stateSet+0xc0>

		default:
			rslt = false;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]
			break;
 800afb0:	e008      	b.n	800afc4 <stimLib_stateSet+0xc0>
			break;
 800afb2:	bf00      	nop
 800afb4:	e006      	b.n	800afc4 <stimLib_stateSet+0xc0>
			break;
 800afb6:	bf00      	nop
 800afb8:	e004      	b.n	800afc4 <stimLib_stateSet+0xc0>
			break;
 800afba:	bf00      	nop
 800afbc:	e002      	b.n	800afc4 <stimLib_stateSet+0xc0>
			break;
 800afbe:	bf00      	nop
 800afc0:	e000      	b.n	800afc4 <stimLib_stateSet+0xc0>
			break;
 800afc2:	bf00      	nop
		}

		if (rslt == true)
 800afc4:	7bfb      	ldrb	r3, [r7, #15]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d002      	beq.n	800afd0 <stimLib_stateSet+0xcc>
		{
			STIM_LIB_CUR_STATE = set_state;
 800afca:	4a05      	ldr	r2, [pc, #20]	; (800afe0 <stimLib_stateSet+0xdc>)
 800afcc:	79fb      	ldrb	r3, [r7, #7]
 800afce:	7013      	strb	r3, [r2, #0]
		}

	}

	return rslt;
 800afd0:	7bfb      	ldrb	r3, [r7, #15]

}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3714      	adds	r7, #20
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	20000660 	.word	0x20000660

0800afe4 <stimLib_stateSigParamSet>:

void stimLib_stateSigParamSet(stim_signal_cfg_t *cfg)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
	if (stimLib_signalParamCheck(cfg) == false)
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f889 	bl	800b104 <stimLib_signalParamCheck>
 800aff2:	4603      	mov	r3, r0
 800aff4:	f083 0301 	eor.w	r3, r3, #1
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	d110      	bne.n	800b020 <stimLib_stateSigParamSet+0x3c>
	{
		return;
	}

	STIM_LIB_STATE_SIG_FREQ = cfg->freq;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	781a      	ldrb	r2, [r3, #0]
 800b002:	4b09      	ldr	r3, [pc, #36]	; (800b028 <stimLib_stateSigParamSet+0x44>)
 800b004:	711a      	strb	r2, [r3, #4]
	STIM_LIB_STATE_SIG_PW = cfg->pulse_width;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	885a      	ldrh	r2, [r3, #2]
 800b00a:	4b07      	ldr	r3, [pc, #28]	; (800b028 <stimLib_stateSigParamSet+0x44>)
 800b00c:	80da      	strh	r2, [r3, #6]
	STIM_LIB_STATE_SIG_DEGREE = cfg->degree;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	791a      	ldrb	r2, [r3, #4]
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <stimLib_stateSigParamSet+0x44>)
 800b014:	721a      	strb	r2, [r3, #8]
	STIM_LIB_STATE_SIG_PEAK_DET_CALLBACK = cfg->peak_detect_callback;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	4a03      	ldr	r2, [pc, #12]	; (800b028 <stimLib_stateSigParamSet+0x44>)
 800b01c:	60d3      	str	r3, [r2, #12]
 800b01e:	e000      	b.n	800b022 <stimLib_stateSigParamSet+0x3e>
		return;
 800b020:	bf00      	nop
}
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	20000660 	.word	0x20000660

0800b02c <stimLib_stateTrgParamSet>:

void stimLib_stateTrgParamSet(stim_trg_cfg_t *cfg)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
	if (stimLib_triggerParamCheck(cfg) == false)
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f89d 	bl	800b174 <stimLib_triggerParamCheck>
 800b03a:	4603      	mov	r3, r0
 800b03c:	f083 0301 	eor.w	r3, r3, #1
 800b040:	b2db      	uxtb	r3, r3
 800b042:	2b00      	cmp	r3, #0
 800b044:	d118      	bne.n	800b078 <stimLib_stateTrgParamSet+0x4c>
	{
		return;
	}

	STIM_LIB_STATE_TRG_VOLT_PRESTART = cfg->volt_prestart;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	781a      	ldrb	r2, [r3, #0]
 800b04a:	4b0d      	ldr	r3, [pc, #52]	; (800b080 <stimLib_stateTrgParamSet+0x54>)
 800b04c:	741a      	strb	r2, [r3, #16]

	STIM_LIB_STATE_TRG_OUT_ENABLE = cfg->trg_out_enable;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	785a      	ldrb	r2, [r3, #1]
 800b052:	4b0b      	ldr	r3, [pc, #44]	; (800b080 <stimLib_stateTrgParamSet+0x54>)
 800b054:	745a      	strb	r2, [r3, #17]
	STIM_LIB_STATE_TRG_OUT_ACT_POL = cfg->trg_out_active_pol;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	789a      	ldrb	r2, [r3, #2]
 800b05a:	4b09      	ldr	r3, [pc, #36]	; (800b080 <stimLib_stateTrgParamSet+0x54>)
 800b05c:	749a      	strb	r2, [r3, #18]

	STIM_LIB_STATE_TRG_IN_ENABLE = cfg->trg_in_enable;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	78da      	ldrb	r2, [r3, #3]
 800b062:	4b07      	ldr	r3, [pc, #28]	; (800b080 <stimLib_stateTrgParamSet+0x54>)
 800b064:	74da      	strb	r2, [r3, #19]
	STIM_LIB_STATE_TRG_IN_ACT_POL = cfg->trg_in_active_pol;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	791a      	ldrb	r2, [r3, #4]
 800b06a:	4b05      	ldr	r3, [pc, #20]	; (800b080 <stimLib_stateTrgParamSet+0x54>)
 800b06c:	751a      	strb	r2, [r3, #20]
	STIM_LIB_STATE_TRG_IN_TOGGLED = cfg->trg_in_toggled;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	795a      	ldrb	r2, [r3, #5]
 800b072:	4b03      	ldr	r3, [pc, #12]	; (800b080 <stimLib_stateTrgParamSet+0x54>)
 800b074:	755a      	strb	r2, [r3, #21]
 800b076:	e000      	b.n	800b07a <stimLib_stateTrgParamSet+0x4e>
		return;
 800b078:	bf00      	nop

}
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	20000660 	.word	0x20000660

0800b084 <stimLib_stateSigParamCheck>:
		return false;
	}
}

bool stimLib_stateSigParamCheck(void)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	af00      	add	r7, sp, #0
	if (stimLib_signalParamCheck(&STIM_LIB_STATE_SIG) == true
 800b088:	4808      	ldr	r0, [pc, #32]	; (800b0ac <stimLib_stateSigParamCheck+0x28>)
 800b08a:	f000 f83b 	bl	800b104 <stimLib_signalParamCheck>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d007      	beq.n	800b0a4 <stimLib_stateSigParamCheck+0x20>
			&& stimLib_triggerParamCheck(&STIM_LIB_STATE_TRG) == true)
 800b094:	4806      	ldr	r0, [pc, #24]	; (800b0b0 <stimLib_stateSigParamCheck+0x2c>)
 800b096:	f000 f86d 	bl	800b174 <stimLib_triggerParamCheck>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <stimLib_stateSigParamCheck+0x20>
	{
		return true;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e000      	b.n	800b0a6 <stimLib_stateSigParamCheck+0x22>
	}
	else
	{
		return false;
 800b0a4:	2300      	movs	r3, #0
	}

}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	20000664 	.word	0x20000664
 800b0b0:	20000670 	.word	0x20000670

0800b0b4 <stimLib_stateParamClear>:

void stimLib_stateParamClear(void)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	af00      	add	r7, sp, #0
	STIM_LIB_STATE_SIG_FREQ = 0;
 800b0b8:	4b11      	ldr	r3, [pc, #68]	; (800b100 <stimLib_stateParamClear+0x4c>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	711a      	strb	r2, [r3, #4]
	STIM_LIB_STATE_SIG_PW = 0;
 800b0be:	4b10      	ldr	r3, [pc, #64]	; (800b100 <stimLib_stateParamClear+0x4c>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	80da      	strh	r2, [r3, #6]
	STIM_LIB_STATE_SIG_DEGREE = 0;
 800b0c4:	4b0e      	ldr	r3, [pc, #56]	; (800b100 <stimLib_stateParamClear+0x4c>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	721a      	strb	r2, [r3, #8]
	STIM_LIB_STATE_SIG_PEAK_DET_CALLBACK = NULL;
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <stimLib_stateParamClear+0x4c>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	60da      	str	r2, [r3, #12]

	STIM_LIB_STATE_TRG_VOLT_PRESTART = false;
 800b0d0:	4b0b      	ldr	r3, [pc, #44]	; (800b100 <stimLib_stateParamClear+0x4c>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	741a      	strb	r2, [r3, #16]
	STIM_LIB_STATE_TRG_OUT_ENABLE = false;
 800b0d6:	4b0a      	ldr	r3, [pc, #40]	; (800b100 <stimLib_stateParamClear+0x4c>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	745a      	strb	r2, [r3, #17]
	STIM_LIB_STATE_TRG_OUT_ACT_POL = 0;
 800b0dc:	4b08      	ldr	r3, [pc, #32]	; (800b100 <stimLib_stateParamClear+0x4c>)
 800b0de:	2200      	movs	r2, #0
 800b0e0:	749a      	strb	r2, [r3, #18]
	STIM_LIB_STATE_TRG_IN_ENABLE = false;
 800b0e2:	4b07      	ldr	r3, [pc, #28]	; (800b100 <stimLib_stateParamClear+0x4c>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	74da      	strb	r2, [r3, #19]
	STIM_LIB_STATE_TRG_IN_ACT_POL = 0;
 800b0e8:	4b05      	ldr	r3, [pc, #20]	; (800b100 <stimLib_stateParamClear+0x4c>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	751a      	strb	r2, [r3, #20]
	STIM_LIB_STATE_TRG_IN_TOGGLED = false;
 800b0ee:	4b04      	ldr	r3, [pc, #16]	; (800b100 <stimLib_stateParamClear+0x4c>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	755a      	strb	r2, [r3, #21]
}
 800b0f4:	bf00      	nop
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	20000660 	.word	0x20000660

0800b104 <stimLib_signalParamCheck>:
#define STIM_LIB_SIGNAL_DEGREE_MIN						0
#define STIM_LIB_SIGNAL_DEGREE_MAX						255
#define STIM_LIB_SIGNAL_DGREE_IS_VALID(param)			(param <= STIM_LIB_SIGNAL_DEGREE_MAX)				/* unsigned is always bigger than 0 */

bool stimLib_signalParamCheck(stim_signal_cfg_t *cfg)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
	if (cfg == NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <stimLib_signalParamCheck+0x12>
	{
		return false;
 800b112:	2300      	movs	r3, #0
 800b114:	e026      	b.n	800b164 <stimLib_signalParamCheck+0x60>
	}

	/* Base check */
	if (STIM_LIB_SIGNAL_FREQ_IS_VALID(
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d021      	beq.n	800b162 <stimLib_signalParamCheck+0x5e>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	2b3c      	cmp	r3, #60	; 0x3c
 800b124:	d81d      	bhi.n	800b162 <stimLib_signalParamCheck+0x5e>
			cfg->freq) && STIM_LIB_SIGNAL_PW_IS_VALID(cfg->pulse_width) && STIM_LIB_SIGNAL_DGREE_IS_VALID(cfg->degree))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	885b      	ldrh	r3, [r3, #2]
 800b12a:	2b63      	cmp	r3, #99	; 0x63
 800b12c:	d919      	bls.n	800b162 <stimLib_signalParamCheck+0x5e>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	885b      	ldrh	r3, [r3, #2]
 800b132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b136:	d814      	bhi.n	800b162 <stimLib_signalParamCheck+0x5e>
	{
		/* Step check of pulse width */
		cfg->pulse_width = (cfg->pulse_width / STIM_LIB_SIGNAL_PW_STEP)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	885b      	ldrh	r3, [r3, #2]
 800b13c:	4a0c      	ldr	r2, [pc, #48]	; (800b170 <stimLib_signalParamCheck+0x6c>)
 800b13e:	fba2 2303 	umull	r2, r3, r2, r3
 800b142:	095b      	lsrs	r3, r3, #5
 800b144:	b29b      	uxth	r3, r3
 800b146:	461a      	mov	r2, r3
 800b148:	0092      	lsls	r2, r2, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	461a      	mov	r2, r3
 800b14e:	0091      	lsls	r1, r2, #2
 800b150:	461a      	mov	r2, r3
 800b152:	460b      	mov	r3, r1
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	b29a      	uxth	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	805a      	strh	r2, [r3, #2]
				* STIM_LIB_SIGNAL_PW_STEP;

		return true;
 800b15e:	2301      	movs	r3, #1
 800b160:	e000      	b.n	800b164 <stimLib_signalParamCheck+0x60>
	}

	return false;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	51eb851f 	.word	0x51eb851f

0800b174 <stimLib_triggerParamCheck>:

bool stimLib_triggerParamCheck(stim_trg_cfg_t *cfg)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	if (cfg == NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d101      	bne.n	800b186 <stimLib_triggerParamCheck+0x12>
	{
		return false;
 800b182:	2300      	movs	r3, #0
 800b184:	e000      	b.n	800b188 <stimLib_triggerParamCheck+0x14>
	}

	return true;
 800b186:	2301      	movs	r3, #1
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <stimLib_paramSetting>:

bool stimLib_paramSetting(void)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
	bool rslt;

	rslt = stimLib_stimPulseSetiing();
 800b19a:	f000 f83f 	bl	800b21c <stimLib_stimPulseSetiing>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	71fb      	strb	r3, [r7, #7]

	if (rslt == true)
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <stimLib_paramSetting+0x18>
	{
		stimLib_paramTrgSettingRaw();
 800b1a8:	f000 f90e 	bl	800b3c8 <stimLib_paramTrgSettingRaw>
	}

	return rslt;
 800b1ac:	79fb      	ldrb	r3, [r7, #7]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <stimLib_paramClear>:

void stimLib_paramClear(void)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	af00      	add	r7, sp, #0
	stimLib_paramTrgResettingRaw();
 800b1ba:	f000 f97d 	bl	800b4b8 <stimLib_paramTrgResettingRaw>

	/* State clear */
	stimLib_stateParamClear();
 800b1be:	f7ff ff79 	bl	800b0b4 <stimLib_stateParamClear>

	/* ST parameter clear :: NOT YET */
}
 800b1c2:	bf00      	nop
 800b1c4:	bd80      	pop	{r7, pc}
	...

0800b1c8 <stimLib_stimPulseStart>:

void stimLib_stimPulseStart(void)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	af00      	add	r7, sp, #0
	stimLib_pulseConfigRaw();
 800b1cc:	f000 f97c 	bl	800b4c8 <stimLib_pulseConfigRaw>
	stimLib_stimStartRaw();
 800b1d0:	f000 f9be 	bl	800b550 <stimLib_stimStartRaw>
	if (STIM_LIB_STATE_TRG_VOLT_PRESTART == false && STIM_LIB_STEPUP_IS_STARTED() == false)
 800b1d4:	4b07      	ldr	r3, [pc, #28]	; (800b1f4 <stimLib_stimPulseStart+0x2c>)
 800b1d6:	7c1b      	ldrb	r3, [r3, #16]
 800b1d8:	f083 0301 	eor.w	r3, r3, #1
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d005      	beq.n	800b1ee <stimLib_stimPulseStart+0x26>
 800b1e2:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <stimLib_stimPulseStart+0x30>)
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d001      	beq.n	800b1ee <stimLib_stimPulseStart+0x26>
	{
		stimLib_stepupStart();
 800b1ea:	f000 fcc3 	bl	800bb74 <stimLib_stepupStart>
	}
}
 800b1ee:	bf00      	nop
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20000660 	.word	0x20000660
 800b1f8:	2000069c 	.word	0x2000069c

0800b1fc <stimLib_stimPulseStop>:

void stimLib_stimPulseStop(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
	if (stimLib_stateGet() == stim_lib_state_stim_stopping)
 800b200:	f7ff fe74 	bl	800aeec <stimLib_stateGet>
 800b204:	4603      	mov	r3, r0
 800b206:	2b04      	cmp	r3, #4
 800b208:	d106      	bne.n	800b218 <stimLib_stimPulseStop+0x1c>
	{
		stimLib_stimStopRaw();
 800b20a:	f000 f9db 	bl	800b5c4 <stimLib_stimStopRaw>

		/* To save pulst start time */
		stimLib_stimPulseSetiing();
 800b20e:	f000 f805 	bl	800b21c <stimLib_stimPulseSetiing>

		stimLib_stateSet(stim_lib_state_session_idle);
 800b212:	2002      	movs	r0, #2
 800b214:	f7ff fe76 	bl	800af04 <stimLib_stateSet>
	}
}
 800b218:	bf00      	nop
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <stimLib_stimPulseSetiing>:

bool stimLib_stimPulseSetiing(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
	return stimLib_paramPulseSettingRaw();
 800b220:	f000 f804 	bl	800b22c <stimLib_paramPulseSettingRaw>
 800b224:	4603      	mov	r3, r0
}
 800b226:	4618      	mov	r0, r3
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <stimLib_paramPulseSettingRaw>:
volatile uint32_t gStimLib_dischgDma[2];
volatile uint32_t gStimLIb_cathodeDma[2];


bool stimLib_paramPulseSettingRaw(void)
{
 800b22c:	b590      	push	{r4, r7, lr}
 800b22e:	b08b      	sub	sp, #44	; 0x2c
 800b230:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig =
 800b232:	f107 031c 	add.w	r3, r7, #28
 800b236:	2200      	movs	r2, #0
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	605a      	str	r2, [r3, #4]
 800b23c:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 800b23e:	463b      	mov	r3, r7
 800b240:	2200      	movs	r2, #0
 800b242:	601a      	str	r2, [r3, #0]
 800b244:	605a      	str	r2, [r3, #4]
 800b246:	609a      	str	r2, [r3, #8]
 800b248:	60da      	str	r2, [r3, #12]
 800b24a:	611a      	str	r2, [r3, #16]
 800b24c:	615a      	str	r2, [r3, #20]
 800b24e:	619a      	str	r2, [r3, #24]
	{ 0 };

	htim2.Instance = TIM2;
 800b250:	4b58      	ldr	r3, [pc, #352]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b256:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = STIM_LIB_SIGNAL_PSC_INPUT;
 800b258:	f7fb fa38 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800b25c:	4603      	mov	r3, r0
 800b25e:	4a56      	ldr	r2, [pc, #344]	; (800b3b8 <stimLib_paramPulseSettingRaw+0x18c>)
 800b260:	fbb2 f3f3 	udiv	r3, r2, r3
 800b264:	461a      	mov	r2, r3
 800b266:	2350      	movs	r3, #80	; 0x50
 800b268:	fb93 f3f2 	sdiv	r3, r3, r2
 800b26c:	3b01      	subs	r3, #1
 800b26e:	461a      	mov	r2, r3
 800b270:	4b50      	ldr	r3, [pc, #320]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b272:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b274:	4b4f      	ldr	r3, [pc, #316]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b276:	2200      	movs	r2, #0
 800b278:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = STIM_LIB_SIGNAL_ARR_INPUT;
 800b27a:	f7fb fa27 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800b27e:	4604      	mov	r4, r0
 800b280:	f7fb fa24 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800b284:	4603      	mov	r3, r0
 800b286:	4a4c      	ldr	r2, [pc, #304]	; (800b3b8 <stimLib_paramPulseSettingRaw+0x18c>)
 800b288:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28c:	461a      	mov	r2, r3
 800b28e:	2350      	movs	r3, #80	; 0x50
 800b290:	fb93 f3f2 	sdiv	r3, r3, r2
 800b294:	fbb4 f3f3 	udiv	r3, r4, r3
 800b298:	4a48      	ldr	r2, [pc, #288]	; (800b3bc <stimLib_paramPulseSettingRaw+0x190>)
 800b29a:	7912      	ldrb	r2, [r2, #4]
 800b29c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	4b43      	ldr	r3, [pc, #268]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b2a6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b2a8:	4b42      	ldr	r3, [pc, #264]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b2ae:	4b41      	ldr	r3, [pc, #260]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b2b0:	2280      	movs	r2, #128	; 0x80
 800b2b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b2b4:	483f      	ldr	r0, [pc, #252]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b2b6:	f7fc f869 	bl	800738c <HAL_TIM_PWM_Init>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <stimLib_paramPulseSettingRaw+0x98>
	{
		return false;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	e072      	b.n	800b3aa <stimLib_paramPulseSettingRaw+0x17e>
	}
	/* MSP :: Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
	stimLib_tim_pwmmspInit(&htim2);
 800b2c4:	483b      	ldr	r0, [pc, #236]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b2c6:	f7ff fcf5 	bl	800acb4 <stimLib_tim_pwmmspInit>

	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800b2ca:	483a      	ldr	r0, [pc, #232]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b2cc:	f7fb fd1d 	bl	8006d0a <HAL_TIM_OC_Init>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <stimLib_paramPulseSettingRaw+0xae>
	{
		return false;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e067      	b.n	800b3aa <stimLib_paramPulseSettingRaw+0x17e>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800b2da:	2350      	movs	r3, #80	; 0x50
 800b2dc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800b2de:	2380      	movs	r3, #128	; 0x80
 800b2e0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b2e2:	f107 031c 	add.w	r3, r7, #28
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	4832      	ldr	r0, [pc, #200]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b2ea:	f7fd f935 	bl	8008558 <HAL_TIMEx_MasterConfigSynchronization>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <stimLib_paramPulseSettingRaw+0xcc>
	{
		return false;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	e058      	b.n	800b3aa <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 1 :: TRIGGER OUTPUT */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b2f8:	2360      	movs	r3, #96	; 0x60
 800b2fa:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_TRG_OUTPUT_PULSE_TIME;
 800b2fc:	4b2f      	ldr	r3, [pc, #188]	; (800b3bc <stimLib_paramPulseSettingRaw+0x190>)
 800b2fe:	88db      	ldrh	r3, [r3, #6]
 800b300:	330f      	adds	r3, #15
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	607b      	str	r3, [r7, #4]

	if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_low)
 800b306:	4b2d      	ldr	r3, [pc, #180]	; (800b3bc <stimLib_paramPulseSettingRaw+0x190>)
 800b308:	7c9b      	ldrb	r3, [r3, #18]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d102      	bne.n	800b314 <stimLib_paramPulseSettingRaw+0xe8>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800b30e:	2302      	movs	r3, #2
 800b310:	60bb      	str	r3, [r7, #8]
 800b312:	e005      	b.n	800b320 <stimLib_paramPulseSettingRaw+0xf4>
	}
	else if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_high)
 800b314:	4b29      	ldr	r3, [pc, #164]	; (800b3bc <stimLib_paramPulseSettingRaw+0x190>)
 800b316:	7c9b      	ldrb	r3, [r3, #18]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d101      	bne.n	800b320 <stimLib_paramPulseSettingRaw+0xf4>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b31c:	2300      	movs	r3, #0
 800b31e:	60bb      	str	r3, [r7, #8]
	}

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_TRG_OUT_TIM_CH) != HAL_OK)
 800b320:	463b      	mov	r3, r7
 800b322:	2200      	movs	r2, #0
 800b324:	4619      	mov	r1, r3
 800b326:	4823      	ldr	r0, [pc, #140]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b328:	f7fc fbe4 	bl	8007af4 <HAL_TIM_PWM_ConfigChannel>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d001      	beq.n	800b336 <stimLib_paramPulseSettingRaw+0x10a>
	{
		return stim_lib_stim_rsp_failed;
 800b332:	2301      	movs	r3, #1
 800b334:	e039      	b.n	800b3aa <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 2 :: ANODE PULSE */
	sConfigOC.Pulse = STIM_LIB_ANODE_PULSE_TIME;
 800b336:	4b21      	ldr	r3, [pc, #132]	; (800b3bc <stimLib_paramPulseSettingRaw+0x190>)
 800b338:	88db      	ldrh	r3, [r3, #6]
 800b33a:	330a      	adds	r3, #10
 800b33c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b33e:	2300      	movs	r3, #0
 800b340:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_ANODE_TIM_CH) != HAL_OK)
 800b342:	463b      	mov	r3, r7
 800b344:	2204      	movs	r2, #4
 800b346:	4619      	mov	r1, r3
 800b348:	481a      	ldr	r0, [pc, #104]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b34a:	f7fc fbd3 	bl	8007af4 <HAL_TIM_PWM_ConfigChannel>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d004      	beq.n	800b35e <stimLib_paramPulseSettingRaw+0x132>
	{
		TD_DEBUG_PRINT(("STIM_LIB: TIM2 CH2 Set failed\n"));
 800b354:	481a      	ldr	r0, [pc, #104]	; (800b3c0 <stimLib_paramPulseSettingRaw+0x194>)
 800b356:	f000 fdb5 	bl	800bec4 <puts>
		return false;
 800b35a:	2300      	movs	r3, #0
 800b35c:	e025      	b.n	800b3aa <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 3 :: CATHODE PULSE */
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800b35e:	2330      	movs	r3, #48	; 0x30
 800b360:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_CATHODE_PULSE_TIME1;
 800b362:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <stimLib_paramPulseSettingRaw+0x190>)
 800b364:	88db      	ldrh	r3, [r3, #6]
 800b366:	3314      	adds	r3, #20
 800b368:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_CATHODE_TIM_CH) != HAL_OK)
 800b36a:	463b      	mov	r3, r7
 800b36c:	2208      	movs	r2, #8
 800b36e:	4619      	mov	r1, r3
 800b370:	4810      	ldr	r0, [pc, #64]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b372:	f7fc fb45 	bl	8007a00 <HAL_TIM_OC_ConfigChannel>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d004      	beq.n	800b386 <stimLib_paramPulseSettingRaw+0x15a>
	{
		TD_DEBUG_PRINT(("STIM_LIB: TIM2 CH3 Set failed\n"));
 800b37c:	4811      	ldr	r0, [pc, #68]	; (800b3c4 <stimLib_paramPulseSettingRaw+0x198>)
 800b37e:	f000 fda1 	bl	800bec4 <puts>
		return false;
 800b382:	2300      	movs	r3, #0
 800b384:	e011      	b.n	800b3aa <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 4 :: DAC_ON_N PULSE or STIM DISCHARGE PULSE */
#if 1
	sConfigOC.Pulse = STIM_LIB_SIGNAL_GLICH_TIME;
 800b386:	2305      	movs	r3, #5
 800b388:	607b      	str	r3, [r7, #4]
#else
	sConfigOC.Pulse = STIM_LIB_DISCHARGE_PULSE_TIME1;
#endif
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_DAC_ON_TIM_CH) != HAL_OK)
 800b38a:	463b      	mov	r3, r7
 800b38c:	220c      	movs	r2, #12
 800b38e:	4619      	mov	r1, r3
 800b390:	4808      	ldr	r0, [pc, #32]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b392:	f7fc fb35 	bl	8007a00 <HAL_TIM_OC_ConfigChannel>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d001      	beq.n	800b3a0 <stimLib_paramPulseSettingRaw+0x174>
	{
		return false;
 800b39c:	2300      	movs	r3, #0
 800b39e:	e004      	b.n	800b3aa <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* MSP :: TIMER GPIO */
	//stimLib_tim_msppostInit(&htim2);
	HAL_TIM_GenerateEvent(&htim2, TIM_EVENTSOURCE_UPDATE);
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	4804      	ldr	r0, [pc, #16]	; (800b3b4 <stimLib_paramPulseSettingRaw+0x188>)
 800b3a4:	f7fc fcba 	bl	8007d1c <HAL_TIM_GenerateEvent>

	return true;
 800b3a8:	2301      	movs	r3, #1
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	372c      	adds	r7, #44	; 0x2c
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd90      	pop	{r4, r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	200002b0 	.word	0x200002b0
 800b3b8:	04c4b400 	.word	0x04c4b400
 800b3bc:	20000660 	.word	0x20000660
 800b3c0:	0800d4a8 	.word	0x0800d4a8
 800b3c4:	0800d4c8 	.word	0x0800d4c8

0800b3c8 <stimLib_paramTrgSettingRaw>:

void stimLib_paramTrgSettingRaw(void)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
	/* GPIO INIT */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800b3ce:	1d3b      	adds	r3, r7, #4
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	605a      	str	r2, [r3, #4]
 800b3d6:	609a      	str	r2, [r3, #8]
 800b3d8:	60da      	str	r2, [r3, #12]
 800b3da:	611a      	str	r2, [r3, #16]

	if(STIM_LIB_TRG_INPUT_IS_ENABLED() == false)
 800b3dc:	4b34      	ldr	r3, [pc, #208]	; (800b4b0 <stimLib_paramTrgSettingRaw+0xe8>)
 800b3de:	7cdb      	ldrb	r3, [r3, #19]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d161      	bne.n	800b4a8 <stimLib_paramTrgSettingRaw+0xe0>
		return;
	
	/* Configure GPIO pin : STIM_TRIGGER_INPUT_Pin */
	if (STIM_LIB_TRG_INPUT_IS_FALLING_EDGE())
 800b3e4:	4b32      	ldr	r3, [pc, #200]	; (800b4b0 <stimLib_paramTrgSettingRaw+0xe8>)
 800b3e6:	7d1b      	ldrb	r3, [r3, #20]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d113      	bne.n	800b414 <stimLib_paramTrgSettingRaw+0x4c>
 800b3ec:	4b30      	ldr	r3, [pc, #192]	; (800b4b0 <stimLib_paramTrgSettingRaw+0xe8>)
 800b3ee:	7d5b      	ldrb	r3, [r3, #21]
 800b3f0:	f083 0301 	eor.w	r3, r3, #1
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00c      	beq.n	800b414 <stimLib_paramTrgSettingRaw+0x4c>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b3fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800b402:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b404:	2300      	movs	r3, #0
 800b406:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 800b408:	1d3b      	adds	r3, r7, #4
 800b40a:	4619      	mov	r1, r3
 800b40c:	4829      	ldr	r0, [pc, #164]	; (800b4b4 <stimLib_paramTrgSettingRaw+0xec>)
 800b40e:	f7fa f87f 	bl	8005510 <HAL_GPIO_Init>
 800b412:	e040      	b.n	800b496 <stimLib_paramTrgSettingRaw+0xce>
	}
	else if (STIM_LIB_TRG_INPUT_IS_RISING_EDGE())
 800b414:	4b26      	ldr	r3, [pc, #152]	; (800b4b0 <stimLib_paramTrgSettingRaw+0xe8>)
 800b416:	7d1b      	ldrb	r3, [r3, #20]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d113      	bne.n	800b444 <stimLib_paramTrgSettingRaw+0x7c>
 800b41c:	4b24      	ldr	r3, [pc, #144]	; (800b4b0 <stimLib_paramTrgSettingRaw+0xe8>)
 800b41e:	7d5b      	ldrb	r3, [r3, #21]
 800b420:	f083 0301 	eor.w	r3, r3, #1
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00c      	beq.n	800b444 <stimLib_paramTrgSettingRaw+0x7c>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 800b42a:	2301      	movs	r3, #1
 800b42c:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b42e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800b432:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b434:	2300      	movs	r3, #0
 800b436:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 800b438:	1d3b      	adds	r3, r7, #4
 800b43a:	4619      	mov	r1, r3
 800b43c:	481d      	ldr	r0, [pc, #116]	; (800b4b4 <stimLib_paramTrgSettingRaw+0xec>)
 800b43e:	f7fa f867 	bl	8005510 <HAL_GPIO_Init>
 800b442:	e028      	b.n	800b496 <stimLib_paramTrgSettingRaw+0xce>
	}
	else if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_LOW())
 800b444:	4b1a      	ldr	r3, [pc, #104]	; (800b4b0 <stimLib_paramTrgSettingRaw+0xe8>)
 800b446:	7d1b      	ldrb	r3, [r3, #20]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d110      	bne.n	800b46e <stimLib_paramTrgSettingRaw+0xa6>
 800b44c:	4b18      	ldr	r3, [pc, #96]	; (800b4b0 <stimLib_paramTrgSettingRaw+0xe8>)
 800b44e:	7d5b      	ldrb	r3, [r3, #21]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00c      	beq.n	800b46e <stimLib_paramTrgSettingRaw+0xa6>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 800b454:	2301      	movs	r3, #1
 800b456:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800b458:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800b45c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 800b462:	1d3b      	adds	r3, r7, #4
 800b464:	4619      	mov	r1, r3
 800b466:	4813      	ldr	r0, [pc, #76]	; (800b4b4 <stimLib_paramTrgSettingRaw+0xec>)
 800b468:	f7fa f852 	bl	8005510 <HAL_GPIO_Init>
 800b46c:	e013      	b.n	800b496 <stimLib_paramTrgSettingRaw+0xce>
	}
	else if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_HIGH())
 800b46e:	4b10      	ldr	r3, [pc, #64]	; (800b4b0 <stimLib_paramTrgSettingRaw+0xe8>)
 800b470:	7d1b      	ldrb	r3, [r3, #20]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d10f      	bne.n	800b496 <stimLib_paramTrgSettingRaw+0xce>
 800b476:	4b0e      	ldr	r3, [pc, #56]	; (800b4b0 <stimLib_paramTrgSettingRaw+0xe8>)
 800b478:	7d5b      	ldrb	r3, [r3, #21]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00b      	beq.n	800b496 <stimLib_paramTrgSettingRaw+0xce>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 800b47e:	2301      	movs	r3, #1
 800b480:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800b482:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800b486:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b488:	2300      	movs	r3, #0
 800b48a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 800b48c:	1d3b      	adds	r3, r7, #4
 800b48e:	4619      	mov	r1, r3
 800b490:	4808      	ldr	r0, [pc, #32]	; (800b4b4 <stimLib_paramTrgSettingRaw+0xec>)
 800b492:	f7fa f83d 	bl	8005510 <HAL_GPIO_Init>
	}

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800b496:	2200      	movs	r2, #0
 800b498:	2100      	movs	r1, #0
 800b49a:	2006      	movs	r0, #6
 800b49c:	f7f9 fceb 	bl	8004e76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800b4a0:	2006      	movs	r0, #6
 800b4a2:	f7f9 fd04 	bl	8004eae <HAL_NVIC_EnableIRQ>
 800b4a6:	e000      	b.n	800b4aa <stimLib_paramTrgSettingRaw+0xe2>
		return;
 800b4a8:	bf00      	nop
}
 800b4aa:	3718      	adds	r7, #24
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	20000660 	.word	0x20000660
 800b4b4:	48000400 	.word	0x48000400

0800b4b8 <stimLib_paramTrgResettingRaw>:

void stimLib_paramTrgResettingRaw(void)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800b4bc:	2006      	movs	r0, #6
 800b4be:	f7f9 fd04 	bl	8004eca <HAL_NVIC_DisableIRQ>
}
 800b4c2:	bf00      	nop
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <stimLib_pulseConfigRaw>:

bool stimLib_pulseConfigRaw(void)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
	/* DAC_ON_N Control Time */
	STIM_LIB_DMA_DAC_ON_BUF[0] = STIM_LIB_DAC_CTRL_TIME0;
 800b4cc:	4b1c      	ldr	r3, [pc, #112]	; (800b540 <stimLib_pulseConfigRaw+0x78>)
 800b4ce:	88db      	ldrh	r3, [r3, #6]
 800b4d0:	3305      	adds	r3, #5
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	4b1b      	ldr	r3, [pc, #108]	; (800b544 <stimLib_pulseConfigRaw+0x7c>)
 800b4d6:	601a      	str	r2, [r3, #0]
	STIM_LIB_DMA_DAC_ON_BUF[1] = STIM_LIB_DAC_CTRL_TIME1;
 800b4d8:	4b19      	ldr	r3, [pc, #100]	; (800b540 <stimLib_pulseConfigRaw+0x78>)
 800b4da:	88db      	ldrh	r3, [r3, #6]
 800b4dc:	3319      	adds	r3, #25
 800b4de:	461a      	mov	r2, r3
 800b4e0:	4b18      	ldr	r3, [pc, #96]	; (800b544 <stimLib_pulseConfigRaw+0x7c>)
 800b4e2:	605a      	str	r2, [r3, #4]
	STIM_LIB_DMA_DAC_ON_BUF[2] = STIM_LIB_DAC_CTRL_TIME2;
 800b4e4:	4b16      	ldr	r3, [pc, #88]	; (800b540 <stimLib_pulseConfigRaw+0x78>)
 800b4e6:	88db      	ldrh	r3, [r3, #6]
 800b4e8:	330a      	adds	r3, #10
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	3305      	adds	r3, #5
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	4b14      	ldr	r3, [pc, #80]	; (800b544 <stimLib_pulseConfigRaw+0x7c>)
 800b4f2:	609a      	str	r2, [r3, #8]
	STIM_LIB_DMA_DAC_ON_BUF[3] = STIM_LIB_DAC_CTRL_TIME3;
 800b4f4:	4b13      	ldr	r3, [pc, #76]	; (800b544 <stimLib_pulseConfigRaw+0x7c>)
 800b4f6:	2205      	movs	r2, #5
 800b4f8:	60da      	str	r2, [r3, #12]

	/* DISCHARGE PULSE Control Time */
	STIM_LIB_DMA_DISCHG_BUF[0] = STIM_LIB_DISCHARGE_PULSE_TIME0;
 800b4fa:	4b11      	ldr	r3, [pc, #68]	; (800b540 <stimLib_pulseConfigRaw+0x78>)
 800b4fc:	88db      	ldrh	r3, [r3, #6]
 800b4fe:	f603 13dd 	addw	r3, r3, #2525	; 0x9dd
 800b502:	005b      	lsls	r3, r3, #1
 800b504:	461a      	mov	r2, r3
 800b506:	4b10      	ldr	r3, [pc, #64]	; (800b548 <stimLib_pulseConfigRaw+0x80>)
 800b508:	601a      	str	r2, [r3, #0]
	STIM_LIB_DMA_DISCHG_BUF[1] = STIM_LIB_DISCHARGE_PULSE_TIME1;
 800b50a:	4b0d      	ldr	r3, [pc, #52]	; (800b540 <stimLib_pulseConfigRaw+0x78>)
 800b50c:	88db      	ldrh	r3, [r3, #6]
 800b50e:	3319      	adds	r3, #25
 800b510:	005b      	lsls	r3, r3, #1
 800b512:	461a      	mov	r2, r3
 800b514:	4b0c      	ldr	r3, [pc, #48]	; (800b548 <stimLib_pulseConfigRaw+0x80>)
 800b516:	605a      	str	r2, [r3, #4]

	STIM_LIB_DMA_CATHODE_BUF[0] = STIM_LIB_CATHODE_PULSE_TIME0;
 800b518:	4b09      	ldr	r3, [pc, #36]	; (800b540 <stimLib_pulseConfigRaw+0x78>)
 800b51a:	88db      	ldrh	r3, [r3, #6]
 800b51c:	330f      	adds	r3, #15
 800b51e:	005b      	lsls	r3, r3, #1
 800b520:	461a      	mov	r2, r3
 800b522:	4b0a      	ldr	r3, [pc, #40]	; (800b54c <stimLib_pulseConfigRaw+0x84>)
 800b524:	601a      	str	r2, [r3, #0]
	STIM_LIB_DMA_CATHODE_BUF[1] = STIM_LIB_CATHODE_PULSE_TIME1;
 800b526:	4b06      	ldr	r3, [pc, #24]	; (800b540 <stimLib_pulseConfigRaw+0x78>)
 800b528:	88db      	ldrh	r3, [r3, #6]
 800b52a:	3314      	adds	r3, #20
 800b52c:	461a      	mov	r2, r3
 800b52e:	4b07      	ldr	r3, [pc, #28]	; (800b54c <stimLib_pulseConfigRaw+0x84>)
 800b530:	605a      	str	r2, [r3, #4]

	return stim_lib_stim_rsp_ok;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	20000660 	.word	0x20000660
 800b544:	20000678 	.word	0x20000678
 800b548:	20000688 	.word	0x20000688
 800b54c:	20000690 	.word	0x20000690

0800b550 <stimLib_stimStartRaw>:

bool stimLib_stimStartRaw(void)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	af00      	add	r7, sp, #0
	/* START PULSE TIMER CH4 :: DAC_ON_N or STIM_DISCHARGE :: GPIOA PIN 3 */
	HAL_TIM_OC_Start_DMA(&htim2, STIM_LIB_PULSE_DAC_ON_TIM_CH,(const uint32_t*) STIM_LIB_DMA_DAC_ON_BUF, 4);
 800b554:	2304      	movs	r3, #4
 800b556:	4a15      	ldr	r2, [pc, #84]	; (800b5ac <stimLib_stimStartRaw+0x5c>)
 800b558:	210c      	movs	r1, #12
 800b55a:	4815      	ldr	r0, [pc, #84]	; (800b5b0 <stimLib_stimStartRaw+0x60>)
 800b55c:	f7fb fc36 	bl	8006dcc <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT));
 800b560:	4b14      	ldr	r3, [pc, #80]	; (800b5b4 <stimLib_stimStartRaw+0x64>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	4b13      	ldr	r3, [pc, #76]	; (800b5b4 <stimLib_stimStartRaw+0x64>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f022 0206 	bic.w	r2, r2, #6
 800b56e:	601a      	str	r2, [r3, #0]

	/* START PULSE TIMER CH2 :: ANODE :: GPIOA PIN 1 */
	HAL_TIM_PWM_Start(&htim2, STIM_LIB_PULSE_ANODE_TIM_CH);
 800b570:	2104      	movs	r1, #4
 800b572:	480f      	ldr	r0, [pc, #60]	; (800b5b0 <stimLib_stimStartRaw+0x60>)
 800b574:	f7fb ffbe 	bl	80074f4 <HAL_TIM_PWM_Start>

	/* START PULSE TIMER CH3 :: CATHODE :: GPIOA PIN 2 */
	HAL_TIM_OC_Start_DMA(&htim2, STIM_LIB_PULSE_CATHODE_TIM_CH,
 800b578:	2302      	movs	r3, #2
 800b57a:	4a0f      	ldr	r2, [pc, #60]	; (800b5b8 <stimLib_stimStartRaw+0x68>)
 800b57c:	2108      	movs	r1, #8
 800b57e:	480c      	ldr	r0, [pc, #48]	; (800b5b0 <stimLib_stimStartRaw+0x60>)
 800b580:	f7fb fc24 	bl	8006dcc <HAL_TIM_OC_Start_DMA>
			(const uint32_t*) STIM_LIB_DMA_CATHODE_BUF, 2);
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch3, (DMA_IT_TC | DMA_IT_HT));
 800b584:	4b0d      	ldr	r3, [pc, #52]	; (800b5bc <stimLib_stimStartRaw+0x6c>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	4b0c      	ldr	r3, [pc, #48]	; (800b5bc <stimLib_stimStartRaw+0x6c>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f022 0206 	bic.w	r2, r2, #6
 800b592:	601a      	str	r2, [r3, #0]

	/* START PULSE TIMER CH1 :: TRIGGER OUTPUT :: GPIOA PIN 5 */
	if (STIM_LIB_TRG_OUTPUT_IS_ENABLED() == true)
 800b594:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <stimLib_stimStartRaw+0x70>)
 800b596:	7c5b      	ldrb	r3, [r3, #17]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d003      	beq.n	800b5a4 <stimLib_stimStartRaw+0x54>
	{
		HAL_TIM_PWM_Start(&htim2, STIM_LIB_PULSE_TRG_OUT_TIM_CH);
 800b59c:	2100      	movs	r1, #0
 800b59e:	4804      	ldr	r0, [pc, #16]	; (800b5b0 <stimLib_stimStartRaw+0x60>)
 800b5a0:	f7fb ffa8 	bl	80074f4 <HAL_TIM_PWM_Start>
	}

	return stim_lib_stim_rsp_ok;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20000678 	.word	0x20000678
 800b5b0:	200002b0 	.word	0x200002b0
 800b5b4:	20000348 	.word	0x20000348
 800b5b8:	20000690 	.word	0x20000690
 800b5bc:	20000390 	.word	0x20000390
 800b5c0:	20000660 	.word	0x20000660

0800b5c4 <stimLib_stimStopRaw>:

bool stimLib_stimStopRaw(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	af00      	add	r7, sp, #0
	/*
	 * Normalize OCREFs in PWM mode
	 * OCREF cannot be changed in stop state
	 * Check stimLib_trgPauseRaw() Function
	 * */
	TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 800b5c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5cc:	699a      	ldr	r2, [r3, #24]
 800b5ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b5d2:	4b10      	ldr	r3, [pc, #64]	; (800b614 <stimLib_stimStopRaw+0x50>)
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	618b      	str	r3, [r1, #24]
	TIM2->CCMR1 |= (TIM_OCMODE_PWM1) | (TIM_OCMODE_PWM1 << 8U);
 800b5d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5dc:	699b      	ldr	r3, [r3, #24]
 800b5de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b5e2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800b5e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b5ea:	6193      	str	r3, [r2, #24]

	HAL_TIM_PWM_Stop(&htim2, STIM_LIB_PULSE_TRG_OUT_TIM_CH);
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	480a      	ldr	r0, [pc, #40]	; (800b618 <stimLib_stimStopRaw+0x54>)
 800b5f0:	f7fc f85e 	bl	80076b0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, STIM_LIB_PULSE_ANODE_TIM_CH);
 800b5f4:	2104      	movs	r1, #4
 800b5f6:	4808      	ldr	r0, [pc, #32]	; (800b618 <stimLib_stimStopRaw+0x54>)
 800b5f8:	f7fc f85a 	bl	80076b0 <HAL_TIM_PWM_Stop>

	HAL_TIM_OC_Stop_DMA(&htim2, STIM_LIB_PULSE_CATHODE_TIM_CH);
 800b5fc:	2108      	movs	r1, #8
 800b5fe:	4806      	ldr	r0, [pc, #24]	; (800b618 <stimLib_stimStopRaw+0x54>)
 800b600:	f7fb fddc 	bl	80071bc <HAL_TIM_OC_Stop_DMA>
	HAL_TIM_OC_Stop_DMA(&htim2, STIM_LIB_PULSE_DAC_ON_TIM_CH);
 800b604:	210c      	movs	r1, #12
 800b606:	4804      	ldr	r0, [pc, #16]	; (800b618 <stimLib_stimStopRaw+0x54>)
 800b608:	f7fb fdd8 	bl	80071bc <HAL_TIM_OC_Stop_DMA>

	return stim_lib_stim_rsp_ok;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	fefe8f8f 	.word	0xfefe8f8f
 800b618:	200002b0 	.word	0x200002b0

0800b61c <stimLib_stepup_ctrlScheduler>:
 * STEPUP CONTROL SCHEDULER
 * Calling from "HAL_TIM_PeriodElapsedCallback()" and "stimLib_stepup_ctrlCallback()" Function
 * Check out the "stim_lib_st_inc.c" file.
 * */
void stimLib_stepup_ctrlScheduler(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	af00      	add	r7, sp, #0
	STIM_LIB_STEPUP_FEEDBACK_CNT++;
 800b620:	4b19      	ldr	r3, [pc, #100]	; (800b688 <stimLib_stepup_ctrlScheduler+0x6c>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	3301      	adds	r3, #1
 800b626:	b2da      	uxtb	r2, r3
 800b628:	4b17      	ldr	r3, [pc, #92]	; (800b688 <stimLib_stepup_ctrlScheduler+0x6c>)
 800b62a:	701a      	strb	r2, [r3, #0]
	stimLib_adc1_readBuffer(setpup_buff, adc1_conv_buff,
 800b62c:	220a      	movs	r2, #10
 800b62e:	4917      	ldr	r1, [pc, #92]	; (800b68c <stimLib_stepup_ctrlScheduler+0x70>)
 800b630:	4817      	ldr	r0, [pc, #92]	; (800b690 <stimLib_stepup_ctrlScheduler+0x74>)
 800b632:	f000 f91d 	bl	800b870 <stimLib_adc1_readBuffer>
	STIM_LIB_ADC1_TOTAL_SIZE);
	/* SLOPE VOLTAGE RISE CONTROL */
	if (STIM_LIB_STEPUP_FEEDBACK_CNT == 10 && SLOPE_CTRL_END_FLAG == false)
 800b636:	4b14      	ldr	r3, [pc, #80]	; (800b688 <stimLib_stepup_ctrlScheduler+0x6c>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	2b0a      	cmp	r3, #10
 800b63c:	d10f      	bne.n	800b65e <stimLib_stepup_ctrlScheduler+0x42>
 800b63e:	4b15      	ldr	r3, [pc, #84]	; (800b694 <stimLib_stepup_ctrlScheduler+0x78>)
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	f083 0301 	eor.w	r3, r3, #1
 800b646:	b2db      	uxtb	r3, r3
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d008      	beq.n	800b65e <stimLib_stepup_ctrlScheduler+0x42>
	{
		stimLib_stepup_voltFeedback();
 800b64c:	f000 f826 	bl	800b69c <stimLib_stepup_voltFeedback>
		STIM_LIB_STEPUP_FEEDBACK_CNT = 0;
 800b650:	4b0d      	ldr	r3, [pc, #52]	; (800b688 <stimLib_stepup_ctrlScheduler+0x6c>)
 800b652:	2200      	movs	r2, #0
 800b654:	701a      	strb	r2, [r3, #0]
		STEPUP_DATA_PRINT_FLAG = true;
 800b656:	4b10      	ldr	r3, [pc, #64]	; (800b698 <stimLib_stepup_ctrlScheduler+0x7c>)
 800b658:	2201      	movs	r2, #1
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	e00f      	b.n	800b67e <stimLib_stepup_ctrlScheduler+0x62>
	}
	/* VOLTAGE RANGE KEEPING CONTROL */
	else if (STIM_LIB_STEPUP_FEEDBACK_CNT == 1 && SLOPE_CTRL_END_FLAG == true)
 800b65e:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <stimLib_stepup_ctrlScheduler+0x6c>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d10b      	bne.n	800b67e <stimLib_stepup_ctrlScheduler+0x62>
 800b666:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <stimLib_stepup_ctrlScheduler+0x78>)
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d007      	beq.n	800b67e <stimLib_stepup_ctrlScheduler+0x62>
	{
		stimLib_stepup_voltFeedback();
 800b66e:	f000 f815 	bl	800b69c <stimLib_stepup_voltFeedback>
		STIM_LIB_STEPUP_FEEDBACK_CNT = 0;
 800b672:	4b05      	ldr	r3, [pc, #20]	; (800b688 <stimLib_stepup_ctrlScheduler+0x6c>)
 800b674:	2200      	movs	r2, #0
 800b676:	701a      	strb	r2, [r3, #0]
		STEPUP_DATA_PRINT_FLAG = true;
 800b678:	4b07      	ldr	r3, [pc, #28]	; (800b698 <stimLib_stepup_ctrlScheduler+0x7c>)
 800b67a:	2201      	movs	r2, #1
 800b67c:	701a      	strb	r2, [r3, #0]
	}
	stimLib_stepup_dataPrint();
 800b67e:	f000 f9db 	bl	800ba38 <stimLib_stepup_dataPrint>
}
 800b682:	bf00      	nop
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20000699 	.word	0x20000699
 800b68c:	200006a0 	.word	0x200006a0
 800b690:	200006b4 	.word	0x200006b4
 800b694:	2000069a 	.word	0x2000069a
 800b698:	2000069b 	.word	0x2000069b

0800b69c <stimLib_stepup_voltFeedback>:

/*
 * STEP UP VOLTAGE FEEDBACK
 * */
void stimLib_stepup_voltFeedback(void)
{
 800b69c:	b5b0      	push	{r4, r5, r7, lr}
 800b69e:	af00      	add	r7, sp, #0
	/* STEPUP DATA CLAC */
	stepup_fdbk_adc_avg = stimLib_stepup_adcAVG(setpup_buff,
 800b6a0:	210a      	movs	r1, #10
 800b6a2:	480e      	ldr	r0, [pc, #56]	; (800b6dc <stimLib_stepup_voltFeedback+0x40>)
 800b6a4:	f000 f93d 	bl	800b922 <stimLib_stepup_adcAVG>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	4a0d      	ldr	r2, [pc, #52]	; (800b6e0 <stimLib_stepup_voltFeedback+0x44>)
 800b6ac:	6013      	str	r3, [r2, #0]
	STIM_LIB_ADC1_TOTAL_SIZE);
	stepup_fdbk_volt = stimLib_stepup_voltCalc(stepup_fdbk_adc_avg, R1_Vstup,
 800b6ae:	4b0c      	ldr	r3, [pc, #48]	; (800b6e0 <stimLib_stepup_voltFeedback+0x44>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	226e      	movs	r2, #110	; 0x6e
 800b6b4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 f957 	bl	800b96c <stimLib_stepup_voltCalc>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	4b08      	ldr	r3, [pc, #32]	; (800b6e4 <stimLib_stepup_voltFeedback+0x48>)
 800b6c4:	601a      	str	r2, [r3, #0]
	R2_Vstup);

	/* STEPUP VOLTAGE CONFIG */
	stimLib_voltCfg(stepup_fdbk_volt);
 800b6c6:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <stimLib_stepup_voltFeedback+0x48>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	461c      	mov	r4, r3
 800b6ce:	4615      	mov	r5, r2
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	f000 f808 	bl	800b6e8 <stimLib_voltCfg>
}
 800b6d8:	bf00      	nop
 800b6da:	bdb0      	pop	{r4, r5, r7, pc}
 800b6dc:	200006b4 	.word	0x200006b4
 800b6e0:	200006c8 	.word	0x200006c8
 800b6e4:	200006cc 	.word	0x200006cc

0800b6e8 <stimLib_voltCfg>:

/*
 * STEP UP VOLTAGE CONFIG
 * */
void stimLib_voltCfg(uint64_t stepup_voltage)
{
 800b6e8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b6ec:	b087      	sub	sp, #28
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
	uint32_t voltage_scaleup_val = STEPUP_TARGET_VOLTAGE
 800b6f4:	4956      	ldr	r1, [pc, #344]	; (800b850 <stimLib_voltCfg+0x168>)
 800b6f6:	6179      	str	r1, [r7, #20]

#define OUTPUT_VOLTAGE_IS_LOW		voltage_scaleup_val > stepup_voltage
#define OUTPUT_VOLTAGE_IS_HIGH		voltage_scaleup_val < stepup_voltage
#define OUTPUT_VOLTAGE_IS_SAME		voltage_scaleup_val == stepup_voltage

	if (VOLTAGE_DIFFERENCE_ABS < STEPUP_FDBK_VOLT_RANGE)
 800b6f8:	68b9      	ldr	r1, [r7, #8]
 800b6fa:	6978      	ldr	r0, [r7, #20]
 800b6fc:	1a41      	subs	r1, r0, r1
 800b6fe:	4608      	mov	r0, r1
 800b700:	4954      	ldr	r1, [pc, #336]	; (800b854 <stimLib_voltCfg+0x16c>)
 800b702:	4288      	cmp	r0, r1
 800b704:	db39      	blt.n	800b77a <stimLib_voltCfg+0x92>
 800b706:	68b9      	ldr	r1, [r7, #8]
 800b708:	6978      	ldr	r0, [r7, #20]
 800b70a:	1a41      	subs	r1, r0, r1
 800b70c:	4608      	mov	r0, r1
 800b70e:	4952      	ldr	r1, [pc, #328]	; (800b858 <stimLib_voltCfg+0x170>)
 800b710:	4288      	cmp	r0, r1
 800b712:	dc32      	bgt.n	800b77a <stimLib_voltCfg+0x92>
	{
		if (OUTPUT_VOLTAGE_IS_LOW)
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2200      	movs	r2, #0
 800b718:	603b      	str	r3, [r7, #0]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b720:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b724:	4621      	mov	r1, r4
 800b726:	428a      	cmp	r2, r1
 800b728:	4629      	mov	r1, r5
 800b72a:	418b      	sbcs	r3, r1
 800b72c:	d20d      	bcs.n	800b74a <stimLib_voltCfg+0x62>
		{
			STIM_LIB_VOLTAGE_CTRL_PULSE++;
 800b72e:	4b4b      	ldr	r3, [pc, #300]	; (800b85c <stimLib_voltCfg+0x174>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	3301      	adds	r3, #1
 800b734:	b2da      	uxtb	r2, r3
 800b736:	4b49      	ldr	r3, [pc, #292]	; (800b85c <stimLib_voltCfg+0x174>)
 800b738:	701a      	strb	r2, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE
					> STIM_LIB_STEPUP_CTRL_TABLE_LIMIT - 1)
 800b73a:	4b48      	ldr	r3, [pc, #288]	; (800b85c <stimLib_voltCfg+0x174>)
 800b73c:	781b      	ldrb	r3, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE
 800b73e:	2b1d      	cmp	r3, #29
 800b740:	d913      	bls.n	800b76a <stimLib_voltCfg+0x82>
			{
				STIM_LIB_VOLTAGE_CTRL_PULSE = STIM_LIB_STEPUP_CTRL_TABLE_LIMIT
 800b742:	4b46      	ldr	r3, [pc, #280]	; (800b85c <stimLib_voltCfg+0x174>)
 800b744:	221d      	movs	r2, #29
 800b746:	701a      	strb	r2, [r3, #0]
 800b748:	e00f      	b.n	800b76a <stimLib_voltCfg+0x82>
						- 1;
			}
		}

		else if (OUTPUT_VOLTAGE_IS_HIGH)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2200      	movs	r2, #0
 800b74e:	469a      	mov	sl, r3
 800b750:	4693      	mov	fp, r2
 800b752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b756:	4592      	cmp	sl, r2
 800b758:	eb7b 0303 	sbcs.w	r3, fp, r3
 800b75c:	d205      	bcs.n	800b76a <stimLib_voltCfg+0x82>
		{
			STIM_LIB_VOLTAGE_CTRL_PULSE--;
 800b75e:	4b3f      	ldr	r3, [pc, #252]	; (800b85c <stimLib_voltCfg+0x174>)
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	3b01      	subs	r3, #1
 800b764:	b2da      	uxtb	r2, r3
 800b766:	4b3d      	ldr	r3, [pc, #244]	; (800b85c <stimLib_voltCfg+0x174>)
 800b768:	701a      	strb	r2, [r3, #0]
		}

		SLOPE_CTRL_END_FLAG = true;
 800b76a:	4b3d      	ldr	r3, [pc, #244]	; (800b860 <stimLib_voltCfg+0x178>)
 800b76c:	2201      	movs	r2, #1
 800b76e:	701a      	strb	r2, [r3, #0]
		TIM1->CCR1 = STIM_LIB_VOLTAGE_CTRL_PULSE;
 800b770:	4b3a      	ldr	r3, [pc, #232]	; (800b85c <stimLib_voltCfg+0x174>)
 800b772:	781a      	ldrb	r2, [r3, #0]
 800b774:	4b3b      	ldr	r3, [pc, #236]	; (800b864 <stimLib_voltCfg+0x17c>)
 800b776:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		SLOPE_CTRL_END_FLAG = true;
	}

}
 800b778:	e063      	b.n	800b842 <stimLib_voltCfg+0x15a>
	else if (VOLTAGE_DIFFERENCE_ABS > STEPUP_FDBK_VOLT_RANGE)
 800b77a:	68b9      	ldr	r1, [r7, #8]
 800b77c:	6978      	ldr	r0, [r7, #20]
 800b77e:	1a41      	subs	r1, r0, r1
 800b780:	2900      	cmp	r1, #0
 800b782:	bfb8      	it	lt
 800b784:	4249      	neglt	r1, r1
 800b786:	4838      	ldr	r0, [pc, #224]	; (800b868 <stimLib_voltCfg+0x180>)
 800b788:	4281      	cmp	r1, r0
 800b78a:	dd49      	ble.n	800b820 <stimLib_voltCfg+0x138>
		if (OUTPUT_VOLTAGE_IS_LOW)
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	2200      	movs	r2, #0
 800b790:	4698      	mov	r8, r3
 800b792:	4691      	mov	r9, r2
 800b794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b798:	4542      	cmp	r2, r8
 800b79a:	eb73 0309 	sbcs.w	r3, r3, r9
 800b79e:	d220      	bcs.n	800b7e2 <stimLib_voltCfg+0xfa>
			if (FAST_STEPUP_ENABLE)
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	1ad3      	subs	r3, r2, r3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bfb8      	it	lt
 800b7aa:	425b      	neglt	r3, r3
 800b7ac:	4a2f      	ldr	r2, [pc, #188]	; (800b86c <stimLib_voltCfg+0x184>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	dd06      	ble.n	800b7c0 <stimLib_voltCfg+0xd8>
				STIM_LIB_VOLTAGE_CTRL_PULSE += 6;
 800b7b2:	4b2a      	ldr	r3, [pc, #168]	; (800b85c <stimLib_voltCfg+0x174>)
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	3306      	adds	r3, #6
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	4b28      	ldr	r3, [pc, #160]	; (800b85c <stimLib_voltCfg+0x174>)
 800b7bc:	701a      	strb	r2, [r3, #0]
 800b7be:	e005      	b.n	800b7cc <stimLib_voltCfg+0xe4>
				STIM_LIB_VOLTAGE_CTRL_PULSE += 1;
 800b7c0:	4b26      	ldr	r3, [pc, #152]	; (800b85c <stimLib_voltCfg+0x174>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	4b24      	ldr	r3, [pc, #144]	; (800b85c <stimLib_voltCfg+0x174>)
 800b7ca:	701a      	strb	r2, [r3, #0]
			SLOPE_CTRL_END_FLAG = false;
 800b7cc:	4b24      	ldr	r3, [pc, #144]	; (800b860 <stimLib_voltCfg+0x178>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	701a      	strb	r2, [r3, #0]
					> STIM_LIB_STEPUP_CTRL_TABLE_LIMIT - 1)
 800b7d2:	4b22      	ldr	r3, [pc, #136]	; (800b85c <stimLib_voltCfg+0x174>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE
 800b7d6:	2b1d      	cmp	r3, #29
 800b7d8:	d91d      	bls.n	800b816 <stimLib_voltCfg+0x12e>
				STIM_LIB_VOLTAGE_CTRL_PULSE = STIM_LIB_STEPUP_CTRL_TABLE_LIMIT
 800b7da:	4b20      	ldr	r3, [pc, #128]	; (800b85c <stimLib_voltCfg+0x174>)
 800b7dc:	221d      	movs	r2, #29
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	e019      	b.n	800b816 <stimLib_voltCfg+0x12e>
		else if (OUTPUT_VOLTAGE_IS_HIGH)
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	461c      	mov	r4, r3
 800b7e8:	4615      	mov	r5, r2
 800b7ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7ee:	4294      	cmp	r4, r2
 800b7f0:	eb75 0303 	sbcs.w	r3, r5, r3
 800b7f4:	d20f      	bcs.n	800b816 <stimLib_voltCfg+0x12e>
			STIM_LIB_VOLTAGE_CTRL_PULSE--;
 800b7f6:	4b19      	ldr	r3, [pc, #100]	; (800b85c <stimLib_voltCfg+0x174>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	4b17      	ldr	r3, [pc, #92]	; (800b85c <stimLib_voltCfg+0x174>)
 800b800:	701a      	strb	r2, [r3, #0]
			SLOPE_CTRL_END_FLAG = true;
 800b802:	4b17      	ldr	r3, [pc, #92]	; (800b860 <stimLib_voltCfg+0x178>)
 800b804:	2201      	movs	r2, #1
 800b806:	701a      	strb	r2, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE <= 0)
 800b808:	4b14      	ldr	r3, [pc, #80]	; (800b85c <stimLib_voltCfg+0x174>)
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d102      	bne.n	800b816 <stimLib_voltCfg+0x12e>
				STIM_LIB_VOLTAGE_CTRL_PULSE = 0;
 800b810:	4b12      	ldr	r3, [pc, #72]	; (800b85c <stimLib_voltCfg+0x174>)
 800b812:	2200      	movs	r2, #0
 800b814:	701a      	strb	r2, [r3, #0]
		TIM1->CCR1 = STIM_LIB_VOLTAGE_CTRL_PULSE;
 800b816:	4b11      	ldr	r3, [pc, #68]	; (800b85c <stimLib_voltCfg+0x174>)
 800b818:	781a      	ldrb	r2, [r3, #0]
 800b81a:	4b12      	ldr	r3, [pc, #72]	; (800b864 <stimLib_voltCfg+0x17c>)
 800b81c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b81e:	e010      	b.n	800b842 <stimLib_voltCfg+0x15a>
	else if (OUTPUT_VOLTAGE_IS_SAME)
 800b820:	6979      	ldr	r1, [r7, #20]
 800b822:	2000      	movs	r0, #0
 800b824:	460a      	mov	r2, r1
 800b826:	4603      	mov	r3, r0
 800b828:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b82c:	4299      	cmp	r1, r3
 800b82e:	bf08      	it	eq
 800b830:	4290      	cmpeq	r0, r2
 800b832:	d103      	bne.n	800b83c <stimLib_voltCfg+0x154>
		SLOPE_CTRL_END_FLAG = true;
 800b834:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <stimLib_voltCfg+0x178>)
 800b836:	2201      	movs	r2, #1
 800b838:	701a      	strb	r2, [r3, #0]
}
 800b83a:	e002      	b.n	800b842 <stimLib_voltCfg+0x15a>
		SLOPE_CTRL_END_FLAG = true;
 800b83c:	4b08      	ldr	r3, [pc, #32]	; (800b860 <stimLib_voltCfg+0x178>)
 800b83e:	2201      	movs	r2, #1
 800b840:	701a      	strb	r2, [r3, #0]
}
 800b842:	bf00      	nop
 800b844:	371c      	adds	r7, #28
 800b846:	46bd      	mov	sp, r7
 800b848:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	003d0900 	.word	0x003d0900
 800b854:	fffd40e1 	.word	0xfffd40e1
 800b858:	0002bf1f 	.word	0x0002bf1f
 800b85c:	20000698 	.word	0x20000698
 800b860:	2000069a 	.word	0x2000069a
 800b864:	40012c00 	.word	0x40012c00
 800b868:	0002bf20 	.word	0x0002bf20
 800b86c:	000927c0 	.word	0x000927c0

0800b870 <stimLib_adc1_readBuffer>:
/*
 * ADC CONVERSION DATA READ :: ADC1 DATA >> STEP UP BUFFER
 * */
void stimLib_adc1_readBuffer(uint16_t *stepup_buff, uint16_t *adc1_conv_buff,
		uint8_t conv_length)
{
 800b870:	b480      	push	{r7}
 800b872:	b087      	sub	sp, #28
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	4613      	mov	r3, r2
 800b87c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < conv_length; i++)
 800b87e:	2300      	movs	r3, #0
 800b880:	75fb      	strb	r3, [r7, #23]
 800b882:	e043      	b.n	800b90c <stimLib_adc1_readBuffer+0x9c>
		/*
		 * STEP UP ADC FILTER
		 * When the ADC buffer is read once,
		 * if the deviation of the value is an unexpected value, it is filtered.
		 *  */
		if (abs(adc1_conv_buff[i] - adc1_conv_buff[(i + 1) % conv_length])
 800b884:	7dfb      	ldrb	r3, [r7, #23]
 800b886:	005b      	lsls	r3, r3, #1
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	4413      	add	r3, r2
 800b88c:	881b      	ldrh	r3, [r3, #0]
 800b88e:	4618      	mov	r0, r3
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	3301      	adds	r3, #1
 800b894:	79fa      	ldrb	r2, [r7, #7]
 800b896:	fb93 f1f2 	sdiv	r1, r3, r2
 800b89a:	fb01 f202 	mul.w	r2, r1, r2
 800b89e:	1a9b      	subs	r3, r3, r2
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	68ba      	ldr	r2, [r7, #8]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	1ac3      	subs	r3, r0, r3
 800b8aa:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 800b8ae:	db1f      	blt.n	800b8f0 <stimLib_adc1_readBuffer+0x80>
 800b8b0:	7dfb      	ldrb	r3, [r7, #23]
 800b8b2:	005b      	lsls	r3, r3, #1
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	881b      	ldrh	r3, [r3, #0]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	79fa      	ldrb	r2, [r7, #7]
 800b8c2:	fb93 f1f2 	sdiv	r1, r3, r2
 800b8c6:	fb01 f202 	mul.w	r2, r1, r2
 800b8ca:	1a9b      	subs	r3, r3, r2
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	1ac3      	subs	r3, r0, r3
				< 200)
 800b8d6:	2bc7      	cmp	r3, #199	; 0xc7
 800b8d8:	dc0a      	bgt.n	800b8f0 <stimLib_adc1_readBuffer+0x80>
		{
			stepup_buff[i] = adc1_conv_buff[i];
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	005b      	lsls	r3, r3, #1
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	441a      	add	r2, r3
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	68f9      	ldr	r1, [r7, #12]
 800b8e8:	440b      	add	r3, r1
 800b8ea:	8812      	ldrh	r2, [r2, #0]
 800b8ec:	801a      	strh	r2, [r3, #0]
 800b8ee:	e00a      	b.n	800b906 <stimLib_adc1_readBuffer+0x96>
		}
		else
		{
			stepup_buff[i] = adc1_conv_buff[i + 1];
 800b8f0:	7dfb      	ldrb	r3, [r7, #23]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	441a      	add	r2, r3
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	68f9      	ldr	r1, [r7, #12]
 800b900:	440b      	add	r3, r1
 800b902:	8812      	ldrh	r2, [r2, #0]
 800b904:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < conv_length; i++)
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	3301      	adds	r3, #1
 800b90a:	75fb      	strb	r3, [r7, #23]
 800b90c:	7dfa      	ldrb	r2, [r7, #23]
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	429a      	cmp	r2, r3
 800b912:	d3b7      	bcc.n	800b884 <stimLib_adc1_readBuffer+0x14>
		}
	}
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	371c      	adds	r7, #28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <stimLib_stepup_adcAVG>:

/*
 * STEPUP ADC DATA AVG
 * */
uint32_t stimLib_stepup_adcAVG(uint16_t *stepup_buff, uint8_t conv_length)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	460b      	mov	r3, r1
 800b92c:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint32_t stepup_total = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < conv_length; i++)
 800b932:	2300      	movs	r3, #0
 800b934:	73fb      	strb	r3, [r7, #15]
 800b936:	e00b      	b.n	800b950 <stimLib_stepup_adcAVG+0x2e>
	{
		stepup_total += stepup_buff[i];
 800b938:	7bfb      	ldrb	r3, [r7, #15]
 800b93a:	005b      	lsls	r3, r3, #1
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	4413      	add	r3, r2
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	4413      	add	r3, r2
 800b948:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < conv_length; i++)
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	3301      	adds	r3, #1
 800b94e:	73fb      	strb	r3, [r7, #15]
 800b950:	7bfa      	ldrb	r2, [r7, #15]
 800b952:	78fb      	ldrb	r3, [r7, #3]
 800b954:	429a      	cmp	r2, r3
 800b956:	d3ef      	bcc.n	800b938 <stimLib_stepup_adcAVG+0x16>
	}
	return stepup_total / conv_length;
 800b958:	78fb      	ldrb	r3, [r7, #3]
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <stimLib_stepup_voltCalc>:
/*
 * STEP UP VOLTAGE CALC
 * */
uint64_t stimLib_stepup_voltCalc(uint32_t stepup_adc_avg, uint32_t r1,
		uint32_t r2)
{
 800b96c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b970:	b08a      	sub	sp, #40	; 0x28
 800b972:	af00      	add	r7, sp, #0
 800b974:	6178      	str	r0, [r7, #20]
 800b976:	6139      	str	r1, [r7, #16]
 800b978:	60fa      	str	r2, [r7, #12]
	 * TODO:
	 * ADD IN FUATURE
	 * ADC TABLE
	 * */
	/* REFERENCE TABLE */
	uint64_t adc_val = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].fdbk_vol
 800b97a:	4b2d      	ldr	r3, [pc, #180]	; (800ba30 <stimLib_stepup_voltCalc+0xc4>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	4619      	mov	r1, r3
 800b980:	4a2c      	ldr	r2, [pc, #176]	; (800ba34 <stimLib_stepup_voltCalc+0xc8>)
 800b982:	460b      	mov	r3, r1
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	440b      	add	r3, r1
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	4413      	add	r3, r2
 800b98c:	3308      	adds	r3, #8
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	461a      	mov	r2, r3
			* stepup_adc_avg)
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	fb03 f202 	mul.w	r2, r3, r2
			/ STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].adc_val;
 800b998:	4b25      	ldr	r3, [pc, #148]	; (800ba30 <stimLib_stepup_voltCalc+0xc4>)
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	4618      	mov	r0, r3
 800b99e:	4925      	ldr	r1, [pc, #148]	; (800ba34 <stimLib_stepup_voltCalc+0xc8>)
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	005b      	lsls	r3, r3, #1
 800b9a4:	4403      	add	r3, r0
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	440b      	add	r3, r1
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	fbb2 f3f3 	udiv	r3, r2, r3
	uint64_t adc_val = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].fdbk_vol
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	469a      	mov	sl, r3
 800b9b6:	4693      	mov	fp, r2
 800b9b8:	e9c7 ab08 	strd	sl, fp, [r7, #32]

	uint64_t v_out = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].output_vol
 800b9bc:	4b1c      	ldr	r3, [pc, #112]	; (800ba30 <stimLib_stepup_voltCalc+0xc4>)
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4a1c      	ldr	r2, [pc, #112]	; (800ba34 <stimLib_stepup_voltCalc+0xc8>)
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	440b      	add	r3, r1
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	17da      	asrs	r2, r3, #31
 800b9d2:	4698      	mov	r8, r3
 800b9d4:	4691      	mov	r9, r2
			* adc_val) / STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].fdbk_vol;
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	fb09 f203 	mul.w	r2, r9, r3
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	fb08 f303 	mul.w	r3, r8, r3
 800b9e2:	4413      	add	r3, r2
 800b9e4:	6a3a      	ldr	r2, [r7, #32]
 800b9e6:	fba2 4508 	umull	r4, r5, r2, r8
 800b9ea:	442b      	add	r3, r5
 800b9ec:	461d      	mov	r5, r3
 800b9ee:	4b10      	ldr	r3, [pc, #64]	; (800ba30 <stimLib_stepup_voltCalc+0xc4>)
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4a0f      	ldr	r2, [pc, #60]	; (800ba34 <stimLib_stepup_voltCalc+0xc8>)
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	440b      	add	r3, r1
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	3308      	adds	r3, #8
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	17da      	asrs	r2, r3, #31
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	607a      	str	r2, [r7, #4]
	uint64_t v_out = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].output_vol
 800ba0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba0e:	4620      	mov	r0, r4
 800ba10:	4629      	mov	r1, r5
 800ba12:	f7f4 fc2d 	bl	8000270 <__aeabi_uldivmod>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	return v_out;
 800ba1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800ba22:	4610      	mov	r0, r2
 800ba24:	4619      	mov	r1, r3
 800ba26:	3728      	adds	r7, #40	; 0x28
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba2e:	bf00      	nop
 800ba30:	20000698 	.word	0x20000698
 800ba34:	0800d5c0 	.word	0x0800d5c0

0800ba38 <stimLib_stepup_dataPrint>:

/*
 * STEP UP ADC DATA PRINT
 * */
void stimLib_stepup_dataPrint(void)
{
 800ba38:	b590      	push	{r4, r7, lr}
 800ba3a:	b08b      	sub	sp, #44	; 0x2c
 800ba3c:	af04      	add	r7, sp, #16
	if (STEPUP_DATA_PRINT_FLAG == true)
 800ba3e:	4b33      	ldr	r3, [pc, #204]	; (800bb0c <stimLib_stepup_dataPrint+0xd4>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d05a      	beq.n	800bafc <stimLib_stepup_dataPrint+0xc4>
	{
		uint8_t i;
		uint8_t dec_point[STEPUP_DEC_PLACES];
		int mode_val = STEPUP_VOLTAGE_SCALE_SIZE;
 800ba46:	4b32      	ldr	r3, [pc, #200]	; (800bb10 <stimLib_stepup_dataPrint+0xd8>)
 800ba48:	613b      	str	r3, [r7, #16]
		uint32_t n_number = (int) (stepup_fdbk_volt / STEPUP_VOLTAGE_SCALE_SIZE);
 800ba4a:	4b32      	ldr	r3, [pc, #200]	; (800bb14 <stimLib_stepup_dataPrint+0xdc>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	095b      	lsrs	r3, r3, #5
 800ba50:	4a31      	ldr	r2, [pc, #196]	; (800bb18 <stimLib_stepup_dataPrint+0xe0>)
 800ba52:	fba2 2303 	umull	r2, r3, r2, r3
 800ba56:	09db      	lsrs	r3, r3, #7
 800ba58:	60fb      	str	r3, [r7, #12]

		for (i = 0; i < STEPUP_DEC_PLACES; i++)
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	75fb      	strb	r3, [r7, #23]
 800ba5e:	e021      	b.n	800baa4 <stimLib_stepup_dataPrint+0x6c>
		{
			dec_point[i] = (stepup_fdbk_volt % mode_val) / (mode_val / 10);
 800ba60:	4b2c      	ldr	r3, [pc, #176]	; (800bb14 <stimLib_stepup_dataPrint+0xdc>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba6a:	fb01 f202 	mul.w	r2, r1, r2
 800ba6e:	1a9a      	subs	r2, r3, r2
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	492a      	ldr	r1, [pc, #168]	; (800bb1c <stimLib_stepup_dataPrint+0xe4>)
 800ba74:	fb81 0103 	smull	r0, r1, r1, r3
 800ba78:	1089      	asrs	r1, r1, #2
 800ba7a:	17db      	asrs	r3, r3, #31
 800ba7c:	1acb      	subs	r3, r1, r3
 800ba7e:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba82:	7dfb      	ldrb	r3, [r7, #23]
 800ba84:	b2d2      	uxtb	r2, r2
 800ba86:	3318      	adds	r3, #24
 800ba88:	443b      	add	r3, r7
 800ba8a:	f803 2c14 	strb.w	r2, [r3, #-20]
			mode_val /= 10;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	4a22      	ldr	r2, [pc, #136]	; (800bb1c <stimLib_stepup_dataPrint+0xe4>)
 800ba92:	fb82 1203 	smull	r1, r2, r2, r3
 800ba96:	1092      	asrs	r2, r2, #2
 800ba98:	17db      	asrs	r3, r3, #31
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	613b      	str	r3, [r7, #16]
		for (i = 0; i < STEPUP_DEC_PLACES; i++)
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
 800baa0:	3301      	adds	r3, #1
 800baa2:	75fb      	strb	r3, [r7, #23]
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
 800baa6:	2b04      	cmp	r3, #4
 800baa8:	d9da      	bls.n	800ba60 <stimLib_stepup_dataPrint+0x28>
		}

		/* dec_point[0] = fdbk_adc_voltage % STEPUP_VOLTAGE_SCALE; */
		TD_DEBUG_PRINT(("----- STEP-UP -----\n"));
 800baaa:	481d      	ldr	r0, [pc, #116]	; (800bb20 <stimLib_stepup_dataPrint+0xe8>)
 800baac:	f000 fa0a 	bl	800bec4 <puts>
		TD_DEBUG_PRINT(("TARGET VOLTAGE : %d\n", STEPUP_TARGET_VOLTAGE));
 800bab0:	2128      	movs	r1, #40	; 0x28
 800bab2:	481c      	ldr	r0, [pc, #112]	; (800bb24 <stimLib_stepup_dataPrint+0xec>)
 800bab4:	f000 f96a 	bl	800bd8c <iprintf>

		TD_DEBUG_PRINT(
 800bab8:	793b      	ldrb	r3, [r7, #4]
 800baba:	4618      	mov	r0, r3
 800babc:	797b      	ldrb	r3, [r7, #5]
 800babe:	461c      	mov	r4, r3
 800bac0:	79bb      	ldrb	r3, [r7, #6]
 800bac2:	79fa      	ldrb	r2, [r7, #7]
 800bac4:	7a39      	ldrb	r1, [r7, #8]
 800bac6:	9102      	str	r1, [sp, #8]
 800bac8:	9201      	str	r2, [sp, #4]
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	4623      	mov	r3, r4
 800bace:	4602      	mov	r2, r0
 800bad0:	68f9      	ldr	r1, [r7, #12]
 800bad2:	4815      	ldr	r0, [pc, #84]	; (800bb28 <stimLib_stepup_dataPrint+0xf0>)
 800bad4:	f000 f95a 	bl	800bd8c <iprintf>
				("MEAS Voltage : %ld.%d%d%d%d%d\n", n_number, dec_point[0], dec_point[1], dec_point[2], dec_point[3], dec_point[4]));
		TD_DEBUG_PRINT(("STEP-UP ADC AVG : %ld\n", stepup_fdbk_adc_avg));
 800bad8:	4b14      	ldr	r3, [pc, #80]	; (800bb2c <stimLib_stepup_dataPrint+0xf4>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4619      	mov	r1, r3
 800bade:	4814      	ldr	r0, [pc, #80]	; (800bb30 <stimLib_stepup_dataPrint+0xf8>)
 800bae0:	f000 f954 	bl	800bd8c <iprintf>
		TD_DEBUG_PRINT(("STEP-UP PW : %d\n", STIM_LIB_VOLTAGE_CTRL_PULSE));
 800bae4:	4b13      	ldr	r3, [pc, #76]	; (800bb34 <stimLib_stepup_dataPrint+0xfc>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	4619      	mov	r1, r3
 800baea:	4813      	ldr	r0, [pc, #76]	; (800bb38 <stimLib_stepup_dataPrint+0x100>)
 800baec:	f000 f94e 	bl	800bd8c <iprintf>

#ifdef STIM_LIB_EVKIT_CC
		TD_DEBUG_PRINT(("DAC CTRL VALUE : %d\n\n", DAC_CONTROL_VALUE));
 800baf0:	4b12      	ldr	r3, [pc, #72]	; (800bb3c <stimLib_stepup_dataPrint+0x104>)
 800baf2:	7a1b      	ldrb	r3, [r3, #8]
 800baf4:	4619      	mov	r1, r3
 800baf6:	4812      	ldr	r0, [pc, #72]	; (800bb40 <stimLib_stepup_dataPrint+0x108>)
 800baf8:	f000 f948 	bl	800bd8c <iprintf>
#endif

	}
	STEPUP_DATA_PRINT_FLAG = false;
 800bafc:	4b03      	ldr	r3, [pc, #12]	; (800bb0c <stimLib_stepup_dataPrint+0xd4>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	701a      	strb	r2, [r3, #0]

}
 800bb02:	bf00      	nop
 800bb04:	371c      	adds	r7, #28
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd90      	pop	{r4, r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	2000069b 	.word	0x2000069b
 800bb10:	000186a0 	.word	0x000186a0
 800bb14:	200006cc 	.word	0x200006cc
 800bb18:	0a7c5ac5 	.word	0x0a7c5ac5
 800bb1c:	66666667 	.word	0x66666667
 800bb20:	0800d4e8 	.word	0x0800d4e8
 800bb24:	0800d4fc 	.word	0x0800d4fc
 800bb28:	0800d514 	.word	0x0800d514
 800bb2c:	200006c8 	.word	0x200006c8
 800bb30:	0800d534 	.word	0x0800d534
 800bb34:	20000698 	.word	0x20000698
 800bb38:	0800d54c 	.word	0x0800d54c
 800bb3c:	20000660 	.word	0x20000660
 800bb40:	0800d560 	.word	0x0800d560

0800bb44 <stimLib_dacctrl_Set>:

/*
 * DAC GPIO CONTROL
 * */
void stimLib_dacctrl_Set(void)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	af00      	add	r7, sp, #0
	stimLib_dacctrl_setRaw();
 800bb48:	f000 f8bc 	bl	800bcc4 <stimLib_dacctrl_setRaw>
}
 800bb4c:	bf00      	nop
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <stimLib_dacctrl_Off>:

void stimLib_dacctrl_Off(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	af00      	add	r7, sp, #0
	stimLib_dacctrl_offRaw();
 800bb54:	f000 f8ce 	bl	800bcf4 <stimLib_dacctrl_offRaw>
}
 800bb58:	bf00      	nop
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <stimLib_stepup_adcStart>:

/*
 * STEP UP START :: ADC CONVERSION START
 * */
void stimLib_stepup_adcStart(void)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	af00      	add	r7, sp, #0
	stimLib_stepup_adcStartRaw();
 800bb60:	f000 f886 	bl	800bc70 <stimLib_stepup_adcStartRaw>
}
 800bb64:	bf00      	nop
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <stimLib_stepup_adcStop>:

/*
 * STEP UP STOP :: ADC CONVERSION STOP
 * */
void stimLib_stepup_adcStop(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
	stimLib_stepup_adcStopRaw();
 800bb6c:	f000 f8a0 	bl	800bcb0 <stimLib_stepup_adcStopRaw>
}
 800bb70:	bf00      	nop
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <stimLib_stepupStart>:

/* STEP UP FUNCTION Collection */
void stimLib_stepupStart(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0
	STIM_LIB_STEPUP_SET_START();
 800bb78:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <stimLib_stepupStart+0x1c>)
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	701a      	strb	r2, [r3, #0]
#ifdef STIM_LIB_EVKIT_CC
	stimLib_dacctrl_Set();
 800bb7e:	f7ff ffe1 	bl	800bb44 <stimLib_dacctrl_Set>
#endif
	stimLib_stepup_adcStart();
 800bb82:	f7ff ffeb 	bl	800bb5c <stimLib_stepup_adcStart>
	stimLib_stepup_startRaw();
 800bb86:	f000 f815 	bl	800bbb4 <stimLib_stepup_startRaw>
}
 800bb8a:	bf00      	nop
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	2000069c 	.word	0x2000069c

0800bb94 <stimLib_stepupStop>:

void stimLib_stepupStop(void)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	af00      	add	r7, sp, #0
	STIM_LIB_STEPUP_SET_STOP();
 800bb98:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <stimLib_stepupStop+0x1c>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	701a      	strb	r2, [r3, #0]
#ifdef STIM_LIB_EVKIT_CC
	stimLib_dacctrl_Off();
 800bb9e:	f7ff ffd7 	bl	800bb50 <stimLib_dacctrl_Off>
#endif
	stimLib_stepup_stopRaw();
 800bba2:	f000 f84d 	bl	800bc40 <stimLib_stepup_stopRaw>
	stimLib_stepup_adcStop();
 800bba6:	f7ff ffdf 	bl	800bb68 <stimLib_stepup_adcStop>
}
 800bbaa:	bf00      	nop
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	2000069c 	.word	0x2000069c

0800bbb4 <stimLib_stepup_startRaw>:
/* STEPUP CONTROL VALUE :: PULSE and Counter */
extern uint8_t voltage_ctrl_pulse;
extern uint8_t stepup_feedback_cnt;

void stimLib_stepup_startRaw(void)
{
 800bbb4:	b598      	push	{r3, r4, r7, lr}
 800bbb6:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 800bbb8:	4b1a      	ldr	r3, [pc, #104]	; (800bc24 <stimLib_stepup_startRaw+0x70>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->PSC = STIM_LIB_STEPUP_PSC_INPUT;
 800bbbe:	f7fa fd85 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	4a18      	ldr	r2, [pc, #96]	; (800bc28 <stimLib_stepup_startRaw+0x74>)
 800bbc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f44f 7348 	mov.w	r3, #800	; 0x320
 800bbd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbd4:	1e5a      	subs	r2, r3, #1
 800bbd6:	4b13      	ldr	r3, [pc, #76]	; (800bc24 <stimLib_stepup_startRaw+0x70>)
 800bbd8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = STIM_LIB_STEPUP_ARR_INPUT;
 800bbda:	f7fa fd77 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800bbde:	4604      	mov	r4, r0
 800bbe0:	f7fa fd74 	bl	80066cc <HAL_RCC_GetHCLKFreq>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	4a10      	ldr	r2, [pc, #64]	; (800bc28 <stimLib_stepup_startRaw+0x74>)
 800bbe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbec:	461a      	mov	r2, r3
 800bbee:	f44f 7348 	mov.w	r3, #800	; 0x320
 800bbf2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbf6:	fbb4 f3f3 	udiv	r3, r4, r3
 800bbfa:	4a0c      	ldr	r2, [pc, #48]	; (800bc2c <stimLib_stepup_startRaw+0x78>)
 800bbfc:	fba2 2303 	umull	r2, r3, r2, r3
 800bc00:	08db      	lsrs	r3, r3, #3
 800bc02:	1e5a      	subs	r2, r3, #1
 800bc04:	4b07      	ldr	r3, [pc, #28]	; (800bc24 <stimLib_stepup_startRaw+0x70>)
 800bc06:	62da      	str	r2, [r3, #44]	; 0x2c

	/* STEP UP PULSE */
	TIM1->CCR1 = STIM_LIB_VOLTAGE_CTRL_PULSE;
 800bc08:	4b09      	ldr	r3, [pc, #36]	; (800bc30 <stimLib_stepup_startRaw+0x7c>)
 800bc0a:	781a      	ldrb	r2, [r3, #0]
 800bc0c:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <stimLib_stepup_startRaw+0x80>)
 800bc0e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800bc10:	2100      	movs	r1, #0
 800bc12:	4809      	ldr	r0, [pc, #36]	; (800bc38 <stimLib_stepup_startRaw+0x84>)
 800bc14:	f7fb fc6e 	bl	80074f4 <HAL_TIM_PWM_Start>

	/* STEP UP FEEDBACK */
	HAL_TIM_Base_Start_IT(&htim6);
 800bc18:	4808      	ldr	r0, [pc, #32]	; (800bc3c <stimLib_stepup_startRaw+0x88>)
 800bc1a:	f7fa fff3 	bl	8006c04 <HAL_TIM_Base_Start_IT>
}
 800bc1e:	bf00      	nop
 800bc20:	bd98      	pop	{r3, r4, r7, pc}
 800bc22:	bf00      	nop
 800bc24:	40001000 	.word	0x40001000
 800bc28:	04c4b400 	.word	0x04c4b400
 800bc2c:	cccccccd 	.word	0xcccccccd
 800bc30:	20000698 	.word	0x20000698
 800bc34:	40012c00 	.word	0x40012c00
 800bc38:	20000264 	.word	0x20000264
 800bc3c:	200002fc 	.word	0x200002fc

0800bc40 <stimLib_stepup_stopRaw>:

void stimLib_stepup_stopRaw(void)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	af00      	add	r7, sp, #0
	STIM_LIB_VOLTAGE_CTRL_PULSE = 0;
 800bc44:	4b07      	ldr	r3, [pc, #28]	; (800bc64 <stimLib_stepup_stopRaw+0x24>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop(&htim1);
 800bc4a:	4807      	ldr	r0, [pc, #28]	; (800bc68 <stimLib_stepup_stopRaw+0x28>)
 800bc4c:	f7fa ffb3 	bl	8006bb6 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800bc50:	2100      	movs	r1, #0
 800bc52:	4805      	ldr	r0, [pc, #20]	; (800bc68 <stimLib_stepup_stopRaw+0x28>)
 800bc54:	f7fb fd2c 	bl	80076b0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 800bc58:	4804      	ldr	r0, [pc, #16]	; (800bc6c <stimLib_stepup_stopRaw+0x2c>)
 800bc5a:	f7fb f827 	bl	8006cac <HAL_TIM_Base_Stop_IT>
}
 800bc5e:	bf00      	nop
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20000698 	.word	0x20000698
 800bc68:	20000264 	.word	0x20000264
 800bc6c:	200002fc 	.word	0x200002fc

0800bc70 <stimLib_stepup_adcStartRaw>:

void stimLib_stepup_adcStartRaw(void)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_conv_buff, STIM_LIB_ADC1_TOTAL_SIZE);
 800bc74:	220a      	movs	r2, #10
 800bc76:	490b      	ldr	r1, [pc, #44]	; (800bca4 <stimLib_stepup_adcStartRaw+0x34>)
 800bc78:	480b      	ldr	r0, [pc, #44]	; (800bca8 <stimLib_stepup_adcStartRaw+0x38>)
 800bc7a:	f7f7 fb7f 	bl	800337c <HAL_ADC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT | DMA_IT_TC);
 800bc7e:	4b0b      	ldr	r3, [pc, #44]	; (800bcac <stimLib_stepup_adcStartRaw+0x3c>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	4b09      	ldr	r3, [pc, #36]	; (800bcac <stimLib_stepup_adcStartRaw+0x3c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f022 0206 	bic.w	r2, r2, #6
 800bc8c:	601a      	str	r2, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, ADC_IT_OVR);
 800bc8e:	4b06      	ldr	r3, [pc, #24]	; (800bca8 <stimLib_stepup_adcStartRaw+0x38>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	4b04      	ldr	r3, [pc, #16]	; (800bca8 <stimLib_stepup_adcStartRaw+0x38>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f022 0210 	bic.w	r2, r2, #16
 800bc9c:	605a      	str	r2, [r3, #4]
}
 800bc9e:	bf00      	nop
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	200006a0 	.word	0x200006a0
 800bca8:	2000010c 	.word	0x2000010c
 800bcac:	200001d4 	.word	0x200001d4

0800bcb0 <stimLib_stepup_adcStopRaw>:

void stimLib_stepup_adcStopRaw(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 800bcb4:	4802      	ldr	r0, [pc, #8]	; (800bcc0 <stimLib_stepup_adcStopRaw+0x10>)
 800bcb6:	f7f7 fc15 	bl	80034e4 <HAL_ADC_Stop_DMA>
}
 800bcba:	bf00      	nop
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	2000010c 	.word	0x2000010c

0800bcc4 <stimLib_dacctrl_setRaw>:
 * Add in Future
 * Need to create a DAC Control GPIO Function
 * */

void stimLib_dacctrl_setRaw(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
	/* GPIO DAC CONTROL CLEAR */
	HAL_GPIO_WritePin(STIM_LIB_DAC_N0_GPIO_PORT,
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800bcce:	4807      	ldr	r0, [pc, #28]	; (800bcec <stimLib_dacctrl_setRaw+0x28>)
 800bcd0:	f7f9 fe7a 	bl	80059c8 <HAL_GPIO_WritePin>
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN, GPIO_PIN_RESET);

	/* GPIO DAC SETTING */
	HAL_GPIO_WritePin(STIM_LIB_DAC_N0_GPIO_PORT, STIM_LIB_STATE_SIG_DEGREE << 1,
 800bcd4:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <stimLib_dacctrl_setRaw+0x2c>)
 800bcd6:	7a1b      	ldrb	r3, [r3, #8]
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	005b      	lsls	r3, r3, #1
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	2201      	movs	r2, #1
 800bce0:	4619      	mov	r1, r3
 800bce2:	4802      	ldr	r0, [pc, #8]	; (800bcec <stimLib_dacctrl_setRaw+0x28>)
 800bce4:	f7f9 fe70 	bl	80059c8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 800bce8:	bf00      	nop
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	48000400 	.word	0x48000400
 800bcf0:	20000660 	.word	0x20000660

0800bcf4 <stimLib_dacctrl_offRaw>:

void stimLib_dacctrl_offRaw(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	af00      	add	r7, sp, #0
	/* GPIO DAC CONTROL CLEAR */
	HAL_GPIO_WritePin(STIM_LIB_DAC_N0_GPIO_PORT,
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800bcfe:	4802      	ldr	r0, [pc, #8]	; (800bd08 <stimLib_dacctrl_offRaw+0x14>)
 800bd00:	f7f9 fe62 	bl	80059c8 <HAL_GPIO_WritePin>
			STIM_LIB_DAC_N0_PIN | STIM_LIB_DAC_N1_PIN | STIM_LIB_DAC_N2_PIN
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN, GPIO_PIN_RESET);
}
 800bd04:	bf00      	nop
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	48000400 	.word	0x48000400

0800bd0c <__errno>:
 800bd0c:	4b01      	ldr	r3, [pc, #4]	; (800bd14 <__errno+0x8>)
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	2000008c 	.word	0x2000008c

0800bd18 <__libc_init_array>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	4d0d      	ldr	r5, [pc, #52]	; (800bd50 <__libc_init_array+0x38>)
 800bd1c:	4c0d      	ldr	r4, [pc, #52]	; (800bd54 <__libc_init_array+0x3c>)
 800bd1e:	1b64      	subs	r4, r4, r5
 800bd20:	10a4      	asrs	r4, r4, #2
 800bd22:	2600      	movs	r6, #0
 800bd24:	42a6      	cmp	r6, r4
 800bd26:	d109      	bne.n	800bd3c <__libc_init_array+0x24>
 800bd28:	4d0b      	ldr	r5, [pc, #44]	; (800bd58 <__libc_init_array+0x40>)
 800bd2a:	4c0c      	ldr	r4, [pc, #48]	; (800bd5c <__libc_init_array+0x44>)
 800bd2c:	f001 f890 	bl	800ce50 <_init>
 800bd30:	1b64      	subs	r4, r4, r5
 800bd32:	10a4      	asrs	r4, r4, #2
 800bd34:	2600      	movs	r6, #0
 800bd36:	42a6      	cmp	r6, r4
 800bd38:	d105      	bne.n	800bd46 <__libc_init_array+0x2e>
 800bd3a:	bd70      	pop	{r4, r5, r6, pc}
 800bd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd40:	4798      	blx	r3
 800bd42:	3601      	adds	r6, #1
 800bd44:	e7ee      	b.n	800bd24 <__libc_init_array+0xc>
 800bd46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd4a:	4798      	blx	r3
 800bd4c:	3601      	adds	r6, #1
 800bd4e:	e7f2      	b.n	800bd36 <__libc_init_array+0x1e>
 800bd50:	0800d7c8 	.word	0x0800d7c8
 800bd54:	0800d7c8 	.word	0x0800d7c8
 800bd58:	0800d7c8 	.word	0x0800d7c8
 800bd5c:	0800d7cc 	.word	0x0800d7cc

0800bd60 <memcpy>:
 800bd60:	440a      	add	r2, r1
 800bd62:	4291      	cmp	r1, r2
 800bd64:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd68:	d100      	bne.n	800bd6c <memcpy+0xc>
 800bd6a:	4770      	bx	lr
 800bd6c:	b510      	push	{r4, lr}
 800bd6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd76:	4291      	cmp	r1, r2
 800bd78:	d1f9      	bne.n	800bd6e <memcpy+0xe>
 800bd7a:	bd10      	pop	{r4, pc}

0800bd7c <memset>:
 800bd7c:	4402      	add	r2, r0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d100      	bne.n	800bd86 <memset+0xa>
 800bd84:	4770      	bx	lr
 800bd86:	f803 1b01 	strb.w	r1, [r3], #1
 800bd8a:	e7f9      	b.n	800bd80 <memset+0x4>

0800bd8c <iprintf>:
 800bd8c:	b40f      	push	{r0, r1, r2, r3}
 800bd8e:	4b0a      	ldr	r3, [pc, #40]	; (800bdb8 <iprintf+0x2c>)
 800bd90:	b513      	push	{r0, r1, r4, lr}
 800bd92:	681c      	ldr	r4, [r3, #0]
 800bd94:	b124      	cbz	r4, 800bda0 <iprintf+0x14>
 800bd96:	69a3      	ldr	r3, [r4, #24]
 800bd98:	b913      	cbnz	r3, 800bda0 <iprintf+0x14>
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f000 fa74 	bl	800c288 <__sinit>
 800bda0:	ab05      	add	r3, sp, #20
 800bda2:	9a04      	ldr	r2, [sp, #16]
 800bda4:	68a1      	ldr	r1, [r4, #8]
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f000 fc7d 	bl	800c6a8 <_vfiprintf_r>
 800bdae:	b002      	add	sp, #8
 800bdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdb4:	b004      	add	sp, #16
 800bdb6:	4770      	bx	lr
 800bdb8:	2000008c 	.word	0x2000008c

0800bdbc <putchar>:
 800bdbc:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <putchar+0x28>)
 800bdbe:	b513      	push	{r0, r1, r4, lr}
 800bdc0:	681c      	ldr	r4, [r3, #0]
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	b134      	cbz	r4, 800bdd4 <putchar+0x18>
 800bdc6:	69a3      	ldr	r3, [r4, #24]
 800bdc8:	b923      	cbnz	r3, 800bdd4 <putchar+0x18>
 800bdca:	9001      	str	r0, [sp, #4]
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f000 fa5b 	bl	800c288 <__sinit>
 800bdd2:	9901      	ldr	r1, [sp, #4]
 800bdd4:	68a2      	ldr	r2, [r4, #8]
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	b002      	add	sp, #8
 800bdda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdde:	f000 bf27 	b.w	800cc30 <_putc_r>
 800bde2:	bf00      	nop
 800bde4:	2000008c 	.word	0x2000008c

0800bde8 <_puts_r>:
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	460e      	mov	r6, r1
 800bdec:	4605      	mov	r5, r0
 800bdee:	b118      	cbz	r0, 800bdf8 <_puts_r+0x10>
 800bdf0:	6983      	ldr	r3, [r0, #24]
 800bdf2:	b90b      	cbnz	r3, 800bdf8 <_puts_r+0x10>
 800bdf4:	f000 fa48 	bl	800c288 <__sinit>
 800bdf8:	69ab      	ldr	r3, [r5, #24]
 800bdfa:	68ac      	ldr	r4, [r5, #8]
 800bdfc:	b913      	cbnz	r3, 800be04 <_puts_r+0x1c>
 800bdfe:	4628      	mov	r0, r5
 800be00:	f000 fa42 	bl	800c288 <__sinit>
 800be04:	4b2c      	ldr	r3, [pc, #176]	; (800beb8 <_puts_r+0xd0>)
 800be06:	429c      	cmp	r4, r3
 800be08:	d120      	bne.n	800be4c <_puts_r+0x64>
 800be0a:	686c      	ldr	r4, [r5, #4]
 800be0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be0e:	07db      	lsls	r3, r3, #31
 800be10:	d405      	bmi.n	800be1e <_puts_r+0x36>
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	0598      	lsls	r0, r3, #22
 800be16:	d402      	bmi.n	800be1e <_puts_r+0x36>
 800be18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be1a:	f000 fad3 	bl	800c3c4 <__retarget_lock_acquire_recursive>
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	0719      	lsls	r1, r3, #28
 800be22:	d51d      	bpl.n	800be60 <_puts_r+0x78>
 800be24:	6923      	ldr	r3, [r4, #16]
 800be26:	b1db      	cbz	r3, 800be60 <_puts_r+0x78>
 800be28:	3e01      	subs	r6, #1
 800be2a:	68a3      	ldr	r3, [r4, #8]
 800be2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be30:	3b01      	subs	r3, #1
 800be32:	60a3      	str	r3, [r4, #8]
 800be34:	bb39      	cbnz	r1, 800be86 <_puts_r+0x9e>
 800be36:	2b00      	cmp	r3, #0
 800be38:	da38      	bge.n	800beac <_puts_r+0xc4>
 800be3a:	4622      	mov	r2, r4
 800be3c:	210a      	movs	r1, #10
 800be3e:	4628      	mov	r0, r5
 800be40:	f000 f848 	bl	800bed4 <__swbuf_r>
 800be44:	3001      	adds	r0, #1
 800be46:	d011      	beq.n	800be6c <_puts_r+0x84>
 800be48:	250a      	movs	r5, #10
 800be4a:	e011      	b.n	800be70 <_puts_r+0x88>
 800be4c:	4b1b      	ldr	r3, [pc, #108]	; (800bebc <_puts_r+0xd4>)
 800be4e:	429c      	cmp	r4, r3
 800be50:	d101      	bne.n	800be56 <_puts_r+0x6e>
 800be52:	68ac      	ldr	r4, [r5, #8]
 800be54:	e7da      	b.n	800be0c <_puts_r+0x24>
 800be56:	4b1a      	ldr	r3, [pc, #104]	; (800bec0 <_puts_r+0xd8>)
 800be58:	429c      	cmp	r4, r3
 800be5a:	bf08      	it	eq
 800be5c:	68ec      	ldreq	r4, [r5, #12]
 800be5e:	e7d5      	b.n	800be0c <_puts_r+0x24>
 800be60:	4621      	mov	r1, r4
 800be62:	4628      	mov	r0, r5
 800be64:	f000 f888 	bl	800bf78 <__swsetup_r>
 800be68:	2800      	cmp	r0, #0
 800be6a:	d0dd      	beq.n	800be28 <_puts_r+0x40>
 800be6c:	f04f 35ff 	mov.w	r5, #4294967295
 800be70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be72:	07da      	lsls	r2, r3, #31
 800be74:	d405      	bmi.n	800be82 <_puts_r+0x9a>
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	059b      	lsls	r3, r3, #22
 800be7a:	d402      	bmi.n	800be82 <_puts_r+0x9a>
 800be7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be7e:	f000 faa2 	bl	800c3c6 <__retarget_lock_release_recursive>
 800be82:	4628      	mov	r0, r5
 800be84:	bd70      	pop	{r4, r5, r6, pc}
 800be86:	2b00      	cmp	r3, #0
 800be88:	da04      	bge.n	800be94 <_puts_r+0xac>
 800be8a:	69a2      	ldr	r2, [r4, #24]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	dc06      	bgt.n	800be9e <_puts_r+0xb6>
 800be90:	290a      	cmp	r1, #10
 800be92:	d004      	beq.n	800be9e <_puts_r+0xb6>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	6022      	str	r2, [r4, #0]
 800be9a:	7019      	strb	r1, [r3, #0]
 800be9c:	e7c5      	b.n	800be2a <_puts_r+0x42>
 800be9e:	4622      	mov	r2, r4
 800bea0:	4628      	mov	r0, r5
 800bea2:	f000 f817 	bl	800bed4 <__swbuf_r>
 800bea6:	3001      	adds	r0, #1
 800bea8:	d1bf      	bne.n	800be2a <_puts_r+0x42>
 800beaa:	e7df      	b.n	800be6c <_puts_r+0x84>
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	250a      	movs	r5, #10
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	6022      	str	r2, [r4, #0]
 800beb4:	701d      	strb	r5, [r3, #0]
 800beb6:	e7db      	b.n	800be70 <_puts_r+0x88>
 800beb8:	0800d74c 	.word	0x0800d74c
 800bebc:	0800d76c 	.word	0x0800d76c
 800bec0:	0800d72c 	.word	0x0800d72c

0800bec4 <puts>:
 800bec4:	4b02      	ldr	r3, [pc, #8]	; (800bed0 <puts+0xc>)
 800bec6:	4601      	mov	r1, r0
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	f7ff bf8d 	b.w	800bde8 <_puts_r>
 800bece:	bf00      	nop
 800bed0:	2000008c 	.word	0x2000008c

0800bed4 <__swbuf_r>:
 800bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed6:	460e      	mov	r6, r1
 800bed8:	4614      	mov	r4, r2
 800beda:	4605      	mov	r5, r0
 800bedc:	b118      	cbz	r0, 800bee6 <__swbuf_r+0x12>
 800bede:	6983      	ldr	r3, [r0, #24]
 800bee0:	b90b      	cbnz	r3, 800bee6 <__swbuf_r+0x12>
 800bee2:	f000 f9d1 	bl	800c288 <__sinit>
 800bee6:	4b21      	ldr	r3, [pc, #132]	; (800bf6c <__swbuf_r+0x98>)
 800bee8:	429c      	cmp	r4, r3
 800beea:	d12b      	bne.n	800bf44 <__swbuf_r+0x70>
 800beec:	686c      	ldr	r4, [r5, #4]
 800beee:	69a3      	ldr	r3, [r4, #24]
 800bef0:	60a3      	str	r3, [r4, #8]
 800bef2:	89a3      	ldrh	r3, [r4, #12]
 800bef4:	071a      	lsls	r2, r3, #28
 800bef6:	d52f      	bpl.n	800bf58 <__swbuf_r+0x84>
 800bef8:	6923      	ldr	r3, [r4, #16]
 800befa:	b36b      	cbz	r3, 800bf58 <__swbuf_r+0x84>
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	6820      	ldr	r0, [r4, #0]
 800bf00:	1ac0      	subs	r0, r0, r3
 800bf02:	6963      	ldr	r3, [r4, #20]
 800bf04:	b2f6      	uxtb	r6, r6
 800bf06:	4283      	cmp	r3, r0
 800bf08:	4637      	mov	r7, r6
 800bf0a:	dc04      	bgt.n	800bf16 <__swbuf_r+0x42>
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f000 f926 	bl	800c160 <_fflush_r>
 800bf14:	bb30      	cbnz	r0, 800bf64 <__swbuf_r+0x90>
 800bf16:	68a3      	ldr	r3, [r4, #8]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	60a3      	str	r3, [r4, #8]
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	6022      	str	r2, [r4, #0]
 800bf22:	701e      	strb	r6, [r3, #0]
 800bf24:	6963      	ldr	r3, [r4, #20]
 800bf26:	3001      	adds	r0, #1
 800bf28:	4283      	cmp	r3, r0
 800bf2a:	d004      	beq.n	800bf36 <__swbuf_r+0x62>
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	07db      	lsls	r3, r3, #31
 800bf30:	d506      	bpl.n	800bf40 <__swbuf_r+0x6c>
 800bf32:	2e0a      	cmp	r6, #10
 800bf34:	d104      	bne.n	800bf40 <__swbuf_r+0x6c>
 800bf36:	4621      	mov	r1, r4
 800bf38:	4628      	mov	r0, r5
 800bf3a:	f000 f911 	bl	800c160 <_fflush_r>
 800bf3e:	b988      	cbnz	r0, 800bf64 <__swbuf_r+0x90>
 800bf40:	4638      	mov	r0, r7
 800bf42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf44:	4b0a      	ldr	r3, [pc, #40]	; (800bf70 <__swbuf_r+0x9c>)
 800bf46:	429c      	cmp	r4, r3
 800bf48:	d101      	bne.n	800bf4e <__swbuf_r+0x7a>
 800bf4a:	68ac      	ldr	r4, [r5, #8]
 800bf4c:	e7cf      	b.n	800beee <__swbuf_r+0x1a>
 800bf4e:	4b09      	ldr	r3, [pc, #36]	; (800bf74 <__swbuf_r+0xa0>)
 800bf50:	429c      	cmp	r4, r3
 800bf52:	bf08      	it	eq
 800bf54:	68ec      	ldreq	r4, [r5, #12]
 800bf56:	e7ca      	b.n	800beee <__swbuf_r+0x1a>
 800bf58:	4621      	mov	r1, r4
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	f000 f80c 	bl	800bf78 <__swsetup_r>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d0cb      	beq.n	800befc <__swbuf_r+0x28>
 800bf64:	f04f 37ff 	mov.w	r7, #4294967295
 800bf68:	e7ea      	b.n	800bf40 <__swbuf_r+0x6c>
 800bf6a:	bf00      	nop
 800bf6c:	0800d74c 	.word	0x0800d74c
 800bf70:	0800d76c 	.word	0x0800d76c
 800bf74:	0800d72c 	.word	0x0800d72c

0800bf78 <__swsetup_r>:
 800bf78:	4b32      	ldr	r3, [pc, #200]	; (800c044 <__swsetup_r+0xcc>)
 800bf7a:	b570      	push	{r4, r5, r6, lr}
 800bf7c:	681d      	ldr	r5, [r3, #0]
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460c      	mov	r4, r1
 800bf82:	b125      	cbz	r5, 800bf8e <__swsetup_r+0x16>
 800bf84:	69ab      	ldr	r3, [r5, #24]
 800bf86:	b913      	cbnz	r3, 800bf8e <__swsetup_r+0x16>
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f000 f97d 	bl	800c288 <__sinit>
 800bf8e:	4b2e      	ldr	r3, [pc, #184]	; (800c048 <__swsetup_r+0xd0>)
 800bf90:	429c      	cmp	r4, r3
 800bf92:	d10f      	bne.n	800bfb4 <__swsetup_r+0x3c>
 800bf94:	686c      	ldr	r4, [r5, #4]
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf9c:	0719      	lsls	r1, r3, #28
 800bf9e:	d42c      	bmi.n	800bffa <__swsetup_r+0x82>
 800bfa0:	06dd      	lsls	r5, r3, #27
 800bfa2:	d411      	bmi.n	800bfc8 <__swsetup_r+0x50>
 800bfa4:	2309      	movs	r3, #9
 800bfa6:	6033      	str	r3, [r6, #0]
 800bfa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bfac:	81a3      	strh	r3, [r4, #12]
 800bfae:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb2:	e03e      	b.n	800c032 <__swsetup_r+0xba>
 800bfb4:	4b25      	ldr	r3, [pc, #148]	; (800c04c <__swsetup_r+0xd4>)
 800bfb6:	429c      	cmp	r4, r3
 800bfb8:	d101      	bne.n	800bfbe <__swsetup_r+0x46>
 800bfba:	68ac      	ldr	r4, [r5, #8]
 800bfbc:	e7eb      	b.n	800bf96 <__swsetup_r+0x1e>
 800bfbe:	4b24      	ldr	r3, [pc, #144]	; (800c050 <__swsetup_r+0xd8>)
 800bfc0:	429c      	cmp	r4, r3
 800bfc2:	bf08      	it	eq
 800bfc4:	68ec      	ldreq	r4, [r5, #12]
 800bfc6:	e7e6      	b.n	800bf96 <__swsetup_r+0x1e>
 800bfc8:	0758      	lsls	r0, r3, #29
 800bfca:	d512      	bpl.n	800bff2 <__swsetup_r+0x7a>
 800bfcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfce:	b141      	cbz	r1, 800bfe2 <__swsetup_r+0x6a>
 800bfd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfd4:	4299      	cmp	r1, r3
 800bfd6:	d002      	beq.n	800bfde <__swsetup_r+0x66>
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f000 fa5b 	bl	800c494 <_free_r>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	6363      	str	r3, [r4, #52]	; 0x34
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfe8:	81a3      	strh	r3, [r4, #12]
 800bfea:	2300      	movs	r3, #0
 800bfec:	6063      	str	r3, [r4, #4]
 800bfee:	6923      	ldr	r3, [r4, #16]
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	89a3      	ldrh	r3, [r4, #12]
 800bff4:	f043 0308 	orr.w	r3, r3, #8
 800bff8:	81a3      	strh	r3, [r4, #12]
 800bffa:	6923      	ldr	r3, [r4, #16]
 800bffc:	b94b      	cbnz	r3, 800c012 <__swsetup_r+0x9a>
 800bffe:	89a3      	ldrh	r3, [r4, #12]
 800c000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c008:	d003      	beq.n	800c012 <__swsetup_r+0x9a>
 800c00a:	4621      	mov	r1, r4
 800c00c:	4630      	mov	r0, r6
 800c00e:	f000 fa01 	bl	800c414 <__smakebuf_r>
 800c012:	89a0      	ldrh	r0, [r4, #12]
 800c014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c018:	f010 0301 	ands.w	r3, r0, #1
 800c01c:	d00a      	beq.n	800c034 <__swsetup_r+0xbc>
 800c01e:	2300      	movs	r3, #0
 800c020:	60a3      	str	r3, [r4, #8]
 800c022:	6963      	ldr	r3, [r4, #20]
 800c024:	425b      	negs	r3, r3
 800c026:	61a3      	str	r3, [r4, #24]
 800c028:	6923      	ldr	r3, [r4, #16]
 800c02a:	b943      	cbnz	r3, 800c03e <__swsetup_r+0xc6>
 800c02c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c030:	d1ba      	bne.n	800bfa8 <__swsetup_r+0x30>
 800c032:	bd70      	pop	{r4, r5, r6, pc}
 800c034:	0781      	lsls	r1, r0, #30
 800c036:	bf58      	it	pl
 800c038:	6963      	ldrpl	r3, [r4, #20]
 800c03a:	60a3      	str	r3, [r4, #8]
 800c03c:	e7f4      	b.n	800c028 <__swsetup_r+0xb0>
 800c03e:	2000      	movs	r0, #0
 800c040:	e7f7      	b.n	800c032 <__swsetup_r+0xba>
 800c042:	bf00      	nop
 800c044:	2000008c 	.word	0x2000008c
 800c048:	0800d74c 	.word	0x0800d74c
 800c04c:	0800d76c 	.word	0x0800d76c
 800c050:	0800d72c 	.word	0x0800d72c

0800c054 <__sflush_r>:
 800c054:	898a      	ldrh	r2, [r1, #12]
 800c056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05a:	4605      	mov	r5, r0
 800c05c:	0710      	lsls	r0, r2, #28
 800c05e:	460c      	mov	r4, r1
 800c060:	d458      	bmi.n	800c114 <__sflush_r+0xc0>
 800c062:	684b      	ldr	r3, [r1, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	dc05      	bgt.n	800c074 <__sflush_r+0x20>
 800c068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	dc02      	bgt.n	800c074 <__sflush_r+0x20>
 800c06e:	2000      	movs	r0, #0
 800c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c076:	2e00      	cmp	r6, #0
 800c078:	d0f9      	beq.n	800c06e <__sflush_r+0x1a>
 800c07a:	2300      	movs	r3, #0
 800c07c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c080:	682f      	ldr	r7, [r5, #0]
 800c082:	602b      	str	r3, [r5, #0]
 800c084:	d032      	beq.n	800c0ec <__sflush_r+0x98>
 800c086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	075a      	lsls	r2, r3, #29
 800c08c:	d505      	bpl.n	800c09a <__sflush_r+0x46>
 800c08e:	6863      	ldr	r3, [r4, #4]
 800c090:	1ac0      	subs	r0, r0, r3
 800c092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c094:	b10b      	cbz	r3, 800c09a <__sflush_r+0x46>
 800c096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c098:	1ac0      	subs	r0, r0, r3
 800c09a:	2300      	movs	r3, #0
 800c09c:	4602      	mov	r2, r0
 800c09e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0a0:	6a21      	ldr	r1, [r4, #32]
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b0      	blx	r6
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	89a3      	ldrh	r3, [r4, #12]
 800c0aa:	d106      	bne.n	800c0ba <__sflush_r+0x66>
 800c0ac:	6829      	ldr	r1, [r5, #0]
 800c0ae:	291d      	cmp	r1, #29
 800c0b0:	d82c      	bhi.n	800c10c <__sflush_r+0xb8>
 800c0b2:	4a2a      	ldr	r2, [pc, #168]	; (800c15c <__sflush_r+0x108>)
 800c0b4:	40ca      	lsrs	r2, r1
 800c0b6:	07d6      	lsls	r6, r2, #31
 800c0b8:	d528      	bpl.n	800c10c <__sflush_r+0xb8>
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	6062      	str	r2, [r4, #4]
 800c0be:	04d9      	lsls	r1, r3, #19
 800c0c0:	6922      	ldr	r2, [r4, #16]
 800c0c2:	6022      	str	r2, [r4, #0]
 800c0c4:	d504      	bpl.n	800c0d0 <__sflush_r+0x7c>
 800c0c6:	1c42      	adds	r2, r0, #1
 800c0c8:	d101      	bne.n	800c0ce <__sflush_r+0x7a>
 800c0ca:	682b      	ldr	r3, [r5, #0]
 800c0cc:	b903      	cbnz	r3, 800c0d0 <__sflush_r+0x7c>
 800c0ce:	6560      	str	r0, [r4, #84]	; 0x54
 800c0d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0d2:	602f      	str	r7, [r5, #0]
 800c0d4:	2900      	cmp	r1, #0
 800c0d6:	d0ca      	beq.n	800c06e <__sflush_r+0x1a>
 800c0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0dc:	4299      	cmp	r1, r3
 800c0de:	d002      	beq.n	800c0e6 <__sflush_r+0x92>
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	f000 f9d7 	bl	800c494 <_free_r>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	6360      	str	r0, [r4, #52]	; 0x34
 800c0ea:	e7c1      	b.n	800c070 <__sflush_r+0x1c>
 800c0ec:	6a21      	ldr	r1, [r4, #32]
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	47b0      	blx	r6
 800c0f4:	1c41      	adds	r1, r0, #1
 800c0f6:	d1c7      	bne.n	800c088 <__sflush_r+0x34>
 800c0f8:	682b      	ldr	r3, [r5, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d0c4      	beq.n	800c088 <__sflush_r+0x34>
 800c0fe:	2b1d      	cmp	r3, #29
 800c100:	d001      	beq.n	800c106 <__sflush_r+0xb2>
 800c102:	2b16      	cmp	r3, #22
 800c104:	d101      	bne.n	800c10a <__sflush_r+0xb6>
 800c106:	602f      	str	r7, [r5, #0]
 800c108:	e7b1      	b.n	800c06e <__sflush_r+0x1a>
 800c10a:	89a3      	ldrh	r3, [r4, #12]
 800c10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c110:	81a3      	strh	r3, [r4, #12]
 800c112:	e7ad      	b.n	800c070 <__sflush_r+0x1c>
 800c114:	690f      	ldr	r7, [r1, #16]
 800c116:	2f00      	cmp	r7, #0
 800c118:	d0a9      	beq.n	800c06e <__sflush_r+0x1a>
 800c11a:	0793      	lsls	r3, r2, #30
 800c11c:	680e      	ldr	r6, [r1, #0]
 800c11e:	bf08      	it	eq
 800c120:	694b      	ldreq	r3, [r1, #20]
 800c122:	600f      	str	r7, [r1, #0]
 800c124:	bf18      	it	ne
 800c126:	2300      	movne	r3, #0
 800c128:	eba6 0807 	sub.w	r8, r6, r7
 800c12c:	608b      	str	r3, [r1, #8]
 800c12e:	f1b8 0f00 	cmp.w	r8, #0
 800c132:	dd9c      	ble.n	800c06e <__sflush_r+0x1a>
 800c134:	6a21      	ldr	r1, [r4, #32]
 800c136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c138:	4643      	mov	r3, r8
 800c13a:	463a      	mov	r2, r7
 800c13c:	4628      	mov	r0, r5
 800c13e:	47b0      	blx	r6
 800c140:	2800      	cmp	r0, #0
 800c142:	dc06      	bgt.n	800c152 <__sflush_r+0xfe>
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c14a:	81a3      	strh	r3, [r4, #12]
 800c14c:	f04f 30ff 	mov.w	r0, #4294967295
 800c150:	e78e      	b.n	800c070 <__sflush_r+0x1c>
 800c152:	4407      	add	r7, r0
 800c154:	eba8 0800 	sub.w	r8, r8, r0
 800c158:	e7e9      	b.n	800c12e <__sflush_r+0xda>
 800c15a:	bf00      	nop
 800c15c:	20400001 	.word	0x20400001

0800c160 <_fflush_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	690b      	ldr	r3, [r1, #16]
 800c164:	4605      	mov	r5, r0
 800c166:	460c      	mov	r4, r1
 800c168:	b913      	cbnz	r3, 800c170 <_fflush_r+0x10>
 800c16a:	2500      	movs	r5, #0
 800c16c:	4628      	mov	r0, r5
 800c16e:	bd38      	pop	{r3, r4, r5, pc}
 800c170:	b118      	cbz	r0, 800c17a <_fflush_r+0x1a>
 800c172:	6983      	ldr	r3, [r0, #24]
 800c174:	b90b      	cbnz	r3, 800c17a <_fflush_r+0x1a>
 800c176:	f000 f887 	bl	800c288 <__sinit>
 800c17a:	4b14      	ldr	r3, [pc, #80]	; (800c1cc <_fflush_r+0x6c>)
 800c17c:	429c      	cmp	r4, r3
 800c17e:	d11b      	bne.n	800c1b8 <_fflush_r+0x58>
 800c180:	686c      	ldr	r4, [r5, #4]
 800c182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d0ef      	beq.n	800c16a <_fflush_r+0xa>
 800c18a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c18c:	07d0      	lsls	r0, r2, #31
 800c18e:	d404      	bmi.n	800c19a <_fflush_r+0x3a>
 800c190:	0599      	lsls	r1, r3, #22
 800c192:	d402      	bmi.n	800c19a <_fflush_r+0x3a>
 800c194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c196:	f000 f915 	bl	800c3c4 <__retarget_lock_acquire_recursive>
 800c19a:	4628      	mov	r0, r5
 800c19c:	4621      	mov	r1, r4
 800c19e:	f7ff ff59 	bl	800c054 <__sflush_r>
 800c1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1a4:	07da      	lsls	r2, r3, #31
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	d4e0      	bmi.n	800c16c <_fflush_r+0xc>
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	059b      	lsls	r3, r3, #22
 800c1ae:	d4dd      	bmi.n	800c16c <_fflush_r+0xc>
 800c1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1b2:	f000 f908 	bl	800c3c6 <__retarget_lock_release_recursive>
 800c1b6:	e7d9      	b.n	800c16c <_fflush_r+0xc>
 800c1b8:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <_fflush_r+0x70>)
 800c1ba:	429c      	cmp	r4, r3
 800c1bc:	d101      	bne.n	800c1c2 <_fflush_r+0x62>
 800c1be:	68ac      	ldr	r4, [r5, #8]
 800c1c0:	e7df      	b.n	800c182 <_fflush_r+0x22>
 800c1c2:	4b04      	ldr	r3, [pc, #16]	; (800c1d4 <_fflush_r+0x74>)
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	bf08      	it	eq
 800c1c8:	68ec      	ldreq	r4, [r5, #12]
 800c1ca:	e7da      	b.n	800c182 <_fflush_r+0x22>
 800c1cc:	0800d74c 	.word	0x0800d74c
 800c1d0:	0800d76c 	.word	0x0800d76c
 800c1d4:	0800d72c 	.word	0x0800d72c

0800c1d8 <std>:
 800c1d8:	2300      	movs	r3, #0
 800c1da:	b510      	push	{r4, lr}
 800c1dc:	4604      	mov	r4, r0
 800c1de:	e9c0 3300 	strd	r3, r3, [r0]
 800c1e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1e6:	6083      	str	r3, [r0, #8]
 800c1e8:	8181      	strh	r1, [r0, #12]
 800c1ea:	6643      	str	r3, [r0, #100]	; 0x64
 800c1ec:	81c2      	strh	r2, [r0, #14]
 800c1ee:	6183      	str	r3, [r0, #24]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	2208      	movs	r2, #8
 800c1f4:	305c      	adds	r0, #92	; 0x5c
 800c1f6:	f7ff fdc1 	bl	800bd7c <memset>
 800c1fa:	4b05      	ldr	r3, [pc, #20]	; (800c210 <std+0x38>)
 800c1fc:	6263      	str	r3, [r4, #36]	; 0x24
 800c1fe:	4b05      	ldr	r3, [pc, #20]	; (800c214 <std+0x3c>)
 800c200:	62a3      	str	r3, [r4, #40]	; 0x28
 800c202:	4b05      	ldr	r3, [pc, #20]	; (800c218 <std+0x40>)
 800c204:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c206:	4b05      	ldr	r3, [pc, #20]	; (800c21c <std+0x44>)
 800c208:	6224      	str	r4, [r4, #32]
 800c20a:	6323      	str	r3, [r4, #48]	; 0x30
 800c20c:	bd10      	pop	{r4, pc}
 800c20e:	bf00      	nop
 800c210:	0800cce1 	.word	0x0800cce1
 800c214:	0800cd03 	.word	0x0800cd03
 800c218:	0800cd3b 	.word	0x0800cd3b
 800c21c:	0800cd5f 	.word	0x0800cd5f

0800c220 <_cleanup_r>:
 800c220:	4901      	ldr	r1, [pc, #4]	; (800c228 <_cleanup_r+0x8>)
 800c222:	f000 b8af 	b.w	800c384 <_fwalk_reent>
 800c226:	bf00      	nop
 800c228:	0800c161 	.word	0x0800c161

0800c22c <__sfmoreglue>:
 800c22c:	b570      	push	{r4, r5, r6, lr}
 800c22e:	2268      	movs	r2, #104	; 0x68
 800c230:	1e4d      	subs	r5, r1, #1
 800c232:	4355      	muls	r5, r2
 800c234:	460e      	mov	r6, r1
 800c236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c23a:	f000 f997 	bl	800c56c <_malloc_r>
 800c23e:	4604      	mov	r4, r0
 800c240:	b140      	cbz	r0, 800c254 <__sfmoreglue+0x28>
 800c242:	2100      	movs	r1, #0
 800c244:	e9c0 1600 	strd	r1, r6, [r0]
 800c248:	300c      	adds	r0, #12
 800c24a:	60a0      	str	r0, [r4, #8]
 800c24c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c250:	f7ff fd94 	bl	800bd7c <memset>
 800c254:	4620      	mov	r0, r4
 800c256:	bd70      	pop	{r4, r5, r6, pc}

0800c258 <__sfp_lock_acquire>:
 800c258:	4801      	ldr	r0, [pc, #4]	; (800c260 <__sfp_lock_acquire+0x8>)
 800c25a:	f000 b8b3 	b.w	800c3c4 <__retarget_lock_acquire_recursive>
 800c25e:	bf00      	nop
 800c260:	200006d1 	.word	0x200006d1

0800c264 <__sfp_lock_release>:
 800c264:	4801      	ldr	r0, [pc, #4]	; (800c26c <__sfp_lock_release+0x8>)
 800c266:	f000 b8ae 	b.w	800c3c6 <__retarget_lock_release_recursive>
 800c26a:	bf00      	nop
 800c26c:	200006d1 	.word	0x200006d1

0800c270 <__sinit_lock_acquire>:
 800c270:	4801      	ldr	r0, [pc, #4]	; (800c278 <__sinit_lock_acquire+0x8>)
 800c272:	f000 b8a7 	b.w	800c3c4 <__retarget_lock_acquire_recursive>
 800c276:	bf00      	nop
 800c278:	200006d2 	.word	0x200006d2

0800c27c <__sinit_lock_release>:
 800c27c:	4801      	ldr	r0, [pc, #4]	; (800c284 <__sinit_lock_release+0x8>)
 800c27e:	f000 b8a2 	b.w	800c3c6 <__retarget_lock_release_recursive>
 800c282:	bf00      	nop
 800c284:	200006d2 	.word	0x200006d2

0800c288 <__sinit>:
 800c288:	b510      	push	{r4, lr}
 800c28a:	4604      	mov	r4, r0
 800c28c:	f7ff fff0 	bl	800c270 <__sinit_lock_acquire>
 800c290:	69a3      	ldr	r3, [r4, #24]
 800c292:	b11b      	cbz	r3, 800c29c <__sinit+0x14>
 800c294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c298:	f7ff bff0 	b.w	800c27c <__sinit_lock_release>
 800c29c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2a0:	6523      	str	r3, [r4, #80]	; 0x50
 800c2a2:	4b13      	ldr	r3, [pc, #76]	; (800c2f0 <__sinit+0x68>)
 800c2a4:	4a13      	ldr	r2, [pc, #76]	; (800c2f4 <__sinit+0x6c>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2aa:	42a3      	cmp	r3, r4
 800c2ac:	bf04      	itt	eq
 800c2ae:	2301      	moveq	r3, #1
 800c2b0:	61a3      	streq	r3, [r4, #24]
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f000 f820 	bl	800c2f8 <__sfp>
 800c2b8:	6060      	str	r0, [r4, #4]
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f000 f81c 	bl	800c2f8 <__sfp>
 800c2c0:	60a0      	str	r0, [r4, #8]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f000 f818 	bl	800c2f8 <__sfp>
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	60e0      	str	r0, [r4, #12]
 800c2cc:	2104      	movs	r1, #4
 800c2ce:	6860      	ldr	r0, [r4, #4]
 800c2d0:	f7ff ff82 	bl	800c1d8 <std>
 800c2d4:	68a0      	ldr	r0, [r4, #8]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	2109      	movs	r1, #9
 800c2da:	f7ff ff7d 	bl	800c1d8 <std>
 800c2de:	68e0      	ldr	r0, [r4, #12]
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	2112      	movs	r1, #18
 800c2e4:	f7ff ff78 	bl	800c1d8 <std>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	61a3      	str	r3, [r4, #24]
 800c2ec:	e7d2      	b.n	800c294 <__sinit+0xc>
 800c2ee:	bf00      	nop
 800c2f0:	0800d728 	.word	0x0800d728
 800c2f4:	0800c221 	.word	0x0800c221

0800c2f8 <__sfp>:
 800c2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fa:	4607      	mov	r7, r0
 800c2fc:	f7ff ffac 	bl	800c258 <__sfp_lock_acquire>
 800c300:	4b1e      	ldr	r3, [pc, #120]	; (800c37c <__sfp+0x84>)
 800c302:	681e      	ldr	r6, [r3, #0]
 800c304:	69b3      	ldr	r3, [r6, #24]
 800c306:	b913      	cbnz	r3, 800c30e <__sfp+0x16>
 800c308:	4630      	mov	r0, r6
 800c30a:	f7ff ffbd 	bl	800c288 <__sinit>
 800c30e:	3648      	adds	r6, #72	; 0x48
 800c310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c314:	3b01      	subs	r3, #1
 800c316:	d503      	bpl.n	800c320 <__sfp+0x28>
 800c318:	6833      	ldr	r3, [r6, #0]
 800c31a:	b30b      	cbz	r3, 800c360 <__sfp+0x68>
 800c31c:	6836      	ldr	r6, [r6, #0]
 800c31e:	e7f7      	b.n	800c310 <__sfp+0x18>
 800c320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c324:	b9d5      	cbnz	r5, 800c35c <__sfp+0x64>
 800c326:	4b16      	ldr	r3, [pc, #88]	; (800c380 <__sfp+0x88>)
 800c328:	60e3      	str	r3, [r4, #12]
 800c32a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c32e:	6665      	str	r5, [r4, #100]	; 0x64
 800c330:	f000 f847 	bl	800c3c2 <__retarget_lock_init_recursive>
 800c334:	f7ff ff96 	bl	800c264 <__sfp_lock_release>
 800c338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c33c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c340:	6025      	str	r5, [r4, #0]
 800c342:	61a5      	str	r5, [r4, #24]
 800c344:	2208      	movs	r2, #8
 800c346:	4629      	mov	r1, r5
 800c348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c34c:	f7ff fd16 	bl	800bd7c <memset>
 800c350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c358:	4620      	mov	r0, r4
 800c35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c35c:	3468      	adds	r4, #104	; 0x68
 800c35e:	e7d9      	b.n	800c314 <__sfp+0x1c>
 800c360:	2104      	movs	r1, #4
 800c362:	4638      	mov	r0, r7
 800c364:	f7ff ff62 	bl	800c22c <__sfmoreglue>
 800c368:	4604      	mov	r4, r0
 800c36a:	6030      	str	r0, [r6, #0]
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d1d5      	bne.n	800c31c <__sfp+0x24>
 800c370:	f7ff ff78 	bl	800c264 <__sfp_lock_release>
 800c374:	230c      	movs	r3, #12
 800c376:	603b      	str	r3, [r7, #0]
 800c378:	e7ee      	b.n	800c358 <__sfp+0x60>
 800c37a:	bf00      	nop
 800c37c:	0800d728 	.word	0x0800d728
 800c380:	ffff0001 	.word	0xffff0001

0800c384 <_fwalk_reent>:
 800c384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c388:	4606      	mov	r6, r0
 800c38a:	4688      	mov	r8, r1
 800c38c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c390:	2700      	movs	r7, #0
 800c392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c396:	f1b9 0901 	subs.w	r9, r9, #1
 800c39a:	d505      	bpl.n	800c3a8 <_fwalk_reent+0x24>
 800c39c:	6824      	ldr	r4, [r4, #0]
 800c39e:	2c00      	cmp	r4, #0
 800c3a0:	d1f7      	bne.n	800c392 <_fwalk_reent+0xe>
 800c3a2:	4638      	mov	r0, r7
 800c3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3a8:	89ab      	ldrh	r3, [r5, #12]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d907      	bls.n	800c3be <_fwalk_reent+0x3a>
 800c3ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	d003      	beq.n	800c3be <_fwalk_reent+0x3a>
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	47c0      	blx	r8
 800c3bc:	4307      	orrs	r7, r0
 800c3be:	3568      	adds	r5, #104	; 0x68
 800c3c0:	e7e9      	b.n	800c396 <_fwalk_reent+0x12>

0800c3c2 <__retarget_lock_init_recursive>:
 800c3c2:	4770      	bx	lr

0800c3c4 <__retarget_lock_acquire_recursive>:
 800c3c4:	4770      	bx	lr

0800c3c6 <__retarget_lock_release_recursive>:
 800c3c6:	4770      	bx	lr

0800c3c8 <__swhatbuf_r>:
 800c3c8:	b570      	push	{r4, r5, r6, lr}
 800c3ca:	460e      	mov	r6, r1
 800c3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d0:	2900      	cmp	r1, #0
 800c3d2:	b096      	sub	sp, #88	; 0x58
 800c3d4:	4614      	mov	r4, r2
 800c3d6:	461d      	mov	r5, r3
 800c3d8:	da08      	bge.n	800c3ec <__swhatbuf_r+0x24>
 800c3da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	602a      	str	r2, [r5, #0]
 800c3e2:	061a      	lsls	r2, r3, #24
 800c3e4:	d410      	bmi.n	800c408 <__swhatbuf_r+0x40>
 800c3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ea:	e00e      	b.n	800c40a <__swhatbuf_r+0x42>
 800c3ec:	466a      	mov	r2, sp
 800c3ee:	f000 fcdd 	bl	800cdac <_fstat_r>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	dbf1      	blt.n	800c3da <__swhatbuf_r+0x12>
 800c3f6:	9a01      	ldr	r2, [sp, #4]
 800c3f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c400:	425a      	negs	r2, r3
 800c402:	415a      	adcs	r2, r3
 800c404:	602a      	str	r2, [r5, #0]
 800c406:	e7ee      	b.n	800c3e6 <__swhatbuf_r+0x1e>
 800c408:	2340      	movs	r3, #64	; 0x40
 800c40a:	2000      	movs	r0, #0
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	b016      	add	sp, #88	; 0x58
 800c410:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c414 <__smakebuf_r>:
 800c414:	898b      	ldrh	r3, [r1, #12]
 800c416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c418:	079d      	lsls	r5, r3, #30
 800c41a:	4606      	mov	r6, r0
 800c41c:	460c      	mov	r4, r1
 800c41e:	d507      	bpl.n	800c430 <__smakebuf_r+0x1c>
 800c420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	6123      	str	r3, [r4, #16]
 800c428:	2301      	movs	r3, #1
 800c42a:	6163      	str	r3, [r4, #20]
 800c42c:	b002      	add	sp, #8
 800c42e:	bd70      	pop	{r4, r5, r6, pc}
 800c430:	ab01      	add	r3, sp, #4
 800c432:	466a      	mov	r2, sp
 800c434:	f7ff ffc8 	bl	800c3c8 <__swhatbuf_r>
 800c438:	9900      	ldr	r1, [sp, #0]
 800c43a:	4605      	mov	r5, r0
 800c43c:	4630      	mov	r0, r6
 800c43e:	f000 f895 	bl	800c56c <_malloc_r>
 800c442:	b948      	cbnz	r0, 800c458 <__smakebuf_r+0x44>
 800c444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c448:	059a      	lsls	r2, r3, #22
 800c44a:	d4ef      	bmi.n	800c42c <__smakebuf_r+0x18>
 800c44c:	f023 0303 	bic.w	r3, r3, #3
 800c450:	f043 0302 	orr.w	r3, r3, #2
 800c454:	81a3      	strh	r3, [r4, #12]
 800c456:	e7e3      	b.n	800c420 <__smakebuf_r+0xc>
 800c458:	4b0d      	ldr	r3, [pc, #52]	; (800c490 <__smakebuf_r+0x7c>)
 800c45a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	6020      	str	r0, [r4, #0]
 800c460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c464:	81a3      	strh	r3, [r4, #12]
 800c466:	9b00      	ldr	r3, [sp, #0]
 800c468:	6163      	str	r3, [r4, #20]
 800c46a:	9b01      	ldr	r3, [sp, #4]
 800c46c:	6120      	str	r0, [r4, #16]
 800c46e:	b15b      	cbz	r3, 800c488 <__smakebuf_r+0x74>
 800c470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c474:	4630      	mov	r0, r6
 800c476:	f000 fcab 	bl	800cdd0 <_isatty_r>
 800c47a:	b128      	cbz	r0, 800c488 <__smakebuf_r+0x74>
 800c47c:	89a3      	ldrh	r3, [r4, #12]
 800c47e:	f023 0303 	bic.w	r3, r3, #3
 800c482:	f043 0301 	orr.w	r3, r3, #1
 800c486:	81a3      	strh	r3, [r4, #12]
 800c488:	89a0      	ldrh	r0, [r4, #12]
 800c48a:	4305      	orrs	r5, r0
 800c48c:	81a5      	strh	r5, [r4, #12]
 800c48e:	e7cd      	b.n	800c42c <__smakebuf_r+0x18>
 800c490:	0800c221 	.word	0x0800c221

0800c494 <_free_r>:
 800c494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c496:	2900      	cmp	r1, #0
 800c498:	d044      	beq.n	800c524 <_free_r+0x90>
 800c49a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c49e:	9001      	str	r0, [sp, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f1a1 0404 	sub.w	r4, r1, #4
 800c4a6:	bfb8      	it	lt
 800c4a8:	18e4      	addlt	r4, r4, r3
 800c4aa:	f000 fcb3 	bl	800ce14 <__malloc_lock>
 800c4ae:	4a1e      	ldr	r2, [pc, #120]	; (800c528 <_free_r+0x94>)
 800c4b0:	9801      	ldr	r0, [sp, #4]
 800c4b2:	6813      	ldr	r3, [r2, #0]
 800c4b4:	b933      	cbnz	r3, 800c4c4 <_free_r+0x30>
 800c4b6:	6063      	str	r3, [r4, #4]
 800c4b8:	6014      	str	r4, [r2, #0]
 800c4ba:	b003      	add	sp, #12
 800c4bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4c0:	f000 bcae 	b.w	800ce20 <__malloc_unlock>
 800c4c4:	42a3      	cmp	r3, r4
 800c4c6:	d908      	bls.n	800c4da <_free_r+0x46>
 800c4c8:	6825      	ldr	r5, [r4, #0]
 800c4ca:	1961      	adds	r1, r4, r5
 800c4cc:	428b      	cmp	r3, r1
 800c4ce:	bf01      	itttt	eq
 800c4d0:	6819      	ldreq	r1, [r3, #0]
 800c4d2:	685b      	ldreq	r3, [r3, #4]
 800c4d4:	1949      	addeq	r1, r1, r5
 800c4d6:	6021      	streq	r1, [r4, #0]
 800c4d8:	e7ed      	b.n	800c4b6 <_free_r+0x22>
 800c4da:	461a      	mov	r2, r3
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	b10b      	cbz	r3, 800c4e4 <_free_r+0x50>
 800c4e0:	42a3      	cmp	r3, r4
 800c4e2:	d9fa      	bls.n	800c4da <_free_r+0x46>
 800c4e4:	6811      	ldr	r1, [r2, #0]
 800c4e6:	1855      	adds	r5, r2, r1
 800c4e8:	42a5      	cmp	r5, r4
 800c4ea:	d10b      	bne.n	800c504 <_free_r+0x70>
 800c4ec:	6824      	ldr	r4, [r4, #0]
 800c4ee:	4421      	add	r1, r4
 800c4f0:	1854      	adds	r4, r2, r1
 800c4f2:	42a3      	cmp	r3, r4
 800c4f4:	6011      	str	r1, [r2, #0]
 800c4f6:	d1e0      	bne.n	800c4ba <_free_r+0x26>
 800c4f8:	681c      	ldr	r4, [r3, #0]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	6053      	str	r3, [r2, #4]
 800c4fe:	4421      	add	r1, r4
 800c500:	6011      	str	r1, [r2, #0]
 800c502:	e7da      	b.n	800c4ba <_free_r+0x26>
 800c504:	d902      	bls.n	800c50c <_free_r+0x78>
 800c506:	230c      	movs	r3, #12
 800c508:	6003      	str	r3, [r0, #0]
 800c50a:	e7d6      	b.n	800c4ba <_free_r+0x26>
 800c50c:	6825      	ldr	r5, [r4, #0]
 800c50e:	1961      	adds	r1, r4, r5
 800c510:	428b      	cmp	r3, r1
 800c512:	bf04      	itt	eq
 800c514:	6819      	ldreq	r1, [r3, #0]
 800c516:	685b      	ldreq	r3, [r3, #4]
 800c518:	6063      	str	r3, [r4, #4]
 800c51a:	bf04      	itt	eq
 800c51c:	1949      	addeq	r1, r1, r5
 800c51e:	6021      	streq	r1, [r4, #0]
 800c520:	6054      	str	r4, [r2, #4]
 800c522:	e7ca      	b.n	800c4ba <_free_r+0x26>
 800c524:	b003      	add	sp, #12
 800c526:	bd30      	pop	{r4, r5, pc}
 800c528:	200006d4 	.word	0x200006d4

0800c52c <sbrk_aligned>:
 800c52c:	b570      	push	{r4, r5, r6, lr}
 800c52e:	4e0e      	ldr	r6, [pc, #56]	; (800c568 <sbrk_aligned+0x3c>)
 800c530:	460c      	mov	r4, r1
 800c532:	6831      	ldr	r1, [r6, #0]
 800c534:	4605      	mov	r5, r0
 800c536:	b911      	cbnz	r1, 800c53e <sbrk_aligned+0x12>
 800c538:	f000 fbc2 	bl	800ccc0 <_sbrk_r>
 800c53c:	6030      	str	r0, [r6, #0]
 800c53e:	4621      	mov	r1, r4
 800c540:	4628      	mov	r0, r5
 800c542:	f000 fbbd 	bl	800ccc0 <_sbrk_r>
 800c546:	1c43      	adds	r3, r0, #1
 800c548:	d00a      	beq.n	800c560 <sbrk_aligned+0x34>
 800c54a:	1cc4      	adds	r4, r0, #3
 800c54c:	f024 0403 	bic.w	r4, r4, #3
 800c550:	42a0      	cmp	r0, r4
 800c552:	d007      	beq.n	800c564 <sbrk_aligned+0x38>
 800c554:	1a21      	subs	r1, r4, r0
 800c556:	4628      	mov	r0, r5
 800c558:	f000 fbb2 	bl	800ccc0 <_sbrk_r>
 800c55c:	3001      	adds	r0, #1
 800c55e:	d101      	bne.n	800c564 <sbrk_aligned+0x38>
 800c560:	f04f 34ff 	mov.w	r4, #4294967295
 800c564:	4620      	mov	r0, r4
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	200006d8 	.word	0x200006d8

0800c56c <_malloc_r>:
 800c56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c570:	1ccd      	adds	r5, r1, #3
 800c572:	f025 0503 	bic.w	r5, r5, #3
 800c576:	3508      	adds	r5, #8
 800c578:	2d0c      	cmp	r5, #12
 800c57a:	bf38      	it	cc
 800c57c:	250c      	movcc	r5, #12
 800c57e:	2d00      	cmp	r5, #0
 800c580:	4607      	mov	r7, r0
 800c582:	db01      	blt.n	800c588 <_malloc_r+0x1c>
 800c584:	42a9      	cmp	r1, r5
 800c586:	d905      	bls.n	800c594 <_malloc_r+0x28>
 800c588:	230c      	movs	r3, #12
 800c58a:	603b      	str	r3, [r7, #0]
 800c58c:	2600      	movs	r6, #0
 800c58e:	4630      	mov	r0, r6
 800c590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c594:	4e2e      	ldr	r6, [pc, #184]	; (800c650 <_malloc_r+0xe4>)
 800c596:	f000 fc3d 	bl	800ce14 <__malloc_lock>
 800c59a:	6833      	ldr	r3, [r6, #0]
 800c59c:	461c      	mov	r4, r3
 800c59e:	bb34      	cbnz	r4, 800c5ee <_malloc_r+0x82>
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	f7ff ffc2 	bl	800c52c <sbrk_aligned>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	d14d      	bne.n	800c64a <_malloc_r+0xde>
 800c5ae:	6834      	ldr	r4, [r6, #0]
 800c5b0:	4626      	mov	r6, r4
 800c5b2:	2e00      	cmp	r6, #0
 800c5b4:	d140      	bne.n	800c638 <_malloc_r+0xcc>
 800c5b6:	6823      	ldr	r3, [r4, #0]
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	eb04 0803 	add.w	r8, r4, r3
 800c5c0:	f000 fb7e 	bl	800ccc0 <_sbrk_r>
 800c5c4:	4580      	cmp	r8, r0
 800c5c6:	d13a      	bne.n	800c63e <_malloc_r+0xd2>
 800c5c8:	6821      	ldr	r1, [r4, #0]
 800c5ca:	3503      	adds	r5, #3
 800c5cc:	1a6d      	subs	r5, r5, r1
 800c5ce:	f025 0503 	bic.w	r5, r5, #3
 800c5d2:	3508      	adds	r5, #8
 800c5d4:	2d0c      	cmp	r5, #12
 800c5d6:	bf38      	it	cc
 800c5d8:	250c      	movcc	r5, #12
 800c5da:	4629      	mov	r1, r5
 800c5dc:	4638      	mov	r0, r7
 800c5de:	f7ff ffa5 	bl	800c52c <sbrk_aligned>
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d02b      	beq.n	800c63e <_malloc_r+0xd2>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	442b      	add	r3, r5
 800c5ea:	6023      	str	r3, [r4, #0]
 800c5ec:	e00e      	b.n	800c60c <_malloc_r+0xa0>
 800c5ee:	6822      	ldr	r2, [r4, #0]
 800c5f0:	1b52      	subs	r2, r2, r5
 800c5f2:	d41e      	bmi.n	800c632 <_malloc_r+0xc6>
 800c5f4:	2a0b      	cmp	r2, #11
 800c5f6:	d916      	bls.n	800c626 <_malloc_r+0xba>
 800c5f8:	1961      	adds	r1, r4, r5
 800c5fa:	42a3      	cmp	r3, r4
 800c5fc:	6025      	str	r5, [r4, #0]
 800c5fe:	bf18      	it	ne
 800c600:	6059      	strne	r1, [r3, #4]
 800c602:	6863      	ldr	r3, [r4, #4]
 800c604:	bf08      	it	eq
 800c606:	6031      	streq	r1, [r6, #0]
 800c608:	5162      	str	r2, [r4, r5]
 800c60a:	604b      	str	r3, [r1, #4]
 800c60c:	4638      	mov	r0, r7
 800c60e:	f104 060b 	add.w	r6, r4, #11
 800c612:	f000 fc05 	bl	800ce20 <__malloc_unlock>
 800c616:	f026 0607 	bic.w	r6, r6, #7
 800c61a:	1d23      	adds	r3, r4, #4
 800c61c:	1af2      	subs	r2, r6, r3
 800c61e:	d0b6      	beq.n	800c58e <_malloc_r+0x22>
 800c620:	1b9b      	subs	r3, r3, r6
 800c622:	50a3      	str	r3, [r4, r2]
 800c624:	e7b3      	b.n	800c58e <_malloc_r+0x22>
 800c626:	6862      	ldr	r2, [r4, #4]
 800c628:	42a3      	cmp	r3, r4
 800c62a:	bf0c      	ite	eq
 800c62c:	6032      	streq	r2, [r6, #0]
 800c62e:	605a      	strne	r2, [r3, #4]
 800c630:	e7ec      	b.n	800c60c <_malloc_r+0xa0>
 800c632:	4623      	mov	r3, r4
 800c634:	6864      	ldr	r4, [r4, #4]
 800c636:	e7b2      	b.n	800c59e <_malloc_r+0x32>
 800c638:	4634      	mov	r4, r6
 800c63a:	6876      	ldr	r6, [r6, #4]
 800c63c:	e7b9      	b.n	800c5b2 <_malloc_r+0x46>
 800c63e:	230c      	movs	r3, #12
 800c640:	603b      	str	r3, [r7, #0]
 800c642:	4638      	mov	r0, r7
 800c644:	f000 fbec 	bl	800ce20 <__malloc_unlock>
 800c648:	e7a1      	b.n	800c58e <_malloc_r+0x22>
 800c64a:	6025      	str	r5, [r4, #0]
 800c64c:	e7de      	b.n	800c60c <_malloc_r+0xa0>
 800c64e:	bf00      	nop
 800c650:	200006d4 	.word	0x200006d4

0800c654 <__sfputc_r>:
 800c654:	6893      	ldr	r3, [r2, #8]
 800c656:	3b01      	subs	r3, #1
 800c658:	2b00      	cmp	r3, #0
 800c65a:	b410      	push	{r4}
 800c65c:	6093      	str	r3, [r2, #8]
 800c65e:	da08      	bge.n	800c672 <__sfputc_r+0x1e>
 800c660:	6994      	ldr	r4, [r2, #24]
 800c662:	42a3      	cmp	r3, r4
 800c664:	db01      	blt.n	800c66a <__sfputc_r+0x16>
 800c666:	290a      	cmp	r1, #10
 800c668:	d103      	bne.n	800c672 <__sfputc_r+0x1e>
 800c66a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c66e:	f7ff bc31 	b.w	800bed4 <__swbuf_r>
 800c672:	6813      	ldr	r3, [r2, #0]
 800c674:	1c58      	adds	r0, r3, #1
 800c676:	6010      	str	r0, [r2, #0]
 800c678:	7019      	strb	r1, [r3, #0]
 800c67a:	4608      	mov	r0, r1
 800c67c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c680:	4770      	bx	lr

0800c682 <__sfputs_r>:
 800c682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c684:	4606      	mov	r6, r0
 800c686:	460f      	mov	r7, r1
 800c688:	4614      	mov	r4, r2
 800c68a:	18d5      	adds	r5, r2, r3
 800c68c:	42ac      	cmp	r4, r5
 800c68e:	d101      	bne.n	800c694 <__sfputs_r+0x12>
 800c690:	2000      	movs	r0, #0
 800c692:	e007      	b.n	800c6a4 <__sfputs_r+0x22>
 800c694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c698:	463a      	mov	r2, r7
 800c69a:	4630      	mov	r0, r6
 800c69c:	f7ff ffda 	bl	800c654 <__sfputc_r>
 800c6a0:	1c43      	adds	r3, r0, #1
 800c6a2:	d1f3      	bne.n	800c68c <__sfputs_r+0xa>
 800c6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6a8 <_vfiprintf_r>:
 800c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	460d      	mov	r5, r1
 800c6ae:	b09d      	sub	sp, #116	; 0x74
 800c6b0:	4614      	mov	r4, r2
 800c6b2:	4698      	mov	r8, r3
 800c6b4:	4606      	mov	r6, r0
 800c6b6:	b118      	cbz	r0, 800c6c0 <_vfiprintf_r+0x18>
 800c6b8:	6983      	ldr	r3, [r0, #24]
 800c6ba:	b90b      	cbnz	r3, 800c6c0 <_vfiprintf_r+0x18>
 800c6bc:	f7ff fde4 	bl	800c288 <__sinit>
 800c6c0:	4b89      	ldr	r3, [pc, #548]	; (800c8e8 <_vfiprintf_r+0x240>)
 800c6c2:	429d      	cmp	r5, r3
 800c6c4:	d11b      	bne.n	800c6fe <_vfiprintf_r+0x56>
 800c6c6:	6875      	ldr	r5, [r6, #4]
 800c6c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ca:	07d9      	lsls	r1, r3, #31
 800c6cc:	d405      	bmi.n	800c6da <_vfiprintf_r+0x32>
 800c6ce:	89ab      	ldrh	r3, [r5, #12]
 800c6d0:	059a      	lsls	r2, r3, #22
 800c6d2:	d402      	bmi.n	800c6da <_vfiprintf_r+0x32>
 800c6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6d6:	f7ff fe75 	bl	800c3c4 <__retarget_lock_acquire_recursive>
 800c6da:	89ab      	ldrh	r3, [r5, #12]
 800c6dc:	071b      	lsls	r3, r3, #28
 800c6de:	d501      	bpl.n	800c6e4 <_vfiprintf_r+0x3c>
 800c6e0:	692b      	ldr	r3, [r5, #16]
 800c6e2:	b9eb      	cbnz	r3, 800c720 <_vfiprintf_r+0x78>
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7ff fc46 	bl	800bf78 <__swsetup_r>
 800c6ec:	b1c0      	cbz	r0, 800c720 <_vfiprintf_r+0x78>
 800c6ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6f0:	07dc      	lsls	r4, r3, #31
 800c6f2:	d50e      	bpl.n	800c712 <_vfiprintf_r+0x6a>
 800c6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f8:	b01d      	add	sp, #116	; 0x74
 800c6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fe:	4b7b      	ldr	r3, [pc, #492]	; (800c8ec <_vfiprintf_r+0x244>)
 800c700:	429d      	cmp	r5, r3
 800c702:	d101      	bne.n	800c708 <_vfiprintf_r+0x60>
 800c704:	68b5      	ldr	r5, [r6, #8]
 800c706:	e7df      	b.n	800c6c8 <_vfiprintf_r+0x20>
 800c708:	4b79      	ldr	r3, [pc, #484]	; (800c8f0 <_vfiprintf_r+0x248>)
 800c70a:	429d      	cmp	r5, r3
 800c70c:	bf08      	it	eq
 800c70e:	68f5      	ldreq	r5, [r6, #12]
 800c710:	e7da      	b.n	800c6c8 <_vfiprintf_r+0x20>
 800c712:	89ab      	ldrh	r3, [r5, #12]
 800c714:	0598      	lsls	r0, r3, #22
 800c716:	d4ed      	bmi.n	800c6f4 <_vfiprintf_r+0x4c>
 800c718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c71a:	f7ff fe54 	bl	800c3c6 <__retarget_lock_release_recursive>
 800c71e:	e7e9      	b.n	800c6f4 <_vfiprintf_r+0x4c>
 800c720:	2300      	movs	r3, #0
 800c722:	9309      	str	r3, [sp, #36]	; 0x24
 800c724:	2320      	movs	r3, #32
 800c726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c72a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c72e:	2330      	movs	r3, #48	; 0x30
 800c730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8f4 <_vfiprintf_r+0x24c>
 800c734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c738:	f04f 0901 	mov.w	r9, #1
 800c73c:	4623      	mov	r3, r4
 800c73e:	469a      	mov	sl, r3
 800c740:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c744:	b10a      	cbz	r2, 800c74a <_vfiprintf_r+0xa2>
 800c746:	2a25      	cmp	r2, #37	; 0x25
 800c748:	d1f9      	bne.n	800c73e <_vfiprintf_r+0x96>
 800c74a:	ebba 0b04 	subs.w	fp, sl, r4
 800c74e:	d00b      	beq.n	800c768 <_vfiprintf_r+0xc0>
 800c750:	465b      	mov	r3, fp
 800c752:	4622      	mov	r2, r4
 800c754:	4629      	mov	r1, r5
 800c756:	4630      	mov	r0, r6
 800c758:	f7ff ff93 	bl	800c682 <__sfputs_r>
 800c75c:	3001      	adds	r0, #1
 800c75e:	f000 80aa 	beq.w	800c8b6 <_vfiprintf_r+0x20e>
 800c762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c764:	445a      	add	r2, fp
 800c766:	9209      	str	r2, [sp, #36]	; 0x24
 800c768:	f89a 3000 	ldrb.w	r3, [sl]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f000 80a2 	beq.w	800c8b6 <_vfiprintf_r+0x20e>
 800c772:	2300      	movs	r3, #0
 800c774:	f04f 32ff 	mov.w	r2, #4294967295
 800c778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c77c:	f10a 0a01 	add.w	sl, sl, #1
 800c780:	9304      	str	r3, [sp, #16]
 800c782:	9307      	str	r3, [sp, #28]
 800c784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c788:	931a      	str	r3, [sp, #104]	; 0x68
 800c78a:	4654      	mov	r4, sl
 800c78c:	2205      	movs	r2, #5
 800c78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c792:	4858      	ldr	r0, [pc, #352]	; (800c8f4 <_vfiprintf_r+0x24c>)
 800c794:	f7f3 fd1c 	bl	80001d0 <memchr>
 800c798:	9a04      	ldr	r2, [sp, #16]
 800c79a:	b9d8      	cbnz	r0, 800c7d4 <_vfiprintf_r+0x12c>
 800c79c:	06d1      	lsls	r1, r2, #27
 800c79e:	bf44      	itt	mi
 800c7a0:	2320      	movmi	r3, #32
 800c7a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7a6:	0713      	lsls	r3, r2, #28
 800c7a8:	bf44      	itt	mi
 800c7aa:	232b      	movmi	r3, #43	; 0x2b
 800c7ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7b6:	d015      	beq.n	800c7e4 <_vfiprintf_r+0x13c>
 800c7b8:	9a07      	ldr	r2, [sp, #28]
 800c7ba:	4654      	mov	r4, sl
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f04f 0c0a 	mov.w	ip, #10
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7c8:	3b30      	subs	r3, #48	; 0x30
 800c7ca:	2b09      	cmp	r3, #9
 800c7cc:	d94e      	bls.n	800c86c <_vfiprintf_r+0x1c4>
 800c7ce:	b1b0      	cbz	r0, 800c7fe <_vfiprintf_r+0x156>
 800c7d0:	9207      	str	r2, [sp, #28]
 800c7d2:	e014      	b.n	800c7fe <_vfiprintf_r+0x156>
 800c7d4:	eba0 0308 	sub.w	r3, r0, r8
 800c7d8:	fa09 f303 	lsl.w	r3, r9, r3
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	9304      	str	r3, [sp, #16]
 800c7e0:	46a2      	mov	sl, r4
 800c7e2:	e7d2      	b.n	800c78a <_vfiprintf_r+0xe2>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	1d19      	adds	r1, r3, #4
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	9103      	str	r1, [sp, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	bfbb      	ittet	lt
 800c7f0:	425b      	neglt	r3, r3
 800c7f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c7f6:	9307      	strge	r3, [sp, #28]
 800c7f8:	9307      	strlt	r3, [sp, #28]
 800c7fa:	bfb8      	it	lt
 800c7fc:	9204      	strlt	r2, [sp, #16]
 800c7fe:	7823      	ldrb	r3, [r4, #0]
 800c800:	2b2e      	cmp	r3, #46	; 0x2e
 800c802:	d10c      	bne.n	800c81e <_vfiprintf_r+0x176>
 800c804:	7863      	ldrb	r3, [r4, #1]
 800c806:	2b2a      	cmp	r3, #42	; 0x2a
 800c808:	d135      	bne.n	800c876 <_vfiprintf_r+0x1ce>
 800c80a:	9b03      	ldr	r3, [sp, #12]
 800c80c:	1d1a      	adds	r2, r3, #4
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	9203      	str	r2, [sp, #12]
 800c812:	2b00      	cmp	r3, #0
 800c814:	bfb8      	it	lt
 800c816:	f04f 33ff 	movlt.w	r3, #4294967295
 800c81a:	3402      	adds	r4, #2
 800c81c:	9305      	str	r3, [sp, #20]
 800c81e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c904 <_vfiprintf_r+0x25c>
 800c822:	7821      	ldrb	r1, [r4, #0]
 800c824:	2203      	movs	r2, #3
 800c826:	4650      	mov	r0, sl
 800c828:	f7f3 fcd2 	bl	80001d0 <memchr>
 800c82c:	b140      	cbz	r0, 800c840 <_vfiprintf_r+0x198>
 800c82e:	2340      	movs	r3, #64	; 0x40
 800c830:	eba0 000a 	sub.w	r0, r0, sl
 800c834:	fa03 f000 	lsl.w	r0, r3, r0
 800c838:	9b04      	ldr	r3, [sp, #16]
 800c83a:	4303      	orrs	r3, r0
 800c83c:	3401      	adds	r4, #1
 800c83e:	9304      	str	r3, [sp, #16]
 800c840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c844:	482c      	ldr	r0, [pc, #176]	; (800c8f8 <_vfiprintf_r+0x250>)
 800c846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c84a:	2206      	movs	r2, #6
 800c84c:	f7f3 fcc0 	bl	80001d0 <memchr>
 800c850:	2800      	cmp	r0, #0
 800c852:	d03f      	beq.n	800c8d4 <_vfiprintf_r+0x22c>
 800c854:	4b29      	ldr	r3, [pc, #164]	; (800c8fc <_vfiprintf_r+0x254>)
 800c856:	bb1b      	cbnz	r3, 800c8a0 <_vfiprintf_r+0x1f8>
 800c858:	9b03      	ldr	r3, [sp, #12]
 800c85a:	3307      	adds	r3, #7
 800c85c:	f023 0307 	bic.w	r3, r3, #7
 800c860:	3308      	adds	r3, #8
 800c862:	9303      	str	r3, [sp, #12]
 800c864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c866:	443b      	add	r3, r7
 800c868:	9309      	str	r3, [sp, #36]	; 0x24
 800c86a:	e767      	b.n	800c73c <_vfiprintf_r+0x94>
 800c86c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c870:	460c      	mov	r4, r1
 800c872:	2001      	movs	r0, #1
 800c874:	e7a5      	b.n	800c7c2 <_vfiprintf_r+0x11a>
 800c876:	2300      	movs	r3, #0
 800c878:	3401      	adds	r4, #1
 800c87a:	9305      	str	r3, [sp, #20]
 800c87c:	4619      	mov	r1, r3
 800c87e:	f04f 0c0a 	mov.w	ip, #10
 800c882:	4620      	mov	r0, r4
 800c884:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c888:	3a30      	subs	r2, #48	; 0x30
 800c88a:	2a09      	cmp	r2, #9
 800c88c:	d903      	bls.n	800c896 <_vfiprintf_r+0x1ee>
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0c5      	beq.n	800c81e <_vfiprintf_r+0x176>
 800c892:	9105      	str	r1, [sp, #20]
 800c894:	e7c3      	b.n	800c81e <_vfiprintf_r+0x176>
 800c896:	fb0c 2101 	mla	r1, ip, r1, r2
 800c89a:	4604      	mov	r4, r0
 800c89c:	2301      	movs	r3, #1
 800c89e:	e7f0      	b.n	800c882 <_vfiprintf_r+0x1da>
 800c8a0:	ab03      	add	r3, sp, #12
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	462a      	mov	r2, r5
 800c8a6:	4b16      	ldr	r3, [pc, #88]	; (800c900 <_vfiprintf_r+0x258>)
 800c8a8:	a904      	add	r1, sp, #16
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f3af 8000 	nop.w
 800c8b0:	4607      	mov	r7, r0
 800c8b2:	1c78      	adds	r0, r7, #1
 800c8b4:	d1d6      	bne.n	800c864 <_vfiprintf_r+0x1bc>
 800c8b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8b8:	07d9      	lsls	r1, r3, #31
 800c8ba:	d405      	bmi.n	800c8c8 <_vfiprintf_r+0x220>
 800c8bc:	89ab      	ldrh	r3, [r5, #12]
 800c8be:	059a      	lsls	r2, r3, #22
 800c8c0:	d402      	bmi.n	800c8c8 <_vfiprintf_r+0x220>
 800c8c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8c4:	f7ff fd7f 	bl	800c3c6 <__retarget_lock_release_recursive>
 800c8c8:	89ab      	ldrh	r3, [r5, #12]
 800c8ca:	065b      	lsls	r3, r3, #25
 800c8cc:	f53f af12 	bmi.w	800c6f4 <_vfiprintf_r+0x4c>
 800c8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8d2:	e711      	b.n	800c6f8 <_vfiprintf_r+0x50>
 800c8d4:	ab03      	add	r3, sp, #12
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	462a      	mov	r2, r5
 800c8da:	4b09      	ldr	r3, [pc, #36]	; (800c900 <_vfiprintf_r+0x258>)
 800c8dc:	a904      	add	r1, sp, #16
 800c8de:	4630      	mov	r0, r6
 800c8e0:	f000 f880 	bl	800c9e4 <_printf_i>
 800c8e4:	e7e4      	b.n	800c8b0 <_vfiprintf_r+0x208>
 800c8e6:	bf00      	nop
 800c8e8:	0800d74c 	.word	0x0800d74c
 800c8ec:	0800d76c 	.word	0x0800d76c
 800c8f0:	0800d72c 	.word	0x0800d72c
 800c8f4:	0800d78c 	.word	0x0800d78c
 800c8f8:	0800d796 	.word	0x0800d796
 800c8fc:	00000000 	.word	0x00000000
 800c900:	0800c683 	.word	0x0800c683
 800c904:	0800d792 	.word	0x0800d792

0800c908 <_printf_common>:
 800c908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c90c:	4616      	mov	r6, r2
 800c90e:	4699      	mov	r9, r3
 800c910:	688a      	ldr	r2, [r1, #8]
 800c912:	690b      	ldr	r3, [r1, #16]
 800c914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c918:	4293      	cmp	r3, r2
 800c91a:	bfb8      	it	lt
 800c91c:	4613      	movlt	r3, r2
 800c91e:	6033      	str	r3, [r6, #0]
 800c920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c924:	4607      	mov	r7, r0
 800c926:	460c      	mov	r4, r1
 800c928:	b10a      	cbz	r2, 800c92e <_printf_common+0x26>
 800c92a:	3301      	adds	r3, #1
 800c92c:	6033      	str	r3, [r6, #0]
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	0699      	lsls	r1, r3, #26
 800c932:	bf42      	ittt	mi
 800c934:	6833      	ldrmi	r3, [r6, #0]
 800c936:	3302      	addmi	r3, #2
 800c938:	6033      	strmi	r3, [r6, #0]
 800c93a:	6825      	ldr	r5, [r4, #0]
 800c93c:	f015 0506 	ands.w	r5, r5, #6
 800c940:	d106      	bne.n	800c950 <_printf_common+0x48>
 800c942:	f104 0a19 	add.w	sl, r4, #25
 800c946:	68e3      	ldr	r3, [r4, #12]
 800c948:	6832      	ldr	r2, [r6, #0]
 800c94a:	1a9b      	subs	r3, r3, r2
 800c94c:	42ab      	cmp	r3, r5
 800c94e:	dc26      	bgt.n	800c99e <_printf_common+0x96>
 800c950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c954:	1e13      	subs	r3, r2, #0
 800c956:	6822      	ldr	r2, [r4, #0]
 800c958:	bf18      	it	ne
 800c95a:	2301      	movne	r3, #1
 800c95c:	0692      	lsls	r2, r2, #26
 800c95e:	d42b      	bmi.n	800c9b8 <_printf_common+0xb0>
 800c960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c964:	4649      	mov	r1, r9
 800c966:	4638      	mov	r0, r7
 800c968:	47c0      	blx	r8
 800c96a:	3001      	adds	r0, #1
 800c96c:	d01e      	beq.n	800c9ac <_printf_common+0xa4>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	68e5      	ldr	r5, [r4, #12]
 800c972:	6832      	ldr	r2, [r6, #0]
 800c974:	f003 0306 	and.w	r3, r3, #6
 800c978:	2b04      	cmp	r3, #4
 800c97a:	bf08      	it	eq
 800c97c:	1aad      	subeq	r5, r5, r2
 800c97e:	68a3      	ldr	r3, [r4, #8]
 800c980:	6922      	ldr	r2, [r4, #16]
 800c982:	bf0c      	ite	eq
 800c984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c988:	2500      	movne	r5, #0
 800c98a:	4293      	cmp	r3, r2
 800c98c:	bfc4      	itt	gt
 800c98e:	1a9b      	subgt	r3, r3, r2
 800c990:	18ed      	addgt	r5, r5, r3
 800c992:	2600      	movs	r6, #0
 800c994:	341a      	adds	r4, #26
 800c996:	42b5      	cmp	r5, r6
 800c998:	d11a      	bne.n	800c9d0 <_printf_common+0xc8>
 800c99a:	2000      	movs	r0, #0
 800c99c:	e008      	b.n	800c9b0 <_printf_common+0xa8>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	4652      	mov	r2, sl
 800c9a2:	4649      	mov	r1, r9
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	47c0      	blx	r8
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	d103      	bne.n	800c9b4 <_printf_common+0xac>
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b4:	3501      	adds	r5, #1
 800c9b6:	e7c6      	b.n	800c946 <_printf_common+0x3e>
 800c9b8:	18e1      	adds	r1, r4, r3
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	2030      	movs	r0, #48	; 0x30
 800c9be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9c2:	4422      	add	r2, r4
 800c9c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9cc:	3302      	adds	r3, #2
 800c9ce:	e7c7      	b.n	800c960 <_printf_common+0x58>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	4622      	mov	r2, r4
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	47c0      	blx	r8
 800c9da:	3001      	adds	r0, #1
 800c9dc:	d0e6      	beq.n	800c9ac <_printf_common+0xa4>
 800c9de:	3601      	adds	r6, #1
 800c9e0:	e7d9      	b.n	800c996 <_printf_common+0x8e>
	...

0800c9e4 <_printf_i>:
 800c9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e8:	7e0f      	ldrb	r7, [r1, #24]
 800c9ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9ec:	2f78      	cmp	r7, #120	; 0x78
 800c9ee:	4691      	mov	r9, r2
 800c9f0:	4680      	mov	r8, r0
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	469a      	mov	sl, r3
 800c9f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9fa:	d807      	bhi.n	800ca0c <_printf_i+0x28>
 800c9fc:	2f62      	cmp	r7, #98	; 0x62
 800c9fe:	d80a      	bhi.n	800ca16 <_printf_i+0x32>
 800ca00:	2f00      	cmp	r7, #0
 800ca02:	f000 80d8 	beq.w	800cbb6 <_printf_i+0x1d2>
 800ca06:	2f58      	cmp	r7, #88	; 0x58
 800ca08:	f000 80a3 	beq.w	800cb52 <_printf_i+0x16e>
 800ca0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca14:	e03a      	b.n	800ca8c <_printf_i+0xa8>
 800ca16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca1a:	2b15      	cmp	r3, #21
 800ca1c:	d8f6      	bhi.n	800ca0c <_printf_i+0x28>
 800ca1e:	a101      	add	r1, pc, #4	; (adr r1, 800ca24 <_printf_i+0x40>)
 800ca20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca24:	0800ca7d 	.word	0x0800ca7d
 800ca28:	0800ca91 	.word	0x0800ca91
 800ca2c:	0800ca0d 	.word	0x0800ca0d
 800ca30:	0800ca0d 	.word	0x0800ca0d
 800ca34:	0800ca0d 	.word	0x0800ca0d
 800ca38:	0800ca0d 	.word	0x0800ca0d
 800ca3c:	0800ca91 	.word	0x0800ca91
 800ca40:	0800ca0d 	.word	0x0800ca0d
 800ca44:	0800ca0d 	.word	0x0800ca0d
 800ca48:	0800ca0d 	.word	0x0800ca0d
 800ca4c:	0800ca0d 	.word	0x0800ca0d
 800ca50:	0800cb9d 	.word	0x0800cb9d
 800ca54:	0800cac1 	.word	0x0800cac1
 800ca58:	0800cb7f 	.word	0x0800cb7f
 800ca5c:	0800ca0d 	.word	0x0800ca0d
 800ca60:	0800ca0d 	.word	0x0800ca0d
 800ca64:	0800cbbf 	.word	0x0800cbbf
 800ca68:	0800ca0d 	.word	0x0800ca0d
 800ca6c:	0800cac1 	.word	0x0800cac1
 800ca70:	0800ca0d 	.word	0x0800ca0d
 800ca74:	0800ca0d 	.word	0x0800ca0d
 800ca78:	0800cb87 	.word	0x0800cb87
 800ca7c:	682b      	ldr	r3, [r5, #0]
 800ca7e:	1d1a      	adds	r2, r3, #4
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	602a      	str	r2, [r5, #0]
 800ca84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e0a3      	b.n	800cbd8 <_printf_i+0x1f4>
 800ca90:	6820      	ldr	r0, [r4, #0]
 800ca92:	6829      	ldr	r1, [r5, #0]
 800ca94:	0606      	lsls	r6, r0, #24
 800ca96:	f101 0304 	add.w	r3, r1, #4
 800ca9a:	d50a      	bpl.n	800cab2 <_printf_i+0xce>
 800ca9c:	680e      	ldr	r6, [r1, #0]
 800ca9e:	602b      	str	r3, [r5, #0]
 800caa0:	2e00      	cmp	r6, #0
 800caa2:	da03      	bge.n	800caac <_printf_i+0xc8>
 800caa4:	232d      	movs	r3, #45	; 0x2d
 800caa6:	4276      	negs	r6, r6
 800caa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caac:	485e      	ldr	r0, [pc, #376]	; (800cc28 <_printf_i+0x244>)
 800caae:	230a      	movs	r3, #10
 800cab0:	e019      	b.n	800cae6 <_printf_i+0x102>
 800cab2:	680e      	ldr	r6, [r1, #0]
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800caba:	bf18      	it	ne
 800cabc:	b236      	sxthne	r6, r6
 800cabe:	e7ef      	b.n	800caa0 <_printf_i+0xbc>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	6820      	ldr	r0, [r4, #0]
 800cac4:	1d19      	adds	r1, r3, #4
 800cac6:	6029      	str	r1, [r5, #0]
 800cac8:	0601      	lsls	r1, r0, #24
 800caca:	d501      	bpl.n	800cad0 <_printf_i+0xec>
 800cacc:	681e      	ldr	r6, [r3, #0]
 800cace:	e002      	b.n	800cad6 <_printf_i+0xf2>
 800cad0:	0646      	lsls	r6, r0, #25
 800cad2:	d5fb      	bpl.n	800cacc <_printf_i+0xe8>
 800cad4:	881e      	ldrh	r6, [r3, #0]
 800cad6:	4854      	ldr	r0, [pc, #336]	; (800cc28 <_printf_i+0x244>)
 800cad8:	2f6f      	cmp	r7, #111	; 0x6f
 800cada:	bf0c      	ite	eq
 800cadc:	2308      	moveq	r3, #8
 800cade:	230a      	movne	r3, #10
 800cae0:	2100      	movs	r1, #0
 800cae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cae6:	6865      	ldr	r5, [r4, #4]
 800cae8:	60a5      	str	r5, [r4, #8]
 800caea:	2d00      	cmp	r5, #0
 800caec:	bfa2      	ittt	ge
 800caee:	6821      	ldrge	r1, [r4, #0]
 800caf0:	f021 0104 	bicge.w	r1, r1, #4
 800caf4:	6021      	strge	r1, [r4, #0]
 800caf6:	b90e      	cbnz	r6, 800cafc <_printf_i+0x118>
 800caf8:	2d00      	cmp	r5, #0
 800cafa:	d04d      	beq.n	800cb98 <_printf_i+0x1b4>
 800cafc:	4615      	mov	r5, r2
 800cafe:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb02:	fb03 6711 	mls	r7, r3, r1, r6
 800cb06:	5dc7      	ldrb	r7, [r0, r7]
 800cb08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb0c:	4637      	mov	r7, r6
 800cb0e:	42bb      	cmp	r3, r7
 800cb10:	460e      	mov	r6, r1
 800cb12:	d9f4      	bls.n	800cafe <_printf_i+0x11a>
 800cb14:	2b08      	cmp	r3, #8
 800cb16:	d10b      	bne.n	800cb30 <_printf_i+0x14c>
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	07de      	lsls	r6, r3, #31
 800cb1c:	d508      	bpl.n	800cb30 <_printf_i+0x14c>
 800cb1e:	6923      	ldr	r3, [r4, #16]
 800cb20:	6861      	ldr	r1, [r4, #4]
 800cb22:	4299      	cmp	r1, r3
 800cb24:	bfde      	ittt	le
 800cb26:	2330      	movle	r3, #48	; 0x30
 800cb28:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb30:	1b52      	subs	r2, r2, r5
 800cb32:	6122      	str	r2, [r4, #16]
 800cb34:	f8cd a000 	str.w	sl, [sp]
 800cb38:	464b      	mov	r3, r9
 800cb3a:	aa03      	add	r2, sp, #12
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	4640      	mov	r0, r8
 800cb40:	f7ff fee2 	bl	800c908 <_printf_common>
 800cb44:	3001      	adds	r0, #1
 800cb46:	d14c      	bne.n	800cbe2 <_printf_i+0x1fe>
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	b004      	add	sp, #16
 800cb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb52:	4835      	ldr	r0, [pc, #212]	; (800cc28 <_printf_i+0x244>)
 800cb54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb58:	6829      	ldr	r1, [r5, #0]
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb60:	6029      	str	r1, [r5, #0]
 800cb62:	061d      	lsls	r5, r3, #24
 800cb64:	d514      	bpl.n	800cb90 <_printf_i+0x1ac>
 800cb66:	07df      	lsls	r7, r3, #31
 800cb68:	bf44      	itt	mi
 800cb6a:	f043 0320 	orrmi.w	r3, r3, #32
 800cb6e:	6023      	strmi	r3, [r4, #0]
 800cb70:	b91e      	cbnz	r6, 800cb7a <_printf_i+0x196>
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	f023 0320 	bic.w	r3, r3, #32
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	2310      	movs	r3, #16
 800cb7c:	e7b0      	b.n	800cae0 <_printf_i+0xfc>
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	f043 0320 	orr.w	r3, r3, #32
 800cb84:	6023      	str	r3, [r4, #0]
 800cb86:	2378      	movs	r3, #120	; 0x78
 800cb88:	4828      	ldr	r0, [pc, #160]	; (800cc2c <_printf_i+0x248>)
 800cb8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb8e:	e7e3      	b.n	800cb58 <_printf_i+0x174>
 800cb90:	0659      	lsls	r1, r3, #25
 800cb92:	bf48      	it	mi
 800cb94:	b2b6      	uxthmi	r6, r6
 800cb96:	e7e6      	b.n	800cb66 <_printf_i+0x182>
 800cb98:	4615      	mov	r5, r2
 800cb9a:	e7bb      	b.n	800cb14 <_printf_i+0x130>
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	6826      	ldr	r6, [r4, #0]
 800cba0:	6961      	ldr	r1, [r4, #20]
 800cba2:	1d18      	adds	r0, r3, #4
 800cba4:	6028      	str	r0, [r5, #0]
 800cba6:	0635      	lsls	r5, r6, #24
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	d501      	bpl.n	800cbb0 <_printf_i+0x1cc>
 800cbac:	6019      	str	r1, [r3, #0]
 800cbae:	e002      	b.n	800cbb6 <_printf_i+0x1d2>
 800cbb0:	0670      	lsls	r0, r6, #25
 800cbb2:	d5fb      	bpl.n	800cbac <_printf_i+0x1c8>
 800cbb4:	8019      	strh	r1, [r3, #0]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	6123      	str	r3, [r4, #16]
 800cbba:	4615      	mov	r5, r2
 800cbbc:	e7ba      	b.n	800cb34 <_printf_i+0x150>
 800cbbe:	682b      	ldr	r3, [r5, #0]
 800cbc0:	1d1a      	adds	r2, r3, #4
 800cbc2:	602a      	str	r2, [r5, #0]
 800cbc4:	681d      	ldr	r5, [r3, #0]
 800cbc6:	6862      	ldr	r2, [r4, #4]
 800cbc8:	2100      	movs	r1, #0
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f7f3 fb00 	bl	80001d0 <memchr>
 800cbd0:	b108      	cbz	r0, 800cbd6 <_printf_i+0x1f2>
 800cbd2:	1b40      	subs	r0, r0, r5
 800cbd4:	6060      	str	r0, [r4, #4]
 800cbd6:	6863      	ldr	r3, [r4, #4]
 800cbd8:	6123      	str	r3, [r4, #16]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbe0:	e7a8      	b.n	800cb34 <_printf_i+0x150>
 800cbe2:	6923      	ldr	r3, [r4, #16]
 800cbe4:	462a      	mov	r2, r5
 800cbe6:	4649      	mov	r1, r9
 800cbe8:	4640      	mov	r0, r8
 800cbea:	47d0      	blx	sl
 800cbec:	3001      	adds	r0, #1
 800cbee:	d0ab      	beq.n	800cb48 <_printf_i+0x164>
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	079b      	lsls	r3, r3, #30
 800cbf4:	d413      	bmi.n	800cc1e <_printf_i+0x23a>
 800cbf6:	68e0      	ldr	r0, [r4, #12]
 800cbf8:	9b03      	ldr	r3, [sp, #12]
 800cbfa:	4298      	cmp	r0, r3
 800cbfc:	bfb8      	it	lt
 800cbfe:	4618      	movlt	r0, r3
 800cc00:	e7a4      	b.n	800cb4c <_printf_i+0x168>
 800cc02:	2301      	movs	r3, #1
 800cc04:	4632      	mov	r2, r6
 800cc06:	4649      	mov	r1, r9
 800cc08:	4640      	mov	r0, r8
 800cc0a:	47d0      	blx	sl
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	d09b      	beq.n	800cb48 <_printf_i+0x164>
 800cc10:	3501      	adds	r5, #1
 800cc12:	68e3      	ldr	r3, [r4, #12]
 800cc14:	9903      	ldr	r1, [sp, #12]
 800cc16:	1a5b      	subs	r3, r3, r1
 800cc18:	42ab      	cmp	r3, r5
 800cc1a:	dcf2      	bgt.n	800cc02 <_printf_i+0x21e>
 800cc1c:	e7eb      	b.n	800cbf6 <_printf_i+0x212>
 800cc1e:	2500      	movs	r5, #0
 800cc20:	f104 0619 	add.w	r6, r4, #25
 800cc24:	e7f5      	b.n	800cc12 <_printf_i+0x22e>
 800cc26:	bf00      	nop
 800cc28:	0800d79d 	.word	0x0800d79d
 800cc2c:	0800d7ae 	.word	0x0800d7ae

0800cc30 <_putc_r>:
 800cc30:	b570      	push	{r4, r5, r6, lr}
 800cc32:	460d      	mov	r5, r1
 800cc34:	4614      	mov	r4, r2
 800cc36:	4606      	mov	r6, r0
 800cc38:	b118      	cbz	r0, 800cc42 <_putc_r+0x12>
 800cc3a:	6983      	ldr	r3, [r0, #24]
 800cc3c:	b90b      	cbnz	r3, 800cc42 <_putc_r+0x12>
 800cc3e:	f7ff fb23 	bl	800c288 <__sinit>
 800cc42:	4b1c      	ldr	r3, [pc, #112]	; (800ccb4 <_putc_r+0x84>)
 800cc44:	429c      	cmp	r4, r3
 800cc46:	d124      	bne.n	800cc92 <_putc_r+0x62>
 800cc48:	6874      	ldr	r4, [r6, #4]
 800cc4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc4c:	07d8      	lsls	r0, r3, #31
 800cc4e:	d405      	bmi.n	800cc5c <_putc_r+0x2c>
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	0599      	lsls	r1, r3, #22
 800cc54:	d402      	bmi.n	800cc5c <_putc_r+0x2c>
 800cc56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc58:	f7ff fbb4 	bl	800c3c4 <__retarget_lock_acquire_recursive>
 800cc5c:	68a3      	ldr	r3, [r4, #8]
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	60a3      	str	r3, [r4, #8]
 800cc64:	da05      	bge.n	800cc72 <_putc_r+0x42>
 800cc66:	69a2      	ldr	r2, [r4, #24]
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	db1c      	blt.n	800cca6 <_putc_r+0x76>
 800cc6c:	b2eb      	uxtb	r3, r5
 800cc6e:	2b0a      	cmp	r3, #10
 800cc70:	d019      	beq.n	800cca6 <_putc_r+0x76>
 800cc72:	6823      	ldr	r3, [r4, #0]
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	6022      	str	r2, [r4, #0]
 800cc78:	701d      	strb	r5, [r3, #0]
 800cc7a:	b2ed      	uxtb	r5, r5
 800cc7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc7e:	07da      	lsls	r2, r3, #31
 800cc80:	d405      	bmi.n	800cc8e <_putc_r+0x5e>
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	059b      	lsls	r3, r3, #22
 800cc86:	d402      	bmi.n	800cc8e <_putc_r+0x5e>
 800cc88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc8a:	f7ff fb9c 	bl	800c3c6 <__retarget_lock_release_recursive>
 800cc8e:	4628      	mov	r0, r5
 800cc90:	bd70      	pop	{r4, r5, r6, pc}
 800cc92:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <_putc_r+0x88>)
 800cc94:	429c      	cmp	r4, r3
 800cc96:	d101      	bne.n	800cc9c <_putc_r+0x6c>
 800cc98:	68b4      	ldr	r4, [r6, #8]
 800cc9a:	e7d6      	b.n	800cc4a <_putc_r+0x1a>
 800cc9c:	4b07      	ldr	r3, [pc, #28]	; (800ccbc <_putc_r+0x8c>)
 800cc9e:	429c      	cmp	r4, r3
 800cca0:	bf08      	it	eq
 800cca2:	68f4      	ldreq	r4, [r6, #12]
 800cca4:	e7d1      	b.n	800cc4a <_putc_r+0x1a>
 800cca6:	4629      	mov	r1, r5
 800cca8:	4622      	mov	r2, r4
 800ccaa:	4630      	mov	r0, r6
 800ccac:	f7ff f912 	bl	800bed4 <__swbuf_r>
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	e7e3      	b.n	800cc7c <_putc_r+0x4c>
 800ccb4:	0800d74c 	.word	0x0800d74c
 800ccb8:	0800d76c 	.word	0x0800d76c
 800ccbc:	0800d72c 	.word	0x0800d72c

0800ccc0 <_sbrk_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4d06      	ldr	r5, [pc, #24]	; (800ccdc <_sbrk_r+0x1c>)
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	4608      	mov	r0, r1
 800ccca:	602b      	str	r3, [r5, #0]
 800cccc:	f7f4 f9f6 	bl	80010bc <_sbrk>
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	d102      	bne.n	800ccda <_sbrk_r+0x1a>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	b103      	cbz	r3, 800ccda <_sbrk_r+0x1a>
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	200006dc 	.word	0x200006dc

0800cce0 <__sread>:
 800cce0:	b510      	push	{r4, lr}
 800cce2:	460c      	mov	r4, r1
 800cce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce8:	f000 f8a0 	bl	800ce2c <_read_r>
 800ccec:	2800      	cmp	r0, #0
 800ccee:	bfab      	itete	ge
 800ccf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccf2:	89a3      	ldrhlt	r3, [r4, #12]
 800ccf4:	181b      	addge	r3, r3, r0
 800ccf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccfa:	bfac      	ite	ge
 800ccfc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccfe:	81a3      	strhlt	r3, [r4, #12]
 800cd00:	bd10      	pop	{r4, pc}

0800cd02 <__swrite>:
 800cd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd06:	461f      	mov	r7, r3
 800cd08:	898b      	ldrh	r3, [r1, #12]
 800cd0a:	05db      	lsls	r3, r3, #23
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	460c      	mov	r4, r1
 800cd10:	4616      	mov	r6, r2
 800cd12:	d505      	bpl.n	800cd20 <__swrite+0x1e>
 800cd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd18:	2302      	movs	r3, #2
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f000 f868 	bl	800cdf0 <_lseek_r>
 800cd20:	89a3      	ldrh	r3, [r4, #12]
 800cd22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd2a:	81a3      	strh	r3, [r4, #12]
 800cd2c:	4632      	mov	r2, r6
 800cd2e:	463b      	mov	r3, r7
 800cd30:	4628      	mov	r0, r5
 800cd32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd36:	f000 b817 	b.w	800cd68 <_write_r>

0800cd3a <__sseek>:
 800cd3a:	b510      	push	{r4, lr}
 800cd3c:	460c      	mov	r4, r1
 800cd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd42:	f000 f855 	bl	800cdf0 <_lseek_r>
 800cd46:	1c43      	adds	r3, r0, #1
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	bf15      	itete	ne
 800cd4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd56:	81a3      	strheq	r3, [r4, #12]
 800cd58:	bf18      	it	ne
 800cd5a:	81a3      	strhne	r3, [r4, #12]
 800cd5c:	bd10      	pop	{r4, pc}

0800cd5e <__sclose>:
 800cd5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd62:	f000 b813 	b.w	800cd8c <_close_r>
	...

0800cd68 <_write_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	4d07      	ldr	r5, [pc, #28]	; (800cd88 <_write_r+0x20>)
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	4608      	mov	r0, r1
 800cd70:	4611      	mov	r1, r2
 800cd72:	2200      	movs	r2, #0
 800cd74:	602a      	str	r2, [r5, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	f7f5 fc68 	bl	800264c <_write>
 800cd7c:	1c43      	adds	r3, r0, #1
 800cd7e:	d102      	bne.n	800cd86 <_write_r+0x1e>
 800cd80:	682b      	ldr	r3, [r5, #0]
 800cd82:	b103      	cbz	r3, 800cd86 <_write_r+0x1e>
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	bd38      	pop	{r3, r4, r5, pc}
 800cd88:	200006dc 	.word	0x200006dc

0800cd8c <_close_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4d06      	ldr	r5, [pc, #24]	; (800cda8 <_close_r+0x1c>)
 800cd90:	2300      	movs	r3, #0
 800cd92:	4604      	mov	r4, r0
 800cd94:	4608      	mov	r0, r1
 800cd96:	602b      	str	r3, [r5, #0]
 800cd98:	f7f4 f95b 	bl	8001052 <_close>
 800cd9c:	1c43      	adds	r3, r0, #1
 800cd9e:	d102      	bne.n	800cda6 <_close_r+0x1a>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	b103      	cbz	r3, 800cda6 <_close_r+0x1a>
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	200006dc 	.word	0x200006dc

0800cdac <_fstat_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4d07      	ldr	r5, [pc, #28]	; (800cdcc <_fstat_r+0x20>)
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	4608      	mov	r0, r1
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	602b      	str	r3, [r5, #0]
 800cdba:	f7f4 f956 	bl	800106a <_fstat>
 800cdbe:	1c43      	adds	r3, r0, #1
 800cdc0:	d102      	bne.n	800cdc8 <_fstat_r+0x1c>
 800cdc2:	682b      	ldr	r3, [r5, #0]
 800cdc4:	b103      	cbz	r3, 800cdc8 <_fstat_r+0x1c>
 800cdc6:	6023      	str	r3, [r4, #0]
 800cdc8:	bd38      	pop	{r3, r4, r5, pc}
 800cdca:	bf00      	nop
 800cdcc:	200006dc 	.word	0x200006dc

0800cdd0 <_isatty_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4d06      	ldr	r5, [pc, #24]	; (800cdec <_isatty_r+0x1c>)
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	4608      	mov	r0, r1
 800cdda:	602b      	str	r3, [r5, #0]
 800cddc:	f7f4 f955 	bl	800108a <_isatty>
 800cde0:	1c43      	adds	r3, r0, #1
 800cde2:	d102      	bne.n	800cdea <_isatty_r+0x1a>
 800cde4:	682b      	ldr	r3, [r5, #0]
 800cde6:	b103      	cbz	r3, 800cdea <_isatty_r+0x1a>
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	bd38      	pop	{r3, r4, r5, pc}
 800cdec:	200006dc 	.word	0x200006dc

0800cdf0 <_lseek_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d07      	ldr	r5, [pc, #28]	; (800ce10 <_lseek_r+0x20>)
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	4608      	mov	r0, r1
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	602a      	str	r2, [r5, #0]
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f7f4 f94e 	bl	80010a0 <_lseek>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d102      	bne.n	800ce0e <_lseek_r+0x1e>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	b103      	cbz	r3, 800ce0e <_lseek_r+0x1e>
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	200006dc 	.word	0x200006dc

0800ce14 <__malloc_lock>:
 800ce14:	4801      	ldr	r0, [pc, #4]	; (800ce1c <__malloc_lock+0x8>)
 800ce16:	f7ff bad5 	b.w	800c3c4 <__retarget_lock_acquire_recursive>
 800ce1a:	bf00      	nop
 800ce1c:	200006d0 	.word	0x200006d0

0800ce20 <__malloc_unlock>:
 800ce20:	4801      	ldr	r0, [pc, #4]	; (800ce28 <__malloc_unlock+0x8>)
 800ce22:	f7ff bad0 	b.w	800c3c6 <__retarget_lock_release_recursive>
 800ce26:	bf00      	nop
 800ce28:	200006d0 	.word	0x200006d0

0800ce2c <_read_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4d07      	ldr	r5, [pc, #28]	; (800ce4c <_read_r+0x20>)
 800ce30:	4604      	mov	r4, r0
 800ce32:	4608      	mov	r0, r1
 800ce34:	4611      	mov	r1, r2
 800ce36:	2200      	movs	r2, #0
 800ce38:	602a      	str	r2, [r5, #0]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	f7f4 f8ec 	bl	8001018 <_read>
 800ce40:	1c43      	adds	r3, r0, #1
 800ce42:	d102      	bne.n	800ce4a <_read_r+0x1e>
 800ce44:	682b      	ldr	r3, [r5, #0]
 800ce46:	b103      	cbz	r3, 800ce4a <_read_r+0x1e>
 800ce48:	6023      	str	r3, [r4, #0]
 800ce4a:	bd38      	pop	{r3, r4, r5, pc}
 800ce4c:	200006dc 	.word	0x200006dc

0800ce50 <_init>:
 800ce50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce52:	bf00      	nop
 800ce54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce56:	bc08      	pop	{r3}
 800ce58:	469e      	mov	lr, r3
 800ce5a:	4770      	bx	lr

0800ce5c <_fini>:
 800ce5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5e:	bf00      	nop
 800ce60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce62:	bc08      	pop	{r3}
 800ce64:	469e      	mov	lr, r3
 800ce66:	4770      	bx	lr
