
allears_EVK_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aee0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4d8  0800b4d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4d8  0800b4d8  0001b4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4e0  0800b4e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4e0  0800b4e0  0001b4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4e4  0800b4e4  0001b4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000070  0800b558  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000046c  0800b558  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e625  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000424e  00000000  00000000  0003e6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00042913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00044193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264a6  00000000  00000000  0004580b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024aef  00000000  00000000  0006bcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2035  00000000  00000000  000907a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001727d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b7c  00000000  00000000  00172828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b058 	.word	0x0800b058

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800b058 	.word	0x0800b058

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_GPIO_EXTI_Callback>:

/*
 * STIM LIB :: EXTI CALLBACK
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Trigger Input External Interrupt Process
	 * */
	stimLib_trgInput_callback(GPIO_Pin);
 800057e:	88fb      	ldrh	r3, [r7, #6]
 8000580:	4618      	mov	r0, r3
 8000582:	f007 ff67 	bl	8008454 <stimLib_trgInput_callback>

	/* Application Code */
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <HAL_TIM_ErrorCallback>:

/*
 * STIM LIB :: PULSE FINISH INTERRUPT
 * */
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	stimLib_timError_callback(htim);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f007 ff9d 	bl	80084d8 <stimLib_timError_callback>
	TD_DEBUG_PRINT(("HAL_TIM_ErrorCallback\n"));
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <HAL_TIM_ErrorCallback+0x1c>)
 80005a0:	f009 fddc 	bl	800a15c <puts>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	0800b070 	.word	0x0800b070

080005b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	TD_DEBUG_PRINT(("HAL_TIM_PWM_PulseFinishedHalfCpltCallback\n"));
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 80005ba:	f009 fdcf 	bl	800a15c <puts>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	0800b088 	.word	0x0800b088

080005cc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	stimLib_timPwmPluseFinished_callback(htim);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f007 ff89 	bl	80084ec <stimLib_timPwmPluseFinished_callback>
	TD_DEBUG_PRINT(("HAL_TIM_PWM_PulseFinishedCallback\n"));
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 80005dc:	f009 fdbe 	bl	800a15c <puts>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	0800b0b4 	.word	0x0800b0b4

080005ec <HAL_TIM_PeriodElapsedCallback>:

/*
 * TIMER INTERRUPT :: STEPUP SCHEDULER
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	stimLib_stepup_ctrlCallback(htim);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f007 ff1b 	bl	8008430 <stimLib_stepup_ctrlCallback>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <HAL_ADC_ErrorCallback>:

/*
 * STIM LIB :: ADC Error Callback
 * */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
	stimLib_adcError_callback();
 800060a:	f007 ff05 	bl	8008418 <stimLib_adcError_callback>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <HAL_ADC_LevelOutOfWindowCallback>:

/*
 * STIM LIB :: Ste-up ADC watchdog
 * */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
	stimLib_adcWatchdoc_callback();
 800061e:	f007 feeb 	bl	80083f8 <stimLib_adcWatchdoc_callback>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000630:	f000 fd08 	bl	8001044 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000634:	f000 f821 	bl	800067a <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_USART3_UART_Init();
 8000638:	f000 f870 	bl	800071c <MX_USART3_UART_Init>
	stimLib_stimInit();
 800063c:	f007 fd1e 	bl	800807c <stimLib_stimInit>
#endif
	stim_signal_cfg_t pulse_data;

	stim_trg_cfg_t trg_data;

	pulse_data.freq = 10;
 8000640:	230a      	movs	r3, #10
 8000642:	733b      	strb	r3, [r7, #12]
	pulse_data.pulse_width = 1000;
 8000644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000648:	81fb      	strh	r3, [r7, #14]
	pulse_data.degree = 1;
 800064a:	2301      	movs	r3, #1
 800064c:	743b      	strb	r3, [r7, #16]
	stimLib_stimSignalConfig(&pulse_data);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4618      	mov	r0, r3
 8000654:	f007 fd30 	bl	80080b8 <stimLib_stimSignalConfig>

	trg_data.trg_out_enable = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	717b      	strb	r3, [r7, #5]
	trg_data.trg_out_active_pol = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	71bb      	strb	r3, [r7, #6]

	trg_data.trg_in_enable = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	71fb      	strb	r3, [r7, #7]
	trg_data.trg_in_active_pol = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	723b      	strb	r3, [r7, #8]
	trg_data.trg_in_toggled = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	727b      	strb	r3, [r7, #9]
	stimLib_stimTriggerConfig(&trg_data);
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f007 fd43 	bl	80080fa <stimLib_stimTriggerConfig>

	stimLib_stimSessionStart();
 8000674:	f007 fd62 	bl	800813c <stimLib_stimSessionStart>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000678:	e7fe      	b.n	8000678 <main+0x4e>

0800067a <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b096      	sub	sp, #88	; 0x58
 800067e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2244      	movs	r2, #68	; 0x44
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f009 fcd9 	bl	800a040 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a0:	f003 fe60 	bl	8004364 <HAL_PWREx_ControlVoltageScaling>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x34>
	{
		Error_Handler();
 80006aa:	f000 f867 	bl	800077c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ae:	2310      	movs	r3, #16
 80006b0:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ba:	2360      	movs	r3, #96	; 0x60
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c2:	2301      	movs	r3, #1
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 80006ca:	2328      	movs	r3, #40	; 0x28
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fe98 	bl	8004410 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x70>
	{
		Error_Handler();
 80006e6:	f000 f849 	bl	800077c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2104      	movs	r1, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fae6 	bl	8004cd4 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800070e:	f000 f835 	bl	800077c <Error_Handler>
	}
}
 8000712:	bf00      	nop
 8000714:	3758      	adds	r7, #88	; 0x58
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART3_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_USART3_UART_Init+0x58>)
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <MX_USART3_UART_Init+0x5c>)
 8000724:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART3_UART_Init+0x58>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USART3_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART3_UART_Init+0x58>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART3_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART3_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART3_UART_Init+0x58>)
 8000760:	f006 fc86 	bl	8007070 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 800076a:	f000 f807 	bl	800077c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000358 	.word	0x20000358
 8000778:	40004800 	.word	0x40004800

0800077c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_MspInit+0x44>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6613      	str	r3, [r2, #96]	; 0x60
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x44>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6593      	str	r3, [r2, #88]	; 0x58
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a67      	ldr	r2, [pc, #412]	; (800098c <HAL_ADC_MspInit+0x1bc>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d161      	bne.n	80008b6 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80007f2:	4b67      	ldr	r3, [pc, #412]	; (8000990 <HAL_ADC_MspInit+0x1c0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	4a65      	ldr	r2, [pc, #404]	; (8000990 <HAL_ADC_MspInit+0x1c0>)
 80007fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80007fc:	4b64      	ldr	r3, [pc, #400]	; (8000990 <HAL_ADC_MspInit+0x1c0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10b      	bne.n	800081c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000804:	4b63      	ldr	r3, [pc, #396]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	4a62      	ldr	r2, [pc, #392]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 800080a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800080e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000810:	4b60      	ldr	r3, [pc, #384]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b5d      	ldr	r3, [pc, #372]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	4a5c      	ldr	r2, [pc, #368]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000828:	4b5a      	ldr	r3, [pc, #360]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STEP_UP_FEEDBACK_Pin;
 8000834:	2310      	movs	r3, #16
 8000836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000838:	230b      	movs	r3, #11
 800083a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_UP_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f003 faf1 	bl	8003e30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 800084e:	4b52      	ldr	r3, [pc, #328]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 8000850:	4a52      	ldr	r2, [pc, #328]	; (800099c <HAL_ADC_MspInit+0x1cc>)
 8000852:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000854:	4b50      	ldr	r3, [pc, #320]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085a:	4b4f      	ldr	r3, [pc, #316]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000860:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000866:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800086c:	4b4a      	ldr	r3, [pc, #296]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 800086e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000872:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000874:	4b48      	ldr	r3, [pc, #288]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 8000876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800087a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800087c:	4b46      	ldr	r3, [pc, #280]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 800087e:	2220      	movs	r2, #32
 8000880:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000882:	4b45      	ldr	r3, [pc, #276]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000888:	4843      	ldr	r0, [pc, #268]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 800088a:	f002 ffc9 	bl	8003820 <HAL_DMA_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000894:	f7ff ff72 	bl	800077c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a3f      	ldr	r2, [pc, #252]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 800089c:	64da      	str	r2, [r3, #76]	; 0x4c
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <HAL_ADC_MspInit+0x1c8>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	2012      	movs	r0, #18
 80008aa:	f002 ff74 	bl	8003796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008ae:	2012      	movs	r0, #18
 80008b0:	f002 ff8d 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80008b4:	e065      	b.n	8000982 <HAL_ADC_MspInit+0x1b2>
  else if(hadc->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a39      	ldr	r2, [pc, #228]	; (80009a0 <HAL_ADC_MspInit+0x1d0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d160      	bne.n	8000982 <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC_CLK_ENABLED++;
 80008c0:	4b33      	ldr	r3, [pc, #204]	; (8000990 <HAL_ADC_MspInit+0x1c0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a32      	ldr	r2, [pc, #200]	; (8000990 <HAL_ADC_MspInit+0x1c0>)
 80008c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80008ca:	4b31      	ldr	r3, [pc, #196]	; (8000990 <HAL_ADC_MspInit+0x1c0>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d10b      	bne.n	80008ea <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008d2:	4b30      	ldr	r3, [pc, #192]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a2f      	ldr	r2, [pc, #188]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 80008d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a29      	ldr	r2, [pc, #164]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b27      	ldr	r3, [pc, #156]	; (8000994 <HAL_ADC_MspInit+0x1c4>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PEAK_DETECTION_R_Pin|PEAK_DETECTION_L_Pin;
 8000902:	23c0      	movs	r3, #192	; 0xc0
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000906:	230b      	movs	r3, #11
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f003 fa8a 	bl	8003e30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 800091e:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <HAL_ADC_MspInit+0x1d8>)
 8000920:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 800093c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000940:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 8000944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000948:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 800094c:	2220      	movs	r2, #32
 800094e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 8000958:	f002 ff62 	bl	8003820 <HAL_DMA_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_ADC_MspInit+0x196>
      Error_Handler();
 8000962:	f7ff ff0b 	bl	800077c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 800096a:	64da      	str	r2, [r3, #76]	; 0x4c
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <HAL_ADC_MspInit+0x1d4>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2101      	movs	r1, #1
 8000976:	2012      	movs	r0, #18
 8000978:	f002 ff0d 	bl	8003796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800097c:	2012      	movs	r0, #18
 800097e:	f002 ff26 	bl	80037ce <HAL_NVIC_EnableIRQ>
}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	; 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	50040000 	.word	0x50040000
 8000990:	200003dc 	.word	0x200003dc
 8000994:	40021000 	.word	0x40021000
 8000998:	20000154 	.word	0x20000154
 800099c:	40020430 	.word	0x40020430
 80009a0:	50040100 	.word	0x50040100
 80009a4:	2000019c 	.word	0x2000019c
 80009a8:	4002001c 	.word	0x4002001c

080009ac <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <HAL_ADC_MspDeInit+0x8c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d119      	bne.n	80009f2 <HAL_ADC_MspDeInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_ADC_CLK_ENABLED--;
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <HAL_ADC_MspDeInit+0x90>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <HAL_ADC_MspDeInit+0x90>)
 80009c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==0){
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <HAL_ADC_MspDeInit+0x90>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d105      	bne.n	80009dc <HAL_ADC_MspDeInit+0x30>
      __HAL_RCC_ADC_CLK_DISABLE();
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_ADC_MspDeInit+0x94>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	4a1a      	ldr	r2, [pc, #104]	; (8000a40 <HAL_ADC_MspDeInit+0x94>)
 80009d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009da:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(STEP_UP_FEEDBACK_GPIO_Port, STEP_UP_FEEDBACK_Pin);
 80009dc:	2110      	movs	r1, #16
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f003 fb97 	bl	8004114 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 ffd0 	bl	8003990 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 80009f0:	e01d      	b.n	8000a2e <HAL_ADC_MspDeInit+0x82>
  else if(hadc->Instance==ADC2)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <HAL_ADC_MspDeInit+0x98>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d118      	bne.n	8000a2e <HAL_ADC_MspDeInit+0x82>
    HAL_RCC_ADC_CLK_ENABLED--;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_ADC_MspDeInit+0x90>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_ADC_MspDeInit+0x90>)
 8000a04:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==0){
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_ADC_MspDeInit+0x90>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d105      	bne.n	8000a1a <HAL_ADC_MspDeInit+0x6e>
      __HAL_RCC_ADC_CLK_DISABLE();
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_ADC_MspDeInit+0x94>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <HAL_ADC_MspDeInit+0x94>)
 8000a14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOA, PEAK_DETECTION_R_Pin|PEAK_DETECTION_L_Pin);
 8000a1a:	21c0      	movs	r1, #192	; 0xc0
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f003 fb78 	bl	8004114 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 ffb1 	bl	8003990 <HAL_DMA_DeInit>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	50040000 	.word	0x50040000
 8000a3c:	200003dc 	.word	0x200003dc
 8000a40:	40021000 	.word	0x40021000
 8000a44:	50040100 	.word	0x50040100

08000a48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a49      	ldr	r2, [pc, #292]	; (8000b7c <HAL_TIM_PWM_MspInit+0x134>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d114      	bne.n	8000a84 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5a:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <HAL_TIM_PWM_MspInit+0x138>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <HAL_TIM_PWM_MspInit+0x138>)
 8000a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a64:	6613      	str	r3, [r2, #96]	; 0x60
 8000a66:	4b46      	ldr	r3, [pc, #280]	; (8000b80 <HAL_TIM_PWM_MspInit+0x138>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2102      	movs	r1, #2
 8000a76:	2019      	movs	r0, #25
 8000a78:	f002 fe8d 	bl	8003796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a7c:	2019      	movs	r0, #25
 8000a7e:	f002 fea6 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a82:	e076      	b.n	8000b72 <HAL_TIM_PWM_MspInit+0x12a>
  else if(htim_pwm->Instance==TIM2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a8c:	d171      	bne.n	8000b72 <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <HAL_TIM_PWM_MspInit+0x138>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	4a3b      	ldr	r2, [pc, #236]	; (8000b80 <HAL_TIM_PWM_MspInit+0x138>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9a:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <HAL_TIM_PWM_MspInit+0x138>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000aa6:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000aa8:	4a37      	ldr	r2, [pc, #220]	; (8000b88 <HAL_TIM_PWM_MspInit+0x140>)
 8000aaa:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8000aac:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ab2:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000ab4:	2210      	movs	r2, #16
 8000ab6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab8:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aca:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000acc:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ad2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ada:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000adc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ae0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000ae2:	4828      	ldr	r0, [pc, #160]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000ae4:	f002 fe9c 	bl	8003820 <HAL_DMA_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 8000aee:	f7ff fe45 	bl	800077c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
 8000af8:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
 8000b04:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <HAL_TIM_PWM_MspInit+0x13c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b0c:	4a20      	ldr	r2, [pc, #128]	; (8000b90 <HAL_TIM_PWM_MspInit+0x148>)
 8000b0e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b16:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b18:	2210      	movs	r2, #16
 8000b1a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b2e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b36:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b40:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000b46:	4811      	ldr	r0, [pc, #68]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b48:	f002 fe6a 	bl	8003820 <HAL_DMA_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_TIM_PWM_MspInit+0x10e>
      Error_Handler();
 8000b52:	f7ff fe13 	bl	800077c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <HAL_TIM_PWM_MspInit+0x144>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2102      	movs	r1, #2
 8000b66:	201c      	movs	r0, #28
 8000b68:	f002 fe15 	bl	8003796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b6c:	201c      	movs	r0, #28
 8000b6e:	f002 fe2e 	bl	80037ce <HAL_NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40012c00 	.word	0x40012c00
 8000b80:	40021000 	.word	0x40021000
 8000b84:	200002c8 	.word	0x200002c8
 8000b88:	40020080 	.word	0x40020080
 8000b8c:	20000310 	.word	0x20000310
 8000b90:	40020008 	.word	0x40020008

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <HAL_TIM_Base_MspInit+0x44>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d113      	bne.n	8000bce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <HAL_TIM_Base_MspInit+0x48>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <HAL_TIM_Base_MspInit+0x48>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_TIM_Base_MspInit+0x48>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	2036      	movs	r0, #54	; 0x36
 8000bc4:	f002 fde7 	bl	8003796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000bc8:	2036      	movs	r0, #54	; 0x36
 8000bca:	f002 fe00 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40001000 	.word	0x40001000
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_TIM_PWM_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <HAL_TIM_PWM_MspDeInit+0x68>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d109      	bne.n	8000c06 <HAL_TIM_PWM_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bfc:	6613      	str	r3, [r2, #96]	; 0x60

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 8000bfe:	2019      	movs	r0, #25
 8000c00:	f002 fdf3 	bl	80037ea <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 8000c04:	e01c      	b.n	8000c40 <HAL_TIM_PWM_MspDeInit+0x60>
  else if(htim_pwm->Instance==TIM2)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c0e:	d117      	bne.n	8000c40 <HAL_TIM_PWM_MspDeInit+0x60>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000c16:	f023 0301 	bic.w	r3, r3, #1
 8000c1a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC2]);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 feb5 	bl	8003990 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC4]);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 feb0 	bl	8003990 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC3]);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 feab 	bl	8003990 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8000c3a:	201c      	movs	r0, #28
 8000c3c:	f002 fdd5 	bl	80037ea <HAL_NVIC_DisableIRQ>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40012c00 	.word	0x40012c00
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b096      	sub	sp, #88	; 0x58
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	2234      	movs	r2, #52	; 0x34
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f009 f9e5 	bl	800a040 <memset>
  if(huart->Instance==USART3)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d13e      	bne.n	8000cfe <HAL_UART_MspInit+0xae>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c80:	2304      	movs	r3, #4
 8000c82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fa45 	bl	800511c <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c98:	f7ff fd70 	bl	800077c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_UART_MspInit+0xbc>)
 8000c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca0:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <HAL_UART_MspInit+0xbc>)
 8000ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_UART_MspInit+0xbc>)
 8000caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_UART_MspInit+0xbc>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <HAL_UART_MspInit+0xbc>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_UART_MspInit+0xbc>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ccc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cd0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cde:	2307      	movs	r3, #7
 8000ce0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_UART_MspInit+0xc0>)
 8000cea:	f003 f8a1 	bl	8003e30 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2027      	movs	r0, #39	; 0x27
 8000cf4:	f002 fd4f 	bl	8003796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cf8:	2027      	movs	r0, #39	; 0x27
 8000cfa:	f002 fd68 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3758      	adds	r7, #88	; 0x58
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40004800 	.word	0x40004800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000400 	.word	0x48000400

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 f9cc 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STIM_TRIGGER_INPUT_Pin);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f003 fad3 	bl	8004318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <DMA1_Channel1_IRQHandler+0x10>)
 8000d7e:	f002 ff78 	bl	8003c72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000310 	.word	0x20000310

08000d8c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <DMA1_Channel2_IRQHandler+0x10>)
 8000d92:	f002 ff6e 	bl	8003c72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000019c 	.word	0x2000019c

08000da0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <DMA1_Channel7_IRQHandler+0x10>)
 8000da6:	f002 ff64 	bl	8003c72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200002c8 	.word	0x200002c8

08000db4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <ADC1_2_IRQHandler+0x14>)
 8000dba:	f001 f885 	bl	8001ec8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000dbe:	4803      	ldr	r0, [pc, #12]	; (8000dcc <ADC1_2_IRQHandler+0x18>)
 8000dc0:	f001 f882 	bl	8001ec8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000008c 	.word	0x2000008c
 8000dcc:	200000f0 	.word	0x200000f0

08000dd0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000dd6:	f005 f983 	bl	80060e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200001e4 	.word	0x200001e4

08000de4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <TIM2_IRQHandler+0x10>)
 8000dea:	f005 f979 	bl	80060e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000230 	.word	0x20000230

08000df8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <USART3_IRQHandler+0x10>)
 8000dfe:	f006 f985 	bl	800710c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000358 	.word	0x20000358

08000e0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QCC_CTRL0_Pin);
 8000e10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e14:	f003 fa80 	bl	8004318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QCC_CTRL1_Pin);
 8000e18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e1c:	f003 fa7c 	bl	8004318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <TIM6_IRQHandler+0x10>)
 8000e2a:	f005 f959 	bl	80060e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000027c 	.word	0x2000027c

08000e38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	e00a      	b.n	8000e60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e4a:	f3af 8000 	nop.w
 8000e4e:	4601      	mov	r1, r0
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	b2ca      	uxtb	r2, r1
 8000e58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	dbf0      	blt.n	8000e4a <_read+0x12>
  }

  return len;
 8000e68:	687b      	ldr	r3, [r7, #4]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <_isatty>:

int _isatty(int file)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f009 f86e 	bl	8009fec <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000a000 	.word	0x2000a000
 8000f3c:	000007ff 	.word	0x000007ff
 8000f40:	200003e0 	.word	0x200003e0
 8000f44:	20000470 	.word	0x20000470

08000f48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <_write>:

int __io_putchar(int ch);

/* With GCC, printf calls _write() */
int _write(int file, char *ptr, int len)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e009      	b.n	8000f92 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	60ba      	str	r2, [r7, #8]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f80c 	bl	8000fa4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbf1      	blt.n	8000f7e <_write+0x12>
	}
	return len;
 8000f9a:	687b      	ldr	r3, [r7, #4]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <__io_putchar>:
FILE __stdin;

int fputc(int ch, FILE *f)

#endif /* __GNUC__ */
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b0a      	cmp	r3, #10
 8000fb0:	d109      	bne.n	8000fc6 <__io_putchar+0x22>
	{
		/* output CR  */
		while (!(TD_RETARGET_UART->ISR & UART_FLAG_TXE))
 8000fb2:	bf00      	nop
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <__io_putchar+0x48>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f9      	beq.n	8000fb4 <__io_putchar+0x10>
			;

		TD_RETARGET_UART->TDR = '\r';
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <__io_putchar+0x48>)
 8000fc2:	220d      	movs	r2, #13
 8000fc4:	851a      	strh	r2, [r3, #40]	; 0x28
	}

	while (!(TD_RETARGET_UART->ISR & UART_FLAG_TXE))
 8000fc6:	bf00      	nop
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <__io_putchar+0x48>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f9      	beq.n	8000fc8 <__io_putchar+0x24>
		;

	TD_RETARGET_UART->TDR = (uint8_t) ch;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__io_putchar+0x48>)
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	851a      	strh	r2, [r3, #40]	; 0x28

	return ch;
 8000fde:	687b      	ldr	r3, [r7, #4]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40004800 	.word	0x40004800

08000ff0 <Reset_Handler>:
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopForever+0x2>
 8000ff4:	f7ff ffa8 	bl	8000f48 <SystemInit>
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopForever+0x6>)
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopForever+0xa>)
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopForever+0xe>)
 8000ffe:	2300      	movs	r3, #0
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:
 8001002:	58d4      	ldr	r4, [r2, r3]
 8001004:	50c4      	str	r4, [r0, r3]
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:
 8001008:	18c4      	adds	r4, r0, r3
 800100a:	428c      	cmp	r4, r1
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopForever+0x12>)
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopForever+0x16>)
 8001012:	2300      	movs	r3, #0
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:
 800101a:	42a2      	cmp	r2, r4
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>
 800101e:	f008 ffeb 	bl	8009ff8 <__libc_init_array>
 8001022:	f7ff fb02 	bl	800062a <main>

08001026 <LoopForever>:
 8001026:	e7fe      	b.n	8001026 <LoopForever>
 8001028:	2000a000 	.word	0x2000a000
 800102c:	20000000 	.word	0x20000000
 8001030:	20000070 	.word	0x20000070
 8001034:	0800b4e8 	.word	0x0800b4e8
 8001038:	20000070 	.word	0x20000070
 800103c:	2000046c 	.word	0x2000046c

08001040 <COMP_IRQHandler>:
 8001040:	e7fe      	b.n	8001040 <COMP_IRQHandler>
	...

08001044 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_Init+0x3c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_Init+0x3c>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001058:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f002 fb90 	bl	8003780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f80f 	bl	8001084 <HAL_InitTick>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	e001      	b.n	8001076 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001072:	f7ff fb89 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001076:	79fb      	ldrb	r3, [r7, #7]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40022000 	.word	0x40022000

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d023      	beq.n	80010e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_InitTick+0x70>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_InitTick+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fba9 	bl	8003806 <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10f      	bne.n	80010da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d809      	bhi.n	80010d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f002 fb65 	bl	8003796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_InitTick+0x74>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e004      	b.n	80010e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e001      	b.n	80010e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	200003e4 	.word	0x200003e4

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200003e4 	.word	0x200003e4

0800113c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	609a      	str	r2, [r3, #8]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	609a      	str	r2, [r3, #8]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3360      	adds	r3, #96	; 0x60
 80011b6:	461a      	mov	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <LL_ADC_SetOffset+0x44>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	4313      	orrs	r3, r2
 80011d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011dc:	bf00      	nop
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	03fff000 	.word	0x03fff000

080011ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3360      	adds	r3, #96	; 0x60
 80011fa:	461a      	mov	r2, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800120c:	4618      	mov	r0, r3
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3360      	adds	r3, #96	; 0x60
 8001228:	461a      	mov	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	431a      	orrs	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001242:	bf00      	nop
 8001244:	371c      	adds	r7, #28
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	615a      	str	r2, [r3, #20]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800129a:	b480      	push	{r7}
 800129c:	b087      	sub	sp, #28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3330      	adds	r3, #48	; 0x30
 80012aa:	461a      	mov	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	4413      	add	r3, r2
 80012b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	211f      	movs	r1, #31
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	401a      	ands	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	0e9b      	lsrs	r3, r3, #26
 80012d2:	f003 011f 	and.w	r1, r3, #31
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3314      	adds	r3, #20
 8001328:	461a      	mov	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	0e5b      	lsrs	r3, r3, #25
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	0d1b      	lsrs	r3, r3, #20
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2107      	movs	r1, #7
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	401a      	ands	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	0d1b      	lsrs	r3, r3, #20
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0318 	and.w	r3, r3, #24
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001394:	40d9      	lsrs	r1, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	400b      	ands	r3, r1
 800139a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800139e:	431a      	orrs	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	0007ffff 	.word	0x0007ffff

080013b8 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	330c      	adds	r3, #12
 80013c8:	4618      	mov	r0, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	0d1b      	lsrs	r3, r3, #20
 80013ce:	f003 0103 	and.w	r1, r3, #3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f003 0201 	and.w	r2, r3, #1
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4403      	add	r3, r0
 80013e6:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 80013f2:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 80013f6:	43db      	mvns	r3, r3
 80013f8:	401a      	ands	r2, r3
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	400b      	ands	r3, r1
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8001412:	b480      	push	{r7}
 8001414:	b087      	sub	sp, #28
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3320      	adds	r3, #32
 8001424:	461a      	mov	r2, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	0d1b      	lsrs	r3, r3, #20
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	4413      	add	r3, r2
 8001432:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	0419      	lsls	r1, r3, #16
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	430b      	orrs	r3, r1
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 031f 	and.w	r3, r3, #31
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800149e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6093      	str	r3, [r2, #8]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014c6:	d101      	bne.n	80014cc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001516:	d101      	bne.n	800151c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800153a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001562:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001566:	f043 0202 	orr.w	r2, r3, #2
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b01      	cmp	r3, #1
 800158c:	d101      	bne.n	8001592 <LL_ADC_IsEnabled+0x18>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <LL_ADC_IsEnabled+0x1a>
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d101      	bne.n	80015b8 <LL_ADC_IsDisableOngoing+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_ADC_IsDisableOngoing+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015da:	f043 0204 	orr.w	r2, r3, #4
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001602:	f043 0210 	orr.w	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b04      	cmp	r3, #4
 8001628:	d101      	bne.n	800162e <LL_ADC_REG_IsConversionOngoing+0x18>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800164c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001650:	f043 0220 	orr.w	r2, r3, #32
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b08      	cmp	r3, #8
 8001676:	d101      	bne.n	800167c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	601a      	str	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	605a      	str	r2, [r3, #4]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	605a      	str	r2, [r3, #4]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	605a      	str	r2, [r3, #4]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	605a      	str	r2, [r3, #4]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	605a      	str	r2, [r3, #4]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e131      	b.n	8001a1a <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff f803 	bl	80007d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fe68 	bl	80014b2 <LL_ADC_IsDeepPowerDownEnabled>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fe4e 	bl	800148e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fe83 	bl	8001502 <LL_ADC_IsInternalRegulatorEnabled>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d115      	bne.n	800182e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fe67 	bl	80014da <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800180c:	4b85      	ldr	r3, [pc, #532]	; (8001a24 <HAL_ADC_Init+0x288>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	4a85      	ldr	r2, [pc, #532]	; (8001a28 <HAL_ADC_Init+0x28c>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	3301      	adds	r3, #1
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001820:	e002      	b.n	8001828 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3b01      	subs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f9      	bne.n	8001822 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fe65 	bl	8001502 <LL_ADC_IsInternalRegulatorEnabled>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10d      	bne.n	800185a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001842:	f043 0210 	orr.w	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	f043 0201 	orr.w	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fed9 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8001864:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 80ca 	bne.w	8001a08 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 80c6 	bne.w	8001a08 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001880:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001884:	f043 0202 	orr.w	r2, r3, #2
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fe72 	bl	800157a <LL_ADC_IsEnabled>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d110      	bne.n	80018be <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800189c:	4863      	ldr	r0, [pc, #396]	; (8001a2c <HAL_ADC_Init+0x290>)
 800189e:	f7ff fe6c 	bl	800157a <LL_ADC_IsEnabled>
 80018a2:	4604      	mov	r4, r0
 80018a4:	4862      	ldr	r0, [pc, #392]	; (8001a30 <HAL_ADC_Init+0x294>)
 80018a6:	f7ff fe68 	bl	800157a <LL_ADC_IsEnabled>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4323      	orrs	r3, r4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4619      	mov	r1, r3
 80018b8:	485e      	ldr	r0, [pc, #376]	; (8001a34 <HAL_ADC_Init+0x298>)
 80018ba:	f7ff fc3f 	bl	800113c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7e5b      	ldrb	r3, [r3, #25]
 80018c2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018c8:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80018ce:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80018d4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018dc:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d106      	bne.n	80018fa <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	3b01      	subs	r3, #1
 80018f2:	045b      	lsls	r3, r3, #17
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_ADC_Init+0x29c>)
 800191e:	4013      	ands	r3, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	69b9      	ldr	r1, [r7, #24]
 8001926:	430b      	orrs	r3, r1
 8001928:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe71 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8001934:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fe92 	bl	8001664 <LL_ADC_INJ_IsConversionOngoing>
 8001940:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d13d      	bne.n	80019c4 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d13a      	bne.n	80019c4 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001952:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800195a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800196a:	f023 0302 	bic.w	r3, r3, #2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	69b9      	ldr	r1, [r7, #24]
 8001974:	430b      	orrs	r3, r1
 8001976:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800197e:	2b01      	cmp	r3, #1
 8001980:	d118      	bne.n	80019b4 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800198c:	f023 0304 	bic.w	r3, r3, #4
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019a4:	430a      	orrs	r2, r1
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	611a      	str	r2, [r3, #16]
 80019b2:	e007      	b.n	80019c4 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d10c      	bne.n	80019e6 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f023 010f 	bic.w	r1, r3, #15
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	1e5a      	subs	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
 80019e4:	e007      	b.n	80019f6 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 020f 	bic.w	r2, r2, #15
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
 8001a06:	e007      	b.n	8001a18 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	f043 0210 	orr.w	r2, r3, #16
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000000 	.word	0x20000000
 8001a28:	053e2d63 	.word	0x053e2d63
 8001a2c:	50040000 	.word	0x50040000
 8001a30:	50040100 	.word	0x50040100
 8001a34:	50040300 	.word	0x50040300
 8001a38:	fff0c007 	.word	0xfff0c007

08001a3c <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e111      	b.n	8001c72 <HAL_ADC_DeInit+0x236>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	f043 0202 	orr.w	r2, r3, #2
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a5a:	2103      	movs	r1, #3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f001 fa69 	bl	8002f34 <ADC_ConversionStop>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001a74:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f001 fb9b 	bl	80031b8 <ADC_Disable>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001aa0:	f023 0307 	bic.w	r3, r3, #7
 8001aa4:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001aae:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 8001abe:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ace:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68d9      	ldr	r1, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b68      	ldr	r3, [pc, #416]	; (8001c7c <HAL_ADC_DeInit+0x240>)
 8001adc:	400b      	ands	r3, r1
 8001ade:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aee:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001afe:	f023 0307 	bic.w	r3, r3, #7
 8001b02:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b12:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8001b22:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6a1a      	ldr	r2, [r3, #32]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8001b32:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b48      	ldr	r3, [pc, #288]	; (8001c80 <HAL_ADC_DeInit+0x244>)
 8001b60:	400b      	ands	r3, r1
 8001b62:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <HAL_ADC_DeInit+0x248>)
 8001b70:	400b      	ands	r3, r1
 8001b72:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_ADC_DeInit+0x248>)
 8001b80:	400b      	ands	r3, r1
 8001b82:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 8001b92:	f023 0307 	bic.w	r3, r3, #7
 8001b96:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <HAL_ADC_DeInit+0x24c>)
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <HAL_ADC_DeInit+0x24c>)
 8001bb4:	400b      	ands	r3, r1
 8001bb6:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_ADC_DeInit+0x24c>)
 8001bc4:	400b      	ands	r3, r1
 8001bc6:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <HAL_ADC_DeInit+0x24c>)
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	0cdb      	lsrs	r3, r3, #19
 8001be6:	04db      	lsls	r3, r3, #19
 8001be8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	0cdb      	lsrs	r3, r3, #19
 8001bfa:	04db      	lsls	r3, r3, #19
 8001bfc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	0cdb      	lsrs	r3, r3, #19
 8001c0e:	04db      	lsls	r3, r3, #19
 8001c10:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8001c24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c28:	4818      	ldr	r0, [pc, #96]	; (8001c8c <HAL_ADC_DeInit+0x250>)
 8001c2a:	f7ff fca6 	bl	800157a <LL_ADC_IsEnabled>
 8001c2e:	4604      	mov	r4, r0
 8001c30:	4817      	ldr	r0, [pc, #92]	; (8001c90 <HAL_ADC_DeInit+0x254>)
 8001c32:	f7ff fca2 	bl	800157a <LL_ADC_IsEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4323      	orrs	r3, r4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d108      	bne.n	8001c50 <HAL_ADC_DeInit+0x214>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_ADC_DeInit+0x258>)
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	4914      	ldr	r1, [pc, #80]	; (8001c94 <HAL_ADC_DeInit+0x258>)
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_ADC_DeInit+0x25c>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe feae 	bl	80009ac <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	65da      	str	r2, [r3, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	80008004 	.word	0x80008004
 8001c80:	e0820830 	.word	0xe0820830
 8001c84:	e0820820 	.word	0xe0820820
 8001c88:	03fff000 	.word	0x03fff000
 8001c8c:	50040000 	.word	0x50040000
 8001c90:	50040100 	.word	0x50040100
 8001c94:	50040300 	.word	0x50040300
 8001c98:	fe0010e0 	.word	0xfe0010e0

08001c9c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ca8:	4850      	ldr	r0, [pc, #320]	; (8001dec <HAL_ADC_Start_DMA+0x150>)
 8001caa:	f7ff fbd4 	bl	8001456 <LL_ADC_GetMultimode>
 8001cae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fcae 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f040 808e 	bne.w	8001dde <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_Start_DMA+0x34>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e089      	b.n	8001de4 <HAL_ADC_Start_DMA+0x148>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d002      	beq.n	8001cea <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b09      	cmp	r3, #9
 8001ce8:	d172      	bne.n	8001dd0 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f001 f9de 	bl	80030ac <ADC_Enable>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d165      	bne.n	8001dc6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <HAL_ADC_Start_DMA+0x154>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d002      	beq.n	8001d1e <HAL_ADC_Start_DMA+0x82>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	e000      	b.n	8001d20 <HAL_ADC_Start_DMA+0x84>
 8001d1e:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_ADC_Start_DMA+0x158>)
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d002      	beq.n	8001d2e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f023 0206 	bic.w	r2, r3, #6
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	659a      	str	r2, [r3, #88]	; 0x58
 8001d52:	e002      	b.n	8001d5a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a26      	ldr	r2, [pc, #152]	; (8001df8 <HAL_ADC_Start_DMA+0x15c>)
 8001d60:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <HAL_ADC_Start_DMA+0x160>)
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <HAL_ADC_Start_DMA+0x164>)
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	221c      	movs	r2, #28
 8001d78:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0210 	orr.w	r2, r2, #16
 8001d90:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3340      	adds	r3, #64	; 0x40
 8001dac:	4619      	mov	r1, r3
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f001 fe7f 	bl	8003ab4 <HAL_DMA_Start_IT>
 8001db6:	4603      	mov	r3, r0
 8001db8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fc01 	bl	80015c6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001dc4:	e00d      	b.n	8001de2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001dce:	e008      	b.n	8001de2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ddc:	e001      	b.n	8001de2 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dde:	2302      	movs	r3, #2
 8001de0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	50040300 	.word	0x50040300
 8001df0:	50040100 	.word	0x50040100
 8001df4:	50040000 	.word	0x50040000
 8001df8:	08003277 	.word	0x08003277
 8001dfc:	0800334f 	.word	0x0800334f
 8001e00:	0800336b 	.word	0x0800336b

08001e04 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Stop_DMA+0x16>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e051      	b.n	8001ebe <HAL_ADC_Stop_DMA+0xba>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e22:	2103      	movs	r1, #3
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f001 f885 	bl	8002f34 <ADC_ConversionStop>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d13f      	bne.n	8001eb4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d10f      	bne.n	8001e72 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 fe8c 	bl	8003b74 <HAL_DMA_Abort>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0210 	bic.w	r2, r2, #16
 8001e80:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f001 f995 	bl	80031b8 <ADC_Disable>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e002      	b.n	8001e9a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f001 f98f 	bl	80031b8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee4:	4882      	ldr	r0, [pc, #520]	; (80020f0 <HAL_ADC_IRQHandler+0x228>)
 8001ee6:	f7ff fab6 	bl	8001456 <LL_ADC_GetMultimode>
 8001eea:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d017      	beq.n	8001f26 <HAL_ADC_IRQHandler+0x5e>
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d012      	beq.n	8001f26 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d105      	bne.n	8001f18 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f001 fa8e 	bl	800343a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2202      	movs	r2, #2
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x72>
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8083 	beq.w	800204c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d07d      	beq.n	800204c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f981 	bl	8001274 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d062      	beq.n	800203e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a5d      	ldr	r2, [pc, #372]	; (80020f4 <HAL_ADC_IRQHandler+0x22c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d002      	beq.n	8001f88 <HAL_ADC_IRQHandler+0xc0>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	e000      	b.n	8001f8a <HAL_ADC_IRQHandler+0xc2>
 8001f88:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <HAL_ADC_IRQHandler+0x230>)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d008      	beq.n	8001fa4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d002      	beq.n	8001fa4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b09      	cmp	r3, #9
 8001fa2:	d104      	bne.n	8001fae <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	e00c      	b.n	8001fc8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a50      	ldr	r2, [pc, #320]	; (80020f4 <HAL_ADC_IRQHandler+0x22c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d002      	beq.n	8001fbe <HAL_ADC_IRQHandler+0xf6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	e000      	b.n	8001fc0 <HAL_ADC_IRQHandler+0xf8>
 8001fbe:	4b4e      	ldr	r3, [pc, #312]	; (80020f8 <HAL_ADC_IRQHandler+0x230>)
 8001fc0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d135      	bne.n	800203e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d12e      	bne.n	800203e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fb16 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d11a      	bne.n	8002026 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 020c 	bic.w	r2, r2, #12
 8001ffe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d112      	bne.n	800203e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
 8002024:	e00b      	b.n	800203e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f95c 	bl	80022fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	220c      	movs	r2, #12
 800204a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <HAL_ADC_IRQHandler+0x198>
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 809f 	beq.w	80021aa <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8099 	beq.w	80021aa <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff f92c 	bl	80012f2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800209a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff f8e7 	bl	8001274 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020a6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_ADC_IRQHandler+0x22c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d002      	beq.n	80020b8 <HAL_ADC_IRQHandler+0x1f0>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	e000      	b.n	80020ba <HAL_ADC_IRQHandler+0x1f2>
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_ADC_IRQHandler+0x230>)
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	4293      	cmp	r3, r2
 80020c0:	d008      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d002      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b07      	cmp	r3, #7
 80020d2:	d104      	bne.n	80020de <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	e013      	b.n	8002106 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_ADC_IRQHandler+0x22c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_ADC_IRQHandler+0x234>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	e007      	b.n	80020fe <HAL_ADC_IRQHandler+0x236>
 80020ee:	bf00      	nop
 80020f0:	50040300 	.word	0x50040300
 80020f4:	50040100 	.word	0x50040100
 80020f8:	50040000 	.word	0x50040000
 80020fc:	4b7d      	ldr	r3, [pc, #500]	; (80022f4 <HAL_ADC_IRQHandler+0x42c>)
 80020fe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d047      	beq.n	800219c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_ADC_IRQHandler+0x25e>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d03f      	beq.n	800219c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d13a      	bne.n	800219c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	2b40      	cmp	r3, #64	; 0x40
 8002132:	d133      	bne.n	800219c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d12e      	bne.n	800219c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fa8e 	bl	8001664 <LL_ADC_INJ_IsConversionOngoing>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11a      	bne.n	8002184 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800215c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d112      	bne.n	800219c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	655a      	str	r2, [r3, #84]	; 0x54
 8002182:	e00b      	b.n	800219c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f001 f924 	bl	80033ea <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2260      	movs	r2, #96	; 0x60
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d011      	beq.n	80021d8 <HAL_ADC_IRQHandler+0x310>
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fa23 	bl	8000616 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d012      	beq.n	8002208 <HAL_ADC_IRQHandler+0x340>
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00d      	beq.n	8002208 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f001 f90a 	bl	8003412 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220e:	2b00      	cmp	r3, #0
 8002210:	d012      	beq.n	8002238 <HAL_ADC_IRQHandler+0x370>
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f001 f8fc 	bl	8003426 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002236:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d036      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x3e8>
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d031      	beq.n	80022b0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002254:	2301      	movs	r3, #1
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
 8002258:	e014      	b.n	8002284 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002260:	4825      	ldr	r0, [pc, #148]	; (80022f8 <HAL_ADC_IRQHandler+0x430>)
 8002262:	f7ff f906 	bl	8001472 <LL_ADC_GetMultiDMATransfer>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800226c:	2301      	movs	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	e008      	b.n	8002284 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002280:	2301      	movs	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10e      	bne.n	80022a8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	f043 0202 	orr.w	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe f9ad 	bl	8000602 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2210      	movs	r2, #16
 80022ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d018      	beq.n	80022ec <HAL_ADC_IRQHandler+0x424>
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	f043 0208 	orr.w	r2, r3, #8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f001 f889 	bl	80033fe <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	50040000 	.word	0x50040000
 80022f8:	50040300 	.word	0x50040300

080022fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0b6      	sub	sp, #216	; 0xd8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x22>
 8002342:	2302      	movs	r3, #2
 8002344:	e3d5      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x7ce>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f95f 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 83ba 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b05      	cmp	r3, #5
 8002366:	d824      	bhi.n	80023b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	3b02      	subs	r3, #2
 800236e:	2b03      	cmp	r3, #3
 8002370:	d81b      	bhi.n	80023aa <HAL_ADC_ConfigChannel+0x86>
 8002372:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <HAL_ADC_ConfigChannel+0x54>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	08002389 	.word	0x08002389
 800237c:	08002391 	.word	0x08002391
 8002380:	08002399 	.word	0x08002399
 8002384:	080023a1 	.word	0x080023a1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	220c      	movs	r2, #12
 800238c:	605a      	str	r2, [r3, #4]
          break;
 800238e:	e011      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2212      	movs	r2, #18
 8002394:	605a      	str	r2, [r3, #4]
          break;
 8002396:	e00d      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2218      	movs	r2, #24
 800239c:	605a      	str	r2, [r3, #4]
          break;
 800239e:	e009      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a6:	605a      	str	r2, [r3, #4]
          break;
 80023a8:	e004      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2206      	movs	r2, #6
 80023ae:	605a      	str	r2, [r3, #4]
          break;
 80023b0:	e000      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80023b2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f7fe ff6a 	bl	800129a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f923 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 80023d0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f943 	bl	8001664 <LL_ADC_INJ_IsConversionOngoing>
 80023de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 81c1 	bne.w	800276e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 81bc 	bne.w	800276e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023fe:	d10f      	bne.n	8002420 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2200      	movs	r2, #0
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe ff84 	bl	8001318 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe ff18 	bl	800124e <LL_ADC_SetSamplingTimeCommonConfig>
 800241e:	e00e      	b.n	800243e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6819      	ldr	r1, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	461a      	mov	r2, r3
 800242e:	f7fe ff73 	bl	8001318 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe ff08 	bl	800124e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	08db      	lsrs	r3, r3, #3
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d00a      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6919      	ldr	r1, [r3, #16]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002470:	f7fe fe98 	bl	80011a4 <LL_ADC_SetOffset>
 8002474:	e17b      	b.n	800276e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe feb5 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x17e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe feaa 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	0e9b      	lsrs	r3, r3, #26
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	e01e      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x1bc>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fe9f 	bl	80011ec <LL_ADC_GetOffsetChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80024d0:	2320      	movs	r3, #32
 80024d2:	e004      	b.n	80024de <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80024d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1d4>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	e018      	b.n	800252a <HAL_ADC_ConfigChannel+0x206>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800250c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002514:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800251c:	2320      	movs	r3, #32
 800251e:	e004      	b.n	800252a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800252a:	429a      	cmp	r2, r3
 800252c:	d106      	bne.n	800253c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fe6e 	bl	8001218 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fe52 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x244>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2101      	movs	r1, #1
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fe47 	bl	80011ec <LL_ADC_GetOffsetChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	f003 021f 	and.w	r2, r3, #31
 8002566:	e01e      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x282>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fe3c 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800258a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800258e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002596:	2320      	movs	r3, #32
 8002598:	e004      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800259a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <HAL_ADC_ConfigChannel+0x29a>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	e018      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x2cc>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e004      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80025e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d106      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2101      	movs	r1, #1
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fe0b 	bl	8001218 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2102      	movs	r1, #2
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe fdef 	bl	80011ec <LL_ADC_GetOffsetChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <HAL_ADC_ConfigChannel+0x30a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fde4 	bl	80011ec <LL_ADC_GetOffsetChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	0e9b      	lsrs	r3, r3, #26
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	e01e      	b.n	800266c <HAL_ADC_ConfigChannel+0x348>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2102      	movs	r1, #2
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fdd9 	bl	80011ec <LL_ADC_GetOffsetChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800264c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002650:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e004      	b.n	800266a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x360>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	e016      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x38e>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800269c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80026a4:	2320      	movs	r3, #32
 80026a6:	e004      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80026a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d106      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2200      	movs	r2, #0
 80026bc:	2102      	movs	r1, #2
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fdaa 	bl	8001218 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2103      	movs	r1, #3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fd8e 	bl	80011ec <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x3cc>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2103      	movs	r1, #3
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fd83 	bl	80011ec <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	0e9b      	lsrs	r3, r3, #26
 80026ea:	f003 021f 	and.w	r2, r3, #31
 80026ee:	e017      	b.n	8002720 <HAL_ADC_ConfigChannel+0x3fc>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2103      	movs	r1, #3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fd78 	bl	80011ec <LL_ADC_GetOffsetChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800270a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800270c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e003      	b.n	800271e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x414>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	e011      	b.n	800275c <HAL_ADC_ConfigChannel+0x438>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002748:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e003      	b.n	800275c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2200      	movs	r2, #0
 8002766:	2103      	movs	r1, #3
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe fd55 	bl	8001218 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe ff01 	bl	800157a <LL_ADC_IsEnabled>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 8140 	bne.w	8002a00 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6819      	ldr	r1, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	461a      	mov	r2, r3
 800278e:	f7fe fdef 	bl	8001370 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	4a8f      	ldr	r2, [pc, #572]	; (80029d4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	f040 8131 	bne.w	8002a00 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x4a2>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0e9b      	lsrs	r3, r3, #26
 80027b4:	3301      	adds	r3, #1
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	2b09      	cmp	r3, #9
 80027bc:	bf94      	ite	ls
 80027be:	2301      	movls	r3, #1
 80027c0:	2300      	movhi	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	e019      	b.n	80027fa <HAL_ADC_ConfigChannel+0x4d6>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80027de:	2320      	movs	r3, #32
 80027e0:	e003      	b.n	80027ea <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80027e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	bf94      	ite	ls
 80027f4:	2301      	movls	r3, #1
 80027f6:	2300      	movhi	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d079      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <HAL_ADC_ConfigChannel+0x4f6>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	3301      	adds	r3, #1
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002818:	e015      	b.n	8002846 <HAL_ADC_ConfigChannel+0x522>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e003      	b.n	800283e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3301      	adds	r3, #1
 8002840:	069b      	lsls	r3, r3, #26
 8002842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x542>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	3301      	adds	r3, #1
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	e017      	b.n	8002896 <HAL_ADC_ConfigChannel+0x572>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800287e:	2320      	movs	r3, #32
 8002880:	e003      	b.n	800288a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	3301      	adds	r3, #1
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	ea42 0103 	orr.w	r1, r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x598>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0e9b      	lsrs	r3, r3, #26
 80028ac:	3301      	adds	r3, #1
 80028ae:	f003 021f 	and.w	r2, r3, #31
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	051b      	lsls	r3, r3, #20
 80028ba:	e018      	b.n	80028ee <HAL_ADC_ConfigChannel+0x5ca>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80028d4:	2320      	movs	r3, #32
 80028d6:	e003      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80028d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 021f 	and.w	r2, r3, #31
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ee:	430b      	orrs	r3, r1
 80028f0:	e081      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d107      	bne.n	800290e <HAL_ADC_ConfigChannel+0x5ea>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	3301      	adds	r3, #1
 8002906:	069b      	lsls	r3, r3, #26
 8002908:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800290c:	e015      	b.n	800293a <HAL_ADC_ConfigChannel+0x616>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e003      	b.n	8002932 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	3301      	adds	r3, #1
 8002934:	069b      	lsls	r3, r3, #26
 8002936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_ADC_ConfigChannel+0x636>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	3301      	adds	r3, #1
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	e017      	b.n	800298a <HAL_ADC_ConfigChannel+0x666>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	61fb      	str	r3, [r7, #28]
  return result;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e003      	b.n	800297e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	ea42 0103 	orr.w	r1, r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10d      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x692>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	3301      	adds	r3, #1
 80029a2:	f003 021f 	and.w	r2, r3, #31
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	3b1e      	subs	r3, #30
 80029ae:	051b      	lsls	r3, r3, #20
 80029b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029b4:	e01e      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x6d0>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	613b      	str	r3, [r7, #16]
  return result;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e006      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x6bc>
 80029d2:	bf00      	nop
 80029d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f003 021f 	and.w	r2, r3, #31
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	3b1e      	subs	r3, #30
 80029ee:	051b      	lsls	r3, r3, #20
 80029f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	430b      	orrs	r3, r1
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	6892      	ldr	r2, [r2, #8]
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe fc8c 	bl	8001318 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_ADC_ConfigChannel+0x7d8>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d06c      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a0c:	483c      	ldr	r0, [pc, #240]	; (8002b00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a0e:	f7fe fbbb 	bl	8001188 <LL_ADC_GetCommonPathInternalCh>
 8002a12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a3a      	ldr	r2, [pc, #232]	; (8002b04 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d127      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d121      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a35      	ldr	r2, [pc, #212]	; (8002b08 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d157      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a3e:	4619      	mov	r1, r3
 8002a40:	482f      	ldr	r0, [pc, #188]	; (8002b00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a42:	f7fe fb8e 	bl	8001162 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a46:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <HAL_ADC_ConfigChannel+0x7e8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	099b      	lsrs	r3, r3, #6
 8002a4c:	4a30      	ldr	r2, [pc, #192]	; (8002b10 <HAL_ADC_ConfigChannel+0x7ec>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <HAL_ADC_ConfigChannel+0x7f0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d113      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x77e>
 8002a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10d      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d12a      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4819      	ldr	r0, [pc, #100]	; (8002b00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a9c:	f7fe fb61 	bl	8001162 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa0:	e021      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_ADC_ConfigChannel+0x7f4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d11c      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d116      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_ADC_ConfigChannel+0x7e4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d111      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aca:	4619      	mov	r1, r3
 8002acc:	480c      	ldr	r0, [pc, #48]	; (8002b00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ace:	f7fe fb48 	bl	8001162 <LL_ADC_SetCommonPathInternalCh>
 8002ad2:	e008      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	37d8      	adds	r7, #216	; 0xd8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	80080000 	.word	0x80080000
 8002b00:	50040300 	.word	0x50040300
 8002b04:	c7520000 	.word	0xc7520000
 8002b08:	50040000 	.word	0x50040000
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	053e2d63 	.word	0x053e2d63
 8002b14:	cb840000 	.word	0xcb840000
 8002b18:	80000001 	.word	0x80000001

08002b1c <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08e      	sub	sp, #56	; 0x38
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b34:	d003      	beq.n	8002b3e <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002b3a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_AnalogWDGConfig+0x30>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e1ec      	b.n	8002f26 <HAL_ADC_AnalogWDGConfig+0x40a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fd5c 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8002b5e:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fd7d 	bl	8001664 <LL_ADC_INJ_IsConversionOngoing>
 8002b6a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 81ca 	bne.w	8002f08 <HAL_ADC_AnalogWDGConfig+0x3ec>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 81c6 	bne.w	8002f08 <HAL_ADC_AnalogWDGConfig+0x3ec>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a9b      	ldr	r2, [pc, #620]	; (8002df0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	f040 80a2 	bne.w	8002ccc <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002b90:	d034      	beq.n	8002bfc <HAL_ADC_AnalogWDGConfig+0xe0>
 8002b92:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002b96:	d856      	bhi.n	8002c46 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b9c:	d04b      	beq.n	8002c36 <HAL_ADC_AnalogWDGConfig+0x11a>
 8002b9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba2:	d850      	bhi.n	8002c46 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002ba4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002ba8:	d01b      	beq.n	8002be2 <HAL_ADC_AnalogWDGConfig+0xc6>
 8002baa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002bae:	d84a      	bhi.n	8002c46 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb4:	d037      	beq.n	8002c26 <HAL_ADC_AnalogWDGConfig+0x10a>
 8002bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bba:	d844      	bhi.n	8002c46 <HAL_ADC_AnalogWDGConfig+0x12a>
 8002bbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bc0:	d029      	beq.n	8002c16 <HAL_ADC_AnalogWDGConfig+0xfa>
 8002bc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bc6:	d13e      	bne.n	8002c46 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002bd4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4985      	ldr	r1, [pc, #532]	; (8002df0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002bdc:	f7fe fbec 	bl	80013b8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8002be0:	e039      	b.n	8002c56 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002bee:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	497e      	ldr	r1, [pc, #504]	; (8002df0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002bf6:	f7fe fbdf 	bl	80013b8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8002bfa:	e02c      	b.n	8002c56 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002c08:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4978      	ldr	r1, [pc, #480]	; (8002df0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002c10:	f7fe fbd2 	bl	80013b8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8002c14:	e01f      	b.n	8002c56 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a76      	ldr	r2, [pc, #472]	; (8002df4 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8002c1c:	4974      	ldr	r1, [pc, #464]	; (8002df0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fbca 	bl	80013b8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c24:	e017      	b.n	8002c56 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a73      	ldr	r2, [pc, #460]	; (8002df8 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8002c2c:	4970      	ldr	r1, [pc, #448]	; (8002df0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fbc2 	bl	80013b8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c34:	e00f      	b.n	8002c56 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a70      	ldr	r2, [pc, #448]	; (8002dfc <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8002c3c:	496c      	ldr	r1, [pc, #432]	; (8002df0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe fbba 	bl	80013b8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c44:	e007      	b.n	8002c56 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4968      	ldr	r1, [pc, #416]	; (8002df0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fbb2 	bl	80013b8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c54:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	08db      	lsrs	r3, r3, #3
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c92:	f7fe fbbe 	bl	8001412 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fcef 	bl	800168a <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	7b1b      	ldrb	r3, [r3, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe fd0f 	bl	80016dc <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002cbe:	e12c      	b.n	8002f1a <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fd39 	bl	800173c <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002cca:	e126      	b.n	8002f1a <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002cd4:	d01d      	beq.n	8002d12 <HAL_ADC_AnalogWDGConfig+0x1f6>
 8002cd6:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002cda:	f200 8093 	bhi.w	8002e04 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002cde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce2:	d07b      	beq.n	8002ddc <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce8:	f200 808c 	bhi.w	8002e04 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002cec:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002cf0:	d00f      	beq.n	8002d12 <HAL_ADC_AnalogWDGConfig+0x1f6>
 8002cf2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002cf6:	f200 8085 	bhi.w	8002e04 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002cfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cfe:	d06d      	beq.n	8002ddc <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d04:	d87e      	bhi.n	8002e04 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002d06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d0a:	d067      	beq.n	8002ddc <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002d0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d10:	d178      	bne.n	8002e04 <HAL_ADC_AnalogWDGConfig+0x2e8>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d12f      	bne.n	8002d7c <HAL_ADC_AnalogWDGConfig+0x260>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d108      	bne.n	8002d3a <HAL_ADC_AnalogWDGConfig+0x21e>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	2201      	movs	r2, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	e016      	b.n	8002d68 <HAL_ADC_AnalogWDGConfig+0x24c>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	61bb      	str	r3, [r7, #24]
  return result;
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_AnalogWDGConfig+0x23a>
    return 32U;
 8002d52:	2320      	movs	r3, #32
 8002d54:	e003      	b.n	8002d5e <HAL_ADC_AnalogWDGConfig+0x242>
  return __builtin_clz(value);
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2201      	movs	r2, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8002d7a:	e04c      	b.n	8002e16 <HAL_ADC_AnalogWDGConfig+0x2fa>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d108      	bne.n	8002d9a <HAL_ADC_AnalogWDGConfig+0x27e>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	0e9b      	lsrs	r3, r3, #26
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2201      	movs	r2, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	e016      	b.n	8002dc8 <HAL_ADC_AnalogWDGConfig+0x2ac>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	60fb      	str	r3, [r7, #12]
  return result;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_AnalogWDGConfig+0x29a>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e003      	b.n	8002dbe <HAL_ADC_AnalogWDGConfig+0x2a2>
  return __builtin_clz(value);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8002dda:	e01c      	b.n	8002e16 <HAL_ADC_AnalogWDGConfig+0x2fa>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8002de6:	4619      	mov	r1, r3
 8002de8:	f7fe fae6 	bl	80013b8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002dec:	e013      	b.n	8002e16 <HAL_ADC_AnalogWDGConfig+0x2fa>
 8002dee:	bf00      	nop
 8002df0:	7dc00000 	.word	0x7dc00000
 8002df4:	0087ffff 	.word	0x0087ffff
 8002df8:	0107ffff 	.word	0x0107ffff
 8002dfc:	0187ffff 	.word	0x0187ffff
 8002e00:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f7fe fad2 	bl	80013b8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002e14:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0318 	and.w	r3, r3, #24
 8002e20:	2b18      	cmp	r3, #24
 8002e22:	d00f      	beq.n	8002e44 <HAL_ADC_AnalogWDGConfig+0x328>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	08db      	lsrs	r3, r3, #3
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	f1c3 0302 	rsb	r3, r3, #2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	f003 031e 	and.w	r3, r3, #30
 8002e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e42:	e002      	b.n	8002e4a <HAL_ADC_AnalogWDGConfig+0x32e>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0318 	and.w	r3, r3, #24
 8002e56:	2b18      	cmp	r3, #24
 8002e58:	d00f      	beq.n	8002e7a <HAL_ADC_AnalogWDGConfig+0x35e>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	f1c3 0302 	rsb	r3, r3, #2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	f003 031e 	and.w	r3, r3, #30
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
 8002e78:	e002      	b.n	8002e80 <HAL_ADC_AnalogWDGConfig+0x364>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8e:	f7fe fac0 	bl	8001412 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a26      	ldr	r2, [pc, #152]	; (8002f30 <HAL_ADC_AnalogWDGConfig+0x414>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d11a      	bne.n	8002ed2 <HAL_ADC_AnalogWDGConfig+0x3b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fbf9 	bl	80016a4 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	7b1b      	ldrb	r3, [r3, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d105      	bne.n	8002ec6 <HAL_ADC_AnalogWDGConfig+0x3aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fc1c 	bl	80016fc <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002ec4:	e029      	b.n	8002f1a <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fc46 	bl	800175c <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002ed0:	e023      	b.n	8002f1a <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fbec 	bl	80016c0 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	7b1b      	ldrb	r3, [r3, #12]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <HAL_ADC_AnalogWDGConfig+0x3e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fc11 	bl	800171c <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002efa:	e00e      	b.n	8002f1a <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe fc3b 	bl	800177c <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002f06:	e008      	b.n	8002f1a <HAL_ADC_AnalogWDGConfig+0x3fe>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3738      	adds	r7, #56	; 0x38
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	0017ffff 	.word	0x0017ffff

08002f34 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fb63 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8002f50:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fb84 	bl	8001664 <LL_ADC_INJ_IsConversionOngoing>
 8002f5c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8098 	beq.w	800309c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d02a      	beq.n	8002fd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7e5b      	ldrb	r3, [r3, #25]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d126      	bne.n	8002fd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7e1b      	ldrb	r3, [r3, #24]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d122      	bne.n	8002fd0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f8e:	e014      	b.n	8002fba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4a45      	ldr	r2, [pc, #276]	; (80030a8 <ADC_ConversionStop+0x174>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d90d      	bls.n	8002fb4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f043 0210 	orr.w	r2, r3, #16
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e074      	b.n	800309e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d1e3      	bne.n	8002f90 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2240      	movs	r2, #64	; 0x40
 8002fce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d014      	beq.n	8003000 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fb1b 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00c      	beq.n	8003000 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fad8 	bl	80015a0 <LL_ADC_IsDisableOngoing>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe faf7 	bl	80015ee <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d014      	beq.n	8003030 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fb2a 	bl	8001664 <LL_ADC_INJ_IsConversionOngoing>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fac0 	bl	80015a0 <LL_ADC_IsDisableOngoing>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fb06 	bl	800163c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d005      	beq.n	8003042 <ADC_ConversionStop+0x10e>
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d105      	bne.n	8003048 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800303c:	230c      	movs	r3, #12
 800303e:	617b      	str	r3, [r7, #20]
        break;
 8003040:	e005      	b.n	800304e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003042:	2308      	movs	r3, #8
 8003044:	617b      	str	r3, [r7, #20]
        break;
 8003046:	e002      	b.n	800304e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003048:	2304      	movs	r3, #4
 800304a:	617b      	str	r3, [r7, #20]
        break;
 800304c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800304e:	f7fe f869 	bl	8001124 <HAL_GetTick>
 8003052:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003054:	e01b      	b.n	800308e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003056:	f7fe f865 	bl	8001124 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b05      	cmp	r3, #5
 8003062:	d914      	bls.n	800308e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	f043 0210 	orr.w	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e007      	b.n	800309e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1dc      	bne.n	8003056 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	a33fffff 	.word	0xa33fffff

080030ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fa5c 	bl	800157a <LL_ADC_IsEnabled>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d169      	bne.n	800319c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <ADC_Enable+0xfc>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f043 0210 	orr.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e055      	b.n	800319e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fa17 	bl	800152a <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030fc:	482b      	ldr	r0, [pc, #172]	; (80031ac <ADC_Enable+0x100>)
 80030fe:	f7fe f843 	bl	8001188 <LL_ADC_GetCommonPathInternalCh>
 8003102:	4603      	mov	r3, r0
 8003104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d013      	beq.n	8003134 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800310c:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <ADC_Enable+0x104>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <ADC_Enable+0x108>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003126:	e002      	b.n	800312e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	3b01      	subs	r3, #1
 800312c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f9      	bne.n	8003128 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003134:	f7fd fff6 	bl	8001124 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800313a:	e028      	b.n	800318e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe fa1a 	bl	800157a <LL_ADC_IsEnabled>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe f9ea 	bl	800152a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003156:	f7fd ffe5 	bl	8001124 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d914      	bls.n	800318e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d00d      	beq.n	800318e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f043 0210 	orr.w	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e007      	b.n	800319e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d1cf      	bne.n	800313c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	8000003f 	.word	0x8000003f
 80031ac:	50040300 	.word	0x50040300
 80031b0:	20000000 	.word	0x20000000
 80031b4:	053e2d63 	.word	0x053e2d63

080031b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe f9eb 	bl	80015a0 <LL_ADC_IsDisableOngoing>
 80031ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe f9d2 	bl	800157a <LL_ADC_IsEnabled>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d047      	beq.n	800326c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d144      	bne.n	800326c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030d 	and.w	r3, r3, #13
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d10c      	bne.n	800320a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe f9ac 	bl	8001552 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2203      	movs	r2, #3
 8003200:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003202:	f7fd ff8f 	bl	8001124 <HAL_GetTick>
 8003206:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003208:	e029      	b.n	800325e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	f043 0210 	orr.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e023      	b.n	800326e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003226:	f7fd ff7d 	bl	8001124 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d914      	bls.n	800325e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f043 0210 	orr.w	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e007      	b.n	800326e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1dc      	bne.n	8003226 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800328c:	2b00      	cmp	r3, #0
 800328e:	d14b      	bne.n	8003328 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d021      	beq.n	80032ee <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd ffe0 	bl	8001274 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d032      	beq.n	8003320 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d12b      	bne.n	8003320 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d11f      	bne.n	8003320 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
 80032ec:	e018      	b.n	8003320 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d111      	bne.n	8003320 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7fe ffeb 	bl	80022fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003326:	e00e      	b.n	8003346 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7fd f964 	bl	8000602 <HAL_ADC_ErrorCallback>
}
 800333a:	e004      	b.n	8003346 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7fe ffd7 	bl	8002310 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7fd f936 	bl	8000602 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <LL_ADC_IsEnabled>:
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <LL_ADC_IsEnabled+0x18>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <LL_ADC_IsEnabled+0x1a>
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_ADC_REG_IsConversionOngoing>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d101      	bne.n	80033dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b09f      	sub	sp, #124	; 0x7c
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800346a:	2302      	movs	r3, #2
 800346c:	e089      	b.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003476:	2300      	movs	r3, #0
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800347a:	2300      	movs	r3, #0
 800347c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a42      	ldr	r2, [pc, #264]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d102      	bne.n	800348e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003488:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	e001      	b.n	8003492 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10b      	bne.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e068      	b.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff ff86 	bl	80033c4 <LL_ADC_REG_IsConversionOngoing>
 80034b8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff ff80 	bl	80033c4 <LL_ADC_REG_IsConversionOngoing>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d14a      	bne.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80034ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d147      	bne.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034d0:	4b30      	ldr	r3, [pc, #192]	; (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80034d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d027      	beq.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ee:	035b      	lsls	r3, r3, #13
 80034f0:	430b      	orrs	r3, r1
 80034f2:	431a      	orrs	r2, r3
 80034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034f8:	4824      	ldr	r0, [pc, #144]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80034fa:	f7ff ff50 	bl	800339e <LL_ADC_IsEnabled>
 80034fe:	4604      	mov	r4, r0
 8003500:	4823      	ldr	r0, [pc, #140]	; (8003590 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003502:	f7ff ff4c 	bl	800339e <LL_ADC_IsEnabled>
 8003506:	4603      	mov	r3, r0
 8003508:	4323      	orrs	r3, r4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d132      	bne.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800350e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003516:	f023 030f 	bic.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	6811      	ldr	r1, [r2, #0]
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	430a      	orrs	r2, r1
 8003524:	431a      	orrs	r2, r3
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800352a:	e023      	b.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003538:	4814      	ldr	r0, [pc, #80]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800353a:	f7ff ff30 	bl	800339e <LL_ADC_IsEnabled>
 800353e:	4604      	mov	r4, r0
 8003540:	4813      	ldr	r0, [pc, #76]	; (8003590 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003542:	f7ff ff2c 	bl	800339e <LL_ADC_IsEnabled>
 8003546:	4603      	mov	r3, r0
 8003548:	4323      	orrs	r3, r4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d112      	bne.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800354e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003556:	f023 030f 	bic.w	r3, r3, #15
 800355a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800355c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800355e:	e009      	b.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003572:	e000      	b.n	8003576 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003574:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800357e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003582:	4618      	mov	r0, r3
 8003584:	377c      	adds	r7, #124	; 0x7c
 8003586:	46bd      	mov	sp, r7
 8003588:	bd90      	pop	{r4, r7, pc}
 800358a:	bf00      	nop
 800358c:	50040000 	.word	0x50040000
 8003590:	50040100 	.word	0x50040100
 8003594:	50040300 	.word	0x50040300

08003598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <__NVIC_SetPriorityGrouping+0x44>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b4:	4013      	ands	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ca:	4a04      	ldr	r2, [pc, #16]	; (80035dc <__NVIC_SetPriorityGrouping+0x44>)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	60d3      	str	r3, [r2, #12]
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <__NVIC_GetPriorityGrouping+0x18>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	f003 0307 	and.w	r3, r3, #7
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	2b00      	cmp	r3, #0
 800360c:	db0b      	blt.n	8003626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	f003 021f 	and.w	r2, r3, #31
 8003614:	4907      	ldr	r1, [pc, #28]	; (8003634 <__NVIC_EnableIRQ+0x38>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2001      	movs	r0, #1
 800361e:	fa00 f202 	lsl.w	r2, r0, r2
 8003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000e100 	.word	0xe000e100

08003638 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	db12      	blt.n	8003670 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	490a      	ldr	r1, [pc, #40]	; (800367c <__NVIC_DisableIRQ+0x44>)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2001      	movs	r0, #1
 800365a:	fa00 f202 	lsl.w	r2, r0, r2
 800365e:	3320      	adds	r3, #32
 8003660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003664:	f3bf 8f4f 	dsb	sy
}
 8003668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800366a:	f3bf 8f6f 	isb	sy
}
 800366e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100

08003680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	2b00      	cmp	r3, #0
 8003692:	db0a      	blt.n	80036aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	490c      	ldr	r1, [pc, #48]	; (80036cc <__NVIC_SetPriority+0x4c>)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	440b      	add	r3, r1
 80036a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a8:	e00a      	b.n	80036c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4908      	ldr	r1, [pc, #32]	; (80036d0 <__NVIC_SetPriority+0x50>)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	3b04      	subs	r3, #4
 80036b8:	0112      	lsls	r2, r2, #4
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	440b      	add	r3, r1
 80036be:	761a      	strb	r2, [r3, #24]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000e100 	.word	0xe000e100
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f1c3 0307 	rsb	r3, r3, #7
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	bf28      	it	cs
 80036f2:	2304      	movcs	r3, #4
 80036f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d902      	bls.n	8003704 <NVIC_EncodePriority+0x30>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3b03      	subs	r3, #3
 8003702:	e000      	b.n	8003706 <NVIC_EncodePriority+0x32>
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	401a      	ands	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800371c:	f04f 31ff 	mov.w	r1, #4294967295
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43d9      	mvns	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	4313      	orrs	r3, r2
         );
}
 800372e:	4618      	mov	r0, r3
 8003730:	3724      	adds	r7, #36	; 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800374c:	d301      	bcc.n	8003752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800374e:	2301      	movs	r3, #1
 8003750:	e00f      	b.n	8003772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <SysTick_Config+0x40>)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3b01      	subs	r3, #1
 8003758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800375a:	210f      	movs	r1, #15
 800375c:	f04f 30ff 	mov.w	r0, #4294967295
 8003760:	f7ff ff8e 	bl	8003680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <SysTick_Config+0x40>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376a:	4b04      	ldr	r3, [pc, #16]	; (800377c <SysTick_Config+0x40>)
 800376c:	2207      	movs	r2, #7
 800376e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	e000e010 	.word	0xe000e010

08003780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ff05 	bl	8003598 <__NVIC_SetPriorityGrouping>
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b086      	sub	sp, #24
 800379a:	af00      	add	r7, sp, #0
 800379c:	4603      	mov	r3, r0
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037a8:	f7ff ff1a 	bl	80035e0 <__NVIC_GetPriorityGrouping>
 80037ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	6978      	ldr	r0, [r7, #20]
 80037b4:	f7ff ff8e 	bl	80036d4 <NVIC_EncodePriority>
 80037b8:	4602      	mov	r2, r0
 80037ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff5d 	bl	8003680 <__NVIC_SetPriority>
}
 80037c6:	bf00      	nop
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	4603      	mov	r3, r0
 80037d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff0d 	bl	80035fc <__NVIC_EnableIRQ>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4603      	mov	r3, r0
 80037f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff1d 	bl	8003638 <__NVIC_DisableIRQ>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff94 	bl	800373c <SysTick_Config>
 8003814:	4603      	mov	r3, r0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e098      	b.n	8003964 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	4b4d      	ldr	r3, [pc, #308]	; (8003970 <HAL_DMA_Init+0x150>)
 800383a:	429a      	cmp	r2, r3
 800383c:	d80f      	bhi.n	800385e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <HAL_DMA_Init+0x154>)
 8003846:	4413      	add	r3, r2
 8003848:	4a4b      	ldr	r2, [pc, #300]	; (8003978 <HAL_DMA_Init+0x158>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	009a      	lsls	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a48      	ldr	r2, [pc, #288]	; (800397c <HAL_DMA_Init+0x15c>)
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
 800385c:	e00e      	b.n	800387c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	4b46      	ldr	r3, [pc, #280]	; (8003980 <HAL_DMA_Init+0x160>)
 8003866:	4413      	add	r3, r2
 8003868:	4a43      	ldr	r2, [pc, #268]	; (8003978 <HAL_DMA_Init+0x158>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	009a      	lsls	r2, r3, #2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a42      	ldr	r2, [pc, #264]	; (8003984 <HAL_DMA_Init+0x164>)
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038d6:	d039      	beq.n	800394c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	4a27      	ldr	r2, [pc, #156]	; (800397c <HAL_DMA_Init+0x15c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d11a      	bne.n	8003918 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <HAL_DMA_Init+0x168>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	f003 031c 	and.w	r3, r3, #28
 80038ee:	210f      	movs	r1, #15
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	4924      	ldr	r1, [pc, #144]	; (8003988 <HAL_DMA_Init+0x168>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038fc:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_DMA_Init+0x168>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f003 031c 	and.w	r3, r3, #28
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	491d      	ldr	r1, [pc, #116]	; (8003988 <HAL_DMA_Init+0x168>)
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
 8003916:	e019      	b.n	800394c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003918:	4b1c      	ldr	r3, [pc, #112]	; (800398c <HAL_DMA_Init+0x16c>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	f003 031c 	and.w	r3, r3, #28
 8003924:	210f      	movs	r1, #15
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	4917      	ldr	r1, [pc, #92]	; (800398c <HAL_DMA_Init+0x16c>)
 800392e:	4013      	ands	r3, r2
 8003930:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_DMA_Init+0x16c>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f003 031c 	and.w	r3, r3, #28
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	4911      	ldr	r1, [pc, #68]	; (800398c <HAL_DMA_Init+0x16c>)
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40020407 	.word	0x40020407
 8003974:	bffdfff8 	.word	0xbffdfff8
 8003978:	cccccccd 	.word	0xcccccccd
 800397c:	40020000 	.word	0x40020000
 8003980:	bffdfbf8 	.word	0xbffdfbf8
 8003984:	40020400 	.word	0x40020400
 8003988:	400200a8 	.word	0x400200a8
 800398c:	400204a8 	.word	0x400204a8

08003990 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e072      	b.n	8003a88 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <HAL_DMA_DeInit+0x104>)
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d80f      	bhi.n	80039de <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <HAL_DMA_DeInit+0x108>)
 80039c6:	4413      	add	r3, r2
 80039c8:	4a34      	ldr	r2, [pc, #208]	; (8003a9c <HAL_DMA_DeInit+0x10c>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	009a      	lsls	r2, r3, #2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a31      	ldr	r2, [pc, #196]	; (8003aa0 <HAL_DMA_DeInit+0x110>)
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
 80039dc:	e00e      	b.n	80039fc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <HAL_DMA_DeInit+0x114>)
 80039e6:	4413      	add	r3, r2
 80039e8:	4a2c      	ldr	r2, [pc, #176]	; (8003a9c <HAL_DMA_DeInit+0x10c>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	009a      	lsls	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2b      	ldr	r2, [pc, #172]	; (8003aa8 <HAL_DMA_DeInit+0x118>)
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f003 021c 	and.w	r2, r3, #28
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <HAL_DMA_DeInit+0x110>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10d      	bne.n	8003a3e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a22:	4b22      	ldr	r3, [pc, #136]	; (8003aac <HAL_DMA_DeInit+0x11c>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f003 031c 	and.w	r3, r3, #28
 8003a2e:	210f      	movs	r1, #15
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	491d      	ldr	r1, [pc, #116]	; (8003aac <HAL_DMA_DeInit+0x11c>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]
 8003a3c:	e00c      	b.n	8003a58 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a3e:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <HAL_DMA_DeInit+0x120>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f003 031c 	and.w	r3, r3, #28
 8003a4a:	210f      	movs	r1, #15
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	4917      	ldr	r1, [pc, #92]	; (8003ab0 <HAL_DMA_DeInit+0x120>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40020407 	.word	0x40020407
 8003a98:	bffdfff8 	.word	0xbffdfff8
 8003a9c:	cccccccd 	.word	0xcccccccd
 8003aa0:	40020000 	.word	0x40020000
 8003aa4:	bffdfbf8 	.word	0xbffdfbf8
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	400200a8 	.word	0x400200a8
 8003ab0:	400204a8 	.word	0x400204a8

08003ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_DMA_Start_IT+0x20>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e04b      	b.n	8003b6c <HAL_DMA_Start_IT+0xb8>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d13a      	bne.n	8003b5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f95f 	bl	8003dd0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 020e 	orr.w	r2, r2, #14
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e00f      	b.n	8003b4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0204 	bic.w	r2, r2, #4
 8003b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 020a 	orr.w	r2, r2, #10
 8003b4a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e005      	b.n	8003b6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
 8003b68:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d008      	beq.n	8003b9e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e022      	b.n	8003be4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 020e 	bic.w	r2, r2, #14
 8003bac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0201 	bic.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f003 021c 	and.w	r2, r3, #28
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2101      	movs	r1, #1
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d005      	beq.n	8003c14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
 8003c12:	e029      	b.n	8003c68 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 020e 	bic.w	r2, r2, #14
 8003c22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c38:	f003 021c 	and.w	r2, r3, #28
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f202 	lsl.w	r2, r1, r2
 8003c46:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
    }
  }
  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	f003 031c 	and.w	r3, r3, #28
 8003c92:	2204      	movs	r2, #4
 8003c94:	409a      	lsls	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d026      	beq.n	8003cec <HAL_DMA_IRQHandler+0x7a>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d021      	beq.n	8003cec <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d107      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0204 	bic.w	r2, r2, #4
 8003cc4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f003 021c 	and.w	r2, r3, #28
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2104      	movs	r1, #4
 8003cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d071      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003cea:	e06c      	b.n	8003dc6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	f003 031c 	and.w	r3, r3, #28
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d02e      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xec>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d029      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 020a 	bic.w	r2, r2, #10
 8003d26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	f003 021c 	and.w	r2, r3, #28
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d038      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d5c:	e033      	b.n	8003dc6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f003 031c 	and.w	r3, r3, #28
 8003d66:	2208      	movs	r2, #8
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d02a      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x156>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d025      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 020e 	bic.w	r2, r2, #14
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	f003 021c 	and.w	r2, r3, #28
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
}
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f003 021c 	and.w	r2, r3, #28
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f202 	lsl.w	r2, r1, r2
 8003df0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d108      	bne.n	8003e14 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e12:	e007      	b.n	8003e24 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	60da      	str	r2, [r3, #12]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e3e:	e14e      	b.n	80040de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	2101      	movs	r1, #1
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8140 	beq.w	80040d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d005      	beq.n	8003e70 <HAL_GPIO_Init+0x40>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d130      	bne.n	8003ed2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0201 	and.w	r2, r3, #1
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d017      	beq.n	8003f0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d123      	bne.n	8003f62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	08da      	lsrs	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3208      	adds	r2, #8
 8003f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	220f      	movs	r2, #15
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	08da      	lsrs	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3208      	adds	r2, #8
 8003f5c:	6939      	ldr	r1, [r7, #16]
 8003f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0203 	and.w	r2, r3, #3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 809a 	beq.w	80040d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa4:	4b55      	ldr	r3, [pc, #340]	; (80040fc <HAL_GPIO_Init+0x2cc>)
 8003fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa8:	4a54      	ldr	r2, [pc, #336]	; (80040fc <HAL_GPIO_Init+0x2cc>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6613      	str	r3, [r2, #96]	; 0x60
 8003fb0:	4b52      	ldr	r3, [pc, #328]	; (80040fc <HAL_GPIO_Init+0x2cc>)
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fbc:	4a50      	ldr	r2, [pc, #320]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	089b      	lsrs	r3, r3, #2
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	220f      	movs	r2, #15
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fe6:	d013      	beq.n	8004010 <HAL_GPIO_Init+0x1e0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a46      	ldr	r2, [pc, #280]	; (8004104 <HAL_GPIO_Init+0x2d4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00d      	beq.n	800400c <HAL_GPIO_Init+0x1dc>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a45      	ldr	r2, [pc, #276]	; (8004108 <HAL_GPIO_Init+0x2d8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <HAL_GPIO_Init+0x1d8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a44      	ldr	r2, [pc, #272]	; (800410c <HAL_GPIO_Init+0x2dc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <HAL_GPIO_Init+0x1d4>
 8004000:	2303      	movs	r3, #3
 8004002:	e006      	b.n	8004012 <HAL_GPIO_Init+0x1e2>
 8004004:	2307      	movs	r3, #7
 8004006:	e004      	b.n	8004012 <HAL_GPIO_Init+0x1e2>
 8004008:	2302      	movs	r3, #2
 800400a:	e002      	b.n	8004012 <HAL_GPIO_Init+0x1e2>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_GPIO_Init+0x1e2>
 8004010:	2300      	movs	r3, #0
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	f002 0203 	and.w	r2, r2, #3
 8004018:	0092      	lsls	r2, r2, #2
 800401a:	4093      	lsls	r3, r2
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004022:	4937      	ldr	r1, [pc, #220]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	089b      	lsrs	r3, r3, #2
 8004028:	3302      	adds	r3, #2
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004030:	4b37      	ldr	r3, [pc, #220]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	43db      	mvns	r3, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004054:	4a2e      	ldr	r2, [pc, #184]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800405a:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800407e:	4a24      	ldr	r2, [pc, #144]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004084:	4b22      	ldr	r3, [pc, #136]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	43db      	mvns	r3, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040a8:	4a19      	ldr	r2, [pc, #100]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040ae:	4b18      	ldr	r3, [pc, #96]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4013      	ands	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040d2:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <HAL_GPIO_Init+0x2e0>)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3301      	adds	r3, #1
 80040dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f47f aea9 	bne.w	8003e40 <HAL_GPIO_Init+0x10>
  }
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	40021000 	.word	0x40021000
 8004100:	40010000 	.word	0x40010000
 8004104:	48000400 	.word	0x48000400
 8004108:	48000800 	.word	0x48000800
 800410c:	48000c00 	.word	0x48000c00
 8004110:	40010400 	.word	0x40010400

08004114 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004122:	e0b1      	b.n	8004288 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004124:	2201      	movs	r2, #1
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a4 	beq.w	8004282 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800413a:	4a5a      	ldr	r2, [pc, #360]	; (80042a4 <HAL_GPIO_DeInit+0x190>)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	3302      	adds	r3, #2
 8004142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004146:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	220f      	movs	r2, #15
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004162:	d013      	beq.n	800418c <HAL_GPIO_DeInit+0x78>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a50      	ldr	r2, [pc, #320]	; (80042a8 <HAL_GPIO_DeInit+0x194>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00d      	beq.n	8004188 <HAL_GPIO_DeInit+0x74>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a4f      	ldr	r2, [pc, #316]	; (80042ac <HAL_GPIO_DeInit+0x198>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <HAL_GPIO_DeInit+0x70>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a4e      	ldr	r2, [pc, #312]	; (80042b0 <HAL_GPIO_DeInit+0x19c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d101      	bne.n	8004180 <HAL_GPIO_DeInit+0x6c>
 800417c:	2303      	movs	r3, #3
 800417e:	e006      	b.n	800418e <HAL_GPIO_DeInit+0x7a>
 8004180:	2307      	movs	r3, #7
 8004182:	e004      	b.n	800418e <HAL_GPIO_DeInit+0x7a>
 8004184:	2302      	movs	r3, #2
 8004186:	e002      	b.n	800418e <HAL_GPIO_DeInit+0x7a>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <HAL_GPIO_DeInit+0x7a>
 800418c:	2300      	movs	r3, #0
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	f002 0203 	and.w	r2, r2, #3
 8004194:	0092      	lsls	r2, r2, #2
 8004196:	4093      	lsls	r3, r2
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	429a      	cmp	r2, r3
 800419c:	d132      	bne.n	8004204 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800419e:	4b45      	ldr	r3, [pc, #276]	; (80042b4 <HAL_GPIO_DeInit+0x1a0>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	4943      	ldr	r1, [pc, #268]	; (80042b4 <HAL_GPIO_DeInit+0x1a0>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80041ac:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <HAL_GPIO_DeInit+0x1a0>)
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	493f      	ldr	r1, [pc, #252]	; (80042b4 <HAL_GPIO_DeInit+0x1a0>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80041ba:	4b3e      	ldr	r3, [pc, #248]	; (80042b4 <HAL_GPIO_DeInit+0x1a0>)
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	493c      	ldr	r1, [pc, #240]	; (80042b4 <HAL_GPIO_DeInit+0x1a0>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80041c8:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_GPIO_DeInit+0x1a0>)
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	4938      	ldr	r1, [pc, #224]	; (80042b4 <HAL_GPIO_DeInit+0x1a0>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	220f      	movs	r2, #15
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80041e6:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <HAL_GPIO_DeInit+0x190>)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	3302      	adds	r3, #2
 80041ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	482b      	ldr	r0, [pc, #172]	; (80042a4 <HAL_GPIO_DeInit+0x190>)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	400a      	ands	r2, r1
 80041fe:	3302      	adds	r3, #2
 8004200:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	2103      	movs	r1, #3
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	08da      	lsrs	r2, r3, #3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3208      	adds	r2, #8
 8004220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	220f      	movs	r2, #15
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	08d2      	lsrs	r2, r2, #3
 8004238:	4019      	ands	r1, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3208      	adds	r2, #8
 800423e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	2103      	movs	r1, #3
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	2101      	movs	r1, #1
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	401a      	ands	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	2103      	movs	r1, #3
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	401a      	ands	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3301      	adds	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	f47f af47 	bne.w	8004124 <HAL_GPIO_DeInit+0x10>
  }
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	40010000 	.word	0x40010000
 80042a8:	48000400 	.word	0x48000400
 80042ac:	48000800 	.word	0x48000800
 80042b0:	48000c00 	.word	0x48000c00
 80042b4:	40010400 	.word	0x40010400

080042b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	887b      	ldrh	r3, [r7, #2]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	e001      	b.n	80042da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042da:	7bfb      	ldrb	r3, [r7, #15]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	807b      	strh	r3, [r7, #2]
 80042f4:	4613      	mov	r3, r2
 80042f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042f8:	787b      	ldrb	r3, [r7, #1]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042fe:	887a      	ldrh	r2, [r7, #2]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004304:	e002      	b.n	800430c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004306:	887a      	ldrh	r2, [r7, #2]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d006      	beq.n	800433c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800432e:	4a05      	ldr	r2, [pc, #20]	; (8004344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc f91c 	bl	8000574 <HAL_GPIO_EXTI_Callback>
  }
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40010400 	.word	0x40010400

08004348 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_PWREx_GetVoltageRange+0x18>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40007000 	.word	0x40007000

08004364 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004372:	d130      	bne.n	80043d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004374:	4b23      	ldr	r3, [pc, #140]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d038      	beq.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800438a:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800438c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004390:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004392:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2232      	movs	r2, #50	; 0x32
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	4a1b      	ldr	r2, [pc, #108]	; (800440c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	0c9b      	lsrs	r3, r3, #18
 80043a4:	3301      	adds	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043a8:	e002      	b.n	80043b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043bc:	d102      	bne.n	80043c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f2      	bne.n	80043aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d0:	d110      	bne.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e00f      	b.n	80043f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e2:	d007      	beq.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ec:	4a05      	ldr	r2, [pc, #20]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40007000 	.word	0x40007000
 8004408:	20000000 	.word	0x20000000
 800440c:	431bde83 	.word	0x431bde83

08004410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f000 bc4f 	b.w	8004cc2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004424:	4b97      	ldr	r3, [pc, #604]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800442e:	4b95      	ldr	r3, [pc, #596]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80e6 	beq.w	8004612 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_RCC_OscConfig+0x4c>
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	2b0c      	cmp	r3, #12
 8004450:	f040 808d 	bne.w	800456e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b01      	cmp	r3, #1
 8004458:	f040 8089 	bne.w	800456e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800445c:	4b89      	ldr	r3, [pc, #548]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d006      	beq.n	8004476 <HAL_RCC_OscConfig+0x66>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f000 bc26 	b.w	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447a:	4b82      	ldr	r3, [pc, #520]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d004      	beq.n	8004490 <HAL_RCC_OscConfig+0x80>
 8004486:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448e:	e005      	b.n	800449c <HAL_RCC_OscConfig+0x8c>
 8004490:	4b7c      	ldr	r3, [pc, #496]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800449c:	4293      	cmp	r3, r2
 800449e:	d224      	bcs.n	80044ea <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fdd9 	bl	800505c <RCC_SetFlashLatencyFromMSIRange>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f000 bc06 	b.w	8004cc2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044b6:	4b73      	ldr	r3, [pc, #460]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a72      	ldr	r2, [pc, #456]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80044bc:	f043 0308 	orr.w	r3, r3, #8
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b70      	ldr	r3, [pc, #448]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	496d      	ldr	r1, [pc, #436]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044d4:	4b6b      	ldr	r3, [pc, #428]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	4968      	ldr	r1, [pc, #416]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	604b      	str	r3, [r1, #4]
 80044e8:	e025      	b.n	8004536 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ea:	4b66      	ldr	r3, [pc, #408]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a65      	ldr	r2, [pc, #404]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80044f0:	f043 0308 	orr.w	r3, r3, #8
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b63      	ldr	r3, [pc, #396]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	4960      	ldr	r1, [pc, #384]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004508:	4b5e      	ldr	r3, [pc, #376]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	495b      	ldr	r1, [pc, #364]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004518:	4313      	orrs	r3, r2
 800451a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fd98 	bl	800505c <RCC_SetFlashLatencyFromMSIRange>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e3c5      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004536:	f000 fccd 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 800453a:	4602      	mov	r2, r0
 800453c:	4b51      	ldr	r3, [pc, #324]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	4950      	ldr	r1, [pc, #320]	; (8004688 <HAL_RCC_OscConfig+0x278>)
 8004548:	5ccb      	ldrb	r3, [r1, r3]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	4a4e      	ldr	r2, [pc, #312]	; (800468c <HAL_RCC_OscConfig+0x27c>)
 8004554:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004556:	4b4e      	ldr	r3, [pc, #312]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fc fd92 	bl	8001084 <HAL_InitTick>
 8004560:	4603      	mov	r3, r0
 8004562:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d052      	beq.n	8004610 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	e3a9      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d032      	beq.n	80045dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004576:	4b43      	ldr	r3, [pc, #268]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a42      	ldr	r2, [pc, #264]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004582:	f7fc fdcf 	bl	8001124 <HAL_GetTick>
 8004586:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800458a:	f7fc fdcb 	bl	8001124 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e392      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800459c:	4b39      	ldr	r3, [pc, #228]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045a8:	4b36      	ldr	r3, [pc, #216]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a35      	ldr	r2, [pc, #212]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80045ae:	f043 0308 	orr.w	r3, r3, #8
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	4b33      	ldr	r3, [pc, #204]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	4930      	ldr	r1, [pc, #192]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045c6:	4b2f      	ldr	r3, [pc, #188]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	492b      	ldr	r1, [pc, #172]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	604b      	str	r3, [r1, #4]
 80045da:	e01a      	b.n	8004612 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045dc:	4b29      	ldr	r3, [pc, #164]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a28      	ldr	r2, [pc, #160]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045e8:	f7fc fd9c 	bl	8001124 <HAL_GetTick>
 80045ec:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045f0:	f7fc fd98 	bl	8001124 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e35f      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004602:	4b20      	ldr	r3, [pc, #128]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x1e0>
 800460e:	e000      	b.n	8004612 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004610:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d073      	beq.n	8004706 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d005      	beq.n	8004630 <HAL_RCC_OscConfig+0x220>
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2b0c      	cmp	r3, #12
 8004628:	d10e      	bne.n	8004648 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d10b      	bne.n	8004648 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d063      	beq.n	8004704 <HAL_RCC_OscConfig+0x2f4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d15f      	bne.n	8004704 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e33c      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004650:	d106      	bne.n	8004660 <HAL_RCC_OscConfig+0x250>
 8004652:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e025      	b.n	80046ac <HAL_RCC_OscConfig+0x29c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004668:	d114      	bne.n	8004694 <HAL_RCC_OscConfig+0x284>
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a05      	ldr	r2, [pc, #20]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b03      	ldr	r3, [pc, #12]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a02      	ldr	r2, [pc, #8]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e013      	b.n	80046ac <HAL_RCC_OscConfig+0x29c>
 8004684:	40021000 	.word	0x40021000
 8004688:	0800b290 	.word	0x0800b290
 800468c:	20000000 	.word	0x20000000
 8004690:	20000004 	.word	0x20000004
 8004694:	4b8f      	ldr	r3, [pc, #572]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a8e      	ldr	r2, [pc, #568]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800469a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	4b8c      	ldr	r3, [pc, #560]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a8b      	ldr	r2, [pc, #556]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d013      	beq.n	80046dc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fc fd36 	bl	8001124 <HAL_GetTick>
 80046b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046bc:	f7fc fd32 	bl	8001124 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	; 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e2f9      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ce:	4b81      	ldr	r3, [pc, #516]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0x2ac>
 80046da:	e014      	b.n	8004706 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fc fd22 	bl	8001124 <HAL_GetTick>
 80046e0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fc fd1e 	bl	8001124 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e2e5      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046f6:	4b77      	ldr	r3, [pc, #476]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x2d4>
 8004702:	e000      	b.n	8004706 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d060      	beq.n	80047d4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d005      	beq.n	8004724 <HAL_RCC_OscConfig+0x314>
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d119      	bne.n	8004752 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d116      	bne.n	8004752 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004724:	4b6b      	ldr	r3, [pc, #428]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_OscConfig+0x32c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e2c2      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473c:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	4962      	ldr	r1, [pc, #392]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004750:	e040      	b.n	80047d4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d023      	beq.n	80047a2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800475a:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a5d      	ldr	r2, [pc, #372]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fc fcdd 	bl	8001124 <HAL_GetTick>
 800476a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800476e:	f7fc fcd9 	bl	8001124 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e2a0      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004780:	4b54      	ldr	r3, [pc, #336]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	494e      	ldr	r1, [pc, #312]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
 80047a0:	e018      	b.n	80047d4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a2:	4b4c      	ldr	r3, [pc, #304]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a4b      	ldr	r2, [pc, #300]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fc fcb9 	bl	8001124 <HAL_GetTick>
 80047b2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b6:	f7fc fcb5 	bl	8001124 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e27c      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047c8:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8082 	beq.w	80048e6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d05f      	beq.n	80048aa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80047ea:	4b3a      	ldr	r3, [pc, #232]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d037      	beq.n	8004870 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d006      	beq.n	8004818 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e254      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01b      	beq.n	800485a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004822:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004828:	4a2a      	ldr	r2, [pc, #168]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004832:	f7fc fc77 	bl	8001124 <HAL_GetTick>
 8004836:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483a:	f7fc fc73 	bl	8001124 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b11      	cmp	r3, #17
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e23a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800484e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ef      	bne.n	800483a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800485a:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800485c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004860:	f023 0210 	bic.w	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	491a      	ldr	r1, [pc, #104]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004870:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fc fc50 	bl	8001124 <HAL_GetTick>
 8004884:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004888:	f7fc fc4c 	bl	8001124 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b11      	cmp	r3, #17
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e213      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800489a:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800489c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ef      	beq.n	8004888 <HAL_RCC_OscConfig+0x478>
 80048a8:	e01d      	b.n	80048e6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b0:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ba:	f7fc fc33 	bl	8001124 <HAL_GetTick>
 80048be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048c0:	e00a      	b.n	80048d8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c2:	f7fc fc2f 	bl	8001124 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b11      	cmp	r3, #17
 80048ce:	d903      	bls.n	80048d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e1f6      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
 80048d4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d8:	4ba9      	ldr	r3, [pc, #676]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ed      	bne.n	80048c2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80bd 	beq.w	8004a6e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048fa:	4ba1      	ldr	r3, [pc, #644]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10e      	bne.n	8004924 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004906:	4b9e      	ldr	r3, [pc, #632]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	4a9d      	ldr	r2, [pc, #628]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004910:	6593      	str	r3, [r2, #88]	; 0x58
 8004912:	4b9b      	ldr	r3, [pc, #620]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004924:	4b97      	ldr	r3, [pc, #604]	; (8004b84 <HAL_RCC_OscConfig+0x774>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d118      	bne.n	8004962 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004930:	4b94      	ldr	r3, [pc, #592]	; (8004b84 <HAL_RCC_OscConfig+0x774>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a93      	ldr	r2, [pc, #588]	; (8004b84 <HAL_RCC_OscConfig+0x774>)
 8004936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493c:	f7fc fbf2 	bl	8001124 <HAL_GetTick>
 8004940:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004944:	f7fc fbee 	bl	8001124 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e1b5      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004956:	4b8b      	ldr	r3, [pc, #556]	; (8004b84 <HAL_RCC_OscConfig+0x774>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0f0      	beq.n	8004944 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d02c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800496e:	4b84      	ldr	r3, [pc, #528]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004980:	497f      	ldr	r1, [pc, #508]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d010      	beq.n	80049b6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004994:	4b7a      	ldr	r3, [pc, #488]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	4a79      	ldr	r2, [pc, #484]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 800499c:	f043 0304 	orr.w	r3, r3, #4
 80049a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049a4:	4b76      	ldr	r3, [pc, #472]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	4a75      	ldr	r2, [pc, #468]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049b4:	e018      	b.n	80049e8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049b6:	4b72      	ldr	r3, [pc, #456]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	4a70      	ldr	r2, [pc, #448]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049c6:	e00f      	b.n	80049e8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049c8:	4b6d      	ldr	r3, [pc, #436]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	4a6c      	ldr	r2, [pc, #432]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049d8:	4b69      	ldr	r3, [pc, #420]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	4a68      	ldr	r2, [pc, #416]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d016      	beq.n	8004a1e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fc fb98 	bl	8001124 <HAL_GetTick>
 80049f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f8:	f7fc fb94 	bl	8001124 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e159      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	4b5c      	ldr	r3, [pc, #368]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ed      	beq.n	80049f8 <HAL_RCC_OscConfig+0x5e8>
 8004a1c:	e01d      	b.n	8004a5a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1e:	f7fc fb81 	bl	8001124 <HAL_GetTick>
 8004a22:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f7fc fb7d 	bl	8001124 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e142      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a3c:	4b50      	ldr	r3, [pc, #320]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1ed      	bne.n	8004a26 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004a4a:	4b4d      	ldr	r3, [pc, #308]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a50:	4a4b      	ldr	r2, [pc, #300]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d105      	bne.n	8004a6e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a62:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	4a46      	ldr	r2, [pc, #280]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d03c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01c      	beq.n	8004abc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a82:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a88:	4a3d      	ldr	r2, [pc, #244]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a92:	f7fc fb47 	bl	8001124 <HAL_GetTick>
 8004a96:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a9a:	f7fc fb43 	bl	8001124 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e10a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aac:	4b34      	ldr	r3, [pc, #208]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0ef      	beq.n	8004a9a <HAL_RCC_OscConfig+0x68a>
 8004aba:	e01b      	b.n	8004af4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004abc:	4b30      	ldr	r3, [pc, #192]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac2:	4a2f      	ldr	r2, [pc, #188]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fc fb2a 	bl	8001124 <HAL_GetTick>
 8004ad0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ad4:	f7fc fb26 	bl	8001124 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e0ed      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ae6:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ef      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80e1 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	f040 80b5 	bne.w	8004c72 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f003 0203 	and.w	r2, r3, #3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d124      	bne.n	8004b66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	3b01      	subs	r3, #1
 8004b28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d11b      	bne.n	8004b66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d113      	bne.n	8004b66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d109      	bne.n	8004b66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d05f      	beq.n	8004c26 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	d05a      	beq.n	8004c22 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a03      	ldr	r2, [pc, #12]	; (8004b80 <HAL_RCC_OscConfig+0x770>)
 8004b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b78:	f7fc fad4 	bl	8001124 <HAL_GetTick>
 8004b7c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7e:	e00c      	b.n	8004b9a <HAL_RCC_OscConfig+0x78a>
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b88:	f7fc facc 	bl	8001124 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e093      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b9a:	4b4c      	ldr	r3, [pc, #304]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ba6:	4b49      	ldr	r3, [pc, #292]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <HAL_RCC_OscConfig+0x8c0>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bb6:	3a01      	subs	r2, #1
 8004bb8:	0112      	lsls	r2, r2, #4
 8004bba:	4311      	orrs	r1, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc0:	0212      	lsls	r2, r2, #8
 8004bc2:	4311      	orrs	r1, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bc8:	0852      	lsrs	r2, r2, #1
 8004bca:	3a01      	subs	r2, #1
 8004bcc:	0552      	lsls	r2, r2, #21
 8004bce:	4311      	orrs	r1, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bd4:	0852      	lsrs	r2, r2, #1
 8004bd6:	3a01      	subs	r2, #1
 8004bd8:	0652      	lsls	r2, r2, #25
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	493b      	ldr	r1, [pc, #236]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004be2:	4b3a      	ldr	r3, [pc, #232]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a39      	ldr	r2, [pc, #228]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004be8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bec:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bee:	4b37      	ldr	r3, [pc, #220]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	4a36      	ldr	r2, [pc, #216]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bfa:	f7fc fa93 	bl	8001124 <HAL_GetTick>
 8004bfe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c02:	f7fc fa8f 	bl	8001124 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e056      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c14:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c20:	e04e      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e04d      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c26:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d146      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c32:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a25      	ldr	r2, [pc, #148]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c3c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c3e:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	4a22      	ldr	r2, [pc, #136]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c48:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c4a:	f7fc fa6b 	bl	8001124 <HAL_GetTick>
 8004c4e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fc fa67 	bl	8001124 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e02e      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c64:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x842>
 8004c70:	e026      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	d021      	beq.n	8004cbc <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c78:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a13      	ldr	r2, [pc, #76]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fc fa4e 	bl	8001124 <HAL_GetTick>
 8004c88:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fc fa4a 	bl	8001124 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e011      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004caa:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	4a07      	ldr	r2, [pc, #28]	; (8004ccc <HAL_RCC_OscConfig+0x8bc>)
 8004cb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004cb4:	f023 0303 	bic.w	r3, r3, #3
 8004cb8:	60d3      	str	r3, [r2, #12]
 8004cba:	e001      	b.n	8004cc0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3728      	adds	r7, #40	; 0x28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	f99f808c 	.word	0xf99f808c

08004cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0e7      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b75      	ldr	r3, [pc, #468]	; (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d910      	bls.n	8004d18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b72      	ldr	r3, [pc, #456]	; (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 0207 	bic.w	r2, r3, #7
 8004cfe:	4970      	ldr	r1, [pc, #448]	; (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b6e      	ldr	r3, [pc, #440]	; (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0cf      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d010      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	4b66      	ldr	r3, [pc, #408]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d908      	bls.n	8004d46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d34:	4b63      	ldr	r3, [pc, #396]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4960      	ldr	r1, [pc, #384]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d04c      	beq.n	8004dec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d107      	bne.n	8004d6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5a:	4b5a      	ldr	r3, [pc, #360]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d121      	bne.n	8004daa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e0a6      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d72:	4b54      	ldr	r3, [pc, #336]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d115      	bne.n	8004daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e09a      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d107      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d8a:	4b4e      	ldr	r3, [pc, #312]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e08e      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d9a:	4b4a      	ldr	r3, [pc, #296]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e086      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004daa:	4b46      	ldr	r3, [pc, #280]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f023 0203 	bic.w	r2, r3, #3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	4943      	ldr	r1, [pc, #268]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dbc:	f7fc f9b2 	bl	8001124 <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	e00a      	b.n	8004dda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc4:	f7fc f9ae 	bl	8001124 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e06e      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	4b3a      	ldr	r3, [pc, #232]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 020c 	and.w	r2, r3, #12
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d1eb      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d010      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d208      	bcs.n	8004e1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e08:	4b2e      	ldr	r3, [pc, #184]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	492b      	ldr	r1, [pc, #172]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1a:	4b29      	ldr	r3, [pc, #164]	; (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d210      	bcs.n	8004e4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e28:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 0207 	bic.w	r2, r3, #7
 8004e30:	4923      	ldr	r1, [pc, #140]	; (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e38:	4b21      	ldr	r3, [pc, #132]	; (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d001      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e036      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	4918      	ldr	r1, [pc, #96]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e74:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4910      	ldr	r1, [pc, #64]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e88:	f000 f824 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	490b      	ldr	r1, [pc, #44]	; (8004ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea4:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <HAL_RCC_ClockConfig+0x1f8>)
 8004ea6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ea8:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1fc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fc f8e9 	bl	8001084 <HAL_InitTick>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004eb6:	7afb      	ldrb	r3, [r7, #11]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40022000 	.word	0x40022000
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	0800b290 	.word	0x0800b290
 8004ecc:	20000000 	.word	0x20000000
 8004ed0:	20000004 	.word	0x20000004

08004ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ee2:	4b3e      	ldr	r3, [pc, #248]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eec:	4b3b      	ldr	r3, [pc, #236]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x34>
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d121      	bne.n	8004f46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d11e      	bne.n	8004f46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f08:	4b34      	ldr	r3, [pc, #208]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d107      	bne.n	8004f24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f14:	4b31      	ldr	r3, [pc, #196]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	e005      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f24:	4b2d      	ldr	r3, [pc, #180]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	091b      	lsrs	r3, r3, #4
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f30:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f44:	e00a      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d102      	bne.n	8004f52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f4c:	4b25      	ldr	r3, [pc, #148]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	e004      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f58:	4b23      	ldr	r3, [pc, #140]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d134      	bne.n	8004fcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f62:	4b1e      	ldr	r3, [pc, #120]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d003      	beq.n	8004f7a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d003      	beq.n	8004f80 <HAL_RCC_GetSysClockFreq+0xac>
 8004f78:	e005      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f7a:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f7c:	617b      	str	r3, [r7, #20]
      break;
 8004f7e:	e005      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f80:	4b19      	ldr	r3, [pc, #100]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f82:	617b      	str	r3, [r7, #20]
      break;
 8004f84:	e002      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	617b      	str	r3, [r7, #20]
      break;
 8004f8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f8c:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	3301      	adds	r3, #1
 8004f98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	fb03 f202 	mul.w	r2, r3, r2
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	0e5b      	lsrs	r3, r3, #25
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3724      	adds	r7, #36	; 0x24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	0800b2a8 	.word	0x0800b2a8
 8004fe4:	00f42400 	.word	0x00f42400
 8004fe8:	007a1200 	.word	0x007a1200

08004fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff0:	4b03      	ldr	r3, [pc, #12]	; (8005000 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000000 	.word	0x20000000

08005004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005008:	f7ff fff0 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 800500c:	4602      	mov	r2, r0
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	4904      	ldr	r1, [pc, #16]	; (800502c <HAL_RCC_GetPCLK1Freq+0x28>)
 800501a:	5ccb      	ldrb	r3, [r1, r3]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	0800b2a0 	.word	0x0800b2a0

08005030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005034:	f7ff ffda 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8005038:	4602      	mov	r2, r0
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	0adb      	lsrs	r3, r3, #11
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	4904      	ldr	r1, [pc, #16]	; (8005058 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005046:	5ccb      	ldrb	r3, [r1, r3]
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000
 8005058:	0800b2a0 	.word	0x0800b2a0

0800505c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005064:	2300      	movs	r3, #0
 8005066:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005068:	4b2a      	ldr	r3, [pc, #168]	; (8005114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005074:	f7ff f968 	bl	8004348 <HAL_PWREx_GetVoltageRange>
 8005078:	6178      	str	r0, [r7, #20]
 800507a:	e014      	b.n	80050a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800507c:	4b25      	ldr	r3, [pc, #148]	; (8005114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	4a24      	ldr	r2, [pc, #144]	; (8005114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005086:	6593      	str	r3, [r2, #88]	; 0x58
 8005088:	4b22      	ldr	r3, [pc, #136]	; (8005114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800508a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005094:	f7ff f958 	bl	8004348 <HAL_PWREx_GetVoltageRange>
 8005098:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800509a:	4b1e      	ldr	r3, [pc, #120]	; (8005114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ac:	d10b      	bne.n	80050c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b80      	cmp	r3, #128	; 0x80
 80050b2:	d919      	bls.n	80050e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2ba0      	cmp	r3, #160	; 0xa0
 80050b8:	d902      	bls.n	80050c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ba:	2302      	movs	r3, #2
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	e013      	b.n	80050e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050c0:	2301      	movs	r3, #1
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	e010      	b.n	80050e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b80      	cmp	r3, #128	; 0x80
 80050ca:	d902      	bls.n	80050d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050cc:	2303      	movs	r3, #3
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	e00a      	b.n	80050e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b80      	cmp	r3, #128	; 0x80
 80050d6:	d102      	bne.n	80050de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050d8:	2302      	movs	r3, #2
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	e004      	b.n	80050e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b70      	cmp	r3, #112	; 0x70
 80050e2:	d101      	bne.n	80050e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050e4:	2301      	movs	r3, #1
 80050e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f023 0207 	bic.w	r2, r3, #7
 80050f0:	4909      	ldr	r1, [pc, #36]	; (8005118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050f8:	4b07      	ldr	r3, [pc, #28]	; (8005118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d001      	beq.n	800510a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40021000 	.word	0x40021000
 8005118:	40022000 	.word	0x40022000

0800511c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005124:	2300      	movs	r3, #0
 8005126:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005128:	2300      	movs	r3, #0
 800512a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 809e 	beq.w	8005276 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800513a:	2300      	movs	r3, #0
 800513c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800513e:	4b46      	ldr	r3, [pc, #280]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00d      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005154:	4b40      	ldr	r3, [pc, #256]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	4a3f      	ldr	r2, [pc, #252]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800515a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515e:	6593      	str	r3, [r2, #88]	; 0x58
 8005160:	4b3d      	ldr	r3, [pc, #244]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800516c:	2301      	movs	r3, #1
 800516e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005170:	4b3a      	ldr	r3, [pc, #232]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a39      	ldr	r2, [pc, #228]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800517a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800517c:	f7fb ffd2 	bl	8001124 <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005182:	e009      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005184:	f7fb ffce 	bl	8001124 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d902      	bls.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	74fb      	strb	r3, [r7, #19]
        break;
 8005196:	e005      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005198:	4b30      	ldr	r3, [pc, #192]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0ef      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d15a      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051aa:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01e      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d019      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051d2:	4b21      	ldr	r3, [pc, #132]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d8:	4a1f      	ldr	r2, [pc, #124]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	4a1b      	ldr	r2, [pc, #108]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051f2:	4a19      	ldr	r2, [pc, #100]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d016      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fb ff8e 	bl	8001124 <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520a:	e00b      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f7fb ff8a 	bl	8001124 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	; 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d902      	bls.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	74fb      	strb	r3, [r7, #19]
            break;
 8005222:	e006      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0ec      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005232:	7cfb      	ldrb	r3, [r7, #19]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	4904      	ldr	r1, [pc, #16]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800524e:	e009      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	74bb      	strb	r3, [r7, #18]
 8005254:	e006      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005264:	7c7b      	ldrb	r3, [r7, #17]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d105      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800526a:	4b6e      	ldr	r3, [pc, #440]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	4a6d      	ldr	r2, [pc, #436]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005274:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005282:	4b68      	ldr	r3, [pc, #416]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f023 0203 	bic.w	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4964      	ldr	r1, [pc, #400]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052a4:	4b5f      	ldr	r3, [pc, #380]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f023 020c 	bic.w	r2, r3, #12
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	495c      	ldr	r1, [pc, #368]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052c6:	4b57      	ldr	r3, [pc, #348]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	4953      	ldr	r1, [pc, #332]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052e8:	4b4e      	ldr	r3, [pc, #312]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	494b      	ldr	r1, [pc, #300]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800530a:	4b46      	ldr	r3, [pc, #280]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4942      	ldr	r1, [pc, #264]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800532c:	4b3d      	ldr	r3, [pc, #244]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	493a      	ldr	r1, [pc, #232]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800534e:	4b35      	ldr	r3, [pc, #212]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	4931      	ldr	r1, [pc, #196]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005370:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	4929      	ldr	r1, [pc, #164]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005392:	4b24      	ldr	r3, [pc, #144]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	4920      	ldr	r1, [pc, #128]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d015      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053b4:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	4918      	ldr	r1, [pc, #96]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053d2:	d105      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053d4:	4b13      	ldr	r3, [pc, #76]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4a12      	ldr	r2, [pc, #72]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053de:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d015      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	490a      	ldr	r1, [pc, #40]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800540a:	d105      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a04      	ldr	r2, [pc, #16]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005416:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005418:	7cbb      	ldrb	r3, [r7, #18]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000

08005428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e049      	b.n	80054ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fb fba0 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f001 f9fe 	bl	8006868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10f      	bne.n	800550e <HAL_TIM_Base_Stop+0x38>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a1a      	ldr	r2, [r3, #32]
 80054f4:	f240 4344 	movw	r3, #1092	; 0x444
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <HAL_TIM_Base_Stop+0x38>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e03b      	b.n	80055b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d009      	beq.n	8005572 <HAL_TIM_Base_Start_IT+0x4e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d004      	beq.n	8005572 <HAL_TIM_Base_Start_IT+0x4e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d115      	bne.n	800559e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b06      	cmp	r3, #6
 8005582:	d015      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x8c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558a:	d011      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559c:	e008      	b.n	80055b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e000      	b.n	80055b2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40012c00 	.word	0x40012c00
 80055c4:	40014000 	.word	0x40014000
 80055c8:	00010007 	.word	0x00010007

080055cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6a1a      	ldr	r2, [r3, #32]
 80055ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10f      	bne.n	8005614 <HAL_TIM_Base_Stop_IT+0x48>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6a1a      	ldr	r2, [r3, #32]
 80055fa:	f240 4344 	movw	r3, #1092	; 0x444
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d107      	bne.n	8005614 <HAL_TIM_Base_Stop_IT+0x48>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0201 	bic.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e049      	b.n	80056d0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f841 	bl	80056d8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3304      	adds	r3, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f001 f8fd 	bl	8006868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIM_OC_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                       uint16_t Length)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d109      	bne.n	8005718 <HAL_TIM_OC_Start_DMA+0x2c>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	e03c      	b.n	8005792 <HAL_TIM_OC_Start_DMA+0xa6>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b04      	cmp	r3, #4
 800571c:	d109      	bne.n	8005732 <HAL_TIM_OC_Start_DMA+0x46>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	bf0c      	ite	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	2300      	movne	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	e02f      	b.n	8005792 <HAL_TIM_OC_Start_DMA+0xa6>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d109      	bne.n	800574c <HAL_TIM_OC_Start_DMA+0x60>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	e022      	b.n	8005792 <HAL_TIM_OC_Start_DMA+0xa6>
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b0c      	cmp	r3, #12
 8005750:	d109      	bne.n	8005766 <HAL_TIM_OC_Start_DMA+0x7a>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	e015      	b.n	8005792 <HAL_TIM_OC_Start_DMA+0xa6>
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b10      	cmp	r3, #16
 800576a:	d109      	bne.n	8005780 <HAL_TIM_OC_Start_DMA+0x94>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	e008      	b.n	8005792 <HAL_TIM_OC_Start_DMA+0xa6>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	bf0c      	ite	eq
 800578c:	2301      	moveq	r3, #1
 800578e:	2300      	movne	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_TIM_OC_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	e18d      	b.n	8005ab6 <HAL_TIM_OC_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <HAL_TIM_OC_Start_DMA+0xc8>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	bf0c      	ite	eq
 80057ac:	2301      	moveq	r3, #1
 80057ae:	2300      	movne	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	e03c      	b.n	800582e <HAL_TIM_OC_Start_DMA+0x142>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d109      	bne.n	80057ce <HAL_TIM_OC_Start_DMA+0xe2>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	e02f      	b.n	800582e <HAL_TIM_OC_Start_DMA+0x142>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d109      	bne.n	80057e8 <HAL_TIM_OC_Start_DMA+0xfc>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b01      	cmp	r3, #1
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	e022      	b.n	800582e <HAL_TIM_OC_Start_DMA+0x142>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b0c      	cmp	r3, #12
 80057ec:	d109      	bne.n	8005802 <HAL_TIM_OC_Start_DMA+0x116>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	bf0c      	ite	eq
 80057fa:	2301      	moveq	r3, #1
 80057fc:	2300      	movne	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	e015      	b.n	800582e <HAL_TIM_OC_Start_DMA+0x142>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b10      	cmp	r3, #16
 8005806:	d109      	bne.n	800581c <HAL_TIM_OC_Start_DMA+0x130>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	e008      	b.n	800582e <HAL_TIM_OC_Start_DMA+0x142>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d034      	beq.n	800589c <HAL_TIM_OC_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_TIM_OC_Start_DMA+0x152>
 8005838:	887b      	ldrh	r3, [r7, #2]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_TIM_OC_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e139      	b.n	8005ab6 <HAL_TIM_OC_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d104      	bne.n	8005852 <HAL_TIM_OC_Start_DMA+0x166>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005850:	e026      	b.n	80058a0 <HAL_TIM_OC_Start_DMA+0x1b4>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b04      	cmp	r3, #4
 8005856:	d104      	bne.n	8005862 <HAL_TIM_OC_Start_DMA+0x176>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005860:	e01e      	b.n	80058a0 <HAL_TIM_OC_Start_DMA+0x1b4>
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d104      	bne.n	8005872 <HAL_TIM_OC_Start_DMA+0x186>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005870:	e016      	b.n	80058a0 <HAL_TIM_OC_Start_DMA+0x1b4>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b0c      	cmp	r3, #12
 8005876:	d104      	bne.n	8005882 <HAL_TIM_OC_Start_DMA+0x196>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005880:	e00e      	b.n	80058a0 <HAL_TIM_OC_Start_DMA+0x1b4>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b10      	cmp	r3, #16
 8005886:	d104      	bne.n	8005892 <HAL_TIM_OC_Start_DMA+0x1a6>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005890:	e006      	b.n	80058a0 <HAL_TIM_OC_Start_DMA+0x1b4>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800589a:	e001      	b.n	80058a0 <HAL_TIM_OC_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e10a      	b.n	8005ab6 <HAL_TIM_OC_Start_DMA+0x3ca>
  }

  switch (Channel)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b0c      	cmp	r3, #12
 80058a4:	f200 80ae 	bhi.w	8005a04 <HAL_TIM_OC_Start_DMA+0x318>
 80058a8:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <HAL_TIM_OC_Start_DMA+0x1c4>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080058e5 	.word	0x080058e5
 80058b4:	08005a05 	.word	0x08005a05
 80058b8:	08005a05 	.word	0x08005a05
 80058bc:	08005a05 	.word	0x08005a05
 80058c0:	0800592d 	.word	0x0800592d
 80058c4:	08005a05 	.word	0x08005a05
 80058c8:	08005a05 	.word	0x08005a05
 80058cc:	08005a05 	.word	0x08005a05
 80058d0:	08005975 	.word	0x08005975
 80058d4:	08005a05 	.word	0x08005a05
 80058d8:	08005a05 	.word	0x08005a05
 80058dc:	08005a05 	.word	0x08005a05
 80058e0:	080059bd 	.word	0x080059bd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	4a75      	ldr	r2, [pc, #468]	; (8005ac0 <HAL_TIM_OC_Start_DMA+0x3d4>)
 80058ea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	4a74      	ldr	r2, [pc, #464]	; (8005ac4 <HAL_TIM_OC_Start_DMA+0x3d8>)
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	4a73      	ldr	r2, [pc, #460]	; (8005ac8 <HAL_TIM_OC_Start_DMA+0x3dc>)
 80058fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3334      	adds	r3, #52	; 0x34
 8005908:	461a      	mov	r2, r3
 800590a:	887b      	ldrh	r3, [r7, #2]
 800590c:	f7fe f8d2 	bl	8003ab4 <HAL_DMA_Start_IT>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_TIM_OC_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e0cd      	b.n	8005ab6 <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005928:	60da      	str	r2, [r3, #12]
      break;
 800592a:	e06e      	b.n	8005a0a <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	4a63      	ldr	r2, [pc, #396]	; (8005ac0 <HAL_TIM_OC_Start_DMA+0x3d4>)
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005938:	4a62      	ldr	r2, [pc, #392]	; (8005ac4 <HAL_TIM_OC_Start_DMA+0x3d8>)
 800593a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	4a61      	ldr	r2, [pc, #388]	; (8005ac8 <HAL_TIM_OC_Start_DMA+0x3dc>)
 8005942:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3338      	adds	r3, #56	; 0x38
 8005950:	461a      	mov	r2, r3
 8005952:	887b      	ldrh	r3, [r7, #2]
 8005954:	f7fe f8ae 	bl	8003ab4 <HAL_DMA_Start_IT>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_TIM_OC_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e0a9      	b.n	8005ab6 <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005970:	60da      	str	r2, [r3, #12]
      break;
 8005972:	e04a      	b.n	8005a0a <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a51      	ldr	r2, [pc, #324]	; (8005ac0 <HAL_TIM_OC_Start_DMA+0x3d4>)
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a50      	ldr	r2, [pc, #320]	; (8005ac4 <HAL_TIM_OC_Start_DMA+0x3d8>)
 8005982:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	4a4f      	ldr	r2, [pc, #316]	; (8005ac8 <HAL_TIM_OC_Start_DMA+0x3dc>)
 800598a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	333c      	adds	r3, #60	; 0x3c
 8005998:	461a      	mov	r2, r3
 800599a:	887b      	ldrh	r3, [r7, #2]
 800599c:	f7fe f88a 	bl	8003ab4 <HAL_DMA_Start_IT>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_TIM_OC_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e085      	b.n	8005ab6 <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b8:	60da      	str	r2, [r3, #12]
      break;
 80059ba:	e026      	b.n	8005a0a <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	4a3f      	ldr	r2, [pc, #252]	; (8005ac0 <HAL_TIM_OC_Start_DMA+0x3d4>)
 80059c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	4a3e      	ldr	r2, [pc, #248]	; (8005ac4 <HAL_TIM_OC_Start_DMA+0x3d8>)
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d0:	4a3d      	ldr	r2, [pc, #244]	; (8005ac8 <HAL_TIM_OC_Start_DMA+0x3dc>)
 80059d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3340      	adds	r3, #64	; 0x40
 80059e0:	461a      	mov	r2, r3
 80059e2:	887b      	ldrh	r3, [r7, #2]
 80059e4:	f7fe f866 	bl	8003ab4 <HAL_DMA_Start_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_TIM_OC_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e061      	b.n	8005ab6 <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a00:	60da      	str	r2, [r3, #12]
      break;
 8005a02:	e002      	b.n	8005a0a <HAL_TIM_OC_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	75fb      	strb	r3, [r7, #23]
      break;
 8005a08:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a0a:	7dfb      	ldrb	r3, [r7, #23]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d151      	bne.n	8005ab4 <HAL_TIM_OC_Start_DMA+0x3c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2201      	movs	r2, #1
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 fa07 	bl	8006e2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2a      	ldr	r2, [pc, #168]	; (8005acc <HAL_TIM_OC_Start_DMA+0x3e0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d009      	beq.n	8005a3c <HAL_TIM_OC_Start_DMA+0x350>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a28      	ldr	r2, [pc, #160]	; (8005ad0 <HAL_TIM_OC_Start_DMA+0x3e4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d004      	beq.n	8005a3c <HAL_TIM_OC_Start_DMA+0x350>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a27      	ldr	r2, [pc, #156]	; (8005ad4 <HAL_TIM_OC_Start_DMA+0x3e8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d101      	bne.n	8005a40 <HAL_TIM_OC_Start_DMA+0x354>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <HAL_TIM_OC_Start_DMA+0x356>
 8005a40:	2300      	movs	r3, #0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <HAL_TIM_OC_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <HAL_TIM_OC_Start_DMA+0x3e0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_TIM_OC_Start_DMA+0x388>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a68:	d004      	beq.n	8005a74 <HAL_TIM_OC_Start_DMA+0x388>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_TIM_OC_Start_DMA+0x3e4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d115      	bne.n	8005aa0 <HAL_TIM_OC_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <HAL_TIM_OC_Start_DMA+0x3ec>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	d015      	beq.n	8005ab2 <HAL_TIM_OC_Start_DMA+0x3c6>
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d011      	beq.n	8005ab2 <HAL_TIM_OC_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9e:	e008      	b.n	8005ab2 <HAL_TIM_OC_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	e000      	b.n	8005ab4 <HAL_TIM_OC_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	08006759 	.word	0x08006759
 8005ac4:	08006801 	.word	0x08006801
 8005ac8:	080066c7 	.word	0x080066c7
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	00010007 	.word	0x00010007

08005adc <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	d855      	bhi.n	8005b9c <HAL_TIM_OC_Stop_DMA+0xc0>
 8005af0:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <HAL_TIM_OC_Stop_DMA+0x1c>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	08005b2d 	.word	0x08005b2d
 8005afc:	08005b9d 	.word	0x08005b9d
 8005b00:	08005b9d 	.word	0x08005b9d
 8005b04:	08005b9d 	.word	0x08005b9d
 8005b08:	08005b49 	.word	0x08005b49
 8005b0c:	08005b9d 	.word	0x08005b9d
 8005b10:	08005b9d 	.word	0x08005b9d
 8005b14:	08005b9d 	.word	0x08005b9d
 8005b18:	08005b65 	.word	0x08005b65
 8005b1c:	08005b9d 	.word	0x08005b9d
 8005b20:	08005b9d 	.word	0x08005b9d
 8005b24:	08005b9d 	.word	0x08005b9d
 8005b28:	08005b81 	.word	0x08005b81
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe f855 	bl	8003bf0 <HAL_DMA_Abort_IT>
      break;
 8005b46:	e02c      	b.n	8005ba2 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe f847 	bl	8003bf0 <HAL_DMA_Abort_IT>
      break;
 8005b62:	e01e      	b.n	8005ba2 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe f839 	bl	8003bf0 <HAL_DMA_Abort_IT>
      break;
 8005b7e:	e010      	b.n	8005ba2 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b8e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe f82b 	bl	8003bf0 <HAL_DMA_Abort_IT>
      break;
 8005b9a:	e002      	b.n	8005ba2 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d176      	bne.n	8005c96 <HAL_TIM_OC_Stop_DMA+0x1ba>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2200      	movs	r2, #0
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f001 f93b 	bl	8006e2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a39      	ldr	r2, [pc, #228]	; (8005ca0 <HAL_TIM_OC_Stop_DMA+0x1c4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d009      	beq.n	8005bd4 <HAL_TIM_OC_Stop_DMA+0xf8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a37      	ldr	r2, [pc, #220]	; (8005ca4 <HAL_TIM_OC_Stop_DMA+0x1c8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_TIM_OC_Stop_DMA+0xf8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a36      	ldr	r2, [pc, #216]	; (8005ca8 <HAL_TIM_OC_Stop_DMA+0x1cc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIM_OC_Stop_DMA+0xfc>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <HAL_TIM_OC_Stop_DMA+0xfe>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d017      	beq.n	8005c0e <HAL_TIM_OC_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <HAL_TIM_OC_Stop_DMA+0x132>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	f240 4344 	movw	r3, #1092	; 0x444
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d107      	bne.n	8005c0e <HAL_TIM_OC_Stop_DMA+0x132>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a1a      	ldr	r2, [r3, #32]
 8005c14:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10f      	bne.n	8005c3e <HAL_TIM_OC_Stop_DMA+0x162>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6a1a      	ldr	r2, [r3, #32]
 8005c24:	f240 4344 	movw	r3, #1092	; 0x444
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d107      	bne.n	8005c3e <HAL_TIM_OC_Stop_DMA+0x162>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <HAL_TIM_OC_Stop_DMA+0x172>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c4c:	e023      	b.n	8005c96 <HAL_TIM_OC_Stop_DMA+0x1ba>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_OC_Stop_DMA+0x182>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c5c:	e01b      	b.n	8005c96 <HAL_TIM_OC_Stop_DMA+0x1ba>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_OC_Stop_DMA+0x192>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c6c:	e013      	b.n	8005c96 <HAL_TIM_OC_Stop_DMA+0x1ba>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b0c      	cmp	r3, #12
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_OC_Stop_DMA+0x1a2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c7c:	e00b      	b.n	8005c96 <HAL_TIM_OC_Stop_DMA+0x1ba>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_OC_Stop_DMA+0x1b2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c8c:	e003      	b.n	8005c96 <HAL_TIM_OC_Stop_DMA+0x1ba>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40014400 	.word	0x40014400

08005cac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e049      	b.n	8005d52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fa feb8 	bl	8000a48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f000 fdbc 	bl	8006868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10f      	bne.n	8005d9a <HAL_TIM_PWM_DeInit+0x40>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6a1a      	ldr	r2, [r3, #32]
 8005d80:	f240 4344 	movw	r3, #1092	; 0x444
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d107      	bne.n	8005d9a <HAL_TIM_PWM_DeInit+0x40>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fa ff20 	bl	8000be0 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <HAL_TIM_PWM_Start+0x24>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e03c      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d109      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x3e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	bf14      	ite	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	2300      	moveq	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	e02f      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d109      	bne.n	8005e6c <HAL_TIM_PWM_Start+0x58>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	e022      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d109      	bne.n	8005e86 <HAL_TIM_PWM_Start+0x72>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	e015      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d109      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0x8c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e008      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e07e      	b.n	8005fb8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0xb6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec8:	e023      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xc6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed8:	e01b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0xd6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee8:	e013      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0xe6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef8:	e00b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0xf6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f08:	e003      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 ff86 	bl	8006e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a26      	ldr	r2, [pc, #152]	; (8005fc0 <HAL_TIM_PWM_Start+0x1ac>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d009      	beq.n	8005f3e <HAL_TIM_PWM_Start+0x12a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <HAL_TIM_PWM_Start+0x1b0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d004      	beq.n	8005f3e <HAL_TIM_PWM_Start+0x12a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a23      	ldr	r2, [pc, #140]	; (8005fc8 <HAL_TIM_PWM_Start+0x1b4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d101      	bne.n	8005f42 <HAL_TIM_PWM_Start+0x12e>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <HAL_TIM_PWM_Start+0x130>
 8005f42:	2300      	movs	r3, #0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a18      	ldr	r2, [pc, #96]	; (8005fc0 <HAL_TIM_PWM_Start+0x1ac>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x162>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x162>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a14      	ldr	r2, [pc, #80]	; (8005fc4 <HAL_TIM_PWM_Start+0x1b0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d115      	bne.n	8005fa2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <HAL_TIM_PWM_Start+0x1b8>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b06      	cmp	r3, #6
 8005f86:	d015      	beq.n	8005fb4 <HAL_TIM_PWM_Start+0x1a0>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8e:	d011      	beq.n	8005fb4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa0:	e008      	b.n	8005fb4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0201 	orr.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e000      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	00010007 	.word	0x00010007

08005fd0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 ff22 	bl	8006e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a39      	ldr	r2, [pc, #228]	; (80060d4 <HAL_TIM_PWM_Stop+0x104>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d009      	beq.n	8006006 <HAL_TIM_PWM_Stop+0x36>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a38      	ldr	r2, [pc, #224]	; (80060d8 <HAL_TIM_PWM_Stop+0x108>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d004      	beq.n	8006006 <HAL_TIM_PWM_Stop+0x36>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a36      	ldr	r2, [pc, #216]	; (80060dc <HAL_TIM_PWM_Stop+0x10c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <HAL_TIM_PWM_Stop+0x3a>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <HAL_TIM_PWM_Stop+0x3c>
 800600a:	2300      	movs	r3, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d017      	beq.n	8006040 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6a1a      	ldr	r2, [r3, #32]
 8006016:	f241 1311 	movw	r3, #4369	; 0x1111
 800601a:	4013      	ands	r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10f      	bne.n	8006040 <HAL_TIM_PWM_Stop+0x70>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6a1a      	ldr	r2, [r3, #32]
 8006026:	f240 4344 	movw	r3, #1092	; 0x444
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d107      	bne.n	8006040 <HAL_TIM_PWM_Stop+0x70>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800603e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6a1a      	ldr	r2, [r3, #32]
 8006046:	f241 1311 	movw	r3, #4369	; 0x1111
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10f      	bne.n	8006070 <HAL_TIM_PWM_Stop+0xa0>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6a1a      	ldr	r2, [r3, #32]
 8006056:	f240 4344 	movw	r3, #1092	; 0x444
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d107      	bne.n	8006070 <HAL_TIM_PWM_Stop+0xa0>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <HAL_TIM_PWM_Stop+0xb0>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800607e:	e023      	b.n	80060c8 <HAL_TIM_PWM_Stop+0xf8>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d104      	bne.n	8006090 <HAL_TIM_PWM_Stop+0xc0>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800608e:	e01b      	b.n	80060c8 <HAL_TIM_PWM_Stop+0xf8>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b08      	cmp	r3, #8
 8006094:	d104      	bne.n	80060a0 <HAL_TIM_PWM_Stop+0xd0>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800609e:	e013      	b.n	80060c8 <HAL_TIM_PWM_Stop+0xf8>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b0c      	cmp	r3, #12
 80060a4:	d104      	bne.n	80060b0 <HAL_TIM_PWM_Stop+0xe0>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060ae:	e00b      	b.n	80060c8 <HAL_TIM_PWM_Stop+0xf8>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d104      	bne.n	80060c0 <HAL_TIM_PWM_Stop+0xf0>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060be:	e003      	b.n	80060c8 <HAL_TIM_PWM_Stop+0xf8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40012c00 	.word	0x40012c00
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400

080060e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d122      	bne.n	800613c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b02      	cmp	r3, #2
 8006102:	d11b      	bne.n	800613c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0202 	mvn.w	r2, #2
 800610c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fabb 	bl	800669e <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 faad 	bl	800668a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fa fa4b 	bl	80005cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b04      	cmp	r3, #4
 8006148:	d122      	bne.n	8006190 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b04      	cmp	r3, #4
 8006156:	d11b      	bne.n	8006190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0204 	mvn.w	r2, #4
 8006160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2202      	movs	r2, #2
 8006166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fa91 	bl	800669e <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa83 	bl	800668a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fa fa21 	bl	80005cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b08      	cmp	r3, #8
 800619c:	d122      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d11b      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0208 	mvn.w	r2, #8
 80061b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2204      	movs	r2, #4
 80061ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fa67 	bl	800669e <HAL_TIM_IC_CaptureCallback>
 80061d0:	e005      	b.n	80061de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa59 	bl	800668a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fa f9f7 	bl	80005cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	2b10      	cmp	r3, #16
 80061f0:	d122      	bne.n	8006238 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d11b      	bne.n	8006238 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0210 	mvn.w	r2, #16
 8006208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2208      	movs	r2, #8
 800620e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa3d 	bl	800669e <HAL_TIM_IC_CaptureCallback>
 8006224:	e005      	b.n	8006232 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa2f 	bl	800668a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7fa f9cd 	bl	80005cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b01      	cmp	r3, #1
 8006244:	d10e      	bne.n	8006264 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b01      	cmp	r3, #1
 8006252:	d107      	bne.n	8006264 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0201 	mvn.w	r2, #1
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fa f9c4 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b80      	cmp	r3, #128	; 0x80
 8006270:	d10e      	bne.n	8006290 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627c:	2b80      	cmp	r3, #128	; 0x80
 800627e:	d107      	bne.n	8006290 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fedc 	bl	8007048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629e:	d10e      	bne.n	80062be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062aa:	2b80      	cmp	r3, #128	; 0x80
 80062ac:	d107      	bne.n	80062be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fecf 	bl	800705c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d10e      	bne.n	80062ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d107      	bne.n	80062ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f9e4 	bl	80066b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d10e      	bne.n	8006316 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b20      	cmp	r3, #32
 8006304:	d107      	bne.n	8006316 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f06f 0220 	mvn.w	r2, #32
 800630e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fe8f 	bl	8007034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <HAL_TIM_OC_ConfigChannel+0x1e>
 800633a:	2302      	movs	r3, #2
 800633c:	e066      	b.n	800640c <HAL_TIM_OC_ConfigChannel+0xec>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b14      	cmp	r3, #20
 800634a:	d857      	bhi.n	80063fc <HAL_TIM_OC_ConfigChannel+0xdc>
 800634c:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <HAL_TIM_OC_ConfigChannel+0x34>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	080063a9 	.word	0x080063a9
 8006358:	080063fd 	.word	0x080063fd
 800635c:	080063fd 	.word	0x080063fd
 8006360:	080063fd 	.word	0x080063fd
 8006364:	080063b7 	.word	0x080063b7
 8006368:	080063fd 	.word	0x080063fd
 800636c:	080063fd 	.word	0x080063fd
 8006370:	080063fd 	.word	0x080063fd
 8006374:	080063c5 	.word	0x080063c5
 8006378:	080063fd 	.word	0x080063fd
 800637c:	080063fd 	.word	0x080063fd
 8006380:	080063fd 	.word	0x080063fd
 8006384:	080063d3 	.word	0x080063d3
 8006388:	080063fd 	.word	0x080063fd
 800638c:	080063fd 	.word	0x080063fd
 8006390:	080063fd 	.word	0x080063fd
 8006394:	080063e1 	.word	0x080063e1
 8006398:	080063fd 	.word	0x080063fd
 800639c:	080063fd 	.word	0x080063fd
 80063a0:	080063fd 	.word	0x080063fd
 80063a4:	080063ef 	.word	0x080063ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fabe 	bl	8006930 <TIM_OC1_SetConfig>
      break;
 80063b4:	e025      	b.n	8006402 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fb33 	bl	8006a28 <TIM_OC2_SetConfig>
      break;
 80063c2:	e01e      	b.n	8006402 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fba6 	bl	8006b1c <TIM_OC3_SetConfig>
      break;
 80063d0:	e017      	b.n	8006402 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fc17 	bl	8006c0c <TIM_OC4_SetConfig>
      break;
 80063de:	e010      	b.n	8006402 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fc6e 	bl	8006cc8 <TIM_OC5_SetConfig>
      break;
 80063ec:	e009      	b.n	8006402 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fcbf 	bl	8006d78 <TIM_OC6_SetConfig>
      break;
 80063fa:	e002      	b.n	8006402 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800640a:	7dfb      	ldrb	r3, [r7, #23]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800642e:	2302      	movs	r3, #2
 8006430:	e0ff      	b.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b14      	cmp	r3, #20
 800643e:	f200 80f0 	bhi.w	8006622 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	0800649d 	.word	0x0800649d
 800644c:	08006623 	.word	0x08006623
 8006450:	08006623 	.word	0x08006623
 8006454:	08006623 	.word	0x08006623
 8006458:	080064dd 	.word	0x080064dd
 800645c:	08006623 	.word	0x08006623
 8006460:	08006623 	.word	0x08006623
 8006464:	08006623 	.word	0x08006623
 8006468:	0800651f 	.word	0x0800651f
 800646c:	08006623 	.word	0x08006623
 8006470:	08006623 	.word	0x08006623
 8006474:	08006623 	.word	0x08006623
 8006478:	0800655f 	.word	0x0800655f
 800647c:	08006623 	.word	0x08006623
 8006480:	08006623 	.word	0x08006623
 8006484:	08006623 	.word	0x08006623
 8006488:	080065a1 	.word	0x080065a1
 800648c:	08006623 	.word	0x08006623
 8006490:	08006623 	.word	0x08006623
 8006494:	08006623 	.word	0x08006623
 8006498:	080065e1 	.word	0x080065e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fa44 	bl	8006930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699a      	ldr	r2, [r3, #24]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0208 	orr.w	r2, r2, #8
 80064b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0204 	bic.w	r2, r2, #4
 80064c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6999      	ldr	r1, [r3, #24]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	691a      	ldr	r2, [r3, #16]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	619a      	str	r2, [r3, #24]
      break;
 80064da:	e0a5      	b.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 faa0 	bl	8006a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6999      	ldr	r1, [r3, #24]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	021a      	lsls	r2, r3, #8
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	619a      	str	r2, [r3, #24]
      break;
 800651c:	e084      	b.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	4618      	mov	r0, r3
 8006526:	f000 faf9 	bl	8006b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69da      	ldr	r2, [r3, #28]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0208 	orr.w	r2, r2, #8
 8006538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69da      	ldr	r2, [r3, #28]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0204 	bic.w	r2, r2, #4
 8006548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69d9      	ldr	r1, [r3, #28]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	61da      	str	r2, [r3, #28]
      break;
 800655c:	e064      	b.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fb51 	bl	8006c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69d9      	ldr	r1, [r3, #28]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	021a      	lsls	r2, r3, #8
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	61da      	str	r2, [r3, #28]
      break;
 800659e:	e043      	b.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fb8e 	bl	8006cc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0208 	orr.w	r2, r2, #8
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0204 	bic.w	r2, r2, #4
 80065ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065de:	e023      	b.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fbc6 	bl	8006d78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	021a      	lsls	r2, r3, #8
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006620:	e002      	b.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	75fb      	strb	r3, [r7, #23]
      break;
 8006626:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop

0800663c <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_TIM_GenerateEvent+0x18>
 8006650:	2302      	movs	r3, #2
 8006652:	e014      	b.n	800667e <HAL_TIM_GenerateEvent+0x42>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d107      	bne.n	80066ee <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ec:	e02a      	b.n	8006744 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d107      	bne.n	8006708 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2202      	movs	r2, #2
 80066fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006706:	e01d      	b.n	8006744 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	429a      	cmp	r2, r3
 8006710:	d107      	bne.n	8006722 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2204      	movs	r2, #4
 8006716:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006720:	e010      	b.n	8006744 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	429a      	cmp	r2, r3
 800672a:	d107      	bne.n	800673c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2208      	movs	r2, #8
 8006730:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800673a:	e003      	b.n	8006744 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f7f9 ff23 	bl	8000590 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006764:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	429a      	cmp	r2, r3
 800676e:	d10b      	bne.n	8006788 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d136      	bne.n	80067ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006786:	e031      	b.n	80067ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	429a      	cmp	r2, r3
 8006790:	d10b      	bne.n	80067aa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2202      	movs	r2, #2
 8006796:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d125      	bne.n	80067ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a8:	e020      	b.n	80067ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d10b      	bne.n	80067cc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2204      	movs	r2, #4
 80067b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d114      	bne.n	80067ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ca:	e00f      	b.n	80067ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d10a      	bne.n	80067ec <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2208      	movs	r2, #8
 80067da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d103      	bne.n	80067ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7f9 feed 	bl	80005cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	771a      	strb	r2, [r3, #28]
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d103      	bne.n	8006820 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	771a      	strb	r2, [r3, #28]
 800681e:	e019      	b.n	8006854 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	d103      	bne.n	8006832 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2202      	movs	r2, #2
 800682e:	771a      	strb	r2, [r3, #28]
 8006830:	e010      	b.n	8006854 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	429a      	cmp	r2, r3
 800683a:	d103      	bne.n	8006844 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2204      	movs	r2, #4
 8006840:	771a      	strb	r2, [r3, #28]
 8006842:	e007      	b.n	8006854 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d102      	bne.n	8006854 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2208      	movs	r2, #8
 8006852:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7f9 feab 	bl	80005b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	771a      	strb	r2, [r3, #28]
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a2a      	ldr	r2, [pc, #168]	; (8006924 <TIM_Base_SetConfig+0xbc>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0x20>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006886:	d108      	bne.n	800689a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a21      	ldr	r2, [pc, #132]	; (8006924 <TIM_Base_SetConfig+0xbc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00b      	beq.n	80068ba <TIM_Base_SetConfig+0x52>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a8:	d007      	beq.n	80068ba <TIM_Base_SetConfig+0x52>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <TIM_Base_SetConfig+0xc0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_Base_SetConfig+0x52>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a1d      	ldr	r2, [pc, #116]	; (800692c <TIM_Base_SetConfig+0xc4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d108      	bne.n	80068cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a0c      	ldr	r2, [pc, #48]	; (8006924 <TIM_Base_SetConfig+0xbc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_Base_SetConfig+0xa0>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a0b      	ldr	r2, [pc, #44]	; (8006928 <TIM_Base_SetConfig+0xc0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_Base_SetConfig+0xa0>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a0a      	ldr	r2, [pc, #40]	; (800692c <TIM_Base_SetConfig+0xc4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d103      	bne.n	8006910 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	615a      	str	r2, [r3, #20]
}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40014000 	.word	0x40014000
 800692c:	40014400 	.word	0x40014400

08006930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f023 0201 	bic.w	r2, r3, #1
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800695e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0303 	bic.w	r3, r3, #3
 800696a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f023 0302 	bic.w	r3, r3, #2
 800697c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a24      	ldr	r2, [pc, #144]	; (8006a1c <TIM_OC1_SetConfig+0xec>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d007      	beq.n	80069a0 <TIM_OC1_SetConfig+0x70>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a23      	ldr	r2, [pc, #140]	; (8006a20 <TIM_OC1_SetConfig+0xf0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d003      	beq.n	80069a0 <TIM_OC1_SetConfig+0x70>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a22      	ldr	r2, [pc, #136]	; (8006a24 <TIM_OC1_SetConfig+0xf4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d10c      	bne.n	80069ba <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f023 0308 	bic.w	r3, r3, #8
 80069a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f023 0304 	bic.w	r3, r3, #4
 80069b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a17      	ldr	r2, [pc, #92]	; (8006a1c <TIM_OC1_SetConfig+0xec>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d007      	beq.n	80069d2 <TIM_OC1_SetConfig+0xa2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a16      	ldr	r2, [pc, #88]	; (8006a20 <TIM_OC1_SetConfig+0xf0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_OC1_SetConfig+0xa2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <TIM_OC1_SetConfig+0xf4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d111      	bne.n	80069f6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	621a      	str	r2, [r3, #32]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400

08006a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f023 0210 	bic.w	r2, r3, #16
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 0320 	bic.w	r3, r3, #32
 8006a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a22      	ldr	r2, [pc, #136]	; (8006b10 <TIM_OC2_SetConfig+0xe8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d10d      	bne.n	8006aa8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a19      	ldr	r2, [pc, #100]	; (8006b10 <TIM_OC2_SetConfig+0xe8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d007      	beq.n	8006ac0 <TIM_OC2_SetConfig+0x98>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a18      	ldr	r2, [pc, #96]	; (8006b14 <TIM_OC2_SetConfig+0xec>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_OC2_SetConfig+0x98>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <TIM_OC2_SetConfig+0xf0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d113      	bne.n	8006ae8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40014400 	.word	0x40014400

08006b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a21      	ldr	r2, [pc, #132]	; (8006c00 <TIM_OC3_SetConfig+0xe4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d10d      	bne.n	8006b9a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <TIM_OC3_SetConfig+0xe4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d007      	beq.n	8006bb2 <TIM_OC3_SetConfig+0x96>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a17      	ldr	r2, [pc, #92]	; (8006c04 <TIM_OC3_SetConfig+0xe8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d003      	beq.n	8006bb2 <TIM_OC3_SetConfig+0x96>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a16      	ldr	r2, [pc, #88]	; (8006c08 <TIM_OC3_SetConfig+0xec>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d113      	bne.n	8006bda <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	621a      	str	r2, [r3, #32]
}
 8006bf4:	bf00      	nop
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40014400 	.word	0x40014400

08006c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	031b      	lsls	r3, r3, #12
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a14      	ldr	r2, [pc, #80]	; (8006cbc <TIM_OC4_SetConfig+0xb0>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d007      	beq.n	8006c80 <TIM_OC4_SetConfig+0x74>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a13      	ldr	r2, [pc, #76]	; (8006cc0 <TIM_OC4_SetConfig+0xb4>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d003      	beq.n	8006c80 <TIM_OC4_SetConfig+0x74>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a12      	ldr	r2, [pc, #72]	; (8006cc4 <TIM_OC4_SetConfig+0xb8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d109      	bne.n	8006c94 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	019b      	lsls	r3, r3, #6
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	40014000 	.word	0x40014000
 8006cc4:	40014400 	.word	0x40014400

08006cc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	041b      	lsls	r3, r3, #16
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <TIM_OC5_SetConfig+0xa4>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d007      	beq.n	8006d32 <TIM_OC5_SetConfig+0x6a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a12      	ldr	r2, [pc, #72]	; (8006d70 <TIM_OC5_SetConfig+0xa8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_OC5_SetConfig+0x6a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a11      	ldr	r2, [pc, #68]	; (8006d74 <TIM_OC5_SetConfig+0xac>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d109      	bne.n	8006d46 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	621a      	str	r2, [r3, #32]
}
 8006d60:	bf00      	nop
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40014400 	.word	0x40014400

08006d78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	051b      	lsls	r3, r3, #20
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a14      	ldr	r2, [pc, #80]	; (8006e20 <TIM_OC6_SetConfig+0xa8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d007      	beq.n	8006de4 <TIM_OC6_SetConfig+0x6c>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a13      	ldr	r2, [pc, #76]	; (8006e24 <TIM_OC6_SetConfig+0xac>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_OC6_SetConfig+0x6c>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a12      	ldr	r2, [pc, #72]	; (8006e28 <TIM_OC6_SetConfig+0xb0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d109      	bne.n	8006df8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	029b      	lsls	r3, r3, #10
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	621a      	str	r2, [r3, #32]
}
 8006e12:	bf00      	nop
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40012c00 	.word	0x40012c00
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400

08006e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2201      	movs	r2, #1
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a1a      	ldr	r2, [r3, #32]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	401a      	ands	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1a      	ldr	r2, [r3, #32]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f003 031f 	and.w	r3, r3, #31
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	fa01 f303 	lsl.w	r3, r1, r3
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
	...

08006e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e04f      	b.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d108      	bne.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ec0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a14      	ldr	r2, [pc, #80]	; (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d009      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef8:	d004      	beq.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a10      	ldr	r2, [pc, #64]	; (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d10c      	bne.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40014000 	.word	0x40014000

08006f44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e060      	b.n	8007022 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	041b      	lsls	r3, r3, #16
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a14      	ldr	r2, [pc, #80]	; (8007030 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d115      	bne.n	8007010 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	051b      	lsls	r3, r3, #20
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	40012c00 	.word	0x40012c00

08007034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e040      	b.n	8007104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7f9 fddc 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2224      	movs	r2, #36	; 0x24
 800709c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0201 	bic.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fb2e 	bl	8007710 <UART_SetConfig>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e022      	b.n	8007104 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fd7c 	bl	8007bc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fe03 	bl	8007d08 <UART_CheckIdleState>
 8007102:	4603      	mov	r3, r0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b0ba      	sub	sp, #232	; 0xe8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007132:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007136:	f640 030f 	movw	r3, #2063	; 0x80f
 800713a:	4013      	ands	r3, r2
 800713c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d115      	bne.n	8007174 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00f      	beq.n	8007174 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	d009      	beq.n	8007174 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 82a6 	beq.w	80076b6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
      }
      return;
 8007172:	e2a0      	b.n	80076b6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8117 	beq.w	80073ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800717e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800718a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800718e:	4b85      	ldr	r3, [pc, #532]	; (80073a4 <HAL_UART_IRQHandler+0x298>)
 8007190:	4013      	ands	r3, r2
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 810a 	beq.w	80073ac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d011      	beq.n	80071c8 <HAL_UART_IRQHandler+0xbc>
 80071a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2201      	movs	r2, #1
 80071b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071be:	f043 0201 	orr.w	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d011      	beq.n	80071f8 <HAL_UART_IRQHandler+0xec>
 80071d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00b      	beq.n	80071f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2202      	movs	r2, #2
 80071e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ee:	f043 0204 	orr.w	r2, r3, #4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d011      	beq.n	8007228 <HAL_UART_IRQHandler+0x11c>
 8007204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00b      	beq.n	8007228 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2204      	movs	r2, #4
 8007216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800721e:	f043 0202 	orr.w	r2, r3, #2
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722c:	f003 0308 	and.w	r3, r3, #8
 8007230:	2b00      	cmp	r3, #0
 8007232:	d017      	beq.n	8007264 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d105      	bne.n	800724c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007244:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2208      	movs	r2, #8
 8007252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800725a:	f043 0208 	orr.w	r2, r3, #8
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800726c:	2b00      	cmp	r3, #0
 800726e:	d012      	beq.n	8007296 <HAL_UART_IRQHandler+0x18a>
 8007270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00c      	beq.n	8007296 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800728c:	f043 0220 	orr.w	r2, r3, #32
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 820c 	beq.w	80076ba <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00d      	beq.n	80072ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d005      	beq.n	80072ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d04f      	beq.n	800738e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fe17 	bl	8007f22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fe:	2b40      	cmp	r3, #64	; 0x40
 8007300:	d141      	bne.n	8007386 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3308      	adds	r3, #8
 8007308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800731c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3308      	adds	r3, #8
 800732a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800732e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800733a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800733e:	e841 2300 	strex	r3, r2, [r1]
 8007342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1d9      	bne.n	8007302 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007352:	2b00      	cmp	r3, #0
 8007354:	d013      	beq.n	800737e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735a:	4a13      	ldr	r2, [pc, #76]	; (80073a8 <HAL_UART_IRQHandler+0x29c>)
 800735c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	4618      	mov	r0, r3
 8007364:	f7fc fc44 	bl	8003bf0 <HAL_DMA_Abort_IT>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d017      	beq.n	800739e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800737c:	e00f      	b.n	800739e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f9b0 	bl	80076e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007384:	e00b      	b.n	800739e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f9ac 	bl	80076e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	e007      	b.n	800739e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f9a8 	bl	80076e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800739c:	e18d      	b.n	80076ba <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800739e:	bf00      	nop
    return;
 80073a0:	e18b      	b.n	80076ba <HAL_UART_IRQHandler+0x5ae>
 80073a2:	bf00      	nop
 80073a4:	04000120 	.word	0x04000120
 80073a8:	08007fe9 	.word	0x08007fe9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f040 8146 	bne.w	8007642 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 813f 	beq.w	8007642 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 8138 	beq.w	8007642 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2210      	movs	r2, #16
 80073d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	f040 80b4 	bne.w	8007552 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 815f 	beq.w	80076be <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800740a:	429a      	cmp	r2, r3
 800740c:	f080 8157 	bcs.w	80076be <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007416:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	f040 8085 	bne.w	8007536 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800745a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007462:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800746e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1da      	bne.n	800742c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3308      	adds	r3, #8
 800747c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3308      	adds	r3, #8
 8007496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800749a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800749e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e1      	bne.n	8007476 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3308      	adds	r3, #8
 80074b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e3      	bne.n	80074b2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007506:	f023 0310 	bic.w	r3, r3, #16
 800750a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007518:	65bb      	str	r3, [r7, #88]	; 0x58
 800751a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800751e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e4      	bne.n	80074f6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007530:	4618      	mov	r0, r3
 8007532:	f7fc fb1f 	bl	8003b74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007542:	b29b      	uxth	r3, r3
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	b29b      	uxth	r3, r3
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f8d4 	bl	80076f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007550:	e0b5      	b.n	80076be <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800755e:	b29b      	uxth	r3, r3
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 80a7 	beq.w	80076c2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80a2 	beq.w	80076c2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800758c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007592:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075a0:	647b      	str	r3, [r7, #68]	; 0x44
 80075a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e4      	bne.n	800757e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	623b      	str	r3, [r7, #32]
   return(result);
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	f023 0301 	bic.w	r3, r3, #1
 80075ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3308      	adds	r3, #8
 80075d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075d8:	633a      	str	r2, [r7, #48]	; 0x30
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e3      	bne.n	80075b4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2220      	movs	r2, #32
 80075f0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	60fb      	str	r3, [r7, #12]
   return(result);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0310 	bic.w	r3, r3, #16
 8007612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	617b      	str	r3, [r7, #20]
   return(result);
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e4      	bne.n	80075fe <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f85c 	bl	80076f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007640:	e03f      	b.n	80076c2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00e      	beq.n	800766c <HAL_UART_IRQHandler+0x560>
 800764e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d008      	beq.n	800766c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007662:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fcff 	bl	8008068 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800766a:	e02d      	b.n	80076c8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00e      	beq.n	8007696 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01c      	beq.n	80076c6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
    }
    return;
 8007694:	e017      	b.n	80076c6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d012      	beq.n	80076c8 <HAL_UART_IRQHandler+0x5bc>
 80076a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fcb0 	bl	8008014 <UART_EndTransmit_IT>
    return;
 80076b4:	e008      	b.n	80076c8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80076b6:	bf00      	nop
 80076b8:	e006      	b.n	80076c8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80076ba:	bf00      	nop
 80076bc:	e004      	b.n	80076c8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80076be:	bf00      	nop
 80076c0:	e002      	b.n	80076c8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80076c2:	bf00      	nop
 80076c4:	e000      	b.n	80076c8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80076c6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80076c8:	37e8      	adds	r7, #232	; 0xe8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop

080076d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007714:	b08a      	sub	sp, #40	; 0x28
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	431a      	orrs	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	431a      	orrs	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	4313      	orrs	r3, r2
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b9e      	ldr	r3, [pc, #632]	; (80079b8 <UART_SetConfig+0x2a8>)
 8007740:	4013      	ands	r3, r2
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007748:	430b      	orrs	r3, r1
 800774a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a93      	ldr	r2, [pc, #588]	; (80079bc <UART_SetConfig+0x2ac>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d004      	beq.n	800777c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007778:	4313      	orrs	r3, r2
 800777a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778c:	430a      	orrs	r2, r1
 800778e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a8a      	ldr	r2, [pc, #552]	; (80079c0 <UART_SetConfig+0x2b0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d126      	bne.n	80077e8 <UART_SetConfig+0xd8>
 800779a:	4b8a      	ldr	r3, [pc, #552]	; (80079c4 <UART_SetConfig+0x2b4>)
 800779c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d81b      	bhi.n	80077e0 <UART_SetConfig+0xd0>
 80077a8:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <UART_SetConfig+0xa0>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	080077c1 	.word	0x080077c1
 80077b4:	080077d1 	.word	0x080077d1
 80077b8:	080077c9 	.word	0x080077c9
 80077bc:	080077d9 	.word	0x080077d9
 80077c0:	2301      	movs	r3, #1
 80077c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c6:	e0ab      	b.n	8007920 <UART_SetConfig+0x210>
 80077c8:	2302      	movs	r3, #2
 80077ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ce:	e0a7      	b.n	8007920 <UART_SetConfig+0x210>
 80077d0:	2304      	movs	r3, #4
 80077d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d6:	e0a3      	b.n	8007920 <UART_SetConfig+0x210>
 80077d8:	2308      	movs	r3, #8
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077de:	e09f      	b.n	8007920 <UART_SetConfig+0x210>
 80077e0:	2310      	movs	r3, #16
 80077e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077e6:	e09b      	b.n	8007920 <UART_SetConfig+0x210>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a76      	ldr	r2, [pc, #472]	; (80079c8 <UART_SetConfig+0x2b8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d138      	bne.n	8007864 <UART_SetConfig+0x154>
 80077f2:	4b74      	ldr	r3, [pc, #464]	; (80079c4 <UART_SetConfig+0x2b4>)
 80077f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f8:	f003 030c 	and.w	r3, r3, #12
 80077fc:	2b0c      	cmp	r3, #12
 80077fe:	d82d      	bhi.n	800785c <UART_SetConfig+0x14c>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <UART_SetConfig+0xf8>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	0800783d 	.word	0x0800783d
 800780c:	0800785d 	.word	0x0800785d
 8007810:	0800785d 	.word	0x0800785d
 8007814:	0800785d 	.word	0x0800785d
 8007818:	0800784d 	.word	0x0800784d
 800781c:	0800785d 	.word	0x0800785d
 8007820:	0800785d 	.word	0x0800785d
 8007824:	0800785d 	.word	0x0800785d
 8007828:	08007845 	.word	0x08007845
 800782c:	0800785d 	.word	0x0800785d
 8007830:	0800785d 	.word	0x0800785d
 8007834:	0800785d 	.word	0x0800785d
 8007838:	08007855 	.word	0x08007855
 800783c:	2300      	movs	r3, #0
 800783e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007842:	e06d      	b.n	8007920 <UART_SetConfig+0x210>
 8007844:	2302      	movs	r3, #2
 8007846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800784a:	e069      	b.n	8007920 <UART_SetConfig+0x210>
 800784c:	2304      	movs	r3, #4
 800784e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007852:	e065      	b.n	8007920 <UART_SetConfig+0x210>
 8007854:	2308      	movs	r3, #8
 8007856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800785a:	e061      	b.n	8007920 <UART_SetConfig+0x210>
 800785c:	2310      	movs	r3, #16
 800785e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007862:	e05d      	b.n	8007920 <UART_SetConfig+0x210>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a58      	ldr	r2, [pc, #352]	; (80079cc <UART_SetConfig+0x2bc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d125      	bne.n	80078ba <UART_SetConfig+0x1aa>
 800786e:	4b55      	ldr	r3, [pc, #340]	; (80079c4 <UART_SetConfig+0x2b4>)
 8007870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007874:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007878:	2b30      	cmp	r3, #48	; 0x30
 800787a:	d016      	beq.n	80078aa <UART_SetConfig+0x19a>
 800787c:	2b30      	cmp	r3, #48	; 0x30
 800787e:	d818      	bhi.n	80078b2 <UART_SetConfig+0x1a2>
 8007880:	2b20      	cmp	r3, #32
 8007882:	d00a      	beq.n	800789a <UART_SetConfig+0x18a>
 8007884:	2b20      	cmp	r3, #32
 8007886:	d814      	bhi.n	80078b2 <UART_SetConfig+0x1a2>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <UART_SetConfig+0x182>
 800788c:	2b10      	cmp	r3, #16
 800788e:	d008      	beq.n	80078a2 <UART_SetConfig+0x192>
 8007890:	e00f      	b.n	80078b2 <UART_SetConfig+0x1a2>
 8007892:	2300      	movs	r3, #0
 8007894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007898:	e042      	b.n	8007920 <UART_SetConfig+0x210>
 800789a:	2302      	movs	r3, #2
 800789c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a0:	e03e      	b.n	8007920 <UART_SetConfig+0x210>
 80078a2:	2304      	movs	r3, #4
 80078a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a8:	e03a      	b.n	8007920 <UART_SetConfig+0x210>
 80078aa:	2308      	movs	r3, #8
 80078ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b0:	e036      	b.n	8007920 <UART_SetConfig+0x210>
 80078b2:	2310      	movs	r3, #16
 80078b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b8:	e032      	b.n	8007920 <UART_SetConfig+0x210>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a3f      	ldr	r2, [pc, #252]	; (80079bc <UART_SetConfig+0x2ac>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d12a      	bne.n	800791a <UART_SetConfig+0x20a>
 80078c4:	4b3f      	ldr	r3, [pc, #252]	; (80079c4 <UART_SetConfig+0x2b4>)
 80078c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078d2:	d01a      	beq.n	800790a <UART_SetConfig+0x1fa>
 80078d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078d8:	d81b      	bhi.n	8007912 <UART_SetConfig+0x202>
 80078da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078de:	d00c      	beq.n	80078fa <UART_SetConfig+0x1ea>
 80078e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e4:	d815      	bhi.n	8007912 <UART_SetConfig+0x202>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <UART_SetConfig+0x1e2>
 80078ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ee:	d008      	beq.n	8007902 <UART_SetConfig+0x1f2>
 80078f0:	e00f      	b.n	8007912 <UART_SetConfig+0x202>
 80078f2:	2300      	movs	r3, #0
 80078f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078f8:	e012      	b.n	8007920 <UART_SetConfig+0x210>
 80078fa:	2302      	movs	r3, #2
 80078fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007900:	e00e      	b.n	8007920 <UART_SetConfig+0x210>
 8007902:	2304      	movs	r3, #4
 8007904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007908:	e00a      	b.n	8007920 <UART_SetConfig+0x210>
 800790a:	2308      	movs	r3, #8
 800790c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007910:	e006      	b.n	8007920 <UART_SetConfig+0x210>
 8007912:	2310      	movs	r3, #16
 8007914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007918:	e002      	b.n	8007920 <UART_SetConfig+0x210>
 800791a:	2310      	movs	r3, #16
 800791c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a25      	ldr	r2, [pc, #148]	; (80079bc <UART_SetConfig+0x2ac>)
 8007926:	4293      	cmp	r3, r2
 8007928:	f040 808a 	bne.w	8007a40 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800792c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007930:	2b08      	cmp	r3, #8
 8007932:	d824      	bhi.n	800797e <UART_SetConfig+0x26e>
 8007934:	a201      	add	r2, pc, #4	; (adr r2, 800793c <UART_SetConfig+0x22c>)
 8007936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793a:	bf00      	nop
 800793c:	08007961 	.word	0x08007961
 8007940:	0800797f 	.word	0x0800797f
 8007944:	08007969 	.word	0x08007969
 8007948:	0800797f 	.word	0x0800797f
 800794c:	0800796f 	.word	0x0800796f
 8007950:	0800797f 	.word	0x0800797f
 8007954:	0800797f 	.word	0x0800797f
 8007958:	0800797f 	.word	0x0800797f
 800795c:	08007977 	.word	0x08007977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007960:	f7fd fb50 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 8007964:	61f8      	str	r0, [r7, #28]
        break;
 8007966:	e010      	b.n	800798a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007968:	4b19      	ldr	r3, [pc, #100]	; (80079d0 <UART_SetConfig+0x2c0>)
 800796a:	61fb      	str	r3, [r7, #28]
        break;
 800796c:	e00d      	b.n	800798a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800796e:	f7fd fab1 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8007972:	61f8      	str	r0, [r7, #28]
        break;
 8007974:	e009      	b.n	800798a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800797a:	61fb      	str	r3, [r7, #28]
        break;
 800797c:	e005      	b.n	800798a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007988:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8109 	beq.w	8007ba4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	4613      	mov	r3, r2
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	4413      	add	r3, r2
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d305      	bcc.n	80079ae <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d912      	bls.n	80079d4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079b4:	e0f6      	b.n	8007ba4 <UART_SetConfig+0x494>
 80079b6:	bf00      	nop
 80079b8:	efff69f3 	.word	0xefff69f3
 80079bc:	40008000 	.word	0x40008000
 80079c0:	40013800 	.word	0x40013800
 80079c4:	40021000 	.word	0x40021000
 80079c8:	40004400 	.word	0x40004400
 80079cc:	40004800 	.word	0x40004800
 80079d0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	2200      	movs	r2, #0
 80079d8:	461c      	mov	r4, r3
 80079da:	4615      	mov	r5, r2
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	022b      	lsls	r3, r5, #8
 80079e6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80079ea:	0222      	lsls	r2, r4, #8
 80079ec:	68f9      	ldr	r1, [r7, #12]
 80079ee:	6849      	ldr	r1, [r1, #4]
 80079f0:	0849      	lsrs	r1, r1, #1
 80079f2:	2000      	movs	r0, #0
 80079f4:	4688      	mov	r8, r1
 80079f6:	4681      	mov	r9, r0
 80079f8:	eb12 0a08 	adds.w	sl, r2, r8
 80079fc:	eb43 0b09 	adc.w	fp, r3, r9
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a0e:	4650      	mov	r0, sl
 8007a10:	4659      	mov	r1, fp
 8007a12:	f7f8 fc2d 	bl	8000270 <__aeabi_uldivmod>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a24:	d308      	bcc.n	8007a38 <UART_SetConfig+0x328>
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a2c:	d204      	bcs.n	8007a38 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	60da      	str	r2, [r3, #12]
 8007a36:	e0b5      	b.n	8007ba4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a3e:	e0b1      	b.n	8007ba4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a48:	d15d      	bne.n	8007b06 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d827      	bhi.n	8007aa2 <UART_SetConfig+0x392>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <UART_SetConfig+0x348>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a7d 	.word	0x08007a7d
 8007a5c:	08007a85 	.word	0x08007a85
 8007a60:	08007a8d 	.word	0x08007a8d
 8007a64:	08007aa3 	.word	0x08007aa3
 8007a68:	08007a93 	.word	0x08007a93
 8007a6c:	08007aa3 	.word	0x08007aa3
 8007a70:	08007aa3 	.word	0x08007aa3
 8007a74:	08007aa3 	.word	0x08007aa3
 8007a78:	08007a9b 	.word	0x08007a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a7c:	f7fd fac2 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 8007a80:	61f8      	str	r0, [r7, #28]
        break;
 8007a82:	e014      	b.n	8007aae <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a84:	f7fd fad4 	bl	8005030 <HAL_RCC_GetPCLK2Freq>
 8007a88:	61f8      	str	r0, [r7, #28]
        break;
 8007a8a:	e010      	b.n	8007aae <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a8c:	4b4c      	ldr	r3, [pc, #304]	; (8007bc0 <UART_SetConfig+0x4b0>)
 8007a8e:	61fb      	str	r3, [r7, #28]
        break;
 8007a90:	e00d      	b.n	8007aae <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a92:	f7fd fa1f 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8007a96:	61f8      	str	r0, [r7, #28]
        break;
 8007a98:	e009      	b.n	8007aae <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9e:	61fb      	str	r3, [r7, #28]
        break;
 8007aa0:	e005      	b.n	8007aae <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007aac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d077      	beq.n	8007ba4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	005a      	lsls	r2, r3, #1
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	085b      	lsrs	r3, r3, #1
 8007abe:	441a      	add	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	2b0f      	cmp	r3, #15
 8007ace:	d916      	bls.n	8007afe <UART_SetConfig+0x3ee>
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ad6:	d212      	bcs.n	8007afe <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f023 030f 	bic.w	r3, r3, #15
 8007ae0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	f003 0307 	and.w	r3, r3, #7
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	8afb      	ldrh	r3, [r7, #22]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	8afa      	ldrh	r2, [r7, #22]
 8007afa:	60da      	str	r2, [r3, #12]
 8007afc:	e052      	b.n	8007ba4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b04:	e04e      	b.n	8007ba4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d827      	bhi.n	8007b5e <UART_SetConfig+0x44e>
 8007b0e:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <UART_SetConfig+0x404>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b39 	.word	0x08007b39
 8007b18:	08007b41 	.word	0x08007b41
 8007b1c:	08007b49 	.word	0x08007b49
 8007b20:	08007b5f 	.word	0x08007b5f
 8007b24:	08007b4f 	.word	0x08007b4f
 8007b28:	08007b5f 	.word	0x08007b5f
 8007b2c:	08007b5f 	.word	0x08007b5f
 8007b30:	08007b5f 	.word	0x08007b5f
 8007b34:	08007b57 	.word	0x08007b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b38:	f7fd fa64 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 8007b3c:	61f8      	str	r0, [r7, #28]
        break;
 8007b3e:	e014      	b.n	8007b6a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b40:	f7fd fa76 	bl	8005030 <HAL_RCC_GetPCLK2Freq>
 8007b44:	61f8      	str	r0, [r7, #28]
        break;
 8007b46:	e010      	b.n	8007b6a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b48:	4b1d      	ldr	r3, [pc, #116]	; (8007bc0 <UART_SetConfig+0x4b0>)
 8007b4a:	61fb      	str	r3, [r7, #28]
        break;
 8007b4c:	e00d      	b.n	8007b6a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b4e:	f7fd f9c1 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8007b52:	61f8      	str	r0, [r7, #28]
        break;
 8007b54:	e009      	b.n	8007b6a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5a:	61fb      	str	r3, [r7, #28]
        break;
 8007b5c:	e005      	b.n	8007b6a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b68:	bf00      	nop
    }

    if (pclk != 0U)
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d019      	beq.n	8007ba4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	085a      	lsrs	r2, r3, #1
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	441a      	add	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d909      	bls.n	8007b9e <UART_SetConfig+0x48e>
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b90:	d205      	bcs.n	8007b9e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60da      	str	r2, [r3, #12]
 8007b9c:	e002      	b.n	8007ba4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007bb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3728      	adds	r7, #40	; 0x28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bbe:	bf00      	nop
 8007bc0:	00f42400 	.word	0x00f42400

08007bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01a      	beq.n	8007cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cc2:	d10a      	bne.n	8007cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	605a      	str	r2, [r3, #4]
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d18:	f7f9 fa04 	bl	8001124 <HAL_GetTick>
 8007d1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d10e      	bne.n	8007d4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f82d 	bl	8007d9a <UART_WaitOnFlagUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e023      	b.n	8007d92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d10e      	bne.n	8007d76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f817 	bl	8007d9a <UART_WaitOnFlagUntilTimeout>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e00d      	b.n	8007d92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b09c      	sub	sp, #112	; 0x70
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	603b      	str	r3, [r7, #0]
 8007da6:	4613      	mov	r3, r2
 8007da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007daa:	e0a5      	b.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db2:	f000 80a1 	beq.w	8007ef8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db6:	f7f9 f9b5 	bl	8001124 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d302      	bcc.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x32>
 8007dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d13e      	bne.n	8007e4a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ddc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007de0:	667b      	str	r3, [r7, #100]	; 0x64
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007df0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e6      	bne.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	663b      	str	r3, [r7, #96]	; 0x60
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e5      	bne.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2220      	movs	r2, #32
 8007e36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e067      	b.n	8007f1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d04f      	beq.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e66:	d147      	bne.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e70:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	e853 3f00 	ldrex	r3, [r3]
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e90:	637b      	str	r3, [r7, #52]	; 0x34
 8007e92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e6      	bne.n	8007e72 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f023 0301 	bic.w	r3, r3, #1
 8007eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ec4:	623a      	str	r2, [r7, #32]
 8007ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	69f9      	ldr	r1, [r7, #28]
 8007eca:	6a3a      	ldr	r2, [r7, #32]
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e5      	bne.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2220      	movs	r2, #32
 8007edc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e010      	b.n	8007f1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69da      	ldr	r2, [r3, #28]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4013      	ands	r3, r2
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	bf0c      	ite	eq
 8007f08:	2301      	moveq	r3, #1
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	f43f af4a 	beq.w	8007dac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3770      	adds	r7, #112	; 0x70
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b095      	sub	sp, #84	; 0x54
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f48:	643b      	str	r3, [r7, #64]	; 0x40
 8007f4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e6      	bne.n	8007f2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3308      	adds	r3, #8
 8007f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f023 0301 	bic.w	r3, r3, #1
 8007f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3308      	adds	r3, #8
 8007f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e5      	bne.n	8007f5c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d118      	bne.n	8007fca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f023 0310 	bic.w	r3, r3, #16
 8007fac:	647b      	str	r3, [r7, #68]	; 0x44
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fb6:	61bb      	str	r3, [r7, #24]
 8007fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6979      	ldr	r1, [r7, #20]
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e6      	bne.n	8007f98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007fdc:	bf00      	nop
 8007fde:	3754      	adds	r7, #84	; 0x54
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7ff fb6c 	bl	80076e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800800c:	bf00      	nop
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	60bb      	str	r3, [r7, #8]
   return(result);
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008030:	61fb      	str	r3, [r7, #28]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	61bb      	str	r3, [r7, #24]
 800803c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6979      	ldr	r1, [r7, #20]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	613b      	str	r3, [r7, #16]
   return(result);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e6      	bne.n	800801c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff fb38 	bl	80076d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008060:	bf00      	nop
 8008062:	3720      	adds	r7, #32
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <stimLib_stimInit>:
/*
 BRIEF
 - Initalize stimulation library. Preempt system resources and peripherals.
 */
stim_lib_rsp_t stimLib_stimInit(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
	stim_lib_rsp_t rslt;

	TD_DEBUG_PRINT(("STIM_LIB: stimLib_stimInit()\n"));
 8008082:	480c      	ldr	r0, [pc, #48]	; (80080b4 <stimLib_stimInit+0x38>)
 8008084:	f002 f86a 	bl	800a15c <puts>

	if (stimLib_stateGet() != stim_lib_state_uninitialized)
 8008088:	f001 f8a0 	bl	80091cc <stimLib_stateGet>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <stimLib_stimInit+0x1a>
	{
		return stim_lib_stim_rsp_invalid_status;
 8008092:	2303      	movs	r3, #3
 8008094:	e00a      	b.n	80080ac <stimLib_stimInit+0x30>
	}

	rslt = stimLib_initResrc();
 8008096:	f000 f92f 	bl	80082f8 <stimLib_initResrc>
 800809a:	4603      	mov	r3, r0
 800809c:	71fb      	strb	r3, [r7, #7]

	if (rslt == stim_lib_stim_rsp_ok)
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <stimLib_stimInit+0x2e>
	{
		stimLib_stateSet(stim_lib_state_idle);
 80080a4:	2001      	movs	r0, #1
 80080a6:	f001 f89d 	bl	80091e4 <stimLib_stateSet>
	}

	return rslt;
 80080aa:	79fb      	ldrb	r3, [r7, #7]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	0800b0e4 	.word	0x0800b0e4

080080b8 <stimLib_stimSignalConfig>:
/*
 BRIEF
 - Setup signal pusle of stimulation configuration.
 */
stim_lib_rsp_t stimLib_stimSignalConfig(stim_signal_cfg_t *signal_cfg)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	if (signal_cfg == NULL || stimLib_signalParamCheck(signal_cfg) == false)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d008      	beq.n	80080d8 <stimLib_stimSignalConfig+0x20>
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f001 f98c 	bl	80093e4 <stimLib_signalParamCheck>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f083 0301 	eor.w	r3, r3, #1
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <stimLib_stimSignalConfig+0x24>
	{
		return stim_lib_stim_rsp_invalid_parameter;
 80080d8:	2304      	movs	r3, #4
 80080da:	e00a      	b.n	80080f2 <stimLib_stimSignalConfig+0x3a>
	}

	if (stimLib_stateGet() == stim_lib_state_idle)
 80080dc:	f001 f876 	bl	80091cc <stimLib_stateGet>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d104      	bne.n	80080f0 <stimLib_stimSignalConfig+0x38>
	{
		stimLib_stateSigParamSet(signal_cfg);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 f8ec 	bl	80092c4 <stimLib_stateSigParamSet>

		return stim_lib_stim_rsp_ok;
 80080ec:	2300      	movs	r3, #0
 80080ee:	e000      	b.n	80080f2 <stimLib_stimSignalConfig+0x3a>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 80080f0:	2303      	movs	r3, #3
	}
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <stimLib_stimTriggerConfig>:
/*
 BRIEF
 - Setup trigger of stimulation configuration.
 */
stim_lib_rsp_t stimLib_stimTriggerConfig(stim_trg_cfg_t *trg_cfg)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
	if (trg_cfg == NULL || stimLib_triggerParamCheck(trg_cfg) == false)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d008      	beq.n	800811a <stimLib_stimTriggerConfig+0x20>
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 f9a3 	bl	8009454 <stimLib_triggerParamCheck>
 800810e:	4603      	mov	r3, r0
 8008110:	f083 0301 	eor.w	r3, r3, #1
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <stimLib_stimTriggerConfig+0x24>
	{
		return stim_lib_stim_rsp_invalid_parameter;
 800811a:	2304      	movs	r3, #4
 800811c:	e00a      	b.n	8008134 <stimLib_stimTriggerConfig+0x3a>
	}

	if (stimLib_stateGet() == stim_lib_state_idle)
 800811e:	f001 f855 	bl	80091cc <stimLib_stateGet>
 8008122:	4603      	mov	r3, r0
 8008124:	2b01      	cmp	r3, #1
 8008126:	d104      	bne.n	8008132 <stimLib_stimTriggerConfig+0x38>
	{
		stimLib_stateTrgParamSet(trg_cfg);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 f8ef 	bl	800930c <stimLib_stateTrgParamSet>

		return stim_lib_stim_rsp_ok;
 800812e:	2300      	movs	r3, #0
 8008130:	e000      	b.n	8008134 <stimLib_stimTriggerConfig+0x3a>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8008132:	2303      	movs	r3, #3
	}

}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <stimLib_stimSessionStart>:
/*
 BRIEF
 - Start stimulation session.
 */
stim_lib_rsp_t stimLib_stimSessionStart(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
	bool param_rslt;

	if (stimLib_stateGet() == stim_lib_state_idle)
 8008142:	f001 f843 	bl	80091cc <stimLib_stateGet>
 8008146:	4603      	mov	r3, r0
 8008148:	2b01      	cmp	r3, #1
 800814a:	d11a      	bne.n	8008182 <stimLib_stimSessionStart+0x46>
	{
		param_rslt = stimLib_stateSigParamCheck();
 800814c:	f001 f90a 	bl	8009364 <stimLib_stateSigParamCheck>
 8008150:	4603      	mov	r3, r0
 8008152:	71fb      	strb	r3, [r7, #7]

		if (param_rslt == true)
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d011      	beq.n	800817e <stimLib_stimSessionStart+0x42>
		{
			param_rslt = stimLib_paramSetting();
 800815a:	f001 f98b 	bl	8009474 <stimLib_paramSetting>
 800815e:	4603      	mov	r3, r0
 8008160:	71fb      	strb	r3, [r7, #7]

			/* VOLTAGE CONTROL PRESTART */
			if (STIM_LIB_STATE_TRG_VOLT_PRESTART == true)
 8008162:	4b0a      	ldr	r3, [pc, #40]	; (800818c <stimLib_stimSessionStart+0x50>)
 8008164:	7c1b      	ldrb	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <stimLib_stimSessionStart+0x32>
				 * STEP UP VOLTAGE CONTROL START
				 *
				 * START STEPUP PULSE TIMER :: TIMER 1
				 * START STEPUP FEEDBACK TIMER :: TIMER 6
				 * */
				stimLib_stepupStart();
 800816a:	f001 fe73 	bl	8009e54 <stimLib_stepupStart>
			}

			stimLib_stateSet(stim_lib_state_session_idle);
 800816e:	2002      	movs	r0, #2
 8008170:	f001 f838 	bl	80091e4 <stimLib_stateSet>
			TD_DEBUG_PRINT(("STIM_LIB: Session Start >> Session IDLE\n"));
 8008174:	4806      	ldr	r0, [pc, #24]	; (8008190 <stimLib_stimSessionStart+0x54>)
 8008176:	f001 fff1 	bl	800a15c <puts>

			return stim_lib_stim_rsp_ok;
 800817a:	2300      	movs	r3, #0
 800817c:	e002      	b.n	8008184 <stimLib_stimSessionStart+0x48>
		}
		else
		{
			return stim_lib_stim_rsp_invalid_parameter;
 800817e:	2304      	movs	r3, #4
 8008180:	e000      	b.n	8008184 <stimLib_stimSessionStart+0x48>
		}
	}

	else
	{
		return stim_lib_stim_rsp_invalid_status;
 8008182:	2303      	movs	r3, #3
	}
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	200003ec 	.word	0x200003ec
 8008190:	0800b104 	.word	0x0800b104

08008194 <stimLib_stimStart>:
/*
 BRIEF
 - Start stimulation signal output in a session.
 */
stim_lib_rsp_t stimLib_stimStart(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0

	if (stimLib_stateGet() == stim_lib_state_session_idle)
 8008198:	f001 f818 	bl	80091cc <stimLib_stateGet>
 800819c:	4603      	mov	r3, r0
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d106      	bne.n	80081b0 <stimLib_stimStart+0x1c>
	{
		stimLib_stimPulseStart();
 80081a2:	f001 f981 	bl	80094a8 <stimLib_stimPulseStart>
		stimLib_stateSet(stim_lib_state_stimulating);
 80081a6:	2003      	movs	r0, #3
 80081a8:	f001 f81c 	bl	80091e4 <stimLib_stateSet>

		return stim_lib_stim_rsp_ok;
 80081ac:	2300      	movs	r3, #0
 80081ae:	e000      	b.n	80081b2 <stimLib_stimStart+0x1e>
	}
	else
	{
		return stim_lib_stim_rsp_invalid_status;
 80081b0:	2303      	movs	r3, #3
	}
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <stimLib_chkSystem>:
#include "stim_lib_common.h"

#include "td_debug.h"

bool stimLib_chkSystem(void)
{
 80081b6:	b480      	push	{r7}
 80081b8:	af00      	add	r7, sp, #0
#ifdef	STM32L412xx
	return true;
 80081ba:	2301      	movs	r3, #1
#else
	return false;
#endif

}
 80081bc:	4618      	mov	r0, r3
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
	...

080081c8 <stimLib_errorHandle>:
#include "stim_lib_error.h"

#include "td_debug.h"

void stimLib_errorHandle(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
	 1. Stop voltage
	 2. Stop Stimulation
	 3. Set state to error
	 ...
	 */
	stimLib_stepupStop();
 80081cc:	f001 fe52 	bl	8009e74 <stimLib_stepupStop>
	stimLib_stimPulseStop();
 80081d0:	f001 f984 	bl	80094dc <stimLib_stimPulseStop>
	stimLib_paramClear();
 80081d4:	f001 f95f 	bl	8009496 <stimLib_paramClear>
	stimLib_stateSet(stim_lib_state_error);
 80081d8:	2005      	movs	r0, #5
 80081da:	f001 f803 	bl	80091e4 <stimLib_stateSet>

	sitmLib_appErrorHandle_callback();
 80081de:	f000 f807 	bl	80081f0 <sitmLib_appErrorHandle_callback>

	TD_DEBUG_PRINT(("STIM_LIB: ERROR!!\n"));
 80081e2:	4802      	ldr	r0, [pc, #8]	; (80081ec <stimLib_errorHandle+0x24>)
 80081e4:	f001 ffba 	bl	800a15c <puts>
}
 80081e8:	bf00      	nop
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	0800b12c 	.word	0x0800b12c

080081f0 <sitmLib_appErrorHandle_callback>:

void sitmLib_appErrorHandle_callback(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
	...

08008200 <stimLib_initResource>:
#define STIM_LIB_RESOURCE_INIT_ERROR				false
#define STIM_LIB_RESOURCE_INIT_OK					true


static void stimLib_initResource(bool *resource_check)
{
 8008200:	b590      	push	{r4, r7, lr}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	uint8_t i;

	if (resource_check == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d06d      	beq.n	80082ea <stimLib_initResource+0xea>
	{
		return;
	}

	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]
 8008212:	e007      	b.n	8008224 <stimLib_initResource+0x24>
	{
		resource_check[i] = false;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	4413      	add	r3, r2
 800821a:	2200      	movs	r2, #0
 800821c:	701a      	strb	r2, [r3, #0]
	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	3301      	adds	r3, #1
 8008222:	73fb      	strb	r3, [r7, #15]
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	2b06      	cmp	r3, #6
 8008228:	d9f4      	bls.n	8008214 <stimLib_initResource+0x14>
	}

	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
 800822e:	e058      	b.n	80082e2 <stimLib_initResource+0xe2>
	{
		switch (i)
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	2b06      	cmp	r3, #6
 8008234:	d848      	bhi.n	80082c8 <stimLib_initResource+0xc8>
 8008236:	a201      	add	r2, pc, #4	; (adr r2, 800823c <stimLib_initResource+0x3c>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	08008259 	.word	0x08008259
 8008240:	08008269 	.word	0x08008269
 8008244:	08008279 	.word	0x08008279
 8008248:	08008289 	.word	0x08008289
 800824c:	08008299 	.word	0x08008299
 8008250:	080082a9 	.word	0x080082a9
 8008254:	080082b9 	.word	0x080082b9
		{
		case stim_lib_resrc_dma:
			resource_check[i] = stimLib_dmaInit();
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	18d4      	adds	r4, r2, r3
 800825e:	f000 fa31 	bl	80086c4 <stimLib_dmaInit>
 8008262:	4603      	mov	r3, r0
 8008264:	7023      	strb	r3, [r4, #0]
			break;
 8008266:	e030      	b.n	80082ca <stimLib_initResource+0xca>

		case stim_lib_resrc_tim1:
			resource_check[i] = stimLib_tim1_Init();
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	18d4      	adds	r4, r2, r3
 800826e:	f000 fa63 	bl	8008738 <stimLib_tim1_Init>
 8008272:	4603      	mov	r3, r0
 8008274:	7023      	strb	r3, [r4, #0]
			break;
 8008276:	e028      	b.n	80082ca <stimLib_initResource+0xca>

		case stim_lib_resrc_tim2:
			resource_check[i] = stimLib_tim2_Init();
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	18d4      	adds	r4, r2, r3
 800827e:	f000 faef 	bl	8008860 <stimLib_tim2_Init>
 8008282:	4603      	mov	r3, r0
 8008284:	7023      	strb	r3, [r4, #0]
			break;
 8008286:	e020      	b.n	80082ca <stimLib_initResource+0xca>

		case stim_lib_resrc_tim6:
			resource_check[i] = stimLib_tim6_Init();
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	18d4      	adds	r4, r2, r3
 800828e:	f000 fbb1 	bl	80089f4 <stimLib_tim6_Init>
 8008292:	4603      	mov	r3, r0
 8008294:	7023      	strb	r3, [r4, #0]
			break;
 8008296:	e018      	b.n	80082ca <stimLib_initResource+0xca>

		case stim_lib_resrc_adc1:
			resource_check[i] = stimLib_adc1_Init();
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	18d4      	adds	r4, r2, r3
 800829e:	f000 fc07 	bl	8008ab0 <stimLib_adc1_Init>
 80082a2:	4603      	mov	r3, r0
 80082a4:	7023      	strb	r3, [r4, #0]
			break;
 80082a6:	e010      	b.n	80082ca <stimLib_initResource+0xca>

		case stim_lib_resrc_adc2:
			resource_check[i] = stimLib_adc2_Init();
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	18d4      	adds	r4, r2, r3
 80082ae:	f000 fca7 	bl	8008c00 <stimLib_adc2_Init>
 80082b2:	4603      	mov	r3, r0
 80082b4:	7023      	strb	r3, [r4, #0]
			break;
 80082b6:	e008      	b.n	80082ca <stimLib_initResource+0xca>

		case stim_lib_resrc_gpio:
			resource_check[i] = stimLib_gpioInit();
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	18d4      	adds	r4, r2, r3
 80082be:	f000 f993 	bl	80085e8 <stimLib_gpioInit>
 80082c2:	4603      	mov	r3, r0
 80082c4:	7023      	strb	r3, [r4, #0]
			break;
 80082c6:	e000      	b.n	80082ca <stimLib_initResource+0xca>

		default:
			break;
 80082c8:	bf00      	nop
		}

		if (resource_check[i] == false)
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	4413      	add	r3, r2
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	f083 0301 	eor.w	r3, r3, #1
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d108      	bne.n	80082ee <stimLib_initResource+0xee>
	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	3301      	adds	r3, #1
 80082e0:	73fb      	strb	r3, [r7, #15]
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	2b06      	cmp	r3, #6
 80082e6:	d9a3      	bls.n	8008230 <stimLib_initResource+0x30>
 80082e8:	e002      	b.n	80082f0 <stimLib_initResource+0xf0>
		return;
 80082ea:	bf00      	nop
 80082ec:	e000      	b.n	80082f0 <stimLib_initResource+0xf0>
		{
			break;
 80082ee:	bf00      	nop
		}
	}
}
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd90      	pop	{r4, r7, pc}
 80082f6:	bf00      	nop

080082f8 <stimLib_initResrc>:

uint8_t stimLib_initResrc(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
	uint8_t i;
	bool resrc_chk[stim_lib_resrc_max] =
 80082fe:	463b      	mov	r3, r7
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	f8c3 2003 	str.w	r2, [r3, #3]
	{ false, };

	/* Check system environment */
	if (stimLib_chkSystem() == false)
 8008308:	f7ff ff55 	bl	80081b6 <stimLib_chkSystem>
 800830c:	4603      	mov	r3, r0
 800830e:	f083 0301 	eor.w	r3, r3, #1
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <stimLib_initResrc+0x24>
	{
		return stim_lib_stim_rsp_unsupported;
 8008318:	2305      	movs	r3, #5
 800831a:	e04f      	b.n	80083bc <stimLib_initResrc+0xc4>
	}

	/* Check system clock */
	if (SystemCoreClock != STIM_LIB_SYSTEM_CLOCK_HZ)
 800831c:	4b29      	ldr	r3, [pc, #164]	; (80083c4 <stimLib_initResrc+0xcc>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a29      	ldr	r2, [pc, #164]	; (80083c8 <stimLib_initResrc+0xd0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d001      	beq.n	800832a <stimLib_initResrc+0x32>
	{
		return stim_lib_stim_rsp_unsupported;
 8008326:	2305      	movs	r3, #5
 8008328:	e048      	b.n	80083bc <stimLib_initResrc+0xc4>
	}

	if (stimLib_stateGet() != stim_lib_state_uninitialized)
 800832a:	f000 ff4f 	bl	80091cc <stimLib_stateGet>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <stimLib_initResrc+0x40>
	{
		return stim_lib_stim_rsp_invalid_status;
 8008334:	2303      	movs	r3, #3
 8008336:	e041      	b.n	80083bc <stimLib_initResrc+0xc4>
	}
	else
	{
		/* Resource Init */
		stimLib_initResource(resrc_chk);
 8008338:	463b      	mov	r3, r7
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff ff60 	bl	8008200 <stimLib_initResource>
	}

	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 8008340:	2300      	movs	r3, #0
 8008342:	71fb      	strb	r3, [r7, #7]
 8008344:	e00c      	b.n	8008360 <stimLib_initResrc+0x68>
	{
		if (resrc_chk[i] == false)
 8008346:	79fb      	ldrb	r3, [r7, #7]
 8008348:	3308      	adds	r3, #8
 800834a:	443b      	add	r3, r7
 800834c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8008350:	f083 0301 	eor.w	r3, r3, #1
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <stimLib_initResrc+0x70>
	for (i = STIM_LIB_RESRC_START; i < stim_lib_resrc_max; i++)
 800835a:	79fb      	ldrb	r3, [r7, #7]
 800835c:	3301      	adds	r3, #1
 800835e:	71fb      	strb	r3, [r7, #7]
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	2b06      	cmp	r3, #6
 8008364:	d9ef      	bls.n	8008346 <stimLib_initResrc+0x4e>
 8008366:	e000      	b.n	800836a <stimLib_initResrc+0x72>
		{
			break;
 8008368:	bf00      	nop
		}
	}

	if (i == stim_lib_resrc_max)
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	2b07      	cmp	r3, #7
 800836e:	d101      	bne.n	8008374 <stimLib_initResrc+0x7c>
	{
		return stim_lib_stim_rsp_ok;
 8008370:	2300      	movs	r3, #0
 8008372:	e023      	b.n	80083bc <stimLib_initResrc+0xc4>
	}
	else
	{
		/* Keep the order of stim_lib_resrc_t elements */
		switch (i)
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	2b06      	cmp	r3, #6
 8008378:	d81e      	bhi.n	80083b8 <stimLib_initResrc+0xc0>
 800837a:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <stimLib_initResrc+0x88>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	080083b5 	.word	0x080083b5
 8008384:	080083b1 	.word	0x080083b1
 8008388:	080083ad 	.word	0x080083ad
 800838c:	080083a9 	.word	0x080083a9
 8008390:	080083a5 	.word	0x080083a5
 8008394:	080083a1 	.word	0x080083a1
 8008398:	0800839d 	.word	0x0800839d
		{
		case stim_lib_resrc_gpio:
			stimLib_gpioDeinit();
 800839c:	f000 fcb4 	bl	8008d08 <stimLib_gpioDeinit>

		case stim_lib_resrc_adc2:
			stimLib_adc2_Deinit();
 80083a0:	f000 fd0a 	bl	8008db8 <stimLib_adc2_Deinit>

		case stim_lib_resrc_adc1:
			stimLib_adc1_Deinit();
 80083a4:	f000 fcfe 	bl	8008da4 <stimLib_adc1_Deinit>

		case stim_lib_resrc_tim6:
			stimLib_tim6_Deinit();
 80083a8:	f000 fcf2 	bl	8008d90 <stimLib_tim6_Deinit>

		case stim_lib_resrc_tim2:
			stimLib_tim2_Deinit();
 80083ac:	f000 fce6 	bl	8008d7c <stimLib_tim2_Deinit>

		case stim_lib_resrc_tim1:
			stimLib_tim1_Deinit();
 80083b0:	f000 fcda 	bl	8008d68 <stimLib_tim1_Deinit>

		case stim_lib_resrc_dma:
			stimLib_dmaDeinit();
 80083b4:	f000 fcc0 	bl	8008d38 <stimLib_dmaDeinit>

		default:
			break;
 80083b8:	bf00      	nop
		}

		return stim_lib_stim_rsp_failed;
 80083ba:	2301      	movs	r3, #1
	}

}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	20000000 	.word	0x20000000
 80083c8:	04c4b400 	.word	0x04c4b400

080083cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80083d0:	f3bf 8f4f 	dsb	sy
}
 80083d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80083d6:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <__NVIC_SystemReset+0x24>)
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80083de:	4904      	ldr	r1, [pc, #16]	; (80083f0 <__NVIC_SystemReset+0x24>)
 80083e0:	4b04      	ldr	r3, [pc, #16]	; (80083f4 <__NVIC_SystemReset+0x28>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80083e6:	f3bf 8f4f 	dsb	sy
}
 80083ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <__NVIC_SystemReset+0x20>
 80083f0:	e000ed00 	.word	0xe000ed00
 80083f4:	05fa0004 	.word	0x05fa0004

080083f8 <stimLib_adcWatchdoc_callback>:
/*
 * ADC WATCH DOC INTERRUPT
 * Calling from "HAL_ADC_LevelOutOfWindowCallback()" Function
 * */
void stimLib_adcWatchdoc_callback(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
	TD_DEBUG_PRINT(
 80083fc:	4804      	ldr	r0, [pc, #16]	; (8008410 <stimLib_adcWatchdoc_callback+0x18>)
 80083fe:	f001 fead 	bl	800a15c <puts>
			("WATCH DOC INTERRUPT :: stimLib_adcWatchdoc_callback()\r\n"));
	TD_DEBUG_PRINT(("SYSTEM ALL STOP AND RESETs\r\n"));
 8008402:	4804      	ldr	r0, [pc, #16]	; (8008414 <stimLib_adcWatchdoc_callback+0x1c>)
 8008404:	f001 feaa 	bl	800a15c <puts>

	stimLib_errorHandle();
 8008408:	f7ff fede 	bl	80081c8 <stimLib_errorHandle>
	/*
	 TODO:

	 Move to error handle
	 */
	NVIC_SystemReset();
 800840c:	f7ff ffde 	bl	80083cc <__NVIC_SystemReset>
 8008410:	0800b140 	.word	0x0800b140
 8008414:	0800b178 	.word	0x0800b178

08008418 <stimLib_adcError_callback>:
/*
 * ADC WATCH DOC INTERRUPT
 * Calling from "HAL_ADC_ErrorCallback()" Function
 * */
void stimLib_adcError_callback(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
	TD_DEBUG_PRINT(("ADC ERROR :: stimLib_adcError_callback()\r\n"));
 800841c:	4803      	ldr	r0, [pc, #12]	; (800842c <stimLib_adcError_callback+0x14>)
 800841e:	f001 fe9d 	bl	800a15c <puts>

	stimLib_errorHandle();
 8008422:	f7ff fed1 	bl	80081c8 <stimLib_errorHandle>
	/*
	 TODO:

	 Move to error handle
	 */
	NVIC_SystemReset();
 8008426:	f7ff ffd1 	bl	80083cc <__NVIC_SystemReset>
 800842a:	bf00      	nop
 800842c:	0800b194 	.word	0x0800b194

08008430 <stimLib_stepup_ctrlCallback>:
/*
 * STEPUP CONTROL CALLBACK
 * Calling from "HAL_TIM_PeriodElapsedCallback()" Function
 * */
void stimLib_stepup_ctrlCallback(TIM_HandleTypeDef *htim)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a04      	ldr	r2, [pc, #16]	; (8008450 <stimLib_stepup_ctrlCallback+0x20>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d101      	bne.n	8008446 <stimLib_stepup_ctrlCallback+0x16>
	{
		stimLib_stepup_ctrlScheduler();
 8008442:	f001 fa5b 	bl	80098fc <stimLib_stepup_ctrlScheduler>
	}
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	40001000 	.word	0x40001000

08008454 <stimLib_trgInput_callback>:
/*
 * Trigger Input Callback
 * Calling from "HAL_GPIO_EXTI_Callback()" Function
 * */
void stimLib_trgInput_callback(uint16_t gpio_pin)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	80fb      	strh	r3, [r7, #6]
	if (STIM_LIB_TRG_INPUT_PIN_IS_ENABLED(gpio_pin))
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d132      	bne.n	80084ca <stimLib_trgInput_callback+0x76>
 8008464:	4b1b      	ldr	r3, [pc, #108]	; (80084d4 <stimLib_trgInput_callback+0x80>)
 8008466:	7cdb      	ldrb	r3, [r3, #19]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d02e      	beq.n	80084ca <stimLib_trgInput_callback+0x76>
	{
		if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_LOW())
 800846c:	4b19      	ldr	r3, [pc, #100]	; (80084d4 <stimLib_trgInput_callback+0x80>)
 800846e:	7d1b      	ldrb	r3, [r3, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d106      	bne.n	8008482 <stimLib_trgInput_callback+0x2e>
 8008474:	4b17      	ldr	r3, [pc, #92]	; (80084d4 <stimLib_trgInput_callback+0x80>)
 8008476:	7d5b      	ldrb	r3, [r3, #21]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <stimLib_trgInput_callback+0x2e>
		{
			stim_lib_trg_input_active_low_hanlde();
 800847c:	f000 f846 	bl	800850c <stim_lib_trg_input_active_low_hanlde>
 8008480:	e023      	b.n	80084ca <stimLib_trgInput_callback+0x76>
		}

		else if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_HIGH())
 8008482:	4b14      	ldr	r3, [pc, #80]	; (80084d4 <stimLib_trgInput_callback+0x80>)
 8008484:	7d1b      	ldrb	r3, [r3, #20]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d106      	bne.n	8008498 <stimLib_trgInput_callback+0x44>
 800848a:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <stimLib_trgInput_callback+0x80>)
 800848c:	7d5b      	ldrb	r3, [r3, #21]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <stimLib_trgInput_callback+0x44>
		{
			stim_lib_trg_input_active_high_handle();
 8008492:	f000 f84d 	bl	8008530 <stim_lib_trg_input_active_high_handle>
 8008496:	e018      	b.n	80084ca <stimLib_trgInput_callback+0x76>
		}

		else if (STIM_LIB_TRG_INPUT_IS_FALLING_EDGE(
 8008498:	4b0e      	ldr	r3, [pc, #56]	; (80084d4 <stimLib_trgInput_callback+0x80>)
 800849a:	7d1b      	ldrb	r3, [r3, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <stimLib_trgInput_callback+0x5a>
 80084a0:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <stimLib_trgInput_callback+0x80>)
 80084a2:	7d5b      	ldrb	r3, [r3, #21]
 80084a4:	f083 0301 	eor.w	r3, r3, #1
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10a      	bne.n	80084c4 <stimLib_trgInput_callback+0x70>
		) || STIM_LIB_TRG_INPUT_IS_RISING_EDGE())
 80084ae:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <stimLib_trgInput_callback+0x80>)
 80084b0:	7d1b      	ldrb	r3, [r3, #20]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d109      	bne.n	80084ca <stimLib_trgInput_callback+0x76>
 80084b6:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <stimLib_trgInput_callback+0x80>)
 80084b8:	7d5b      	ldrb	r3, [r3, #21]
 80084ba:	f083 0301 	eor.w	r3, r3, #1
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <stimLib_trgInput_callback+0x76>
			/*
			 * STIM START
			 * Initiate stimulation by trigger input.
			 * RISING EDGE and FALLING EDGE
			 * */
			stimLib_stimStart();
 80084c4:	f7ff fe66 	bl	8008194 <stimLib_stimStart>
		}
	}
}
 80084c8:	e7ff      	b.n	80084ca <stimLib_trgInput_callback+0x76>
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	200003ec 	.word	0x200003ec

080084d8 <stimLib_timError_callback>:

void stimLib_timError_callback(TIM_HandleTypeDef *htim)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
	stimLib_errorHandle();
 80084e0:	f7ff fe72 	bl	80081c8 <stimLib_errorHandle>
}
 80084e4:	bf00      	nop
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <stimLib_timPwmPluseFinished_callback>:

void stimLib_timPwmPluseFinished_callback(TIM_HandleTypeDef *htim)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fc:	d101      	bne.n	8008502 <stimLib_timPwmPluseFinished_callback+0x16>
	{
		stimLib_stimPulseStop();
 80084fe:	f000 ffed 	bl	80094dc <stimLib_stimPulseStop>
	}
}
 8008502:	bf00      	nop
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <stim_lib_trg_input_active_low_hanlde>:

/* Define static functions */
static void stim_lib_trg_input_active_low_hanlde(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
	if (STIM_LIB_TRG_INPUT_PIN_IS_HIGH())
 8008510:	2101      	movs	r1, #1
 8008512:	4806      	ldr	r0, [pc, #24]	; (800852c <stim_lib_trg_input_active_low_hanlde+0x20>)
 8008514:	f7fb fed0 	bl	80042b8 <HAL_GPIO_ReadPin>
 8008518:	4603      	mov	r3, r0
 800851a:	2b01      	cmp	r3, #1
 800851c:	d102      	bne.n	8008524 <stim_lib_trg_input_active_low_hanlde+0x18>
		/*
		 * Force low of TIM PIO outputs
		 * CAUTION: OCREF must be normalized in PWM mode. Refer to TIM stop Function, stimLib_stimStopRaw()
		 * Stop when the toggle signal is HIGH.
		 * */
		stimLib_stimStopDelayRaw();
 800851e:	f000 f819 	bl	8008554 <stimLib_stimStopDelayRaw>
		 * Initiate stimulation by trigger input.
		 * Start when the toggle signal is LOW.
		 * */
		stimLib_stimStart();
	}
}
 8008522:	e001      	b.n	8008528 <stim_lib_trg_input_active_low_hanlde+0x1c>
		stimLib_stimStart();
 8008524:	f7ff fe36 	bl	8008194 <stimLib_stimStart>
}
 8008528:	bf00      	nop
 800852a:	bd80      	pop	{r7, pc}
 800852c:	48000400 	.word	0x48000400

08008530 <stim_lib_trg_input_active_high_handle>:

static void stim_lib_trg_input_active_high_handle(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	af00      	add	r7, sp, #0
	if (STIM_LIB_TRG_INPUT_PIN_IS_LOW())
 8008534:	2101      	movs	r1, #1
 8008536:	4806      	ldr	r0, [pc, #24]	; (8008550 <stim_lib_trg_input_active_high_handle+0x20>)
 8008538:	f7fb febe 	bl	80042b8 <HAL_GPIO_ReadPin>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <stim_lib_trg_input_active_high_handle+0x18>
		/*
		 * Force low of TIM PIO outputs
		 * CAUTION: OCREF must be normalized in PWM mode. Refer to TIM stop Function, stimLib_stimStopRaw()
		 * Stop when the toggle signal is LOW.
		 * */
		stimLib_stimStopDelayRaw();
 8008542:	f000 f807 	bl	8008554 <stimLib_stimStopDelayRaw>
		 * Initiate stimulation by trigger input.
		 * Start when the toggle signal is HIGH.
		 * */
		stimLib_stimStart();
	}
}
 8008546:	e001      	b.n	800854c <stim_lib_trg_input_active_high_handle+0x1c>
		stimLib_stimStart();
 8008548:	f7ff fe24 	bl	8008194 <stimLib_stimStart>
}
 800854c:	bf00      	nop
 800854e:	bd80      	pop	{r7, pc}
 8008550:	48000400 	.word	0x48000400

08008554 <stimLib_stimStopDelayRaw>:
#include "stim_lib_common.h"

#define STIM_LIB_PLUS_OUTPUT_OFF_TIME()						for (int i = 0; i < 0xffff; i++) /* Delay */

void stimLib_stimStopDelayRaw(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
	if (stimLib_stateGet() == stim_lib_state_stimulating)
 800855a:	f000 fe37 	bl	80091cc <stimLib_stateGet>
 800855e:	4603      	mov	r3, r0
 8008560:	2b03      	cmp	r3, #3
 8008562:	d139      	bne.n	80085d8 <stimLib_stimStopDelayRaw+0x84>
	{
		/*
		 * I had a problem with not going straight to LOW when ending the pulse.
		 * At the end of the pulse, I change the OC mode immediately to drop the GPIO to the LOW level.
		 * */
		TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 8008564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800856e:	4b1c      	ldr	r3, [pc, #112]	; (80085e0 <stimLib_stimStopDelayRaw+0x8c>)
 8008570:	4013      	ands	r3, r2
 8008572:	618b      	str	r3, [r1, #24]
		TIM2->CCMR1 |= (TIM_OCMODE_FORCED_INACTIVE)
 8008574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800857e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008586:	6193      	str	r3, [r2, #24]
				| (TIM_OCMODE_FORCED_INACTIVE << 8U);

		TIM2->CCMR2 &= ~(TIM_CCMR2_OC3M | TIM_CCMR2_OC4M);
 8008588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800858c:	69da      	ldr	r2, [r3, #28]
 800858e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008592:	4b13      	ldr	r3, [pc, #76]	; (80085e0 <stimLib_stimStopDelayRaw+0x8c>)
 8008594:	4013      	ands	r3, r2
 8008596:	61cb      	str	r3, [r1, #28]
		TIM2->CCMR2 |= (TIM_OCMODE_FORCED_INACTIVE)
 8008598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80085a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085aa:	61d3      	str	r3, [r2, #28]

		/*
		 * Since it must be used not only in the polling method but also inside the interrupt, the Delay function is avoided and replaced with a For statement.
		 * stimLib_delay(STIM_LIB_PLUS_OUTPUT_OFF_TIME);
		 * */
		STIM_LIB_PLUS_OUTPUT_OFF_TIME();
 80085ac:	2300      	movs	r3, #0
 80085ae:	607b      	str	r3, [r7, #4]
 80085b0:	e002      	b.n	80085b8 <stimLib_stimStopDelayRaw+0x64>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3301      	adds	r3, #1
 80085b6:	607b      	str	r3, [r7, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085be:	4293      	cmp	r3, r2
 80085c0:	ddf7      	ble.n	80085b2 <stimLib_stimStopDelayRaw+0x5e>

		/*
		 * TIM2 CH3 DMA TC INTERRUPT ENABLE
		 * */
		__HAL_DMA_ENABLE_IT(&hdma_tim2_ch3, (DMA_IT_TC));
 80085c2:	4b08      	ldr	r3, [pc, #32]	; (80085e4 <stimLib_stimStopDelayRaw+0x90>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <stimLib_stimStopDelayRaw+0x90>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0202 	orr.w	r2, r2, #2
 80085d0:	601a      	str	r2, [r3, #0]

		stimLib_stateSet(stim_lib_state_stim_stopping);
 80085d2:	2004      	movs	r0, #4
 80085d4:	f000 fe06 	bl	80091e4 <stimLib_stateSet>
	}
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	fefe8f8f 	.word	0xfefe8f8f
 80085e4:	20000310 	.word	0x20000310

080085e8 <stimLib_gpioInit>:
#include "stim_lib_stim_cfg.h"
#include "stim_lib_state.h"

/* INIT FUNCTION */
bool stimLib_gpioInit(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08a      	sub	sp, #40	; 0x28
 80085ec:	af00      	add	r7, sp, #0
	/* GPIO INIT */
	GPIO_InitTypeDef GPIO_InitStruct =
 80085ee:	f107 0314 	add.w	r3, r7, #20
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	605a      	str	r2, [r3, #4]
 80085f8:	609a      	str	r2, [r3, #8]
 80085fa:	60da      	str	r2, [r3, #12]
 80085fc:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80085fe:	4b2e      	ldr	r3, [pc, #184]	; (80086b8 <stimLib_gpioInit+0xd0>)
 8008600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008602:	4a2d      	ldr	r2, [pc, #180]	; (80086b8 <stimLib_gpioInit+0xd0>)
 8008604:	f043 0304 	orr.w	r3, r3, #4
 8008608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800860a:	4b2b      	ldr	r3, [pc, #172]	; (80086b8 <stimLib_gpioInit+0xd0>)
 800860c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	613b      	str	r3, [r7, #16]
 8008614:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8008616:	4b28      	ldr	r3, [pc, #160]	; (80086b8 <stimLib_gpioInit+0xd0>)
 8008618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861a:	4a27      	ldr	r2, [pc, #156]	; (80086b8 <stimLib_gpioInit+0xd0>)
 800861c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008622:	4b25      	ldr	r3, [pc, #148]	; (80086b8 <stimLib_gpioInit+0xd0>)
 8008624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800862e:	4b22      	ldr	r3, [pc, #136]	; (80086b8 <stimLib_gpioInit+0xd0>)
 8008630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008632:	4a21      	ldr	r2, [pc, #132]	; (80086b8 <stimLib_gpioInit+0xd0>)
 8008634:	f043 0301 	orr.w	r3, r3, #1
 8008638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800863a:	4b1f      	ldr	r3, [pc, #124]	; (80086b8 <stimLib_gpioInit+0xd0>)
 800863c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	60bb      	str	r3, [r7, #8]
 8008644:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8008646:	4b1c      	ldr	r3, [pc, #112]	; (80086b8 <stimLib_gpioInit+0xd0>)
 8008648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864a:	4a1b      	ldr	r2, [pc, #108]	; (80086b8 <stimLib_gpioInit+0xd0>)
 800864c:	f043 0302 	orr.w	r3, r3, #2
 8008650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008652:	4b19      	ldr	r3, [pc, #100]	; (80086b8 <stimLib_gpioInit+0xd0>)
 8008654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	607b      	str	r3, [r7, #4]
 800865c:	687b      	ldr	r3, [r7, #4]

	/* Configure GPIO pin Output Level */
	/* DAC and PEAK DISCHARGE SW */
	HAL_GPIO_WritePin(GPIOB,
 800865e:	2200      	movs	r2, #0
 8008660:	f241 11fe 	movw	r1, #4606	; 0x11fe
 8008664:	4815      	ldr	r0, [pc, #84]	; (80086bc <stimLib_gpioInit+0xd4>)
 8008666:	f7fb fe3f 	bl	80042e8 <HAL_GPIO_WritePin>
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN, GPIO_PIN_RESET);

	/* PEAK DETECTION */
	HAL_GPIO_WritePin(STIM_LIB_PEAK_DETECTION_PWR_SW_GPIO_PORT,
 800866a:	2200      	movs	r2, #0
 800866c:	2108      	movs	r1, #8
 800866e:	4814      	ldr	r0, [pc, #80]	; (80086c0 <stimLib_gpioInit+0xd8>)
 8008670:	f7fb fe3a 	bl	80042e8 <HAL_GPIO_WritePin>
	STIM_LIB_PEAK_DETECTION_PWR_SW_PIN, GPIO_PIN_RESET);

	/* Configure GPIO pin : DAC and PEAK DISCHARGE SW */
	GPIO_InitStruct.Pin = STIM_LIB_DAC_N0_PIN | STIM_LIB_DAC_N1_PIN
 8008674:	f241 13fe 	movw	r3, #4606	; 0x11fe
 8008678:	617b      	str	r3, [r7, #20]
			| STIM_LIB_PEAK_DISCHG_SW_PIN | STIM_LIB_DAC_N2_PIN
			| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN | STIM_LIB_DAC_N5_PIN
			| STIM_LIB_DAC_N6_PIN | STIM_LIB_DAC_N7_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800867a:	2301      	movs	r3, #1
 800867c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800867e:	2300      	movs	r3, #0
 8008680:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008682:	2300      	movs	r3, #0
 8008684:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008686:	f107 0314 	add.w	r3, r7, #20
 800868a:	4619      	mov	r1, r3
 800868c:	480b      	ldr	r0, [pc, #44]	; (80086bc <stimLib_gpioInit+0xd4>)
 800868e:	f7fb fbcf 	bl	8003e30 <HAL_GPIO_Init>

	/* Configure GPIO pin : PEAK_DETECTION_PWR_SW_Pin */
	GPIO_InitStruct.Pin = STIM_LIB_PEAK_DETECTION_PWR_SW_PIN;
 8008692:	2308      	movs	r3, #8
 8008694:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008696:	2301      	movs	r3, #1
 8008698:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800869a:	2300      	movs	r3, #0
 800869c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800869e:	2300      	movs	r3, #0
 80086a0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(STIM_LIB_PEAK_DETECTION_PWR_SW_GPIO_PORT, &GPIO_InitStruct);
 80086a2:	f107 0314 	add.w	r3, r7, #20
 80086a6:	4619      	mov	r1, r3
 80086a8:	4805      	ldr	r0, [pc, #20]	; (80086c0 <stimLib_gpioInit+0xd8>)
 80086aa:	f7fb fbc1 	bl	8003e30 <HAL_GPIO_Init>

	return true;
 80086ae:	2301      	movs	r3, #1
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3728      	adds	r7, #40	; 0x28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40021000 	.word	0x40021000
 80086bc:	48000400 	.word	0x48000400
 80086c0:	48001c00 	.word	0x48001c00

080086c4 <stimLib_dmaInit>:

bool stimLib_dmaInit(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80086ca:	4b1a      	ldr	r3, [pc, #104]	; (8008734 <stimLib_dmaInit+0x70>)
 80086cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ce:	4a19      	ldr	r2, [pc, #100]	; (8008734 <stimLib_dmaInit+0x70>)
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	6493      	str	r3, [r2, #72]	; 0x48
 80086d6:	4b17      	ldr	r3, [pc, #92]	; (8008734 <stimLib_dmaInit+0x70>)
 80086d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	607b      	str	r3, [r7, #4]
 80086e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80086e2:	4b14      	ldr	r3, [pc, #80]	; (8008734 <stimLib_dmaInit+0x70>)
 80086e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e6:	4a13      	ldr	r2, [pc, #76]	; (8008734 <stimLib_dmaInit+0x70>)
 80086e8:	f043 0302 	orr.w	r3, r3, #2
 80086ec:	6493      	str	r3, [r2, #72]	; 0x48
 80086ee:	4b11      	ldr	r3, [pc, #68]	; (8008734 <stimLib_dmaInit+0x70>)
 80086f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */

	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80086fa:	2200      	movs	r2, #0
 80086fc:	2101      	movs	r1, #1
 80086fe:	200b      	movs	r0, #11
 8008700:	f7fb f849 	bl	8003796 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008704:	200b      	movs	r0, #11
 8008706:	f7fb f862 	bl	80037ce <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 800870a:	2200      	movs	r2, #0
 800870c:	2101      	movs	r1, #1
 800870e:	2011      	movs	r0, #17
 8008710:	f7fb f841 	bl	8003796 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8008714:	2011      	movs	r0, #17
 8008716:	f7fb f85a 	bl	80037ce <HAL_NVIC_EnableIRQ>

	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 800871a:	2200      	movs	r2, #0
 800871c:	2101      	movs	r1, #1
 800871e:	200c      	movs	r0, #12
 8008720:	f7fb f839 	bl	8003796 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008724:	200c      	movs	r0, #12
 8008726:	f7fb f852 	bl	80037ce <HAL_NVIC_EnableIRQ>

	return STIM_LIB_RESOURCE_INIT_OK;
 800872a:	2301      	movs	r3, #1
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	40021000 	.word	0x40021000

08008738 <stimLib_tim1_Init>:

bool stimLib_tim1_Init(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b096      	sub	sp, #88	; 0x58
 800873c:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig =
 800873e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	605a      	str	r2, [r3, #4]
 8008748:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 800874a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	605a      	str	r2, [r3, #4]
 8008754:	609a      	str	r2, [r3, #8]
 8008756:	60da      	str	r2, [r3, #12]
 8008758:	611a      	str	r2, [r3, #16]
 800875a:	615a      	str	r2, [r3, #20]
 800875c:	619a      	str	r2, [r3, #24]
	{ 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 800875e:	1d3b      	adds	r3, r7, #4
 8008760:	222c      	movs	r2, #44	; 0x2c
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fc6b 	bl	800a040 <memset>
	{ 0 };

	htim1.Instance = TIM1;
 800876a:	4b3b      	ldr	r3, [pc, #236]	; (8008858 <stimLib_tim1_Init+0x120>)
 800876c:	4a3b      	ldr	r2, [pc, #236]	; (800885c <stimLib_tim1_Init+0x124>)
 800876e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 3;
 8008770:	4b39      	ldr	r3, [pc, #228]	; (8008858 <stimLib_tim1_Init+0x120>)
 8008772:	2203      	movs	r2, #3
 8008774:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8008776:	4b38      	ldr	r3, [pc, #224]	; (8008858 <stimLib_tim1_Init+0x120>)
 8008778:	2210      	movs	r2, #16
 800877a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9999;
 800877c:	4b36      	ldr	r3, [pc, #216]	; (8008858 <stimLib_tim1_Init+0x120>)
 800877e:	f242 720f 	movw	r2, #9999	; 0x270f
 8008782:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008784:	4b34      	ldr	r3, [pc, #208]	; (8008858 <stimLib_tim1_Init+0x120>)
 8008786:	2200      	movs	r2, #0
 8008788:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800878a:	4b33      	ldr	r3, [pc, #204]	; (8008858 <stimLib_tim1_Init+0x120>)
 800878c:	2200      	movs	r2, #0
 800878e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008790:	4b31      	ldr	r3, [pc, #196]	; (8008858 <stimLib_tim1_Init+0x120>)
 8008792:	2280      	movs	r2, #128	; 0x80
 8008794:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008796:	4830      	ldr	r0, [pc, #192]	; (8008858 <stimLib_tim1_Init+0x120>)
 8008798:	f7fd fa88 	bl	8005cac <HAL_TIM_PWM_Init>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <stimLib_tim1_Init+0x6e>
	{
		return false;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e053      	b.n	800884e <stimLib_tim1_Init+0x116>
	}
	/* MSP :: Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
	stimLib_tim_pwmmspInit(&htim1);
 80087a6:	482c      	ldr	r0, [pc, #176]	; (8008858 <stimLib_tim1_Init+0x120>)
 80087a8:	f000 fbec 	bl	8008f84 <stimLib_tim_pwmmspInit>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80087ac:	2300      	movs	r3, #0
 80087ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80087b0:	2300      	movs	r3, #0
 80087b2:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087b4:	2300      	movs	r3, #0
 80087b6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80087b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80087bc:	4619      	mov	r1, r3
 80087be:	4826      	ldr	r0, [pc, #152]	; (8008858 <stimLib_tim1_Init+0x120>)
 80087c0:	f7fe fb5a 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <stimLib_tim1_Init+0x96>
	{
		return false;
 80087ca:	2300      	movs	r3, #0
 80087cc:	e03f      	b.n	800884e <stimLib_tim1_Init+0x116>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80087ce:	2360      	movs	r3, #96	; 0x60
 80087d0:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80087d6:	2300      	movs	r3, #0
 80087d8:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80087da:	2300      	movs	r3, #0
 80087dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80087de:	2300      	movs	r3, #0
 80087e0:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80087e2:	2300      	movs	r3, #0
 80087e4:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80087e6:	2300      	movs	r3, #0
 80087e8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80087ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087ee:	2200      	movs	r2, #0
 80087f0:	4619      	mov	r1, r3
 80087f2:	4819      	ldr	r0, [pc, #100]	; (8008858 <stimLib_tim1_Init+0x120>)
 80087f4:	f7fd fe0e 	bl	8006414 <HAL_TIM_PWM_ConfigChannel>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <stimLib_tim1_Init+0xca>
	{
		return false;
 80087fe:	2300      	movs	r3, #0
 8008800:	e025      	b.n	800884e <stimLib_tim1_Init+0x116>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008802:	2300      	movs	r3, #0
 8008804:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008806:	2300      	movs	r3, #0
 8008808:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800880a:	2300      	movs	r3, #0
 800880c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800881a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008820:	2300      	movs	r3, #0
 8008822:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008824:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800882e:	2300      	movs	r3, #0
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008832:	1d3b      	adds	r3, r7, #4
 8008834:	4619      	mov	r1, r3
 8008836:	4808      	ldr	r0, [pc, #32]	; (8008858 <stimLib_tim1_Init+0x120>)
 8008838:	f7fe fb84 	bl	8006f44 <HAL_TIMEx_ConfigBreakDeadTime>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <stimLib_tim1_Init+0x10e>
	{
		return false;
 8008842:	2300      	movs	r3, #0
 8008844:	e003      	b.n	800884e <stimLib_tim1_Init+0x116>
	}

	/* MSP :: TIMER GPIO */
	stimLib_tim_msppostInit(&htim1);
 8008846:	4804      	ldr	r0, [pc, #16]	; (8008858 <stimLib_tim1_Init+0x120>)
 8008848:	f000 fc5e 	bl	8009108 <stimLib_tim_msppostInit>

	return STIM_LIB_RESOURCE_INIT_OK;
 800884c:	2301      	movs	r3, #1
}
 800884e:	4618      	mov	r0, r3
 8008850:	3758      	adds	r7, #88	; 0x58
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	200001e4 	.word	0x200001e4
 800885c:	40012c00 	.word	0x40012c00

08008860 <stimLib_tim2_Init>:

bool stimLib_tim2_Init(void)
{
 8008860:	b590      	push	{r4, r7, lr}
 8008862:	b08b      	sub	sp, #44	; 0x2c
 8008864:	af00      	add	r7, sp, #0
	/* TIMER2 SETTING */
	TIM_MasterConfigTypeDef sMasterConfig =
 8008866:	f107 031c 	add.w	r3, r7, #28
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	605a      	str	r2, [r3, #4]
 8008870:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 8008872:	463b      	mov	r3, r7
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	605a      	str	r2, [r3, #4]
 800887a:	609a      	str	r2, [r3, #8]
 800887c:	60da      	str	r2, [r3, #12]
 800887e:	611a      	str	r2, [r3, #16]
 8008880:	615a      	str	r2, [r3, #20]
 8008882:	619a      	str	r2, [r3, #24]
	{ 0 };
	htim2.Instance = TIM2;
 8008884:	4b58      	ldr	r3, [pc, #352]	; (80089e8 <stimLib_tim2_Init+0x188>)
 8008886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800888a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = STIM_LIB_SIGNAL_PSC_INPUT;
 800888c:	f7fc fbae 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8008890:	4603      	mov	r3, r0
 8008892:	4a56      	ldr	r2, [pc, #344]	; (80089ec <stimLib_tim2_Init+0x18c>)
 8008894:	fbb2 f3f3 	udiv	r3, r2, r3
 8008898:	461a      	mov	r2, r3
 800889a:	2350      	movs	r3, #80	; 0x50
 800889c:	fb93 f3f2 	sdiv	r3, r3, r2
 80088a0:	3b01      	subs	r3, #1
 80088a2:	461a      	mov	r2, r3
 80088a4:	4b50      	ldr	r3, [pc, #320]	; (80089e8 <stimLib_tim2_Init+0x188>)
 80088a6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088a8:	4b4f      	ldr	r3, [pc, #316]	; (80089e8 <stimLib_tim2_Init+0x188>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	609a      	str	r2, [r3, #8]
	if (STIM_LIB_STATE_SIG_FREQ == 0)
 80088ae:	4b50      	ldr	r3, [pc, #320]	; (80089f0 <stimLib_tim2_Init+0x190>)
 80088b0:	791b      	ldrb	r3, [r3, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d102      	bne.n	80088bc <stimLib_tim2_Init+0x5c>
	{
		STIM_LIB_STATE_SIG_FREQ = 1;
 80088b6:	4b4e      	ldr	r3, [pc, #312]	; (80089f0 <stimLib_tim2_Init+0x190>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	711a      	strb	r2, [r3, #4]
	}
	htim2.Init.Period = STIM_LIB_SIGNAL_ARR_INPUT;
 80088bc:	f7fc fb96 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 80088c0:	4604      	mov	r4, r0
 80088c2:	f7fc fb93 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 80088c6:	4603      	mov	r3, r0
 80088c8:	4a48      	ldr	r2, [pc, #288]	; (80089ec <stimLib_tim2_Init+0x18c>)
 80088ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	2350      	movs	r3, #80	; 0x50
 80088d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80088d6:	fbb4 f3f3 	udiv	r3, r4, r3
 80088da:	4a45      	ldr	r2, [pc, #276]	; (80089f0 <stimLib_tim2_Init+0x190>)
 80088dc:	7912      	ldrb	r2, [r2, #4]
 80088de:	fbb3 f3f2 	udiv	r3, r3, r2
 80088e2:	3b01      	subs	r3, #1
 80088e4:	461a      	mov	r2, r3
 80088e6:	4b40      	ldr	r3, [pc, #256]	; (80089e8 <stimLib_tim2_Init+0x188>)
 80088e8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088ea:	4b3f      	ldr	r3, [pc, #252]	; (80089e8 <stimLib_tim2_Init+0x188>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80088f0:	4b3d      	ldr	r3, [pc, #244]	; (80089e8 <stimLib_tim2_Init+0x188>)
 80088f2:	2280      	movs	r2, #128	; 0x80
 80088f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80088f6:	483c      	ldr	r0, [pc, #240]	; (80089e8 <stimLib_tim2_Init+0x188>)
 80088f8:	f7fd f9d8 	bl	8005cac <HAL_TIM_PWM_Init>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <stimLib_tim2_Init+0xa6>
	{
		return false;
 8008902:	2300      	movs	r3, #0
 8008904:	e06b      	b.n	80089de <stimLib_tim2_Init+0x17e>
	}
	/* MSP :: Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
	stimLib_tim_pwmmspInit(&htim2);
 8008906:	4838      	ldr	r0, [pc, #224]	; (80089e8 <stimLib_tim2_Init+0x188>)
 8008908:	f000 fb3c 	bl	8008f84 <stimLib_tim_pwmmspInit>

	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800890c:	4836      	ldr	r0, [pc, #216]	; (80089e8 <stimLib_tim2_Init+0x188>)
 800890e:	f7fc fe8c 	bl	800562a <HAL_TIM_OC_Init>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <stimLib_tim2_Init+0xbc>
	{
		return false;
 8008918:	2300      	movs	r3, #0
 800891a:	e060      	b.n	80089de <stimLib_tim2_Init+0x17e>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800891c:	2350      	movs	r3, #80	; 0x50
 800891e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008920:	2300      	movs	r3, #0
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008924:	f107 031c 	add.w	r3, r7, #28
 8008928:	4619      	mov	r1, r3
 800892a:	482f      	ldr	r0, [pc, #188]	; (80089e8 <stimLib_tim2_Init+0x188>)
 800892c:	f7fe faa4 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <stimLib_tim2_Init+0xda>
	{
		return false;
 8008936:	2300      	movs	r3, #0
 8008938:	e051      	b.n	80089de <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 1 :: TRIGGER OUTPUT */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800893a:	2360      	movs	r3, #96	; 0x60
 800893c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_TRG_OUTPUT_PULSE_TIME;
 800893e:	4b2c      	ldr	r3, [pc, #176]	; (80089f0 <stimLib_tim2_Init+0x190>)
 8008940:	88db      	ldrh	r3, [r3, #6]
 8008942:	330f      	adds	r3, #15
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	607b      	str	r3, [r7, #4]

	if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_low)
 8008948:	4b29      	ldr	r3, [pc, #164]	; (80089f0 <stimLib_tim2_Init+0x190>)
 800894a:	7c9b      	ldrb	r3, [r3, #18]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <stimLib_tim2_Init+0xf6>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8008950:	2302      	movs	r3, #2
 8008952:	60bb      	str	r3, [r7, #8]
 8008954:	e005      	b.n	8008962 <stimLib_tim2_Init+0x102>
	}
	else if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_high)
 8008956:	4b26      	ldr	r3, [pc, #152]	; (80089f0 <stimLib_tim2_Init+0x190>)
 8008958:	7c9b      	ldrb	r3, [r3, #18]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d101      	bne.n	8008962 <stimLib_tim2_Init+0x102>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800895e:	2300      	movs	r3, #0
 8008960:	60bb      	str	r3, [r7, #8]
	}

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC,
 8008962:	463b      	mov	r3, r7
 8008964:	2200      	movs	r2, #0
 8008966:	4619      	mov	r1, r3
 8008968:	481f      	ldr	r0, [pc, #124]	; (80089e8 <stimLib_tim2_Init+0x188>)
 800896a:	f7fd fd53 	bl	8006414 <HAL_TIM_PWM_ConfigChannel>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <stimLib_tim2_Init+0x118>
			STIM_LIB_PULSE_TRG_OUT_TIM_CH) != HAL_OK)
	{
		return false;
 8008974:	2300      	movs	r3, #0
 8008976:	e032      	b.n	80089de <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 2 :: ANODE PULSE */
	sConfigOC.Pulse = STIM_LIB_ANODE_PULSE_TIME;
 8008978:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <stimLib_tim2_Init+0x190>)
 800897a:	88db      	ldrh	r3, [r3, #6]
 800897c:	330a      	adds	r3, #10
 800897e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008980:	2300      	movs	r3, #0
 8008982:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC,
 8008984:	463b      	mov	r3, r7
 8008986:	2204      	movs	r2, #4
 8008988:	4619      	mov	r1, r3
 800898a:	4817      	ldr	r0, [pc, #92]	; (80089e8 <stimLib_tim2_Init+0x188>)
 800898c:	f7fd fd42 	bl	8006414 <HAL_TIM_PWM_ConfigChannel>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <stimLib_tim2_Init+0x13a>
			STIM_LIB_PULSE_ANODE_TIM_CH) != HAL_OK)
	{
		return false;
 8008996:	2300      	movs	r3, #0
 8008998:	e021      	b.n	80089de <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 3 :: CATHODE PULSE */
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800899a:	2330      	movs	r3, #48	; 0x30
 800899c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_CATHODE_PULSE_TIME1;
 800899e:	4b14      	ldr	r3, [pc, #80]	; (80089f0 <stimLib_tim2_Init+0x190>)
 80089a0:	88db      	ldrh	r3, [r3, #6]
 80089a2:	3314      	adds	r3, #20
 80089a4:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC,
 80089a6:	463b      	mov	r3, r7
 80089a8:	2208      	movs	r2, #8
 80089aa:	4619      	mov	r1, r3
 80089ac:	480e      	ldr	r0, [pc, #56]	; (80089e8 <stimLib_tim2_Init+0x188>)
 80089ae:	f7fd fcb7 	bl	8006320 <HAL_TIM_OC_ConfigChannel>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <stimLib_tim2_Init+0x15c>
			STIM_LIB_PULSE_CATHODE_TIM_CH) != HAL_OK)
	{
		return false;
 80089b8:	2300      	movs	r3, #0
 80089ba:	e010      	b.n	80089de <stimLib_tim2_Init+0x17e>
	}

	/* CHANNEL 4 :: DAC_ON_N PULSE or STIM DISCHARGE PULSE */
#if 1
	sConfigOC.Pulse = STIM_LIB_SIGNAL_GLICH_TIME;
 80089bc:	2305      	movs	r3, #5
 80089be:	607b      	str	r3, [r7, #4]
#else
					sConfigOC.Pulse = STIM_LIB_DISCHARGE_PULSE_TIME1;
		#endif
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC,
 80089c0:	463b      	mov	r3, r7
 80089c2:	220c      	movs	r2, #12
 80089c4:	4619      	mov	r1, r3
 80089c6:	4808      	ldr	r0, [pc, #32]	; (80089e8 <stimLib_tim2_Init+0x188>)
 80089c8:	f7fd fcaa 	bl	8006320 <HAL_TIM_OC_ConfigChannel>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <stimLib_tim2_Init+0x176>
			STIM_LIB_PULSE_DAC_ON_TIM_CH) != HAL_OK)
	{
		return false;
 80089d2:	2300      	movs	r3, #0
 80089d4:	e003      	b.n	80089de <stimLib_tim2_Init+0x17e>
	}

	/* MSP :: TIMER GPIO */
	stimLib_tim_msppostInit(&htim2);
 80089d6:	4804      	ldr	r0, [pc, #16]	; (80089e8 <stimLib_tim2_Init+0x188>)
 80089d8:	f000 fb96 	bl	8009108 <stimLib_tim_msppostInit>

	return STIM_LIB_RESOURCE_INIT_OK;
 80089dc:	2301      	movs	r3, #1
}
 80089de:	4618      	mov	r0, r3
 80089e0:	372c      	adds	r7, #44	; 0x2c
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd90      	pop	{r4, r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20000230 	.word	0x20000230
 80089ec:	04c4b400 	.word	0x04c4b400
 80089f0:	200003ec 	.word	0x200003ec

080089f4 <stimLib_tim6_Init>:

bool stimLib_tim6_Init(void)
{
 80089f4:	b590      	push	{r4, r7, lr}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig =
 80089fa:	1d3b      	adds	r3, r7, #4
 80089fc:	2200      	movs	r2, #0
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	605a      	str	r2, [r3, #4]
 8008a02:	609a      	str	r2, [r3, #8]
	{ 0 };

	htim6.Instance = TIM6;
 8008a04:	4b26      	ldr	r3, [pc, #152]	; (8008aa0 <stimLib_tim6_Init+0xac>)
 8008a06:	4a27      	ldr	r2, [pc, #156]	; (8008aa4 <stimLib_tim6_Init+0xb0>)
 8008a08:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = STIM_LIB_STEPUP_PSC_INPUT;
 8008a0a:	f7fc faef 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4a25      	ldr	r2, [pc, #148]	; (8008aa8 <stimLib_tim6_Init+0xb4>)
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	461a      	mov	r2, r3
 8008a18:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008a1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a20:	3b01      	subs	r3, #1
 8008a22:	461a      	mov	r2, r3
 8008a24:	4b1e      	ldr	r3, [pc, #120]	; (8008aa0 <stimLib_tim6_Init+0xac>)
 8008a26:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a28:	4b1d      	ldr	r3, [pc, #116]	; (8008aa0 <stimLib_tim6_Init+0xac>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = STIM_LIB_STEPUP_ARR_INPUT;
 8008a2e:	f7fc fadd 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8008a32:	4604      	mov	r4, r0
 8008a34:	f7fc fada 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	4a1b      	ldr	r2, [pc, #108]	; (8008aa8 <stimLib_tim6_Init+0xb4>)
 8008a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a40:	461a      	mov	r2, r3
 8008a42:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008a46:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a4a:	fbb4 f3f3 	udiv	r3, r4, r3
 8008a4e:	4a17      	ldr	r2, [pc, #92]	; (8008aac <stimLib_tim6_Init+0xb8>)
 8008a50:	fba2 2303 	umull	r2, r3, r2, r3
 8008a54:	08db      	lsrs	r3, r3, #3
 8008a56:	3b01      	subs	r3, #1
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <stimLib_tim6_Init+0xac>)
 8008a5c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008a5e:	4b10      	ldr	r3, [pc, #64]	; (8008aa0 <stimLib_tim6_Init+0xac>)
 8008a60:	2280      	movs	r2, #128	; 0x80
 8008a62:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008a64:	480e      	ldr	r0, [pc, #56]	; (8008aa0 <stimLib_tim6_Init+0xac>)
 8008a66:	f7fc fcdf 	bl	8005428 <HAL_TIM_Base_Init>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <stimLib_tim6_Init+0x80>
	{
		return false;
 8008a70:	2300      	movs	r3, #0
 8008a72:	e011      	b.n	8008a98 <stimLib_tim6_Init+0xa4>
	}

	/* MSP :: TIMER 6 :: HAL_TIM_BASE_INIT >> HAL_TIM_Base_MspInit */
	stimLib_tim_basemspInit(&htim6);
 8008a74:	480a      	ldr	r0, [pc, #40]	; (8008aa0 <stimLib_tim6_Init+0xac>)
 8008a76:	f000 fb21 	bl	80090bc <stimLib_tim_basemspInit>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008a82:	1d3b      	adds	r3, r7, #4
 8008a84:	4619      	mov	r1, r3
 8008a86:	4806      	ldr	r0, [pc, #24]	; (8008aa0 <stimLib_tim6_Init+0xac>)
 8008a88:	f7fe f9f6 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <stimLib_tim6_Init+0xa2>
	{
		return false;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e000      	b.n	8008a98 <stimLib_tim6_Init+0xa4>
	}

	return STIM_LIB_RESOURCE_INIT_OK;
 8008a96:	2301      	movs	r3, #1
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd90      	pop	{r4, r7, pc}
 8008aa0:	2000027c 	.word	0x2000027c
 8008aa4:	40001000 	.word	0x40001000
 8008aa8:	04c4b400 	.word	0x04c4b400
 8008aac:	cccccccd 	.word	0xcccccccd

08008ab0 <stimLib_adc1_Init>:

bool stimLib_adc1_Init(void)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b090      	sub	sp, #64	; 0x40
 8008ab4:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode =
 8008ab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008aba:	2200      	movs	r2, #0
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	605a      	str	r2, [r3, #4]
 8008ac0:	609a      	str	r2, [r3, #8]
	{ 0 };
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig =
 8008ac2:	f107 031c 	add.w	r3, r7, #28
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	605a      	str	r2, [r3, #4]
 8008acc:	609a      	str	r2, [r3, #8]
 8008ace:	60da      	str	r2, [r3, #12]
 8008ad0:	611a      	str	r2, [r3, #16]
 8008ad2:	615a      	str	r2, [r3, #20]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 8008ad4:	1d3b      	adds	r3, r7, #4
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	605a      	str	r2, [r3, #4]
 8008adc:	609a      	str	r2, [r3, #8]
 8008ade:	60da      	str	r2, [r3, #12]
 8008ae0:	611a      	str	r2, [r3, #16]
 8008ae2:	615a      	str	r2, [r3, #20]
	{ 0 };

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8008ae4:	4b42      	ldr	r3, [pc, #264]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008ae6:	4a43      	ldr	r2, [pc, #268]	; (8008bf4 <stimLib_adc1_Init+0x144>)
 8008ae8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008aea:	4b41      	ldr	r3, [pc, #260]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008af0:	4b3f      	ldr	r3, [pc, #252]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008af6:	4b3e      	ldr	r3, [pc, #248]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008afc:	4b3c      	ldr	r3, [pc, #240]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008b02:	4b3b      	ldr	r3, [pc, #236]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b04:	2208      	movs	r2, #8
 8008b06:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8008b08:	4b39      	ldr	r3, [pc, #228]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8008b0e:	4b38      	ldr	r3, [pc, #224]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b10:	2201      	movs	r2, #1
 8008b12:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8008b14:	4b36      	ldr	r3, [pc, #216]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b16:	2201      	movs	r2, #1
 8008b18:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008b1a:	4b35      	ldr	r3, [pc, #212]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b22:	4b33      	ldr	r3, [pc, #204]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b28:	4b31      	ldr	r3, [pc, #196]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8008b2e:	4b30      	ldr	r3, [pc, #192]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008b36:	4b2e      	ldr	r3, [pc, #184]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b3c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8008b3e:	4b2c      	ldr	r3, [pc, #176]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008b46:	482a      	ldr	r0, [pc, #168]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b48:	f7f8 fe28 	bl	800179c <HAL_ADC_Init>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <stimLib_adc1_Init+0xa6>
	{
		return false;
 8008b52:	2300      	movs	r3, #0
 8008b54:	e047      	b.n	8008be6 <stimLib_adc1_Init+0x136>
	}

	/* MSP SETTING */
	stimLib_adc_mspInit(&hadc1);
 8008b56:	4826      	ldr	r0, [pc, #152]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b58:	f000 f938 	bl	8008dcc <stimLib_adc_mspInit>
	/* Set ADC error code to none */
	ADC_CLEAR_ERRORCODE(&hadc1);
 8008b5c:	4b24      	ldr	r3, [pc, #144]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	659a      	str	r2, [r3, #88]	; 0x58
	/* Initialize Lock */
	hadc1.Lock = HAL_UNLOCKED;
 8008b62:	4b23      	ldr	r3, [pc, #140]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008b6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b72:	4619      	mov	r1, r3
 8008b74:	481e      	ldr	r0, [pc, #120]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008b76:	f7fa fc6b 	bl	8003450 <HAL_ADCEx_MultiModeConfigChannel>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <stimLib_adc1_Init+0xd4>
	{
		return false;
 8008b80:	2300      	movs	r3, #0
 8008b82:	e030      	b.n	8008be6 <stimLib_adc1_Init+0x136>
	}

	/** Configure Analog WatchDog 1
	 */
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8008b84:	4b1c      	ldr	r3, [pc, #112]	; (8008bf8 <stimLib_adc1_Init+0x148>)
 8008b86:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8008b88:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8008b8c:	623b      	str	r3, [r7, #32]
	AnalogWDGConfig.Channel = ADC_CHANNEL_9;
 8008b8e:	4b1b      	ldr	r3, [pc, #108]	; (8008bfc <stimLib_adc1_Init+0x14c>)
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
	AnalogWDGConfig.ITMode = ENABLE;
 8008b92:	2301      	movs	r3, #1
 8008b94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	AnalogWDGConfig.HighThreshold = 2600;
 8008b98:	f640 2328 	movw	r3, #2600	; 0xa28
 8008b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	AnalogWDGConfig.LowThreshold = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8008ba2:	f107 031c 	add.w	r3, r7, #28
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	4811      	ldr	r0, [pc, #68]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008baa:	f7f9 ffb7 	bl	8002b1c <HAL_ADC_AnalogWDGConfig>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <stimLib_adc1_Init+0x108>
	{
		return false;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	e016      	b.n	8008be6 <stimLib_adc1_Init+0x136>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8008bb8:	4b10      	ldr	r3, [pc, #64]	; (8008bfc <stimLib_adc1_Init+0x14c>)
 8008bba:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8008bbc:	2306      	movs	r3, #6
 8008bbe:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008bc4:	237f      	movs	r3, #127	; 0x7f
 8008bc6:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008bc8:	2304      	movs	r3, #4
 8008bca:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008bd0:	1d3b      	adds	r3, r7, #4
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4806      	ldr	r0, [pc, #24]	; (8008bf0 <stimLib_adc1_Init+0x140>)
 8008bd6:	f7f9 fba5 	bl	8002324 <HAL_ADC_ConfigChannel>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <stimLib_adc1_Init+0x134>
	{
		return false;
 8008be0:	2300      	movs	r3, #0
 8008be2:	e000      	b.n	8008be6 <stimLib_adc1_Init+0x136>
	}
	return STIM_LIB_RESOURCE_INIT_OK;
 8008be4:	2301      	movs	r3, #1
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3740      	adds	r7, #64	; 0x40
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	2000008c 	.word	0x2000008c
 8008bf4:	50040000 	.word	0x50040000
 8008bf8:	7dc00000 	.word	0x7dc00000
 8008bfc:	25b00200 	.word	0x25b00200

08008c00 <stimLib_adc2_Init>:

bool stimLib_adc2_Init(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig =
 8008c06:	463b      	mov	r3, r7
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	605a      	str	r2, [r3, #4]
 8008c0e:	609a      	str	r2, [r3, #8]
 8008c10:	60da      	str	r2, [r3, #12]
 8008c12:	611a      	str	r2, [r3, #16]
 8008c14:	615a      	str	r2, [r3, #20]
	{ 0 };

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8008c16:	4b38      	ldr	r3, [pc, #224]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c18:	4a38      	ldr	r2, [pc, #224]	; (8008cfc <stimLib_adc2_Init+0xfc>)
 8008c1a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008c1c:	4b36      	ldr	r3, [pc, #216]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8008c22:	4b35      	ldr	r3, [pc, #212]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008c28:	4b33      	ldr	r3, [pc, #204]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	60da      	str	r2, [r3, #12]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008c2e:	4b32      	ldr	r3, [pc, #200]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008c34:	4b30      	ldr	r3, [pc, #192]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c36:	2208      	movs	r2, #8
 8008c38:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8008c3a:	4b2f      	ldr	r3, [pc, #188]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8008c40:	4b2d      	ldr	r3, [pc, #180]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 2;
 8008c46:	4b2c      	ldr	r3, [pc, #176]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c48:	2202      	movs	r2, #2
 8008c4a:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8008c4c:	4b2a      	ldr	r3, [pc, #168]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8008c54:	4b28      	ldr	r3, [pc, #160]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c56:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8008c5a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8008c5c:	4b26      	ldr	r3, [pc, #152]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c62:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8008c64:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008c6c:	4b22      	ldr	r3, [pc, #136]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c72:	635a      	str	r2, [r3, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8008c74:	4b20      	ldr	r3, [pc, #128]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8008c7c:	481e      	ldr	r0, [pc, #120]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c7e:	f7f8 fd8d 	bl	800179c <HAL_ADC_Init>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <stimLib_adc2_Init+0x8c>
	{
		return false;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e030      	b.n	8008cee <stimLib_adc2_Init+0xee>
	}
	/* MSP SETTING */
	stimLib_adc_mspInit(&hadc2);
 8008c8c:	481a      	ldr	r0, [pc, #104]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c8e:	f000 f89d 	bl	8008dcc <stimLib_adc_mspInit>
	/* Set ADC error code to none */
	ADC_CLEAR_ERRORCODE(&hadc2);
 8008c92:	4b19      	ldr	r3, [pc, #100]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	659a      	str	r2, [r3, #88]	; 0x58
	/* Initialize Lock */
	hadc2.Lock = HAL_UNLOCKED;
 8008c98:	4b17      	ldr	r3, [pc, #92]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8008ca0:	4b17      	ldr	r3, [pc, #92]	; (8008d00 <stimLib_adc2_Init+0x100>)
 8008ca2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8008ca4:	2306      	movs	r3, #6
 8008ca6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8008ca8:	2304      	movs	r3, #4
 8008caa:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008cac:	237f      	movs	r3, #127	; 0x7f
 8008cae:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008cb8:	463b      	mov	r3, r7
 8008cba:	4619      	mov	r1, r3
 8008cbc:	480e      	ldr	r0, [pc, #56]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008cbe:	f7f9 fb31 	bl	8002324 <HAL_ADC_ConfigChannel>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <stimLib_adc2_Init+0xcc>
	{
		return false;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e010      	b.n	8008cee <stimLib_adc2_Init+0xee>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <stimLib_adc2_Init+0x104>)
 8008cce:	603b      	str	r3, [r7, #0]
	sConfig.Channel = ADC_CHANNEL_12;
 8008cd0:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <stimLib_adc2_Init+0x104>)
 8008cd2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008cd8:	463b      	mov	r3, r7
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4806      	ldr	r0, [pc, #24]	; (8008cf8 <stimLib_adc2_Init+0xf8>)
 8008cde:	f7f9 fb21 	bl	8002324 <HAL_ADC_ConfigChannel>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <stimLib_adc2_Init+0xec>
	{
		return false;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e000      	b.n	8008cee <stimLib_adc2_Init+0xee>
	}
	return STIM_LIB_RESOURCE_INIT_OK;
 8008cec:	2301      	movs	r3, #1
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200000f0 	.word	0x200000f0
 8008cfc:	50040100 	.word	0x50040100
 8008d00:	2e300800 	.word	0x2e300800
 8008d04:	32601000 	.word	0x32601000

08008d08 <stimLib_gpioDeinit>:

/* DEINIT FUNCTION */
void stimLib_gpioDeinit(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOA,
 8008d0c:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8008d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d14:	f7fb f9fe 	bl	8004114 <HAL_GPIO_DeInit>
			STIM_LIB_STEP_UP_SW_PIN | STIM_LIB_STEP_UP_FEEDBACK_PIN
					| STIM_LIB_STIM_ANODE_PIN | STIM_LIB_STIM_CATHODE_PIN
					| STIM_LIB_DAC_ON_N_PIN | STIM_LIB_STIM_TRIGGER_OUTPUT_PIN
					| STIM_LIB_PEAK_DETECTION_R_PIN
					| STIM_LIB_PEAK_DETECTION_L_PIN);
	HAL_GPIO_DeInit(GPIOB,
 8008d18:	f241 11ff 	movw	r1, #4607	; 0x11ff
 8008d1c:	4804      	ldr	r0, [pc, #16]	; (8008d30 <stimLib_gpioDeinit+0x28>)
 8008d1e:	f7fb f9f9 	bl	8004114 <HAL_GPIO_DeInit>
			STIM_LIB_STIM_TRIGGER_INPUT_PIN | STIM_LIB_DAC_N0_PIN
					| STIM_LIB_DAC_N1_PIN | STIM_LIB_DAC_N2_PIN
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN | STIM_LIB_PEAK_DISCHG_SW_PIN);
	HAL_GPIO_DeInit(STIM_LIB_PEAK_DETECTION_PWR_SW_GPIO_PORT,
 8008d22:	2108      	movs	r1, #8
 8008d24:	4803      	ldr	r0, [pc, #12]	; (8008d34 <stimLib_gpioDeinit+0x2c>)
 8008d26:	f7fb f9f5 	bl	8004114 <HAL_GPIO_DeInit>
			STIM_LIB_PEAK_DETECTION_PWR_SW_PIN);
}
 8008d2a:	bf00      	nop
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	48000400 	.word	0x48000400
 8008d34:	48001c00 	.word	0x48001c00

08008d38 <stimLib_dmaDeinit>:

void stimLib_dmaDeinit(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
	HAL_DMA_DeInit(&hdma_adc1);
 8008d3c:	4806      	ldr	r0, [pc, #24]	; (8008d58 <stimLib_dmaDeinit+0x20>)
 8008d3e:	f7fa fe27 	bl	8003990 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_adc2);
 8008d42:	4806      	ldr	r0, [pc, #24]	; (8008d5c <stimLib_dmaDeinit+0x24>)
 8008d44:	f7fa fe24 	bl	8003990 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim2_ch2_ch4);
 8008d48:	4805      	ldr	r0, [pc, #20]	; (8008d60 <stimLib_dmaDeinit+0x28>)
 8008d4a:	f7fa fe21 	bl	8003990 <HAL_DMA_DeInit>
	HAL_DMA_DeInit(&hdma_tim2_ch3);
 8008d4e:	4805      	ldr	r0, [pc, #20]	; (8008d64 <stimLib_dmaDeinit+0x2c>)
 8008d50:	f7fa fe1e 	bl	8003990 <HAL_DMA_DeInit>
}
 8008d54:	bf00      	nop
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20000154 	.word	0x20000154
 8008d5c:	2000019c 	.word	0x2000019c
 8008d60:	200002c8 	.word	0x200002c8
 8008d64:	20000310 	.word	0x20000310

08008d68 <stimLib_tim1_Deinit>:

void stimLib_tim1_Deinit(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_DeInit(&htim1);
 8008d6c:	4802      	ldr	r0, [pc, #8]	; (8008d78 <stimLib_tim1_Deinit+0x10>)
 8008d6e:	f7fc fff4 	bl	8005d5a <HAL_TIM_PWM_DeInit>
}
 8008d72:	bf00      	nop
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	200001e4 	.word	0x200001e4

08008d7c <stimLib_tim2_Deinit>:

void stimLib_tim2_Deinit(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_DeInit(&htim2);
 8008d80:	4802      	ldr	r0, [pc, #8]	; (8008d8c <stimLib_tim2_Deinit+0x10>)
 8008d82:	f7fc ffea 	bl	8005d5a <HAL_TIM_PWM_DeInit>
}
 8008d86:	bf00      	nop
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000230 	.word	0x20000230

08008d90 <stimLib_tim6_Deinit>:

void stimLib_tim6_Deinit(void)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_DeInit(&htim6);
 8008d94:	4802      	ldr	r0, [pc, #8]	; (8008da0 <stimLib_tim6_Deinit+0x10>)
 8008d96:	f7fc ffe0 	bl	8005d5a <HAL_TIM_PWM_DeInit>
}
 8008d9a:	bf00      	nop
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	2000027c 	.word	0x2000027c

08008da4 <stimLib_adc1_Deinit>:

void stimLib_adc1_Deinit(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc1);
 8008da8:	4802      	ldr	r0, [pc, #8]	; (8008db4 <stimLib_adc1_Deinit+0x10>)
 8008daa:	f7f8 fe47 	bl	8001a3c <HAL_ADC_DeInit>
}
 8008dae:	bf00      	nop
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	2000008c 	.word	0x2000008c

08008db8 <stimLib_adc2_Deinit>:

void stimLib_adc2_Deinit(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
	HAL_ADC_DeInit(&hadc2);
 8008dbc:	4802      	ldr	r0, [pc, #8]	; (8008dc8 <stimLib_adc2_Deinit+0x10>)
 8008dbe:	f7f8 fe3d 	bl	8001a3c <HAL_ADC_DeInit>
}
 8008dc2:	bf00      	nop
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	200000f0 	.word	0x200000f0

08008dcc <stimLib_adc_mspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED = 0;

/* BASE TIMER MSP INIT :: NON APPLICATION JUST STIMLIB */
void stimLib_adc_mspInit(ADC_HandleTypeDef *hadc)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08c      	sub	sp, #48	; 0x30
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8008dd4:	f107 031c 	add.w	r3, r7, #28
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	605a      	str	r2, [r3, #4]
 8008dde:	609a      	str	r2, [r3, #8]
 8008de0:	60da      	str	r2, [r3, #12]
 8008de2:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (hadc->Instance == ADC1)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a5e      	ldr	r2, [pc, #376]	; (8008f64 <stimLib_adc_mspInit+0x198>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d15c      	bne.n	8008ea8 <stimLib_adc_mspInit+0xdc>
	{
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		HAL_RCC_ADC_CLK_ENABLED++;
 8008dee:	4b5e      	ldr	r3, [pc, #376]	; (8008f68 <stimLib_adc_mspInit+0x19c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3301      	adds	r3, #1
 8008df4:	4a5c      	ldr	r2, [pc, #368]	; (8008f68 <stimLib_adc_mspInit+0x19c>)
 8008df6:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_ADC_CLK_ENABLED == 1)
 8008df8:	4b5b      	ldr	r3, [pc, #364]	; (8008f68 <stimLib_adc_mspInit+0x19c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d10b      	bne.n	8008e18 <stimLib_adc_mspInit+0x4c>
		{
			__HAL_RCC_ADC_CLK_ENABLE();
 8008e00:	4b5a      	ldr	r3, [pc, #360]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e04:	4a59      	ldr	r2, [pc, #356]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008e06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e0c:	4b57      	ldr	r3, [pc, #348]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e14:	61bb      	str	r3, [r7, #24]
 8008e16:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008e18:	4b54      	ldr	r3, [pc, #336]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1c:	4a53      	ldr	r2, [pc, #332]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008e1e:	f043 0301 	orr.w	r3, r3, #1
 8008e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e24:	4b51      	ldr	r3, [pc, #324]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	617b      	str	r3, [r7, #20]
 8008e2e:	697b      	ldr	r3, [r7, #20]
		/**ADC1 GPIO Configuration
		 PA4     ------> ADC1_IN9
		 */
		GPIO_InitStruct.Pin = STIM_LIB_STEP_UP_FEEDBACK_PIN;
 8008e30:	2310      	movs	r3, #16
 8008e32:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008e34:	230b      	movs	r3, #11
 8008e36:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(STIM_LIB_STEP_UP_FEEDBACK_GPIO_PORT, &GPIO_InitStruct);
 8008e3c:	f107 031c 	add.w	r3, r7, #28
 8008e40:	4619      	mov	r1, r3
 8008e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e46:	f7fa fff3 	bl	8003e30 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA2_Channel3;
 8008e4a:	4b49      	ldr	r3, [pc, #292]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e4c:	4a49      	ldr	r2, [pc, #292]	; (8008f74 <stimLib_adc_mspInit+0x1a8>)
 8008e4e:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_0;
 8008e50:	4b47      	ldr	r3, [pc, #284]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e56:	4b46      	ldr	r3, [pc, #280]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e5c:	4b44      	ldr	r3, [pc, #272]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008e62:	4b43      	ldr	r3, [pc, #268]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e64:	2280      	movs	r2, #128	; 0x80
 8008e66:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008e68:	4b41      	ldr	r3, [pc, #260]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e6e:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008e70:	4b3f      	ldr	r3, [pc, #252]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e76:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008e78:	4b3d      	ldr	r3, [pc, #244]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008e7e:	4b3c      	ldr	r3, [pc, #240]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008e84:	483a      	ldr	r0, [pc, #232]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e86:	f7fa fccb 	bl	8003820 <HAL_DMA_Init>
		{
			//Error_Handler();
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a38      	ldr	r2, [pc, #224]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8008e90:	4a37      	ldr	r2, [pc, #220]	; (8008f70 <stimLib_adc_mspInit+0x1a4>)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6293      	str	r3, [r2, #40]	; 0x28

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8008e96:	2200      	movs	r2, #0
 8008e98:	2101      	movs	r1, #1
 8008e9a:	2012      	movs	r0, #18
 8008e9c:	f7fa fc7b 	bl	8003796 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008ea0:	2012      	movs	r0, #18
 8008ea2:	f7fa fc94 	bl	80037ce <HAL_NVIC_EnableIRQ>

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc2);

	}

}
 8008ea6:	e058      	b.n	8008f5a <stimLib_adc_mspInit+0x18e>
	else if (hadc->Instance == ADC2)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a32      	ldr	r2, [pc, #200]	; (8008f78 <stimLib_adc_mspInit+0x1ac>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d153      	bne.n	8008f5a <stimLib_adc_mspInit+0x18e>
		HAL_RCC_ADC_CLK_ENABLED++;
 8008eb2:	4b2d      	ldr	r3, [pc, #180]	; (8008f68 <stimLib_adc_mspInit+0x19c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	4a2b      	ldr	r2, [pc, #172]	; (8008f68 <stimLib_adc_mspInit+0x19c>)
 8008eba:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_ADC_CLK_ENABLED == 1)
 8008ebc:	4b2a      	ldr	r3, [pc, #168]	; (8008f68 <stimLib_adc_mspInit+0x19c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d10b      	bne.n	8008edc <stimLib_adc_mspInit+0x110>
			__HAL_RCC_ADC_CLK_ENABLE();
 8008ec4:	4b29      	ldr	r3, [pc, #164]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec8:	4a28      	ldr	r2, [pc, #160]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008eca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008ece:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ed0:	4b26      	ldr	r3, [pc, #152]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ed8:	613b      	str	r3, [r7, #16]
 8008eda:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008edc:	4b23      	ldr	r3, [pc, #140]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee0:	4a22      	ldr	r2, [pc, #136]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008ee2:	f043 0301 	orr.w	r3, r3, #1
 8008ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ee8:	4b20      	ldr	r3, [pc, #128]	; (8008f6c <stimLib_adc_mspInit+0x1a0>)
 8008eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = STIM_LIB_PEAK_DETECTION_R_PIN
 8008ef4:	23c0      	movs	r3, #192	; 0xc0
 8008ef6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008ef8:	230b      	movs	r3, #11
 8008efa:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f00:	f107 031c 	add.w	r3, r7, #28
 8008f04:	4619      	mov	r1, r3
 8008f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f0a:	f7fa ff91 	bl	8003e30 <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA1_Channel2;
 8008f0e:	4b1b      	ldr	r3, [pc, #108]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f10:	4a1b      	ldr	r2, [pc, #108]	; (8008f80 <stimLib_adc_mspInit+0x1b4>)
 8008f12:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Request = DMA_REQUEST_0;
 8008f14:	4b19      	ldr	r3, [pc, #100]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f1a:	4b18      	ldr	r3, [pc, #96]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f20:	4b16      	ldr	r3, [pc, #88]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8008f26:	4b15      	ldr	r3, [pc, #84]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f28:	2280      	movs	r2, #128	; 0x80
 8008f2a:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008f2c:	4b13      	ldr	r3, [pc, #76]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f32:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008f34:	4b11      	ldr	r3, [pc, #68]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f3a:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f3e:	2220      	movs	r2, #32
 8008f40:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8008f42:	4b0e      	ldr	r3, [pc, #56]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8008f48:	480c      	ldr	r0, [pc, #48]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f4a:	f7fa fc69 	bl	8003820 <HAL_DMA_Init>
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc2);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a0a      	ldr	r2, [pc, #40]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f52:	64da      	str	r2, [r3, #76]	; 0x4c
 8008f54:	4a09      	ldr	r2, [pc, #36]	; (8008f7c <stimLib_adc_mspInit+0x1b0>)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6293      	str	r3, [r2, #40]	; 0x28
}
 8008f5a:	bf00      	nop
 8008f5c:	3730      	adds	r7, #48	; 0x30
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	50040000 	.word	0x50040000
 8008f68:	200003e8 	.word	0x200003e8
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	20000154 	.word	0x20000154
 8008f74:	40020430 	.word	0x40020430
 8008f78:	50040100 	.word	0x50040100
 8008f7c:	2000019c 	.word	0x2000019c
 8008f80:	4002001c 	.word	0x4002001c

08008f84 <stimLib_tim_pwmmspInit>:

void stimLib_tim_pwmmspInit(TIM_HandleTypeDef *htim_pwm)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
	if (htim_pwm->Instance == TIM1)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a44      	ldr	r2, [pc, #272]	; (80090a4 <stimLib_tim_pwmmspInit+0x120>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d114      	bne.n	8008fc0 <stimLib_tim_pwmmspInit+0x3c>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8008f96:	4b44      	ldr	r3, [pc, #272]	; (80090a8 <stimLib_tim_pwmmspInit+0x124>)
 8008f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f9a:	4a43      	ldr	r2, [pc, #268]	; (80090a8 <stimLib_tim_pwmmspInit+0x124>)
 8008f9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8008fa2:	4b41      	ldr	r3, [pc, #260]	; (80090a8 <stimLib_tim_pwmmspInit+0x124>)
 8008fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2102      	movs	r1, #2
 8008fb2:	2019      	movs	r0, #25
 8008fb4:	f7fa fbef 	bl	8003796 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8008fb8:	2019      	movs	r0, #25
 8008fba:	f7fa fc08 	bl	80037ce <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}

}
 8008fbe:	e06c      	b.n	800909a <stimLib_tim_pwmmspInit+0x116>
	else if (htim_pwm->Instance == TIM2)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc8:	d167      	bne.n	800909a <stimLib_tim_pwmmspInit+0x116>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8008fca:	4b37      	ldr	r3, [pc, #220]	; (80090a8 <stimLib_tim_pwmmspInit+0x124>)
 8008fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fce:	4a36      	ldr	r2, [pc, #216]	; (80090a8 <stimLib_tim_pwmmspInit+0x124>)
 8008fd0:	f043 0301 	orr.w	r3, r3, #1
 8008fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8008fd6:	4b34      	ldr	r3, [pc, #208]	; (80090a8 <stimLib_tim_pwmmspInit+0x124>)
 8008fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	60bb      	str	r3, [r7, #8]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
		hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8008fe2:	4b32      	ldr	r3, [pc, #200]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8008fe4:	4a32      	ldr	r2, [pc, #200]	; (80090b0 <stimLib_tim_pwmmspInit+0x12c>)
 8008fe6:	601a      	str	r2, [r3, #0]
		hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8008fe8:	4b30      	ldr	r3, [pc, #192]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8008fea:	2204      	movs	r2, #4
 8008fec:	605a      	str	r2, [r3, #4]
		hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008fee:	4b2f      	ldr	r3, [pc, #188]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8008ff0:	2210      	movs	r2, #16
 8008ff2:	609a      	str	r2, [r3, #8]
		hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ff4:	4b2d      	ldr	r3, [pc, #180]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	60da      	str	r2, [r3, #12]
		hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8008ffa:	4b2c      	ldr	r3, [pc, #176]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8008ffc:	2280      	movs	r2, #128	; 0x80
 8008ffe:	611a      	str	r2, [r3, #16]
		hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009000:	4b2a      	ldr	r3, [pc, #168]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8009002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009006:	615a      	str	r2, [r3, #20]
		hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009008:	4b28      	ldr	r3, [pc, #160]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 800900a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800900e:	619a      	str	r2, [r3, #24]
		hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8009010:	4b26      	ldr	r3, [pc, #152]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8009012:	2220      	movs	r2, #32
 8009014:	61da      	str	r2, [r3, #28]
		hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009016:	4b25      	ldr	r3, [pc, #148]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8009018:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800901c:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800901e:	4823      	ldr	r0, [pc, #140]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8009020:	f7fa fbfe 	bl	8003820 <HAL_DMA_Init>
		__HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC2], hdma_tim2_ch2_ch4);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a21      	ldr	r2, [pc, #132]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8009028:	629a      	str	r2, [r3, #40]	; 0x28
 800902a:	4a20      	ldr	r2, [pc, #128]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6293      	str	r3, [r2, #40]	; 0x28
		__HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC4], hdma_tim2_ch2_ch4);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a1e      	ldr	r2, [pc, #120]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8009034:	631a      	str	r2, [r3, #48]	; 0x30
 8009036:	4a1d      	ldr	r2, [pc, #116]	; (80090ac <stimLib_tim_pwmmspInit+0x128>)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6293      	str	r3, [r2, #40]	; 0x28
		hdma_tim2_ch3.Instance = DMA1_Channel1;
 800903c:	4b1d      	ldr	r3, [pc, #116]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 800903e:	4a1e      	ldr	r2, [pc, #120]	; (80090b8 <stimLib_tim_pwmmspInit+0x134>)
 8009040:	601a      	str	r2, [r3, #0]
		hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 8009042:	4b1c      	ldr	r3, [pc, #112]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 8009044:	2204      	movs	r2, #4
 8009046:	605a      	str	r2, [r3, #4]
		hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009048:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 800904a:	2210      	movs	r2, #16
 800904c:	609a      	str	r2, [r3, #8]
		hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800904e:	4b19      	ldr	r3, [pc, #100]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 8009050:	2200      	movs	r2, #0
 8009052:	60da      	str	r2, [r3, #12]
		hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8009054:	4b17      	ldr	r3, [pc, #92]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 8009056:	2280      	movs	r2, #128	; 0x80
 8009058:	611a      	str	r2, [r3, #16]
		hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800905a:	4b16      	ldr	r3, [pc, #88]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 800905c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009060:	615a      	str	r2, [r3, #20]
		hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009062:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 8009064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009068:	619a      	str	r2, [r3, #24]
		hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 800906a:	4b12      	ldr	r3, [pc, #72]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 800906c:	2220      	movs	r2, #32
 800906e:	61da      	str	r2, [r3, #28]
		hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009070:	4b10      	ldr	r3, [pc, #64]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 8009072:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009076:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8009078:	480e      	ldr	r0, [pc, #56]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 800907a:	f7fa fbd1 	bl	8003820 <HAL_DMA_Init>
		__HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC3], hdma_tim2_ch3);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a0c      	ldr	r2, [pc, #48]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 8009082:	62da      	str	r2, [r3, #44]	; 0x2c
 8009084:	4a0b      	ldr	r2, [pc, #44]	; (80090b4 <stimLib_tim_pwmmspInit+0x130>)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6293      	str	r3, [r2, #40]	; 0x28
		HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800908a:	2200      	movs	r2, #0
 800908c:	2102      	movs	r1, #2
 800908e:	201c      	movs	r0, #28
 8009090:	f7fa fb81 	bl	8003796 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009094:	201c      	movs	r0, #28
 8009096:	f7fa fb9a 	bl	80037ce <HAL_NVIC_EnableIRQ>
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	40012c00 	.word	0x40012c00
 80090a8:	40021000 	.word	0x40021000
 80090ac:	200002c8 	.word	0x200002c8
 80090b0:	40020080 	.word	0x40020080
 80090b4:	20000310 	.word	0x20000310
 80090b8:	40020008 	.word	0x40020008

080090bc <stimLib_tim_basemspInit>:

void stimLib_tim_basemspInit(TIM_HandleTypeDef *htim_base)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM6)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a0d      	ldr	r2, [pc, #52]	; (8009100 <stimLib_tim_basemspInit+0x44>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d113      	bne.n	80090f6 <stimLib_tim_basemspInit+0x3a>
	{
		__HAL_RCC_TIM6_CLK_ENABLE();
 80090ce:	4b0d      	ldr	r3, [pc, #52]	; (8009104 <stimLib_tim_basemspInit+0x48>)
 80090d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d2:	4a0c      	ldr	r2, [pc, #48]	; (8009104 <stimLib_tim_basemspInit+0x48>)
 80090d4:	f043 0310 	orr.w	r3, r3, #16
 80090d8:	6593      	str	r3, [r2, #88]	; 0x58
 80090da:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <stimLib_tim_basemspInit+0x48>)
 80090dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090de:	f003 0310 	and.w	r3, r3, #16
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 80090e6:	2200      	movs	r2, #0
 80090e8:	2102      	movs	r1, #2
 80090ea:	2036      	movs	r0, #54	; 0x36
 80090ec:	f7fa fb53 	bl	8003796 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80090f0:	2036      	movs	r0, #54	; 0x36
 80090f2:	f7fa fb6c 	bl	80037ce <HAL_NVIC_EnableIRQ>
	}
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	40001000 	.word	0x40001000
 8009104:	40021000 	.word	0x40021000

08009108 <stimLib_tim_msppostInit>:

/* TIMER PWM MSP INIT :: NVIC and DMA */
/* TIMER CONTROL PIN MSP INIT */
void stimLib_tim_msppostInit(TIM_HandleTypeDef *htim)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08a      	sub	sp, #40	; 0x28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8009110:	f107 0314 	add.w	r3, r7, #20
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	609a      	str	r2, [r3, #8]
 800911c:	60da      	str	r2, [r3, #12]
 800911e:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (htim->Instance == TIM1)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a27      	ldr	r2, [pc, #156]	; (80091c4 <stimLib_tim_msppostInit+0xbc>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d11e      	bne.n	8009168 <stimLib_tim_msppostInit+0x60>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800912a:	4b27      	ldr	r3, [pc, #156]	; (80091c8 <stimLib_tim_msppostInit+0xc0>)
 800912c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912e:	4a26      	ldr	r2, [pc, #152]	; (80091c8 <stimLib_tim_msppostInit+0xc0>)
 8009130:	f043 0301 	orr.w	r3, r3, #1
 8009134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009136:	4b24      	ldr	r3, [pc, #144]	; (80091c8 <stimLib_tim_msppostInit+0xc0>)
 8009138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	693b      	ldr	r3, [r7, #16]
		/**TIM1 GPIO Configuration
		 PA8     ------> TIM1_CH1
		 */
		GPIO_InitStruct.Pin = STIM_LIB_STEP_UP_SW_PIN;
 8009142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009146:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009148:	2302      	movs	r3, #2
 800914a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800914c:	2300      	movs	r3, #0
 800914e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009150:	2300      	movs	r3, #0
 8009152:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009154:	2301      	movs	r3, #1
 8009156:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(STIM_LIB_STEP_UP_SW_GPIO_PORT, &GPIO_InitStruct);
 8009158:	f107 0314 	add.w	r3, r7, #20
 800915c:	4619      	mov	r1, r3
 800915e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009162:	f7fa fe65 	bl	8003e30 <HAL_GPIO_Init>
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	}
}
 8009166:	e028      	b.n	80091ba <stimLib_tim_msppostInit+0xb2>
	else if (htim->Instance == TIM2)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009170:	d123      	bne.n	80091ba <stimLib_tim_msppostInit+0xb2>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8009172:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <stimLib_tim_msppostInit+0xc0>)
 8009174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009176:	4a14      	ldr	r2, [pc, #80]	; (80091c8 <stimLib_tim_msppostInit+0xc0>)
 8009178:	f043 0301 	orr.w	r3, r3, #1
 800917c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800917e:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <stimLib_tim_msppostInit+0xc0>)
 8009180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = STIM_LIB_STIM_ANODE_PIN
 800918a:	232e      	movs	r3, #46	; 0x2e
 800918c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800918e:	2302      	movs	r3, #2
 8009190:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009192:	2300      	movs	r3, #0
 8009194:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009196:	2303      	movs	r3, #3
 8009198:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800919a:	2301      	movs	r3, #1
 800919c:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800919e:	f107 0314 	add.w	r3, r7, #20
 80091a2:	4619      	mov	r1, r3
 80091a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091a8:	f7fa fe42 	bl	8003e30 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	4619      	mov	r1, r3
 80091b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091b6:	f7fa fe3b 	bl	8003e30 <HAL_GPIO_Init>
}
 80091ba:	bf00      	nop
 80091bc:	3728      	adds	r7, #40	; 0x28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	40012c00 	.word	0x40012c00
 80091c8:	40021000 	.word	0x40021000

080091cc <stimLib_stateGet>:
{ 0, 0, 0, NULL }, /* 10Hz, Pulse Width 1ms, DAC 1, no callback */

{ false, false, 0, false, 0, false } };

stim_lib_state_t stimLib_stateGet()
{
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
	return STIM_LIB_CUR_STATE;
 80091d0:	4b03      	ldr	r3, [pc, #12]	; (80091e0 <stimLib_stateGet+0x14>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	200003ec 	.word	0x200003ec

080091e4 <stimLib_stateSet>:

bool stimLib_stateSet(stim_lib_state_t set_state)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	71fb      	strb	r3, [r7, #7]
	bool rslt = false;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]

	if (STIM_LIB_CUR_STATE != set_state)
 80091f2:	4b33      	ldr	r3, [pc, #204]	; (80092c0 <stimLib_stateSet+0xdc>)
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	79fa      	ldrb	r2, [r7, #7]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d059      	beq.n	80092b0 <stimLib_stateSet+0xcc>
	{
		switch (set_state)
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	2b05      	cmp	r3, #5
 8009200:	d844      	bhi.n	800928c <stimLib_stateSet+0xa8>
 8009202:	a201      	add	r2, pc, #4	; (adr r2, 8009208 <stimLib_stateSet+0x24>)
 8009204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009208:	08009221 	.word	0x08009221
 800920c:	0800922f 	.word	0x0800922f
 8009210:	08009255 	.word	0x08009255
 8009214:	0800926b 	.word	0x0800926b
 8009218:	08009279 	.word	0x08009279
 800921c:	08009287 	.word	0x08009287
		{
		case stim_lib_state_uninitialized:
			if (STIM_LIB_CUR_STATE == stim_lib_state_idle)
 8009220:	4b27      	ldr	r3, [pc, #156]	; (80092c0 <stimLib_stateSet+0xdc>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d134      	bne.n	8009292 <stimLib_stateSet+0xae>
			{
				rslt = true;
 8009228:	2301      	movs	r3, #1
 800922a:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800922c:	e031      	b.n	8009292 <stimLib_stateSet+0xae>

		case stim_lib_state_idle:
			if (STIM_LIB_CUR_STATE == stim_lib_state_uninitialized || STIM_LIB_CUR_STATE == stim_lib_state_session_idle
 800922e:	4b24      	ldr	r3, [pc, #144]	; (80092c0 <stimLib_stateSet+0xdc>)
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00b      	beq.n	800924e <stimLib_stateSet+0x6a>
 8009236:	4b22      	ldr	r3, [pc, #136]	; (80092c0 <stimLib_stateSet+0xdc>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b02      	cmp	r3, #2
 800923c:	d007      	beq.n	800924e <stimLib_stateSet+0x6a>
					|| STIM_LIB_CUR_STATE == stim_lib_state_stimulating || STIM_LIB_CUR_STATE == stim_lib_state_stim_stopping)
 800923e:	4b20      	ldr	r3, [pc, #128]	; (80092c0 <stimLib_stateSet+0xdc>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b03      	cmp	r3, #3
 8009244:	d003      	beq.n	800924e <stimLib_stateSet+0x6a>
 8009246:	4b1e      	ldr	r3, [pc, #120]	; (80092c0 <stimLib_stateSet+0xdc>)
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b04      	cmp	r3, #4
 800924c:	d123      	bne.n	8009296 <stimLib_stateSet+0xb2>
			{
				rslt = true;
 800924e:	2301      	movs	r3, #1
 8009250:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8009252:	e020      	b.n	8009296 <stimLib_stateSet+0xb2>

		case stim_lib_state_session_idle:
			if (STIM_LIB_CUR_STATE == stim_lib_state_idle || STIM_LIB_CUR_STATE == stim_lib_state_stim_stopping)
 8009254:	4b1a      	ldr	r3, [pc, #104]	; (80092c0 <stimLib_stateSet+0xdc>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d003      	beq.n	8009264 <stimLib_stateSet+0x80>
 800925c:	4b18      	ldr	r3, [pc, #96]	; (80092c0 <stimLib_stateSet+0xdc>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b04      	cmp	r3, #4
 8009262:	d11a      	bne.n	800929a <stimLib_stateSet+0xb6>
			{
				rslt = true;
 8009264:	2301      	movs	r3, #1
 8009266:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8009268:	e017      	b.n	800929a <stimLib_stateSet+0xb6>

		case stim_lib_state_stimulating:
			if (STIM_LIB_CUR_STATE == stim_lib_state_session_idle)
 800926a:	4b15      	ldr	r3, [pc, #84]	; (80092c0 <stimLib_stateSet+0xdc>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d115      	bne.n	800929e <stimLib_stateSet+0xba>
			{
				rslt = true;
 8009272:	2301      	movs	r3, #1
 8009274:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8009276:	e012      	b.n	800929e <stimLib_stateSet+0xba>

		case stim_lib_state_stim_stopping:
			if (STIM_LIB_CUR_STATE == stim_lib_state_stimulating)
 8009278:	4b11      	ldr	r3, [pc, #68]	; (80092c0 <stimLib_stateSet+0xdc>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b03      	cmp	r3, #3
 800927e:	d110      	bne.n	80092a2 <stimLib_stateSet+0xbe>
			{
				rslt = true;
 8009280:	2301      	movs	r3, #1
 8009282:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8009284:	e00d      	b.n	80092a2 <stimLib_stateSet+0xbe>

		case stim_lib_state_error:
			rslt = true;
 8009286:	2301      	movs	r3, #1
 8009288:	73fb      	strb	r3, [r7, #15]
			break;
 800928a:	e00b      	b.n	80092a4 <stimLib_stateSet+0xc0>

		default:
			rslt = false;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
			break;
 8009290:	e008      	b.n	80092a4 <stimLib_stateSet+0xc0>
			break;
 8009292:	bf00      	nop
 8009294:	e006      	b.n	80092a4 <stimLib_stateSet+0xc0>
			break;
 8009296:	bf00      	nop
 8009298:	e004      	b.n	80092a4 <stimLib_stateSet+0xc0>
			break;
 800929a:	bf00      	nop
 800929c:	e002      	b.n	80092a4 <stimLib_stateSet+0xc0>
			break;
 800929e:	bf00      	nop
 80092a0:	e000      	b.n	80092a4 <stimLib_stateSet+0xc0>
			break;
 80092a2:	bf00      	nop
		}

		if (rslt == true)
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <stimLib_stateSet+0xcc>
		{
			STIM_LIB_CUR_STATE = set_state;
 80092aa:	4a05      	ldr	r2, [pc, #20]	; (80092c0 <stimLib_stateSet+0xdc>)
 80092ac:	79fb      	ldrb	r3, [r7, #7]
 80092ae:	7013      	strb	r3, [r2, #0]
		}

	}

	return rslt;
 80092b0:	7bfb      	ldrb	r3, [r7, #15]

}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	200003ec 	.word	0x200003ec

080092c4 <stimLib_stateSigParamSet>:

void stimLib_stateSigParamSet(stim_signal_cfg_t *cfg)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	if (stimLib_signalParamCheck(cfg) == false)
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f889 	bl	80093e4 <stimLib_signalParamCheck>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f083 0301 	eor.w	r3, r3, #1
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d110      	bne.n	8009300 <stimLib_stateSigParamSet+0x3c>
	{
		return;
	}

	STIM_LIB_STATE_SIG_FREQ = cfg->freq;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	781a      	ldrb	r2, [r3, #0]
 80092e2:	4b09      	ldr	r3, [pc, #36]	; (8009308 <stimLib_stateSigParamSet+0x44>)
 80092e4:	711a      	strb	r2, [r3, #4]
	STIM_LIB_STATE_SIG_PW = cfg->pulse_width;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	885a      	ldrh	r2, [r3, #2]
 80092ea:	4b07      	ldr	r3, [pc, #28]	; (8009308 <stimLib_stateSigParamSet+0x44>)
 80092ec:	80da      	strh	r2, [r3, #6]
	STIM_LIB_STATE_SIG_DEGREE = cfg->degree;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	791a      	ldrb	r2, [r3, #4]
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <stimLib_stateSigParamSet+0x44>)
 80092f4:	721a      	strb	r2, [r3, #8]
	STIM_LIB_STATE_SIG_PEAK_DET_CALLBACK = cfg->peak_detect_callback;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	4a03      	ldr	r2, [pc, #12]	; (8009308 <stimLib_stateSigParamSet+0x44>)
 80092fc:	60d3      	str	r3, [r2, #12]
 80092fe:	e000      	b.n	8009302 <stimLib_stateSigParamSet+0x3e>
		return;
 8009300:	bf00      	nop
}
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	200003ec 	.word	0x200003ec

0800930c <stimLib_stateTrgParamSet>:

void stimLib_stateTrgParamSet(stim_trg_cfg_t *cfg)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
	if (stimLib_triggerParamCheck(cfg) == false)
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f89d 	bl	8009454 <stimLib_triggerParamCheck>
 800931a:	4603      	mov	r3, r0
 800931c:	f083 0301 	eor.w	r3, r3, #1
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d118      	bne.n	8009358 <stimLib_stateTrgParamSet+0x4c>
	{
		return;
	}

	STIM_LIB_STATE_TRG_VOLT_PRESTART = cfg->volt_prestart;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	781a      	ldrb	r2, [r3, #0]
 800932a:	4b0d      	ldr	r3, [pc, #52]	; (8009360 <stimLib_stateTrgParamSet+0x54>)
 800932c:	741a      	strb	r2, [r3, #16]

	STIM_LIB_STATE_TRG_OUT_ENABLE = cfg->trg_out_enable;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	785a      	ldrb	r2, [r3, #1]
 8009332:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <stimLib_stateTrgParamSet+0x54>)
 8009334:	745a      	strb	r2, [r3, #17]
	STIM_LIB_STATE_TRG_OUT_ACT_POL = cfg->trg_out_active_pol;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	789a      	ldrb	r2, [r3, #2]
 800933a:	4b09      	ldr	r3, [pc, #36]	; (8009360 <stimLib_stateTrgParamSet+0x54>)
 800933c:	749a      	strb	r2, [r3, #18]

	STIM_LIB_STATE_TRG_IN_ENABLE = cfg->trg_in_enable;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	78da      	ldrb	r2, [r3, #3]
 8009342:	4b07      	ldr	r3, [pc, #28]	; (8009360 <stimLib_stateTrgParamSet+0x54>)
 8009344:	74da      	strb	r2, [r3, #19]
	STIM_LIB_STATE_TRG_IN_ACT_POL = cfg->trg_in_active_pol;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	791a      	ldrb	r2, [r3, #4]
 800934a:	4b05      	ldr	r3, [pc, #20]	; (8009360 <stimLib_stateTrgParamSet+0x54>)
 800934c:	751a      	strb	r2, [r3, #20]
	STIM_LIB_STATE_TRG_IN_TOGGLED = cfg->trg_in_toggled;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	795a      	ldrb	r2, [r3, #5]
 8009352:	4b03      	ldr	r3, [pc, #12]	; (8009360 <stimLib_stateTrgParamSet+0x54>)
 8009354:	755a      	strb	r2, [r3, #21]
 8009356:	e000      	b.n	800935a <stimLib_stateTrgParamSet+0x4e>
		return;
 8009358:	bf00      	nop

}
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	200003ec 	.word	0x200003ec

08009364 <stimLib_stateSigParamCheck>:
		return false;
	}
}

bool stimLib_stateSigParamCheck(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
	if (stimLib_signalParamCheck(&STIM_LIB_STATE_SIG) == true
 8009368:	4808      	ldr	r0, [pc, #32]	; (800938c <stimLib_stateSigParamCheck+0x28>)
 800936a:	f000 f83b 	bl	80093e4 <stimLib_signalParamCheck>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d007      	beq.n	8009384 <stimLib_stateSigParamCheck+0x20>
			&& stimLib_triggerParamCheck(&STIM_LIB_STATE_TRG) == true)
 8009374:	4806      	ldr	r0, [pc, #24]	; (8009390 <stimLib_stateSigParamCheck+0x2c>)
 8009376:	f000 f86d 	bl	8009454 <stimLib_triggerParamCheck>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <stimLib_stateSigParamCheck+0x20>
	{
		return true;
 8009380:	2301      	movs	r3, #1
 8009382:	e000      	b.n	8009386 <stimLib_stateSigParamCheck+0x22>
	}
	else
	{
		return false;
 8009384:	2300      	movs	r3, #0
	}

}
 8009386:	4618      	mov	r0, r3
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	200003f0 	.word	0x200003f0
 8009390:	200003fc 	.word	0x200003fc

08009394 <stimLib_stateParamClear>:

void stimLib_stateParamClear(void)
{
 8009394:	b480      	push	{r7}
 8009396:	af00      	add	r7, sp, #0
	STIM_LIB_STATE_SIG_FREQ = 0;
 8009398:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <stimLib_stateParamClear+0x4c>)
 800939a:	2200      	movs	r2, #0
 800939c:	711a      	strb	r2, [r3, #4]
	STIM_LIB_STATE_SIG_PW = 0;
 800939e:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <stimLib_stateParamClear+0x4c>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	80da      	strh	r2, [r3, #6]
	STIM_LIB_STATE_SIG_DEGREE = 0;
 80093a4:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <stimLib_stateParamClear+0x4c>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	721a      	strb	r2, [r3, #8]
	STIM_LIB_STATE_SIG_PEAK_DET_CALLBACK = NULL;
 80093aa:	4b0d      	ldr	r3, [pc, #52]	; (80093e0 <stimLib_stateParamClear+0x4c>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	60da      	str	r2, [r3, #12]

	STIM_LIB_STATE_TRG_VOLT_PRESTART = false;
 80093b0:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <stimLib_stateParamClear+0x4c>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	741a      	strb	r2, [r3, #16]
	STIM_LIB_STATE_TRG_OUT_ENABLE = false;
 80093b6:	4b0a      	ldr	r3, [pc, #40]	; (80093e0 <stimLib_stateParamClear+0x4c>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	745a      	strb	r2, [r3, #17]
	STIM_LIB_STATE_TRG_OUT_ACT_POL = 0;
 80093bc:	4b08      	ldr	r3, [pc, #32]	; (80093e0 <stimLib_stateParamClear+0x4c>)
 80093be:	2200      	movs	r2, #0
 80093c0:	749a      	strb	r2, [r3, #18]
	STIM_LIB_STATE_TRG_IN_ENABLE = false;
 80093c2:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <stimLib_stateParamClear+0x4c>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	74da      	strb	r2, [r3, #19]
	STIM_LIB_STATE_TRG_IN_ACT_POL = 0;
 80093c8:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <stimLib_stateParamClear+0x4c>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	751a      	strb	r2, [r3, #20]
	STIM_LIB_STATE_TRG_IN_TOGGLED = false;
 80093ce:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <stimLib_stateParamClear+0x4c>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	755a      	strb	r2, [r3, #21]
}
 80093d4:	bf00      	nop
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	200003ec 	.word	0x200003ec

080093e4 <stimLib_signalParamCheck>:
#define STIM_LIB_SIGNAL_DEGREE_MIN						0
#define STIM_LIB_SIGNAL_DEGREE_MAX						255
#define STIM_LIB_SIGNAL_DGREE_IS_VALID(param)			(param <= STIM_LIB_SIGNAL_DEGREE_MAX)				/* unsigned is always bigger than 0 */

bool stimLib_signalParamCheck(stim_signal_cfg_t *cfg)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
	if (cfg == NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <stimLib_signalParamCheck+0x12>
	{
		return false;
 80093f2:	2300      	movs	r3, #0
 80093f4:	e026      	b.n	8009444 <stimLib_signalParamCheck+0x60>
	}

	/* Base check */
	if (STIM_LIB_SIGNAL_FREQ_IS_VALID(
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d021      	beq.n	8009442 <stimLib_signalParamCheck+0x5e>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b3c      	cmp	r3, #60	; 0x3c
 8009404:	d81d      	bhi.n	8009442 <stimLib_signalParamCheck+0x5e>
			cfg->freq) && STIM_LIB_SIGNAL_PW_IS_VALID(cfg->pulse_width) && STIM_LIB_SIGNAL_DGREE_IS_VALID(cfg->degree))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	885b      	ldrh	r3, [r3, #2]
 800940a:	2b63      	cmp	r3, #99	; 0x63
 800940c:	d919      	bls.n	8009442 <stimLib_signalParamCheck+0x5e>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	885b      	ldrh	r3, [r3, #2]
 8009412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009416:	d814      	bhi.n	8009442 <stimLib_signalParamCheck+0x5e>
	{
		/* Step check of pulse width */
		cfg->pulse_width = (cfg->pulse_width / STIM_LIB_SIGNAL_PW_STEP)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	885b      	ldrh	r3, [r3, #2]
 800941c:	4a0c      	ldr	r2, [pc, #48]	; (8009450 <stimLib_signalParamCheck+0x6c>)
 800941e:	fba2 2303 	umull	r2, r3, r2, r3
 8009422:	095b      	lsrs	r3, r3, #5
 8009424:	b29b      	uxth	r3, r3
 8009426:	461a      	mov	r2, r3
 8009428:	0092      	lsls	r2, r2, #2
 800942a:	4413      	add	r3, r2
 800942c:	461a      	mov	r2, r3
 800942e:	0091      	lsls	r1, r2, #2
 8009430:	461a      	mov	r2, r3
 8009432:	460b      	mov	r3, r1
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	805a      	strh	r2, [r3, #2]
				* STIM_LIB_SIGNAL_PW_STEP;

		return true;
 800943e:	2301      	movs	r3, #1
 8009440:	e000      	b.n	8009444 <stimLib_signalParamCheck+0x60>
	}

	return false;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	51eb851f 	.word	0x51eb851f

08009454 <stimLib_triggerParamCheck>:

bool stimLib_triggerParamCheck(stim_trg_cfg_t *cfg)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
	if (cfg == NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <stimLib_triggerParamCheck+0x12>
	{
		return false;
 8009462:	2300      	movs	r3, #0
 8009464:	e000      	b.n	8009468 <stimLib_triggerParamCheck+0x14>
	}

	return true;
 8009466:	2301      	movs	r3, #1
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <stimLib_paramSetting>:

bool stimLib_paramSetting(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
	bool rslt;

	rslt = stimLib_stimPulseSetiing();
 800947a:	f000 f83f 	bl	80094fc <stimLib_stimPulseSetiing>
 800947e:	4603      	mov	r3, r0
 8009480:	71fb      	strb	r3, [r7, #7]

	if (rslt == true)
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <stimLib_paramSetting+0x18>
	{
		stimLib_paramTrgSettingRaw();
 8009488:	f000 f90e 	bl	80096a8 <stimLib_paramTrgSettingRaw>
	}

	return rslt;
 800948c:	79fb      	ldrb	r3, [r7, #7]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <stimLib_paramClear>:

void stimLib_paramClear(void)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	af00      	add	r7, sp, #0
	stimLib_paramTrgResettingRaw();
 800949a:	f000 f97d 	bl	8009798 <stimLib_paramTrgResettingRaw>

	/* State clear */
	stimLib_stateParamClear();
 800949e:	f7ff ff79 	bl	8009394 <stimLib_stateParamClear>

	/* ST parameter clear :: NOT YET */
}
 80094a2:	bf00      	nop
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <stimLib_stimPulseStart>:

void stimLib_stimPulseStart(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
	stimLib_pulseConfigRaw();
 80094ac:	f000 f97c 	bl	80097a8 <stimLib_pulseConfigRaw>
	stimLib_stimStartRaw();
 80094b0:	f000 f9be 	bl	8009830 <stimLib_stimStartRaw>
	if (STIM_LIB_STATE_TRG_VOLT_PRESTART == false && STIM_LIB_STEPUP_IS_STARTED() == false)
 80094b4:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <stimLib_stimPulseStart+0x2c>)
 80094b6:	7c1b      	ldrb	r3, [r3, #16]
 80094b8:	f083 0301 	eor.w	r3, r3, #1
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d005      	beq.n	80094ce <stimLib_stimPulseStart+0x26>
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <stimLib_stimPulseStart+0x30>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d001      	beq.n	80094ce <stimLib_stimPulseStart+0x26>
	{
		stimLib_stepupStart();
 80094ca:	f000 fcc3 	bl	8009e54 <stimLib_stepupStart>
	}
}
 80094ce:	bf00      	nop
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	200003ec 	.word	0x200003ec
 80094d8:	20000428 	.word	0x20000428

080094dc <stimLib_stimPulseStop>:

void stimLib_stimPulseStop(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	af00      	add	r7, sp, #0
	if (stimLib_stateGet() == stim_lib_state_stim_stopping)
 80094e0:	f7ff fe74 	bl	80091cc <stimLib_stateGet>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d106      	bne.n	80094f8 <stimLib_stimPulseStop+0x1c>
	{
		stimLib_stimStopRaw();
 80094ea:	f000 f9db 	bl	80098a4 <stimLib_stimStopRaw>

		/* To save pulst start time */
		stimLib_stimPulseSetiing();
 80094ee:	f000 f805 	bl	80094fc <stimLib_stimPulseSetiing>

		stimLib_stateSet(stim_lib_state_session_idle);
 80094f2:	2002      	movs	r0, #2
 80094f4:	f7ff fe76 	bl	80091e4 <stimLib_stateSet>
	}
}
 80094f8:	bf00      	nop
 80094fa:	bd80      	pop	{r7, pc}

080094fc <stimLib_stimPulseSetiing>:

bool stimLib_stimPulseSetiing(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
	return stimLib_paramPulseSettingRaw();
 8009500:	f000 f804 	bl	800950c <stimLib_paramPulseSettingRaw>
 8009504:	4603      	mov	r3, r0
}
 8009506:	4618      	mov	r0, r3
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <stimLib_paramPulseSettingRaw>:
volatile uint32_t gStimLib_dischgDma[2];
volatile uint32_t gStimLIb_cathodeDma[2];


bool stimLib_paramPulseSettingRaw(void)
{
 800950c:	b590      	push	{r4, r7, lr}
 800950e:	b08b      	sub	sp, #44	; 0x2c
 8009510:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig =
 8009512:	f107 031c 	add.w	r3, r7, #28
 8009516:	2200      	movs	r2, #0
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	605a      	str	r2, [r3, #4]
 800951c:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 800951e:	463b      	mov	r3, r7
 8009520:	2200      	movs	r2, #0
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	605a      	str	r2, [r3, #4]
 8009526:	609a      	str	r2, [r3, #8]
 8009528:	60da      	str	r2, [r3, #12]
 800952a:	611a      	str	r2, [r3, #16]
 800952c:	615a      	str	r2, [r3, #20]
 800952e:	619a      	str	r2, [r3, #24]
	{ 0 };

	htim2.Instance = TIM2;
 8009530:	4b58      	ldr	r3, [pc, #352]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 8009532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009536:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = STIM_LIB_SIGNAL_PSC_INPUT;
 8009538:	f7fb fd58 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 800953c:	4603      	mov	r3, r0
 800953e:	4a56      	ldr	r2, [pc, #344]	; (8009698 <stimLib_paramPulseSettingRaw+0x18c>)
 8009540:	fbb2 f3f3 	udiv	r3, r2, r3
 8009544:	461a      	mov	r2, r3
 8009546:	2350      	movs	r3, #80	; 0x50
 8009548:	fb93 f3f2 	sdiv	r3, r3, r2
 800954c:	3b01      	subs	r3, #1
 800954e:	461a      	mov	r2, r3
 8009550:	4b50      	ldr	r3, [pc, #320]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 8009552:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009554:	4b4f      	ldr	r3, [pc, #316]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 8009556:	2200      	movs	r2, #0
 8009558:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = STIM_LIB_SIGNAL_ARR_INPUT;
 800955a:	f7fb fd47 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 800955e:	4604      	mov	r4, r0
 8009560:	f7fb fd44 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8009564:	4603      	mov	r3, r0
 8009566:	4a4c      	ldr	r2, [pc, #304]	; (8009698 <stimLib_paramPulseSettingRaw+0x18c>)
 8009568:	fbb2 f3f3 	udiv	r3, r2, r3
 800956c:	461a      	mov	r2, r3
 800956e:	2350      	movs	r3, #80	; 0x50
 8009570:	fb93 f3f2 	sdiv	r3, r3, r2
 8009574:	fbb4 f3f3 	udiv	r3, r4, r3
 8009578:	4a48      	ldr	r2, [pc, #288]	; (800969c <stimLib_paramPulseSettingRaw+0x190>)
 800957a:	7912      	ldrb	r2, [r2, #4]
 800957c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009580:	3b01      	subs	r3, #1
 8009582:	461a      	mov	r2, r3
 8009584:	4b43      	ldr	r3, [pc, #268]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 8009586:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009588:	4b42      	ldr	r3, [pc, #264]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 800958a:	2200      	movs	r2, #0
 800958c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800958e:	4b41      	ldr	r3, [pc, #260]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 8009590:	2280      	movs	r2, #128	; 0x80
 8009592:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009594:	483f      	ldr	r0, [pc, #252]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 8009596:	f7fc fb89 	bl	8005cac <HAL_TIM_PWM_Init>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <stimLib_paramPulseSettingRaw+0x98>
	{
		return false;
 80095a0:	2300      	movs	r3, #0
 80095a2:	e072      	b.n	800968a <stimLib_paramPulseSettingRaw+0x17e>
	}
	/* MSP :: Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
	stimLib_tim_pwmmspInit(&htim2);
 80095a4:	483b      	ldr	r0, [pc, #236]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 80095a6:	f7ff fced 	bl	8008f84 <stimLib_tim_pwmmspInit>

	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80095aa:	483a      	ldr	r0, [pc, #232]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 80095ac:	f7fc f83d 	bl	800562a <HAL_TIM_OC_Init>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <stimLib_paramPulseSettingRaw+0xae>
	{
		return false;
 80095b6:	2300      	movs	r3, #0
 80095b8:	e067      	b.n	800968a <stimLib_paramPulseSettingRaw+0x17e>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80095ba:	2350      	movs	r3, #80	; 0x50
 80095bc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80095be:	2380      	movs	r3, #128	; 0x80
 80095c0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80095c2:	f107 031c 	add.w	r3, r7, #28
 80095c6:	4619      	mov	r1, r3
 80095c8:	4832      	ldr	r0, [pc, #200]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 80095ca:	f7fd fc55 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <stimLib_paramPulseSettingRaw+0xcc>
	{
		return false;
 80095d4:	2300      	movs	r3, #0
 80095d6:	e058      	b.n	800968a <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 1 :: TRIGGER OUTPUT */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095d8:	2360      	movs	r3, #96	; 0x60
 80095da:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_TRG_OUTPUT_PULSE_TIME;
 80095dc:	4b2f      	ldr	r3, [pc, #188]	; (800969c <stimLib_paramPulseSettingRaw+0x190>)
 80095de:	88db      	ldrh	r3, [r3, #6]
 80095e0:	330f      	adds	r3, #15
 80095e2:	005b      	lsls	r3, r3, #1
 80095e4:	607b      	str	r3, [r7, #4]

	if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_low)
 80095e6:	4b2d      	ldr	r3, [pc, #180]	; (800969c <stimLib_paramPulseSettingRaw+0x190>)
 80095e8:	7c9b      	ldrb	r3, [r3, #18]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <stimLib_paramPulseSettingRaw+0xe8>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80095ee:	2302      	movs	r3, #2
 80095f0:	60bb      	str	r3, [r7, #8]
 80095f2:	e005      	b.n	8009600 <stimLib_paramPulseSettingRaw+0xf4>
	}
	else if (STIM_LIB_STATE_TRG_OUT_ACT_POL == stim_lib_trg_output_active_high)
 80095f4:	4b29      	ldr	r3, [pc, #164]	; (800969c <stimLib_paramPulseSettingRaw+0x190>)
 80095f6:	7c9b      	ldrb	r3, [r3, #18]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d101      	bne.n	8009600 <stimLib_paramPulseSettingRaw+0xf4>
	{
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095fc:	2300      	movs	r3, #0
 80095fe:	60bb      	str	r3, [r7, #8]
	}

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_TRG_OUT_TIM_CH) != HAL_OK)
 8009600:	463b      	mov	r3, r7
 8009602:	2200      	movs	r2, #0
 8009604:	4619      	mov	r1, r3
 8009606:	4823      	ldr	r0, [pc, #140]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 8009608:	f7fc ff04 	bl	8006414 <HAL_TIM_PWM_ConfigChannel>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <stimLib_paramPulseSettingRaw+0x10a>
	{
		return stim_lib_stim_rsp_failed;
 8009612:	2301      	movs	r3, #1
 8009614:	e039      	b.n	800968a <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 2 :: ANODE PULSE */
	sConfigOC.Pulse = STIM_LIB_ANODE_PULSE_TIME;
 8009616:	4b21      	ldr	r3, [pc, #132]	; (800969c <stimLib_paramPulseSettingRaw+0x190>)
 8009618:	88db      	ldrh	r3, [r3, #6]
 800961a:	330a      	adds	r3, #10
 800961c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800961e:	2300      	movs	r3, #0
 8009620:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_ANODE_TIM_CH) != HAL_OK)
 8009622:	463b      	mov	r3, r7
 8009624:	2204      	movs	r2, #4
 8009626:	4619      	mov	r1, r3
 8009628:	481a      	ldr	r0, [pc, #104]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 800962a:	f7fc fef3 	bl	8006414 <HAL_TIM_PWM_ConfigChannel>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <stimLib_paramPulseSettingRaw+0x132>
	{
		TD_DEBUG_PRINT(("STIM_LIB: TIM2 CH2 Set failed\n"));
 8009634:	481a      	ldr	r0, [pc, #104]	; (80096a0 <stimLib_paramPulseSettingRaw+0x194>)
 8009636:	f000 fd91 	bl	800a15c <puts>
		return false;
 800963a:	2300      	movs	r3, #0
 800963c:	e025      	b.n	800968a <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 3 :: CATHODE PULSE */
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800963e:	2330      	movs	r3, #48	; 0x30
 8009640:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = STIM_LIB_CATHODE_PULSE_TIME1;
 8009642:	4b16      	ldr	r3, [pc, #88]	; (800969c <stimLib_paramPulseSettingRaw+0x190>)
 8009644:	88db      	ldrh	r3, [r3, #6]
 8009646:	3314      	adds	r3, #20
 8009648:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_CATHODE_TIM_CH) != HAL_OK)
 800964a:	463b      	mov	r3, r7
 800964c:	2208      	movs	r2, #8
 800964e:	4619      	mov	r1, r3
 8009650:	4810      	ldr	r0, [pc, #64]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 8009652:	f7fc fe65 	bl	8006320 <HAL_TIM_OC_ConfigChannel>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d004      	beq.n	8009666 <stimLib_paramPulseSettingRaw+0x15a>
	{
		TD_DEBUG_PRINT(("STIM_LIB: TIM2 CH3 Set failed\n"));
 800965c:	4811      	ldr	r0, [pc, #68]	; (80096a4 <stimLib_paramPulseSettingRaw+0x198>)
 800965e:	f000 fd7d 	bl	800a15c <puts>
		return false;
 8009662:	2300      	movs	r3, #0
 8009664:	e011      	b.n	800968a <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* CHANNEL 4 :: DAC_ON_N PULSE or STIM DISCHARGE PULSE */
#if 1
	sConfigOC.Pulse = STIM_LIB_SIGNAL_GLICH_TIME;
 8009666:	2305      	movs	r3, #5
 8009668:	607b      	str	r3, [r7, #4]
#else
	sConfigOC.Pulse = STIM_LIB_DISCHARGE_PULSE_TIME1;
#endif
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, STIM_LIB_PULSE_DAC_ON_TIM_CH) != HAL_OK)
 800966a:	463b      	mov	r3, r7
 800966c:	220c      	movs	r2, #12
 800966e:	4619      	mov	r1, r3
 8009670:	4808      	ldr	r0, [pc, #32]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 8009672:	f7fc fe55 	bl	8006320 <HAL_TIM_OC_ConfigChannel>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <stimLib_paramPulseSettingRaw+0x174>
	{
		return false;
 800967c:	2300      	movs	r3, #0
 800967e:	e004      	b.n	800968a <stimLib_paramPulseSettingRaw+0x17e>
	}

	/* MSP :: TIMER GPIO */
	//stimLib_tim_msppostInit(&htim2);
	HAL_TIM_GenerateEvent(&htim2, TIM_EVENTSOURCE_UPDATE);
 8009680:	2101      	movs	r1, #1
 8009682:	4804      	ldr	r0, [pc, #16]	; (8009694 <stimLib_paramPulseSettingRaw+0x188>)
 8009684:	f7fc ffda 	bl	800663c <HAL_TIM_GenerateEvent>

	return true;
 8009688:	2301      	movs	r3, #1
}
 800968a:	4618      	mov	r0, r3
 800968c:	372c      	adds	r7, #44	; 0x2c
 800968e:	46bd      	mov	sp, r7
 8009690:	bd90      	pop	{r4, r7, pc}
 8009692:	bf00      	nop
 8009694:	20000230 	.word	0x20000230
 8009698:	04c4b400 	.word	0x04c4b400
 800969c:	200003ec 	.word	0x200003ec
 80096a0:	0800b1c0 	.word	0x0800b1c0
 80096a4:	0800b1e0 	.word	0x0800b1e0

080096a8 <stimLib_paramTrgSettingRaw>:

void stimLib_paramTrgSettingRaw(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
	/* GPIO INIT */
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80096ae:	1d3b      	adds	r3, r7, #4
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	605a      	str	r2, [r3, #4]
 80096b6:	609a      	str	r2, [r3, #8]
 80096b8:	60da      	str	r2, [r3, #12]
 80096ba:	611a      	str	r2, [r3, #16]


	if(STIM_LIB_TRG_INPUT_IS_ENABLED() == false)
 80096bc:	4b34      	ldr	r3, [pc, #208]	; (8009790 <stimLib_paramTrgSettingRaw+0xe8>)
 80096be:	7cdb      	ldrb	r3, [r3, #19]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d161      	bne.n	8009788 <stimLib_paramTrgSettingRaw+0xe0>
		return;
	
	/* Configure GPIO pin : STIM_TRIGGER_INPUT_Pin */
	if (STIM_LIB_TRG_INPUT_IS_FALLING_EDGE())
 80096c4:	4b32      	ldr	r3, [pc, #200]	; (8009790 <stimLib_paramTrgSettingRaw+0xe8>)
 80096c6:	7d1b      	ldrb	r3, [r3, #20]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d113      	bne.n	80096f4 <stimLib_paramTrgSettingRaw+0x4c>
 80096cc:	4b30      	ldr	r3, [pc, #192]	; (8009790 <stimLib_paramTrgSettingRaw+0xe8>)
 80096ce:	7d5b      	ldrb	r3, [r3, #21]
 80096d0:	f083 0301 	eor.w	r3, r3, #1
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00c      	beq.n	80096f4 <stimLib_paramTrgSettingRaw+0x4c>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 80096da:	2301      	movs	r3, #1
 80096dc:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80096de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80096e2:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e4:	2300      	movs	r3, #0
 80096e6:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 80096e8:	1d3b      	adds	r3, r7, #4
 80096ea:	4619      	mov	r1, r3
 80096ec:	4829      	ldr	r0, [pc, #164]	; (8009794 <stimLib_paramTrgSettingRaw+0xec>)
 80096ee:	f7fa fb9f 	bl	8003e30 <HAL_GPIO_Init>
 80096f2:	e040      	b.n	8009776 <stimLib_paramTrgSettingRaw+0xce>
	}
	else if (STIM_LIB_TRG_INPUT_IS_RISING_EDGE())
 80096f4:	4b26      	ldr	r3, [pc, #152]	; (8009790 <stimLib_paramTrgSettingRaw+0xe8>)
 80096f6:	7d1b      	ldrb	r3, [r3, #20]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d113      	bne.n	8009724 <stimLib_paramTrgSettingRaw+0x7c>
 80096fc:	4b24      	ldr	r3, [pc, #144]	; (8009790 <stimLib_paramTrgSettingRaw+0xe8>)
 80096fe:	7d5b      	ldrb	r3, [r3, #21]
 8009700:	f083 0301 	eor.w	r3, r3, #1
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00c      	beq.n	8009724 <stimLib_paramTrgSettingRaw+0x7c>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 800970a:	2301      	movs	r3, #1
 800970c:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800970e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009712:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 8009718:	1d3b      	adds	r3, r7, #4
 800971a:	4619      	mov	r1, r3
 800971c:	481d      	ldr	r0, [pc, #116]	; (8009794 <stimLib_paramTrgSettingRaw+0xec>)
 800971e:	f7fa fb87 	bl	8003e30 <HAL_GPIO_Init>
 8009722:	e028      	b.n	8009776 <stimLib_paramTrgSettingRaw+0xce>
	}
	else if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_LOW())
 8009724:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <stimLib_paramTrgSettingRaw+0xe8>)
 8009726:	7d1b      	ldrb	r3, [r3, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d110      	bne.n	800974e <stimLib_paramTrgSettingRaw+0xa6>
 800972c:	4b18      	ldr	r3, [pc, #96]	; (8009790 <stimLib_paramTrgSettingRaw+0xe8>)
 800972e:	7d5b      	ldrb	r3, [r3, #21]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00c      	beq.n	800974e <stimLib_paramTrgSettingRaw+0xa6>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 8009734:	2301      	movs	r3, #1
 8009736:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009738:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800973c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 8009742:	1d3b      	adds	r3, r7, #4
 8009744:	4619      	mov	r1, r3
 8009746:	4813      	ldr	r0, [pc, #76]	; (8009794 <stimLib_paramTrgSettingRaw+0xec>)
 8009748:	f7fa fb72 	bl	8003e30 <HAL_GPIO_Init>
 800974c:	e013      	b.n	8009776 <stimLib_paramTrgSettingRaw+0xce>
	}
	else if (STIM_LIB_TRG_INPUT_TOGGLE_IS_ACT_HIGH())
 800974e:	4b10      	ldr	r3, [pc, #64]	; (8009790 <stimLib_paramTrgSettingRaw+0xe8>)
 8009750:	7d1b      	ldrb	r3, [r3, #20]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d10f      	bne.n	8009776 <stimLib_paramTrgSettingRaw+0xce>
 8009756:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <stimLib_paramTrgSettingRaw+0xe8>)
 8009758:	7d5b      	ldrb	r3, [r3, #21]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00b      	beq.n	8009776 <stimLib_paramTrgSettingRaw+0xce>
	{
		GPIO_InitStruct.Pin = STIM_LIB_STIM_TRIGGER_INPUT_PIN;
 800975e:	2301      	movs	r3, #1
 8009760:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009762:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8009766:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(STIM_LIB_STIM_TRIGGER_INPUT_GPIO_PORT, &GPIO_InitStruct);
 800976c:	1d3b      	adds	r3, r7, #4
 800976e:	4619      	mov	r1, r3
 8009770:	4808      	ldr	r0, [pc, #32]	; (8009794 <stimLib_paramTrgSettingRaw+0xec>)
 8009772:	f7fa fb5d 	bl	8003e30 <HAL_GPIO_Init>
	}

	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8009776:	2200      	movs	r2, #0
 8009778:	2100      	movs	r1, #0
 800977a:	2006      	movs	r0, #6
 800977c:	f7fa f80b 	bl	8003796 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8009780:	2006      	movs	r0, #6
 8009782:	f7fa f824 	bl	80037ce <HAL_NVIC_EnableIRQ>
 8009786:	e000      	b.n	800978a <stimLib_paramTrgSettingRaw+0xe2>
		return;
 8009788:	bf00      	nop

}
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	200003ec 	.word	0x200003ec
 8009794:	48000400 	.word	0x48000400

08009798 <stimLib_paramTrgResettingRaw>:

void stimLib_paramTrgResettingRaw(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800979c:	2006      	movs	r0, #6
 800979e:	f7fa f824 	bl	80037ea <HAL_NVIC_DisableIRQ>
}
 80097a2:	bf00      	nop
 80097a4:	bd80      	pop	{r7, pc}
	...

080097a8 <stimLib_pulseConfigRaw>:

bool stimLib_pulseConfigRaw(void)
{
 80097a8:	b480      	push	{r7}
 80097aa:	af00      	add	r7, sp, #0
	/* DAC_ON_N Control Time */
	STIM_LIB_DMA_DAC_ON_BUF[0] = STIM_LIB_DAC_CTRL_TIME0;
 80097ac:	4b1c      	ldr	r3, [pc, #112]	; (8009820 <stimLib_pulseConfigRaw+0x78>)
 80097ae:	88db      	ldrh	r3, [r3, #6]
 80097b0:	3305      	adds	r3, #5
 80097b2:	461a      	mov	r2, r3
 80097b4:	4b1b      	ldr	r3, [pc, #108]	; (8009824 <stimLib_pulseConfigRaw+0x7c>)
 80097b6:	601a      	str	r2, [r3, #0]
	STIM_LIB_DMA_DAC_ON_BUF[1] = STIM_LIB_DAC_CTRL_TIME1;
 80097b8:	4b19      	ldr	r3, [pc, #100]	; (8009820 <stimLib_pulseConfigRaw+0x78>)
 80097ba:	88db      	ldrh	r3, [r3, #6]
 80097bc:	3319      	adds	r3, #25
 80097be:	461a      	mov	r2, r3
 80097c0:	4b18      	ldr	r3, [pc, #96]	; (8009824 <stimLib_pulseConfigRaw+0x7c>)
 80097c2:	605a      	str	r2, [r3, #4]
	STIM_LIB_DMA_DAC_ON_BUF[2] = STIM_LIB_DAC_CTRL_TIME2;
 80097c4:	4b16      	ldr	r3, [pc, #88]	; (8009820 <stimLib_pulseConfigRaw+0x78>)
 80097c6:	88db      	ldrh	r3, [r3, #6]
 80097c8:	330a      	adds	r3, #10
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	3305      	adds	r3, #5
 80097ce:	461a      	mov	r2, r3
 80097d0:	4b14      	ldr	r3, [pc, #80]	; (8009824 <stimLib_pulseConfigRaw+0x7c>)
 80097d2:	609a      	str	r2, [r3, #8]
	STIM_LIB_DMA_DAC_ON_BUF[3] = STIM_LIB_DAC_CTRL_TIME3;
 80097d4:	4b13      	ldr	r3, [pc, #76]	; (8009824 <stimLib_pulseConfigRaw+0x7c>)
 80097d6:	2205      	movs	r2, #5
 80097d8:	60da      	str	r2, [r3, #12]

	/* DISCHARGE PULSE Control Time */
	STIM_LIB_DMA_DISCHG_BUF[0] = STIM_LIB_DISCHARGE_PULSE_TIME0;
 80097da:	4b11      	ldr	r3, [pc, #68]	; (8009820 <stimLib_pulseConfigRaw+0x78>)
 80097dc:	88db      	ldrh	r3, [r3, #6]
 80097de:	f603 13dd 	addw	r3, r3, #2525	; 0x9dd
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	461a      	mov	r2, r3
 80097e6:	4b10      	ldr	r3, [pc, #64]	; (8009828 <stimLib_pulseConfigRaw+0x80>)
 80097e8:	601a      	str	r2, [r3, #0]
	STIM_LIB_DMA_DISCHG_BUF[1] = STIM_LIB_DISCHARGE_PULSE_TIME1;
 80097ea:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <stimLib_pulseConfigRaw+0x78>)
 80097ec:	88db      	ldrh	r3, [r3, #6]
 80097ee:	3319      	adds	r3, #25
 80097f0:	005b      	lsls	r3, r3, #1
 80097f2:	461a      	mov	r2, r3
 80097f4:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <stimLib_pulseConfigRaw+0x80>)
 80097f6:	605a      	str	r2, [r3, #4]

	STIM_LIB_DMA_CATHODE_BUF[0] = STIM_LIB_CATHODE_PULSE_TIME0;
 80097f8:	4b09      	ldr	r3, [pc, #36]	; (8009820 <stimLib_pulseConfigRaw+0x78>)
 80097fa:	88db      	ldrh	r3, [r3, #6]
 80097fc:	330f      	adds	r3, #15
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	461a      	mov	r2, r3
 8009802:	4b0a      	ldr	r3, [pc, #40]	; (800982c <stimLib_pulseConfigRaw+0x84>)
 8009804:	601a      	str	r2, [r3, #0]
	STIM_LIB_DMA_CATHODE_BUF[1] = STIM_LIB_CATHODE_PULSE_TIME1;
 8009806:	4b06      	ldr	r3, [pc, #24]	; (8009820 <stimLib_pulseConfigRaw+0x78>)
 8009808:	88db      	ldrh	r3, [r3, #6]
 800980a:	3314      	adds	r3, #20
 800980c:	461a      	mov	r2, r3
 800980e:	4b07      	ldr	r3, [pc, #28]	; (800982c <stimLib_pulseConfigRaw+0x84>)
 8009810:	605a      	str	r2, [r3, #4]

	return stim_lib_stim_rsp_ok;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	200003ec 	.word	0x200003ec
 8009824:	20000404 	.word	0x20000404
 8009828:	20000414 	.word	0x20000414
 800982c:	2000041c 	.word	0x2000041c

08009830 <stimLib_stimStartRaw>:

bool stimLib_stimStartRaw(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	af00      	add	r7, sp, #0

	/* START PULSE TIMER CH4 :: DAC_ON_N or STIM_DISCHARGE :: GPIOA PIN 3 */
	HAL_TIM_OC_Start_DMA(&htim2, STIM_LIB_PULSE_DAC_ON_TIM_CH, (const uint32_t*) STIM_LIB_DMA_DAC_ON_BUF, 4);
 8009834:	2304      	movs	r3, #4
 8009836:	4a15      	ldr	r2, [pc, #84]	; (800988c <stimLib_stimStartRaw+0x5c>)
 8009838:	210c      	movs	r1, #12
 800983a:	4815      	ldr	r0, [pc, #84]	; (8009890 <stimLib_stimStartRaw+0x60>)
 800983c:	f7fb ff56 	bl	80056ec <HAL_TIM_OC_Start_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch2_ch4, (DMA_IT_TC | DMA_IT_HT));
 8009840:	4b14      	ldr	r3, [pc, #80]	; (8009894 <stimLib_stimStartRaw+0x64>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	4b13      	ldr	r3, [pc, #76]	; (8009894 <stimLib_stimStartRaw+0x64>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 0206 	bic.w	r2, r2, #6
 800984e:	601a      	str	r2, [r3, #0]

	/* START PULSE TIMER CH2 :: ANODE :: GPIOA PIN 1 */
	HAL_TIM_PWM_Start(&htim2, STIM_LIB_PULSE_ANODE_TIM_CH);
 8009850:	2104      	movs	r1, #4
 8009852:	480f      	ldr	r0, [pc, #60]	; (8009890 <stimLib_stimStartRaw+0x60>)
 8009854:	f7fc fade 	bl	8005e14 <HAL_TIM_PWM_Start>

	/* START PULSE TIMER CH3 :: CATHODE :: GPIOA PIN 2 */
	HAL_TIM_OC_Start_DMA(&htim2, STIM_LIB_PULSE_CATHODE_TIM_CH,
 8009858:	2302      	movs	r3, #2
 800985a:	4a0f      	ldr	r2, [pc, #60]	; (8009898 <stimLib_stimStartRaw+0x68>)
 800985c:	2108      	movs	r1, #8
 800985e:	480c      	ldr	r0, [pc, #48]	; (8009890 <stimLib_stimStartRaw+0x60>)
 8009860:	f7fb ff44 	bl	80056ec <HAL_TIM_OC_Start_DMA>
			(const uint32_t*) STIM_LIB_DMA_CATHODE_BUF, 2);
	__HAL_DMA_DISABLE_IT(&hdma_tim2_ch3, (DMA_IT_TC | DMA_IT_HT));
 8009864:	4b0d      	ldr	r3, [pc, #52]	; (800989c <stimLib_stimStartRaw+0x6c>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	4b0c      	ldr	r3, [pc, #48]	; (800989c <stimLib_stimStartRaw+0x6c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 0206 	bic.w	r2, r2, #6
 8009872:	601a      	str	r2, [r3, #0]

	/* START PULSE TIMER CH1 :: TRIGGER OUTPUT :: GPIOA PIN 5 */
	if (STIM_LIB_TRG_OUTPUT_IS_ENABLED() == true)
 8009874:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <stimLib_stimStartRaw+0x70>)
 8009876:	7c5b      	ldrb	r3, [r3, #17]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <stimLib_stimStartRaw+0x54>
	{
		HAL_TIM_PWM_Start(&htim2, STIM_LIB_PULSE_TRG_OUT_TIM_CH);
 800987c:	2100      	movs	r1, #0
 800987e:	4804      	ldr	r0, [pc, #16]	; (8009890 <stimLib_stimStartRaw+0x60>)
 8009880:	f7fc fac8 	bl	8005e14 <HAL_TIM_PWM_Start>
	}

	return stim_lib_stim_rsp_ok;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20000404 	.word	0x20000404
 8009890:	20000230 	.word	0x20000230
 8009894:	200002c8 	.word	0x200002c8
 8009898:	2000041c 	.word	0x2000041c
 800989c:	20000310 	.word	0x20000310
 80098a0:	200003ec 	.word	0x200003ec

080098a4 <stimLib_stimStopRaw>:

bool stimLib_stimStopRaw(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
	/*
	 * Normalize OCREFs in PWM mode
	 * OCREF cannot be changed in stop state
	 * Check stimLib_trgPauseRaw() Function
	 * */
	TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);
 80098a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098ac:	699a      	ldr	r2, [r3, #24]
 80098ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80098b2:	4b10      	ldr	r3, [pc, #64]	; (80098f4 <stimLib_stimStopRaw+0x50>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	618b      	str	r3, [r1, #24]
	TIM2->CCMR1 |= (TIM_OCMODE_PWM1) | (TIM_OCMODE_PWM1 << 8U);
 80098b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80098c2:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80098c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80098ca:	6193      	str	r3, [r2, #24]

	HAL_TIM_PWM_Stop(&htim2, STIM_LIB_PULSE_TRG_OUT_TIM_CH);
 80098cc:	2100      	movs	r1, #0
 80098ce:	480a      	ldr	r0, [pc, #40]	; (80098f8 <stimLib_stimStopRaw+0x54>)
 80098d0:	f7fc fb7e 	bl	8005fd0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, STIM_LIB_PULSE_ANODE_TIM_CH);
 80098d4:	2104      	movs	r1, #4
 80098d6:	4808      	ldr	r0, [pc, #32]	; (80098f8 <stimLib_stimStopRaw+0x54>)
 80098d8:	f7fc fb7a 	bl	8005fd0 <HAL_TIM_PWM_Stop>

	HAL_TIM_OC_Stop_DMA(&htim2, STIM_LIB_PULSE_CATHODE_TIM_CH);
 80098dc:	2108      	movs	r1, #8
 80098de:	4806      	ldr	r0, [pc, #24]	; (80098f8 <stimLib_stimStopRaw+0x54>)
 80098e0:	f7fc f8fc 	bl	8005adc <HAL_TIM_OC_Stop_DMA>
	HAL_TIM_OC_Stop_DMA(&htim2, STIM_LIB_PULSE_DAC_ON_TIM_CH);
 80098e4:	210c      	movs	r1, #12
 80098e6:	4804      	ldr	r0, [pc, #16]	; (80098f8 <stimLib_stimStopRaw+0x54>)
 80098e8:	f7fc f8f8 	bl	8005adc <HAL_TIM_OC_Stop_DMA>

	return stim_lib_stim_rsp_ok;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	fefe8f8f 	.word	0xfefe8f8f
 80098f8:	20000230 	.word	0x20000230

080098fc <stimLib_stepup_ctrlScheduler>:
 * STEPUP CONTROL SCHEDULER
 * Calling from "HAL_TIM_PeriodElapsedCallback()" and "stimLib_stepup_ctrlCallback()" Function
 * Check out the "stim_lib_st_inc.c" file.
 * */
void stimLib_stepup_ctrlScheduler(void)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0
	STIM_LIB_STEPUP_FEEDBACK_CNT++;
 8009900:	4b19      	ldr	r3, [pc, #100]	; (8009968 <stimLib_stepup_ctrlScheduler+0x6c>)
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	3301      	adds	r3, #1
 8009906:	b2da      	uxtb	r2, r3
 8009908:	4b17      	ldr	r3, [pc, #92]	; (8009968 <stimLib_stepup_ctrlScheduler+0x6c>)
 800990a:	701a      	strb	r2, [r3, #0]
	stimLib_adc1_readBuffer(setpup_buff, adc1_conv_buff,
 800990c:	220a      	movs	r2, #10
 800990e:	4917      	ldr	r1, [pc, #92]	; (800996c <stimLib_stepup_ctrlScheduler+0x70>)
 8009910:	4817      	ldr	r0, [pc, #92]	; (8009970 <stimLib_stepup_ctrlScheduler+0x74>)
 8009912:	f000 f91d 	bl	8009b50 <stimLib_adc1_readBuffer>
	STIM_LIB_ADC1_TOTAL_SIZE);
	/* SLOPE VOLTAGE RISE CONTROL */
	if (STIM_LIB_STEPUP_FEEDBACK_CNT == 10 && SLOPE_CTRL_END_FLAG == false)
 8009916:	4b14      	ldr	r3, [pc, #80]	; (8009968 <stimLib_stepup_ctrlScheduler+0x6c>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b0a      	cmp	r3, #10
 800991c:	d10f      	bne.n	800993e <stimLib_stepup_ctrlScheduler+0x42>
 800991e:	4b15      	ldr	r3, [pc, #84]	; (8009974 <stimLib_stepup_ctrlScheduler+0x78>)
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	f083 0301 	eor.w	r3, r3, #1
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d008      	beq.n	800993e <stimLib_stepup_ctrlScheduler+0x42>
	{
		stimLib_stepup_voltFeedback();
 800992c:	f000 f826 	bl	800997c <stimLib_stepup_voltFeedback>
		STIM_LIB_STEPUP_FEEDBACK_CNT = 0;
 8009930:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <stimLib_stepup_ctrlScheduler+0x6c>)
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
		STEPUP_DATA_PRINT_FLAG = true;
 8009936:	4b10      	ldr	r3, [pc, #64]	; (8009978 <stimLib_stepup_ctrlScheduler+0x7c>)
 8009938:	2201      	movs	r2, #1
 800993a:	701a      	strb	r2, [r3, #0]
 800993c:	e00f      	b.n	800995e <stimLib_stepup_ctrlScheduler+0x62>
	}
	/* VOLTAGE RANGE KEEPING CONTROL */
	else if (STIM_LIB_STEPUP_FEEDBACK_CNT == 1 && SLOPE_CTRL_END_FLAG == true)
 800993e:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <stimLib_stepup_ctrlScheduler+0x6c>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d10b      	bne.n	800995e <stimLib_stepup_ctrlScheduler+0x62>
 8009946:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <stimLib_stepup_ctrlScheduler+0x78>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d007      	beq.n	800995e <stimLib_stepup_ctrlScheduler+0x62>
	{
		stimLib_stepup_voltFeedback();
 800994e:	f000 f815 	bl	800997c <stimLib_stepup_voltFeedback>
		STIM_LIB_STEPUP_FEEDBACK_CNT = 0;
 8009952:	4b05      	ldr	r3, [pc, #20]	; (8009968 <stimLib_stepup_ctrlScheduler+0x6c>)
 8009954:	2200      	movs	r2, #0
 8009956:	701a      	strb	r2, [r3, #0]
		STEPUP_DATA_PRINT_FLAG = true;
 8009958:	4b07      	ldr	r3, [pc, #28]	; (8009978 <stimLib_stepup_ctrlScheduler+0x7c>)
 800995a:	2201      	movs	r2, #1
 800995c:	701a      	strb	r2, [r3, #0]
	}
	stimLib_stepup_dataPrint();
 800995e:	f000 f9db 	bl	8009d18 <stimLib_stepup_dataPrint>
}
 8009962:	bf00      	nop
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000425 	.word	0x20000425
 800996c:	2000042c 	.word	0x2000042c
 8009970:	20000440 	.word	0x20000440
 8009974:	20000426 	.word	0x20000426
 8009978:	20000427 	.word	0x20000427

0800997c <stimLib_stepup_voltFeedback>:

/*
 * STEP UP VOLTAGE FEEDBACK
 * */
void stimLib_stepup_voltFeedback(void)
{
 800997c:	b5b0      	push	{r4, r5, r7, lr}
 800997e:	af00      	add	r7, sp, #0
	/* STEPUP DATA CLAC */
	stepup_fdbk_adc_avg = stimLib_stepup_adcAVG(setpup_buff,
 8009980:	210a      	movs	r1, #10
 8009982:	480e      	ldr	r0, [pc, #56]	; (80099bc <stimLib_stepup_voltFeedback+0x40>)
 8009984:	f000 f93d 	bl	8009c02 <stimLib_stepup_adcAVG>
 8009988:	4603      	mov	r3, r0
 800998a:	4a0d      	ldr	r2, [pc, #52]	; (80099c0 <stimLib_stepup_voltFeedback+0x44>)
 800998c:	6013      	str	r3, [r2, #0]
	STIM_LIB_ADC1_TOTAL_SIZE);
	stepup_fdbk_volt = stimLib_stepup_voltCalc(stepup_fdbk_adc_avg, R1_Vstup,
 800998e:	4b0c      	ldr	r3, [pc, #48]	; (80099c0 <stimLib_stepup_voltFeedback+0x44>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	226e      	movs	r2, #110	; 0x6e
 8009994:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009998:	4618      	mov	r0, r3
 800999a:	f000 f957 	bl	8009c4c <stimLib_stepup_voltCalc>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4b08      	ldr	r3, [pc, #32]	; (80099c4 <stimLib_stepup_voltFeedback+0x48>)
 80099a4:	601a      	str	r2, [r3, #0]
	R2_Vstup);

	/* STEPUP VOLTAGE CONFIG */
	stimLib_voltCfg(stepup_fdbk_volt);
 80099a6:	4b07      	ldr	r3, [pc, #28]	; (80099c4 <stimLib_stepup_voltFeedback+0x48>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2200      	movs	r2, #0
 80099ac:	461c      	mov	r4, r3
 80099ae:	4615      	mov	r5, r2
 80099b0:	4620      	mov	r0, r4
 80099b2:	4629      	mov	r1, r5
 80099b4:	f000 f808 	bl	80099c8 <stimLib_voltCfg>
}
 80099b8:	bf00      	nop
 80099ba:	bdb0      	pop	{r4, r5, r7, pc}
 80099bc:	20000440 	.word	0x20000440
 80099c0:	20000454 	.word	0x20000454
 80099c4:	20000458 	.word	0x20000458

080099c8 <stimLib_voltCfg>:

/*
 * STEP UP VOLTAGE CONFIG
 * */
void stimLib_voltCfg(uint64_t stepup_voltage)
{
 80099c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80099cc:	b087      	sub	sp, #28
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
	uint32_t voltage_scaleup_val = STEPUP_TARGET_VOLTAGE
 80099d4:	4956      	ldr	r1, [pc, #344]	; (8009b30 <stimLib_voltCfg+0x168>)
 80099d6:	6179      	str	r1, [r7, #20]

#define OUTPUT_VOLTAGE_IS_LOW		voltage_scaleup_val > stepup_voltage
#define OUTPUT_VOLTAGE_IS_HIGH		voltage_scaleup_val < stepup_voltage
#define OUTPUT_VOLTAGE_IS_SAME		voltage_scaleup_val == stepup_voltage

	if (VOLTAGE_DIFFERENCE_ABS < STEPUP_FDBK_VOLT_RANGE)
 80099d8:	68b9      	ldr	r1, [r7, #8]
 80099da:	6978      	ldr	r0, [r7, #20]
 80099dc:	1a41      	subs	r1, r0, r1
 80099de:	4608      	mov	r0, r1
 80099e0:	4954      	ldr	r1, [pc, #336]	; (8009b34 <stimLib_voltCfg+0x16c>)
 80099e2:	4288      	cmp	r0, r1
 80099e4:	db39      	blt.n	8009a5a <stimLib_voltCfg+0x92>
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	6978      	ldr	r0, [r7, #20]
 80099ea:	1a41      	subs	r1, r0, r1
 80099ec:	4608      	mov	r0, r1
 80099ee:	4952      	ldr	r1, [pc, #328]	; (8009b38 <stimLib_voltCfg+0x170>)
 80099f0:	4288      	cmp	r0, r1
 80099f2:	dc32      	bgt.n	8009a5a <stimLib_voltCfg+0x92>
	{
		if (OUTPUT_VOLTAGE_IS_LOW)
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2200      	movs	r2, #0
 80099f8:	603b      	str	r3, [r7, #0]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a00:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009a04:	4621      	mov	r1, r4
 8009a06:	428a      	cmp	r2, r1
 8009a08:	4629      	mov	r1, r5
 8009a0a:	418b      	sbcs	r3, r1
 8009a0c:	d20d      	bcs.n	8009a2a <stimLib_voltCfg+0x62>
		{
			STIM_LIB_VOLTAGE_CTRL_PULSE++;
 8009a0e:	4b4b      	ldr	r3, [pc, #300]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	3301      	adds	r3, #1
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	4b49      	ldr	r3, [pc, #292]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009a18:	701a      	strb	r2, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE
					> STIM_LIB_STEPUP_CTRL_TABLE_LIMIT - 1)
 8009a1a:	4b48      	ldr	r3, [pc, #288]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009a1c:	781b      	ldrb	r3, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE
 8009a1e:	2b1d      	cmp	r3, #29
 8009a20:	d913      	bls.n	8009a4a <stimLib_voltCfg+0x82>
			{
				STIM_LIB_VOLTAGE_CTRL_PULSE = STIM_LIB_STEPUP_CTRL_TABLE_LIMIT
 8009a22:	4b46      	ldr	r3, [pc, #280]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009a24:	221d      	movs	r2, #29
 8009a26:	701a      	strb	r2, [r3, #0]
 8009a28:	e00f      	b.n	8009a4a <stimLib_voltCfg+0x82>
						- 1;
			}
		}

		else if (OUTPUT_VOLTAGE_IS_HIGH)
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	469a      	mov	sl, r3
 8009a30:	4693      	mov	fp, r2
 8009a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a36:	4592      	cmp	sl, r2
 8009a38:	eb7b 0303 	sbcs.w	r3, fp, r3
 8009a3c:	d205      	bcs.n	8009a4a <stimLib_voltCfg+0x82>
		{
			STIM_LIB_VOLTAGE_CTRL_PULSE--;
 8009a3e:	4b3f      	ldr	r3, [pc, #252]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	3b01      	subs	r3, #1
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	4b3d      	ldr	r3, [pc, #244]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009a48:	701a      	strb	r2, [r3, #0]
		}

		SLOPE_CTRL_END_FLAG = true;
 8009a4a:	4b3d      	ldr	r3, [pc, #244]	; (8009b40 <stimLib_voltCfg+0x178>)
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	701a      	strb	r2, [r3, #0]
		TIM1->CCR1 = STIM_LIB_VOLTAGE_CTRL_PULSE;
 8009a50:	4b3a      	ldr	r3, [pc, #232]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009a52:	781a      	ldrb	r2, [r3, #0]
 8009a54:	4b3b      	ldr	r3, [pc, #236]	; (8009b44 <stimLib_voltCfg+0x17c>)
 8009a56:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		SLOPE_CTRL_END_FLAG = true;
	}

}
 8009a58:	e063      	b.n	8009b22 <stimLib_voltCfg+0x15a>
	else if (VOLTAGE_DIFFERENCE_ABS > STEPUP_FDBK_VOLT_RANGE)
 8009a5a:	68b9      	ldr	r1, [r7, #8]
 8009a5c:	6978      	ldr	r0, [r7, #20]
 8009a5e:	1a41      	subs	r1, r0, r1
 8009a60:	2900      	cmp	r1, #0
 8009a62:	bfb8      	it	lt
 8009a64:	4249      	neglt	r1, r1
 8009a66:	4838      	ldr	r0, [pc, #224]	; (8009b48 <stimLib_voltCfg+0x180>)
 8009a68:	4281      	cmp	r1, r0
 8009a6a:	dd49      	ble.n	8009b00 <stimLib_voltCfg+0x138>
		if (OUTPUT_VOLTAGE_IS_LOW)
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	4698      	mov	r8, r3
 8009a72:	4691      	mov	r9, r2
 8009a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a78:	4542      	cmp	r2, r8
 8009a7a:	eb73 0309 	sbcs.w	r3, r3, r9
 8009a7e:	d220      	bcs.n	8009ac2 <stimLib_voltCfg+0xfa>
			if (FAST_STEPUP_ENABLE)
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	bfb8      	it	lt
 8009a8a:	425b      	neglt	r3, r3
 8009a8c:	4a2f      	ldr	r2, [pc, #188]	; (8009b4c <stimLib_voltCfg+0x184>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	dd06      	ble.n	8009aa0 <stimLib_voltCfg+0xd8>
				STIM_LIB_VOLTAGE_CTRL_PULSE += 6;
 8009a92:	4b2a      	ldr	r3, [pc, #168]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	3306      	adds	r3, #6
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	4b28      	ldr	r3, [pc, #160]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009a9c:	701a      	strb	r2, [r3, #0]
 8009a9e:	e005      	b.n	8009aac <stimLib_voltCfg+0xe4>
				STIM_LIB_VOLTAGE_CTRL_PULSE += 1;
 8009aa0:	4b26      	ldr	r3, [pc, #152]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	4b24      	ldr	r3, [pc, #144]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009aaa:	701a      	strb	r2, [r3, #0]
			SLOPE_CTRL_END_FLAG = false;
 8009aac:	4b24      	ldr	r3, [pc, #144]	; (8009b40 <stimLib_voltCfg+0x178>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
					> STIM_LIB_STEPUP_CTRL_TABLE_LIMIT - 1)
 8009ab2:	4b22      	ldr	r3, [pc, #136]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE
 8009ab6:	2b1d      	cmp	r3, #29
 8009ab8:	d91d      	bls.n	8009af6 <stimLib_voltCfg+0x12e>
				STIM_LIB_VOLTAGE_CTRL_PULSE = STIM_LIB_STEPUP_CTRL_TABLE_LIMIT
 8009aba:	4b20      	ldr	r3, [pc, #128]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009abc:	221d      	movs	r2, #29
 8009abe:	701a      	strb	r2, [r3, #0]
 8009ac0:	e019      	b.n	8009af6 <stimLib_voltCfg+0x12e>
		else if (OUTPUT_VOLTAGE_IS_HIGH)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	461c      	mov	r4, r3
 8009ac8:	4615      	mov	r5, r2
 8009aca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ace:	4294      	cmp	r4, r2
 8009ad0:	eb75 0303 	sbcs.w	r3, r5, r3
 8009ad4:	d20f      	bcs.n	8009af6 <stimLib_voltCfg+0x12e>
			STIM_LIB_VOLTAGE_CTRL_PULSE--;
 8009ad6:	4b19      	ldr	r3, [pc, #100]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	4b17      	ldr	r3, [pc, #92]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009ae0:	701a      	strb	r2, [r3, #0]
			SLOPE_CTRL_END_FLAG = true;
 8009ae2:	4b17      	ldr	r3, [pc, #92]	; (8009b40 <stimLib_voltCfg+0x178>)
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	701a      	strb	r2, [r3, #0]
			if (STIM_LIB_VOLTAGE_CTRL_PULSE <= 0)
 8009ae8:	4b14      	ldr	r3, [pc, #80]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <stimLib_voltCfg+0x12e>
				STIM_LIB_VOLTAGE_CTRL_PULSE = 0;
 8009af0:	4b12      	ldr	r3, [pc, #72]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	701a      	strb	r2, [r3, #0]
		TIM1->CCR1 = STIM_LIB_VOLTAGE_CTRL_PULSE;
 8009af6:	4b11      	ldr	r3, [pc, #68]	; (8009b3c <stimLib_voltCfg+0x174>)
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	4b12      	ldr	r3, [pc, #72]	; (8009b44 <stimLib_voltCfg+0x17c>)
 8009afc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009afe:	e010      	b.n	8009b22 <stimLib_voltCfg+0x15a>
	else if (OUTPUT_VOLTAGE_IS_SAME)
 8009b00:	6979      	ldr	r1, [r7, #20]
 8009b02:	2000      	movs	r0, #0
 8009b04:	460a      	mov	r2, r1
 8009b06:	4603      	mov	r3, r0
 8009b08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b0c:	4299      	cmp	r1, r3
 8009b0e:	bf08      	it	eq
 8009b10:	4290      	cmpeq	r0, r2
 8009b12:	d103      	bne.n	8009b1c <stimLib_voltCfg+0x154>
		SLOPE_CTRL_END_FLAG = true;
 8009b14:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <stimLib_voltCfg+0x178>)
 8009b16:	2201      	movs	r2, #1
 8009b18:	701a      	strb	r2, [r3, #0]
}
 8009b1a:	e002      	b.n	8009b22 <stimLib_voltCfg+0x15a>
		SLOPE_CTRL_END_FLAG = true;
 8009b1c:	4b08      	ldr	r3, [pc, #32]	; (8009b40 <stimLib_voltCfg+0x178>)
 8009b1e:	2201      	movs	r2, #1
 8009b20:	701a      	strb	r2, [r3, #0]
}
 8009b22:	bf00      	nop
 8009b24:	371c      	adds	r7, #28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	003d0900 	.word	0x003d0900
 8009b34:	fffd40e1 	.word	0xfffd40e1
 8009b38:	0002bf1f 	.word	0x0002bf1f
 8009b3c:	20000424 	.word	0x20000424
 8009b40:	20000426 	.word	0x20000426
 8009b44:	40012c00 	.word	0x40012c00
 8009b48:	0002bf20 	.word	0x0002bf20
 8009b4c:	000927c0 	.word	0x000927c0

08009b50 <stimLib_adc1_readBuffer>:
/*
 * ADC CONVERSION DATA READ :: ADC1 DATA >> STEP UP BUFFER
 * */
void stimLib_adc1_readBuffer(uint16_t *stepup_buff, uint16_t *adc1_conv_buff,
		uint8_t conv_length)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < conv_length; i++)
 8009b5e:	2300      	movs	r3, #0
 8009b60:	75fb      	strb	r3, [r7, #23]
 8009b62:	e043      	b.n	8009bec <stimLib_adc1_readBuffer+0x9c>
		/*
		 * STEP UP ADC FILTER
		 * When the ADC buffer is read once,
		 * if the deviation of the value is an unexpected value, it is filtered.
		 *  */
		if (abs(adc1_conv_buff[i] - adc1_conv_buff[(i + 1) % conv_length])
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
 8009b72:	3301      	adds	r3, #1
 8009b74:	79fa      	ldrb	r2, [r7, #7]
 8009b76:	fb93 f1f2 	sdiv	r1, r3, r2
 8009b7a:	fb01 f202 	mul.w	r2, r1, r2
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	4413      	add	r3, r2
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	1ac3      	subs	r3, r0, r3
 8009b8a:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8009b8e:	db1f      	blt.n	8009bd0 <stimLib_adc1_readBuffer+0x80>
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	4413      	add	r3, r2
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	79fa      	ldrb	r2, [r7, #7]
 8009ba2:	fb93 f1f2 	sdiv	r1, r3, r2
 8009ba6:	fb01 f202 	mul.w	r2, r1, r2
 8009baa:	1a9b      	subs	r3, r3, r2
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	1ac3      	subs	r3, r0, r3
				< 200)
 8009bb6:	2bc7      	cmp	r3, #199	; 0xc7
 8009bb8:	dc0a      	bgt.n	8009bd0 <stimLib_adc1_readBuffer+0x80>
		{
			stepup_buff[i] = adc1_conv_buff[i];
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	441a      	add	r2, r3
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	68f9      	ldr	r1, [r7, #12]
 8009bc8:	440b      	add	r3, r1
 8009bca:	8812      	ldrh	r2, [r2, #0]
 8009bcc:	801a      	strh	r2, [r3, #0]
 8009bce:	e00a      	b.n	8009be6 <stimLib_adc1_readBuffer+0x96>
		}
		else
		{
			stepup_buff[i] = adc1_conv_buff[i + 1];
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	441a      	add	r2, r3
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	68f9      	ldr	r1, [r7, #12]
 8009be0:	440b      	add	r3, r1
 8009be2:	8812      	ldrh	r2, [r2, #0]
 8009be4:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < conv_length; i++)
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	3301      	adds	r3, #1
 8009bea:	75fb      	strb	r3, [r7, #23]
 8009bec:	7dfa      	ldrb	r2, [r7, #23]
 8009bee:	79fb      	ldrb	r3, [r7, #7]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d3b7      	bcc.n	8009b64 <stimLib_adc1_readBuffer+0x14>
		}
	}
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop
 8009bf8:	371c      	adds	r7, #28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <stimLib_stepup_adcAVG>:

/*
 * STEPUP ADC DATA AVG
 * */
uint32_t stimLib_stepup_adcAVG(uint16_t *stepup_buff, uint8_t conv_length)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint32_t stepup_total = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < conv_length; i++)
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]
 8009c16:	e00b      	b.n	8009c30 <stimLib_stepup_adcAVG+0x2e>
	{
		stepup_total += stepup_buff[i];
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	4413      	add	r3, r2
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4413      	add	r3, r2
 8009c28:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < conv_length; i++)
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	73fb      	strb	r3, [r7, #15]
 8009c30:	7bfa      	ldrb	r2, [r7, #15]
 8009c32:	78fb      	ldrb	r3, [r7, #3]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d3ef      	bcc.n	8009c18 <stimLib_stepup_adcAVG+0x16>
	}
	return stepup_total / conv_length;
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <stimLib_stepup_voltCalc>:
/*
 * STEP UP VOLTAGE CALC
 * */
uint64_t stimLib_stepup_voltCalc(uint32_t stepup_adc_avg, uint32_t r1,
		uint32_t r2)
{
 8009c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c50:	b08a      	sub	sp, #40	; 0x28
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6178      	str	r0, [r7, #20]
 8009c56:	6139      	str	r1, [r7, #16]
 8009c58:	60fa      	str	r2, [r7, #12]
	 * TODO:
	 * ADD IN FUATURE
	 * ADC TABLE
	 * */
	/* REFERENCE TABLE */
	uint64_t adc_val = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].fdbk_vol
 8009c5a:	4b2d      	ldr	r3, [pc, #180]	; (8009d10 <stimLib_stepup_voltCalc+0xc4>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	4a2c      	ldr	r2, [pc, #176]	; (8009d14 <stimLib_stepup_voltCalc+0xc8>)
 8009c62:	460b      	mov	r3, r1
 8009c64:	005b      	lsls	r3, r3, #1
 8009c66:	440b      	add	r3, r1
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	461a      	mov	r2, r3
			* stepup_adc_avg)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	fb03 f202 	mul.w	r2, r3, r2
			/ STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].adc_val;
 8009c78:	4b25      	ldr	r3, [pc, #148]	; (8009d10 <stimLib_stepup_voltCalc+0xc4>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	4925      	ldr	r1, [pc, #148]	; (8009d14 <stimLib_stepup_voltCalc+0xc8>)
 8009c80:	4603      	mov	r3, r0
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	4403      	add	r3, r0
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	440b      	add	r3, r1
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	fbb2 f3f3 	udiv	r3, r2, r3
	uint64_t adc_val = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].fdbk_vol
 8009c92:	2200      	movs	r2, #0
 8009c94:	469a      	mov	sl, r3
 8009c96:	4693      	mov	fp, r2
 8009c98:	e9c7 ab08 	strd	sl, fp, [r7, #32]

	uint64_t v_out = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].output_vol
 8009c9c:	4b1c      	ldr	r3, [pc, #112]	; (8009d10 <stimLib_stepup_voltCalc+0xc4>)
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4a1c      	ldr	r2, [pc, #112]	; (8009d14 <stimLib_stepup_voltCalc+0xc8>)
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	005b      	lsls	r3, r3, #1
 8009ca8:	440b      	add	r3, r1
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	17da      	asrs	r2, r3, #31
 8009cb2:	4698      	mov	r8, r3
 8009cb4:	4691      	mov	r9, r2
			* adc_val) / STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].fdbk_vol;
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	fb09 f203 	mul.w	r2, r9, r3
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	fb08 f303 	mul.w	r3, r8, r3
 8009cc2:	4413      	add	r3, r2
 8009cc4:	6a3a      	ldr	r2, [r7, #32]
 8009cc6:	fba2 4508 	umull	r4, r5, r2, r8
 8009cca:	442b      	add	r3, r5
 8009ccc:	461d      	mov	r5, r3
 8009cce:	4b10      	ldr	r3, [pc, #64]	; (8009d10 <stimLib_stepup_voltCalc+0xc4>)
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	4a0f      	ldr	r2, [pc, #60]	; (8009d14 <stimLib_stepup_voltCalc+0xc8>)
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	440b      	add	r3, r1
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	3308      	adds	r3, #8
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	17da      	asrs	r2, r3, #31
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	607a      	str	r2, [r7, #4]
	uint64_t v_out = (STEPUP_REF_VALUE[STIM_LIB_VOLTAGE_CTRL_PULSE].output_vol
 8009cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cee:	4620      	mov	r0, r4
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	f7f6 fabd 	bl	8000270 <__aeabi_uldivmod>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	e9c7 2306 	strd	r2, r3, [r7, #24]

	return v_out;
 8009cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8009d02:	4610      	mov	r0, r2
 8009d04:	4619      	mov	r1, r3
 8009d06:	3728      	adds	r7, #40	; 0x28
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d0e:	bf00      	nop
 8009d10:	20000424 	.word	0x20000424
 8009d14:	0800b2d8 	.word	0x0800b2d8

08009d18 <stimLib_stepup_dataPrint>:

/*
 * STEP UP ADC DATA PRINT
 * */
void stimLib_stepup_dataPrint(void)
{
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b08b      	sub	sp, #44	; 0x2c
 8009d1c:	af04      	add	r7, sp, #16
	if (STEPUP_DATA_PRINT_FLAG == true)
 8009d1e:	4b33      	ldr	r3, [pc, #204]	; (8009dec <stimLib_stepup_dataPrint+0xd4>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d05a      	beq.n	8009ddc <stimLib_stepup_dataPrint+0xc4>
	{
		uint8_t i;
		uint8_t dec_point[STEPUP_DEC_PLACES];
		int mode_val = STEPUP_VOLTAGE_SCALE_SIZE;
 8009d26:	4b32      	ldr	r3, [pc, #200]	; (8009df0 <stimLib_stepup_dataPrint+0xd8>)
 8009d28:	613b      	str	r3, [r7, #16]
		uint32_t n_number = (int) (stepup_fdbk_volt / STEPUP_VOLTAGE_SCALE_SIZE);
 8009d2a:	4b32      	ldr	r3, [pc, #200]	; (8009df4 <stimLib_stepup_dataPrint+0xdc>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	4a31      	ldr	r2, [pc, #196]	; (8009df8 <stimLib_stepup_dataPrint+0xe0>)
 8009d32:	fba2 2303 	umull	r2, r3, r2, r3
 8009d36:	09db      	lsrs	r3, r3, #7
 8009d38:	60fb      	str	r3, [r7, #12]

		for (i = 0; i < STEPUP_DEC_PLACES; i++)
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75fb      	strb	r3, [r7, #23]
 8009d3e:	e021      	b.n	8009d84 <stimLib_stepup_dataPrint+0x6c>
		{
			dec_point[i] = (stepup_fdbk_volt % mode_val) / (mode_val / 10);
 8009d40:	4b2c      	ldr	r3, [pc, #176]	; (8009df4 <stimLib_stepup_dataPrint+0xdc>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d4a:	fb01 f202 	mul.w	r2, r1, r2
 8009d4e:	1a9a      	subs	r2, r3, r2
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	492a      	ldr	r1, [pc, #168]	; (8009dfc <stimLib_stepup_dataPrint+0xe4>)
 8009d54:	fb81 0103 	smull	r0, r1, r1, r3
 8009d58:	1089      	asrs	r1, r1, #2
 8009d5a:	17db      	asrs	r3, r3, #31
 8009d5c:	1acb      	subs	r3, r1, r3
 8009d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	b2d2      	uxtb	r2, r2
 8009d66:	3318      	adds	r3, #24
 8009d68:	443b      	add	r3, r7
 8009d6a:	f803 2c14 	strb.w	r2, [r3, #-20]
			mode_val /= 10;
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	4a22      	ldr	r2, [pc, #136]	; (8009dfc <stimLib_stepup_dataPrint+0xe4>)
 8009d72:	fb82 1203 	smull	r1, r2, r2, r3
 8009d76:	1092      	asrs	r2, r2, #2
 8009d78:	17db      	asrs	r3, r3, #31
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	613b      	str	r3, [r7, #16]
		for (i = 0; i < STEPUP_DEC_PLACES; i++)
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	3301      	adds	r3, #1
 8009d82:	75fb      	strb	r3, [r7, #23]
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	2b04      	cmp	r3, #4
 8009d88:	d9da      	bls.n	8009d40 <stimLib_stepup_dataPrint+0x28>
		}

		/* dec_point[0] = fdbk_adc_voltage % STEPUP_VOLTAGE_SCALE; */
		TD_DEBUG_PRINT(("----- STEP-UP -----\n"));
 8009d8a:	481d      	ldr	r0, [pc, #116]	; (8009e00 <stimLib_stepup_dataPrint+0xe8>)
 8009d8c:	f000 f9e6 	bl	800a15c <puts>
		TD_DEBUG_PRINT(("TARGET VOLTAGE : %d\n", STEPUP_TARGET_VOLTAGE));
 8009d90:	2128      	movs	r1, #40	; 0x28
 8009d92:	481c      	ldr	r0, [pc, #112]	; (8009e04 <stimLib_stepup_dataPrint+0xec>)
 8009d94:	f000 f95c 	bl	800a050 <iprintf>

		TD_DEBUG_PRINT(
 8009d98:	793b      	ldrb	r3, [r7, #4]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	797b      	ldrb	r3, [r7, #5]
 8009d9e:	461c      	mov	r4, r3
 8009da0:	79bb      	ldrb	r3, [r7, #6]
 8009da2:	79fa      	ldrb	r2, [r7, #7]
 8009da4:	7a39      	ldrb	r1, [r7, #8]
 8009da6:	9102      	str	r1, [sp, #8]
 8009da8:	9201      	str	r2, [sp, #4]
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	4623      	mov	r3, r4
 8009dae:	4602      	mov	r2, r0
 8009db0:	68f9      	ldr	r1, [r7, #12]
 8009db2:	4815      	ldr	r0, [pc, #84]	; (8009e08 <stimLib_stepup_dataPrint+0xf0>)
 8009db4:	f000 f94c 	bl	800a050 <iprintf>
				("MEAS Voltage : %ld.%d%d%d%d%d\n", n_number, dec_point[0], dec_point[1], dec_point[2], dec_point[3], dec_point[4]));
		TD_DEBUG_PRINT(("STEP-UP ADC AVG : %ld\n", stepup_fdbk_adc_avg));
 8009db8:	4b14      	ldr	r3, [pc, #80]	; (8009e0c <stimLib_stepup_dataPrint+0xf4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4814      	ldr	r0, [pc, #80]	; (8009e10 <stimLib_stepup_dataPrint+0xf8>)
 8009dc0:	f000 f946 	bl	800a050 <iprintf>
		TD_DEBUG_PRINT(("STEP-UP PW : %d\n", STIM_LIB_VOLTAGE_CTRL_PULSE));
 8009dc4:	4b13      	ldr	r3, [pc, #76]	; (8009e14 <stimLib_stepup_dataPrint+0xfc>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	4813      	ldr	r0, [pc, #76]	; (8009e18 <stimLib_stepup_dataPrint+0x100>)
 8009dcc:	f000 f940 	bl	800a050 <iprintf>

#ifdef STIM_LIB_EVKIT_CC
		TD_DEBUG_PRINT(("DAC CTRL VALUE : %d\n\n", DAC_CONTROL_VALUE));
 8009dd0:	4b12      	ldr	r3, [pc, #72]	; (8009e1c <stimLib_stepup_dataPrint+0x104>)
 8009dd2:	7a1b      	ldrb	r3, [r3, #8]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4812      	ldr	r0, [pc, #72]	; (8009e20 <stimLib_stepup_dataPrint+0x108>)
 8009dd8:	f000 f93a 	bl	800a050 <iprintf>
#endif

	}
	STEPUP_DATA_PRINT_FLAG = false;
 8009ddc:	4b03      	ldr	r3, [pc, #12]	; (8009dec <stimLib_stepup_dataPrint+0xd4>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	701a      	strb	r2, [r3, #0]

}
 8009de2:	bf00      	nop
 8009de4:	371c      	adds	r7, #28
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd90      	pop	{r4, r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20000427 	.word	0x20000427
 8009df0:	000186a0 	.word	0x000186a0
 8009df4:	20000458 	.word	0x20000458
 8009df8:	0a7c5ac5 	.word	0x0a7c5ac5
 8009dfc:	66666667 	.word	0x66666667
 8009e00:	0800b200 	.word	0x0800b200
 8009e04:	0800b214 	.word	0x0800b214
 8009e08:	0800b22c 	.word	0x0800b22c
 8009e0c:	20000454 	.word	0x20000454
 8009e10:	0800b24c 	.word	0x0800b24c
 8009e14:	20000424 	.word	0x20000424
 8009e18:	0800b264 	.word	0x0800b264
 8009e1c:	200003ec 	.word	0x200003ec
 8009e20:	0800b278 	.word	0x0800b278

08009e24 <stimLib_dacctrl_Set>:

/*
 * DAC GPIO CONTROL
 * */
void stimLib_dacctrl_Set(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
	stimLib_dacctrl_setRaw();
 8009e28:	f000 f8bc 	bl	8009fa4 <stimLib_dacctrl_setRaw>
}
 8009e2c:	bf00      	nop
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <stimLib_dacctrl_Off>:

void stimLib_dacctrl_Off(void)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	af00      	add	r7, sp, #0
	stimLib_dacctrl_offRaw();
 8009e34:	f000 f8ce 	bl	8009fd4 <stimLib_dacctrl_offRaw>
}
 8009e38:	bf00      	nop
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <stimLib_stepup_adcStart>:

/*
 * STEP UP START :: ADC CONVERSION START
 * */
void stimLib_stepup_adcStart(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
	stimLib_stepup_adcStartRaw();
 8009e40:	f000 f886 	bl	8009f50 <stimLib_stepup_adcStartRaw>
}
 8009e44:	bf00      	nop
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <stimLib_stepup_adcStop>:

/*
 * STEP UP STOP :: ADC CONVERSION STOP
 * */
void stimLib_stepup_adcStop(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	af00      	add	r7, sp, #0
	stimLib_stepup_adcStopRaw();
 8009e4c:	f000 f8a0 	bl	8009f90 <stimLib_stepup_adcStopRaw>
}
 8009e50:	bf00      	nop
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <stimLib_stepupStart>:

/* STEP UP FUNCTION Collection */
void stimLib_stepupStart(void)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
	STIM_LIB_STEPUP_SET_START();
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <stimLib_stepupStart+0x1c>)
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	701a      	strb	r2, [r3, #0]
#ifdef STIM_LIB_EVKIT_CC
	stimLib_dacctrl_Set();
 8009e5e:	f7ff ffe1 	bl	8009e24 <stimLib_dacctrl_Set>
#endif
	stimLib_stepup_adcStart();
 8009e62:	f7ff ffeb 	bl	8009e3c <stimLib_stepup_adcStart>
	stimLib_stepup_startRaw();
 8009e66:	f000 f815 	bl	8009e94 <stimLib_stepup_startRaw>
}
 8009e6a:	bf00      	nop
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20000428 	.word	0x20000428

08009e74 <stimLib_stepupStop>:

void stimLib_stepupStop(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
	STIM_LIB_STEPUP_SET_STOP();
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <stimLib_stepupStop+0x1c>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
#ifdef STIM_LIB_EVKIT_CC
	stimLib_dacctrl_Off();
 8009e7e:	f7ff ffd7 	bl	8009e30 <stimLib_dacctrl_Off>
#endif
	stimLib_stepup_stopRaw();
 8009e82:	f000 f84d 	bl	8009f20 <stimLib_stepup_stopRaw>
	stimLib_stepup_adcStop();
 8009e86:	f7ff ffdf 	bl	8009e48 <stimLib_stepup_adcStop>
}
 8009e8a:	bf00      	nop
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000428 	.word	0x20000428

08009e94 <stimLib_stepup_startRaw>:
/* STEPUP CONTROL VALUE :: PULSE and Counter */
extern uint8_t voltage_ctrl_pulse;
extern uint8_t stepup_feedback_cnt;

void stimLib_stepup_startRaw(void)
{
 8009e94:	b598      	push	{r3, r4, r7, lr}
 8009e96:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 8009e98:	4b1a      	ldr	r3, [pc, #104]	; (8009f04 <stimLib_stepup_startRaw+0x70>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->PSC = STIM_LIB_STEPUP_PSC_INPUT;
 8009e9e:	f7fb f8a5 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4a18      	ldr	r2, [pc, #96]	; (8009f08 <stimLib_stepup_startRaw+0x74>)
 8009ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eb4:	1e5a      	subs	r2, r3, #1
 8009eb6:	4b13      	ldr	r3, [pc, #76]	; (8009f04 <stimLib_stepup_startRaw+0x70>)
 8009eb8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = STIM_LIB_STEPUP_ARR_INPUT;
 8009eba:	f7fb f897 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	f7fb f894 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	4a10      	ldr	r2, [pc, #64]	; (8009f08 <stimLib_stepup_startRaw+0x74>)
 8009ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ecc:	461a      	mov	r2, r3
 8009ece:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ed6:	fbb4 f3f3 	udiv	r3, r4, r3
 8009eda:	4a0c      	ldr	r2, [pc, #48]	; (8009f0c <stimLib_stepup_startRaw+0x78>)
 8009edc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee0:	08db      	lsrs	r3, r3, #3
 8009ee2:	1e5a      	subs	r2, r3, #1
 8009ee4:	4b07      	ldr	r3, [pc, #28]	; (8009f04 <stimLib_stepup_startRaw+0x70>)
 8009ee6:	62da      	str	r2, [r3, #44]	; 0x2c

	/* STEP UP PULSE */
	TIM1->CCR1 = STIM_LIB_VOLTAGE_CTRL_PULSE;
 8009ee8:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <stimLib_stepup_startRaw+0x7c>)
 8009eea:	781a      	ldrb	r2, [r3, #0]
 8009eec:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <stimLib_stepup_startRaw+0x80>)
 8009eee:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4809      	ldr	r0, [pc, #36]	; (8009f18 <stimLib_stepup_startRaw+0x84>)
 8009ef4:	f7fb ff8e 	bl	8005e14 <HAL_TIM_PWM_Start>

	/* STEP UP FEEDBACK */
	HAL_TIM_Base_Start_IT(&htim6);
 8009ef8:	4808      	ldr	r0, [pc, #32]	; (8009f1c <stimLib_stepup_startRaw+0x88>)
 8009efa:	f7fb fb13 	bl	8005524 <HAL_TIM_Base_Start_IT>
}
 8009efe:	bf00      	nop
 8009f00:	bd98      	pop	{r3, r4, r7, pc}
 8009f02:	bf00      	nop
 8009f04:	40001000 	.word	0x40001000
 8009f08:	04c4b400 	.word	0x04c4b400
 8009f0c:	cccccccd 	.word	0xcccccccd
 8009f10:	20000424 	.word	0x20000424
 8009f14:	40012c00 	.word	0x40012c00
 8009f18:	200001e4 	.word	0x200001e4
 8009f1c:	2000027c 	.word	0x2000027c

08009f20 <stimLib_stepup_stopRaw>:

void stimLib_stepup_stopRaw(void)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	af00      	add	r7, sp, #0
	STIM_LIB_VOLTAGE_CTRL_PULSE = 0;
 8009f24:	4b07      	ldr	r3, [pc, #28]	; (8009f44 <stimLib_stepup_stopRaw+0x24>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop(&htim1);
 8009f2a:	4807      	ldr	r0, [pc, #28]	; (8009f48 <stimLib_stepup_stopRaw+0x28>)
 8009f2c:	f7fb fad3 	bl	80054d6 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8009f30:	2100      	movs	r1, #0
 8009f32:	4805      	ldr	r0, [pc, #20]	; (8009f48 <stimLib_stepup_stopRaw+0x28>)
 8009f34:	f7fc f84c 	bl	8005fd0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 8009f38:	4804      	ldr	r0, [pc, #16]	; (8009f4c <stimLib_stepup_stopRaw+0x2c>)
 8009f3a:	f7fb fb47 	bl	80055cc <HAL_TIM_Base_Stop_IT>
}
 8009f3e:	bf00      	nop
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	20000424 	.word	0x20000424
 8009f48:	200001e4 	.word	0x200001e4
 8009f4c:	2000027c 	.word	0x2000027c

08009f50 <stimLib_stepup_adcStartRaw>:

void stimLib_stepup_adcStartRaw(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_conv_buff,
 8009f54:	220a      	movs	r2, #10
 8009f56:	490b      	ldr	r1, [pc, #44]	; (8009f84 <stimLib_stepup_adcStartRaw+0x34>)
 8009f58:	480b      	ldr	r0, [pc, #44]	; (8009f88 <stimLib_stepup_adcStartRaw+0x38>)
 8009f5a:	f7f7 fe9f 	bl	8001c9c <HAL_ADC_Start_DMA>
			STIM_LIB_ADC1_TOTAL_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_adc1, DMA_IT_HT | DMA_IT_TC);
 8009f5e:	4b0b      	ldr	r3, [pc, #44]	; (8009f8c <stimLib_stepup_adcStartRaw+0x3c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	4b09      	ldr	r3, [pc, #36]	; (8009f8c <stimLib_stepup_adcStartRaw+0x3c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f022 0206 	bic.w	r2, r2, #6
 8009f6c:	601a      	str	r2, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, ADC_IT_OVR);
 8009f6e:	4b06      	ldr	r3, [pc, #24]	; (8009f88 <stimLib_stepup_adcStartRaw+0x38>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	4b04      	ldr	r3, [pc, #16]	; (8009f88 <stimLib_stepup_adcStartRaw+0x38>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0210 	bic.w	r2, r2, #16
 8009f7c:	605a      	str	r2, [r3, #4]
}
 8009f7e:	bf00      	nop
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	2000042c 	.word	0x2000042c
 8009f88:	2000008c 	.word	0x2000008c
 8009f8c:	20000154 	.word	0x20000154

08009f90 <stimLib_stepup_adcStopRaw>:

void stimLib_stepup_adcStopRaw(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8009f94:	4802      	ldr	r0, [pc, #8]	; (8009fa0 <stimLib_stepup_adcStopRaw+0x10>)
 8009f96:	f7f7 ff35 	bl	8001e04 <HAL_ADC_Stop_DMA>
}
 8009f9a:	bf00      	nop
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	2000008c 	.word	0x2000008c

08009fa4 <stimLib_dacctrl_setRaw>:
 * Add in Future
 * Need to create a DAC Control GPIO Function
 * */

void stimLib_dacctrl_setRaw(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	af00      	add	r7, sp, #0
	/* GPIO DAC CONTROL CLEAR */
	HAL_GPIO_WritePin(STIM_LIB_DAC_N0_GPIO_PORT,
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8009fae:	4807      	ldr	r0, [pc, #28]	; (8009fcc <stimLib_dacctrl_setRaw+0x28>)
 8009fb0:	f7fa f99a 	bl	80042e8 <HAL_GPIO_WritePin>
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN, GPIO_PIN_RESET);

	/* GPIO DAC SETTING */
	HAL_GPIO_WritePin(STIM_LIB_DAC_N0_GPIO_PORT, STIM_LIB_STATE_SIG_DEGREE << 1,
 8009fb4:	4b06      	ldr	r3, [pc, #24]	; (8009fd0 <stimLib_dacctrl_setRaw+0x2c>)
 8009fb6:	7a1b      	ldrb	r3, [r3, #8]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4802      	ldr	r0, [pc, #8]	; (8009fcc <stimLib_dacctrl_setRaw+0x28>)
 8009fc4:	f7fa f990 	bl	80042e8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8009fc8:	bf00      	nop
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	48000400 	.word	0x48000400
 8009fd0:	200003ec 	.word	0x200003ec

08009fd4 <stimLib_dacctrl_offRaw>:

void stimLib_dacctrl_offRaw(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	af00      	add	r7, sp, #0
	/* GPIO DAC CONTROL CLEAR */
	HAL_GPIO_WritePin(STIM_LIB_DAC_N0_GPIO_PORT,
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8009fde:	4802      	ldr	r0, [pc, #8]	; (8009fe8 <stimLib_dacctrl_offRaw+0x14>)
 8009fe0:	f7fa f982 	bl	80042e8 <HAL_GPIO_WritePin>
			STIM_LIB_DAC_N0_PIN | STIM_LIB_DAC_N1_PIN | STIM_LIB_DAC_N2_PIN
					| STIM_LIB_DAC_N3_PIN | STIM_LIB_DAC_N4_PIN
					| STIM_LIB_DAC_N5_PIN | STIM_LIB_DAC_N6_PIN
					| STIM_LIB_DAC_N7_PIN, GPIO_PIN_RESET);
}
 8009fe4:	bf00      	nop
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	48000400 	.word	0x48000400

08009fec <__errno>:
 8009fec:	4b01      	ldr	r3, [pc, #4]	; (8009ff4 <__errno+0x8>)
 8009fee:	6818      	ldr	r0, [r3, #0]
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	2000000c 	.word	0x2000000c

08009ff8 <__libc_init_array>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	4d0d      	ldr	r5, [pc, #52]	; (800a030 <__libc_init_array+0x38>)
 8009ffc:	4c0d      	ldr	r4, [pc, #52]	; (800a034 <__libc_init_array+0x3c>)
 8009ffe:	1b64      	subs	r4, r4, r5
 800a000:	10a4      	asrs	r4, r4, #2
 800a002:	2600      	movs	r6, #0
 800a004:	42a6      	cmp	r6, r4
 800a006:	d109      	bne.n	800a01c <__libc_init_array+0x24>
 800a008:	4d0b      	ldr	r5, [pc, #44]	; (800a038 <__libc_init_array+0x40>)
 800a00a:	4c0c      	ldr	r4, [pc, #48]	; (800a03c <__libc_init_array+0x44>)
 800a00c:	f001 f824 	bl	800b058 <_init>
 800a010:	1b64      	subs	r4, r4, r5
 800a012:	10a4      	asrs	r4, r4, #2
 800a014:	2600      	movs	r6, #0
 800a016:	42a6      	cmp	r6, r4
 800a018:	d105      	bne.n	800a026 <__libc_init_array+0x2e>
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a020:	4798      	blx	r3
 800a022:	3601      	adds	r6, #1
 800a024:	e7ee      	b.n	800a004 <__libc_init_array+0xc>
 800a026:	f855 3b04 	ldr.w	r3, [r5], #4
 800a02a:	4798      	blx	r3
 800a02c:	3601      	adds	r6, #1
 800a02e:	e7f2      	b.n	800a016 <__libc_init_array+0x1e>
 800a030:	0800b4e0 	.word	0x0800b4e0
 800a034:	0800b4e0 	.word	0x0800b4e0
 800a038:	0800b4e0 	.word	0x0800b4e0
 800a03c:	0800b4e4 	.word	0x0800b4e4

0800a040 <memset>:
 800a040:	4402      	add	r2, r0
 800a042:	4603      	mov	r3, r0
 800a044:	4293      	cmp	r3, r2
 800a046:	d100      	bne.n	800a04a <memset+0xa>
 800a048:	4770      	bx	lr
 800a04a:	f803 1b01 	strb.w	r1, [r3], #1
 800a04e:	e7f9      	b.n	800a044 <memset+0x4>

0800a050 <iprintf>:
 800a050:	b40f      	push	{r0, r1, r2, r3}
 800a052:	4b0a      	ldr	r3, [pc, #40]	; (800a07c <iprintf+0x2c>)
 800a054:	b513      	push	{r0, r1, r4, lr}
 800a056:	681c      	ldr	r4, [r3, #0]
 800a058:	b124      	cbz	r4, 800a064 <iprintf+0x14>
 800a05a:	69a3      	ldr	r3, [r4, #24]
 800a05c:	b913      	cbnz	r3, 800a064 <iprintf+0x14>
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 fa5e 	bl	800a520 <__sinit>
 800a064:	ab05      	add	r3, sp, #20
 800a066:	9a04      	ldr	r2, [sp, #16]
 800a068:	68a1      	ldr	r1, [r4, #8]
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	4620      	mov	r0, r4
 800a06e:	f000 fc67 	bl	800a940 <_vfiprintf_r>
 800a072:	b002      	add	sp, #8
 800a074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a078:	b004      	add	sp, #16
 800a07a:	4770      	bx	lr
 800a07c:	2000000c 	.word	0x2000000c

0800a080 <_puts_r>:
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	460e      	mov	r6, r1
 800a084:	4605      	mov	r5, r0
 800a086:	b118      	cbz	r0, 800a090 <_puts_r+0x10>
 800a088:	6983      	ldr	r3, [r0, #24]
 800a08a:	b90b      	cbnz	r3, 800a090 <_puts_r+0x10>
 800a08c:	f000 fa48 	bl	800a520 <__sinit>
 800a090:	69ab      	ldr	r3, [r5, #24]
 800a092:	68ac      	ldr	r4, [r5, #8]
 800a094:	b913      	cbnz	r3, 800a09c <_puts_r+0x1c>
 800a096:	4628      	mov	r0, r5
 800a098:	f000 fa42 	bl	800a520 <__sinit>
 800a09c:	4b2c      	ldr	r3, [pc, #176]	; (800a150 <_puts_r+0xd0>)
 800a09e:	429c      	cmp	r4, r3
 800a0a0:	d120      	bne.n	800a0e4 <_puts_r+0x64>
 800a0a2:	686c      	ldr	r4, [r5, #4]
 800a0a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0a6:	07db      	lsls	r3, r3, #31
 800a0a8:	d405      	bmi.n	800a0b6 <_puts_r+0x36>
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	0598      	lsls	r0, r3, #22
 800a0ae:	d402      	bmi.n	800a0b6 <_puts_r+0x36>
 800a0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0b2:	f000 fad3 	bl	800a65c <__retarget_lock_acquire_recursive>
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	0719      	lsls	r1, r3, #28
 800a0ba:	d51d      	bpl.n	800a0f8 <_puts_r+0x78>
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	b1db      	cbz	r3, 800a0f8 <_puts_r+0x78>
 800a0c0:	3e01      	subs	r6, #1
 800a0c2:	68a3      	ldr	r3, [r4, #8]
 800a0c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	60a3      	str	r3, [r4, #8]
 800a0cc:	bb39      	cbnz	r1, 800a11e <_puts_r+0x9e>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	da38      	bge.n	800a144 <_puts_r+0xc4>
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	210a      	movs	r1, #10
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 f848 	bl	800a16c <__swbuf_r>
 800a0dc:	3001      	adds	r0, #1
 800a0de:	d011      	beq.n	800a104 <_puts_r+0x84>
 800a0e0:	250a      	movs	r5, #10
 800a0e2:	e011      	b.n	800a108 <_puts_r+0x88>
 800a0e4:	4b1b      	ldr	r3, [pc, #108]	; (800a154 <_puts_r+0xd4>)
 800a0e6:	429c      	cmp	r4, r3
 800a0e8:	d101      	bne.n	800a0ee <_puts_r+0x6e>
 800a0ea:	68ac      	ldr	r4, [r5, #8]
 800a0ec:	e7da      	b.n	800a0a4 <_puts_r+0x24>
 800a0ee:	4b1a      	ldr	r3, [pc, #104]	; (800a158 <_puts_r+0xd8>)
 800a0f0:	429c      	cmp	r4, r3
 800a0f2:	bf08      	it	eq
 800a0f4:	68ec      	ldreq	r4, [r5, #12]
 800a0f6:	e7d5      	b.n	800a0a4 <_puts_r+0x24>
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f000 f888 	bl	800a210 <__swsetup_r>
 800a100:	2800      	cmp	r0, #0
 800a102:	d0dd      	beq.n	800a0c0 <_puts_r+0x40>
 800a104:	f04f 35ff 	mov.w	r5, #4294967295
 800a108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a10a:	07da      	lsls	r2, r3, #31
 800a10c:	d405      	bmi.n	800a11a <_puts_r+0x9a>
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	059b      	lsls	r3, r3, #22
 800a112:	d402      	bmi.n	800a11a <_puts_r+0x9a>
 800a114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a116:	f000 faa2 	bl	800a65e <__retarget_lock_release_recursive>
 800a11a:	4628      	mov	r0, r5
 800a11c:	bd70      	pop	{r4, r5, r6, pc}
 800a11e:	2b00      	cmp	r3, #0
 800a120:	da04      	bge.n	800a12c <_puts_r+0xac>
 800a122:	69a2      	ldr	r2, [r4, #24]
 800a124:	429a      	cmp	r2, r3
 800a126:	dc06      	bgt.n	800a136 <_puts_r+0xb6>
 800a128:	290a      	cmp	r1, #10
 800a12a:	d004      	beq.n	800a136 <_puts_r+0xb6>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	6022      	str	r2, [r4, #0]
 800a132:	7019      	strb	r1, [r3, #0]
 800a134:	e7c5      	b.n	800a0c2 <_puts_r+0x42>
 800a136:	4622      	mov	r2, r4
 800a138:	4628      	mov	r0, r5
 800a13a:	f000 f817 	bl	800a16c <__swbuf_r>
 800a13e:	3001      	adds	r0, #1
 800a140:	d1bf      	bne.n	800a0c2 <_puts_r+0x42>
 800a142:	e7df      	b.n	800a104 <_puts_r+0x84>
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	250a      	movs	r5, #10
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	6022      	str	r2, [r4, #0]
 800a14c:	701d      	strb	r5, [r3, #0]
 800a14e:	e7db      	b.n	800a108 <_puts_r+0x88>
 800a150:	0800b464 	.word	0x0800b464
 800a154:	0800b484 	.word	0x0800b484
 800a158:	0800b444 	.word	0x0800b444

0800a15c <puts>:
 800a15c:	4b02      	ldr	r3, [pc, #8]	; (800a168 <puts+0xc>)
 800a15e:	4601      	mov	r1, r0
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	f7ff bf8d 	b.w	800a080 <_puts_r>
 800a166:	bf00      	nop
 800a168:	2000000c 	.word	0x2000000c

0800a16c <__swbuf_r>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	460e      	mov	r6, r1
 800a170:	4614      	mov	r4, r2
 800a172:	4605      	mov	r5, r0
 800a174:	b118      	cbz	r0, 800a17e <__swbuf_r+0x12>
 800a176:	6983      	ldr	r3, [r0, #24]
 800a178:	b90b      	cbnz	r3, 800a17e <__swbuf_r+0x12>
 800a17a:	f000 f9d1 	bl	800a520 <__sinit>
 800a17e:	4b21      	ldr	r3, [pc, #132]	; (800a204 <__swbuf_r+0x98>)
 800a180:	429c      	cmp	r4, r3
 800a182:	d12b      	bne.n	800a1dc <__swbuf_r+0x70>
 800a184:	686c      	ldr	r4, [r5, #4]
 800a186:	69a3      	ldr	r3, [r4, #24]
 800a188:	60a3      	str	r3, [r4, #8]
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	071a      	lsls	r2, r3, #28
 800a18e:	d52f      	bpl.n	800a1f0 <__swbuf_r+0x84>
 800a190:	6923      	ldr	r3, [r4, #16]
 800a192:	b36b      	cbz	r3, 800a1f0 <__swbuf_r+0x84>
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	6820      	ldr	r0, [r4, #0]
 800a198:	1ac0      	subs	r0, r0, r3
 800a19a:	6963      	ldr	r3, [r4, #20]
 800a19c:	b2f6      	uxtb	r6, r6
 800a19e:	4283      	cmp	r3, r0
 800a1a0:	4637      	mov	r7, r6
 800a1a2:	dc04      	bgt.n	800a1ae <__swbuf_r+0x42>
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f000 f926 	bl	800a3f8 <_fflush_r>
 800a1ac:	bb30      	cbnz	r0, 800a1fc <__swbuf_r+0x90>
 800a1ae:	68a3      	ldr	r3, [r4, #8]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	60a3      	str	r3, [r4, #8]
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	6022      	str	r2, [r4, #0]
 800a1ba:	701e      	strb	r6, [r3, #0]
 800a1bc:	6963      	ldr	r3, [r4, #20]
 800a1be:	3001      	adds	r0, #1
 800a1c0:	4283      	cmp	r3, r0
 800a1c2:	d004      	beq.n	800a1ce <__swbuf_r+0x62>
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	07db      	lsls	r3, r3, #31
 800a1c8:	d506      	bpl.n	800a1d8 <__swbuf_r+0x6c>
 800a1ca:	2e0a      	cmp	r6, #10
 800a1cc:	d104      	bne.n	800a1d8 <__swbuf_r+0x6c>
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f000 f911 	bl	800a3f8 <_fflush_r>
 800a1d6:	b988      	cbnz	r0, 800a1fc <__swbuf_r+0x90>
 800a1d8:	4638      	mov	r0, r7
 800a1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1dc:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <__swbuf_r+0x9c>)
 800a1de:	429c      	cmp	r4, r3
 800a1e0:	d101      	bne.n	800a1e6 <__swbuf_r+0x7a>
 800a1e2:	68ac      	ldr	r4, [r5, #8]
 800a1e4:	e7cf      	b.n	800a186 <__swbuf_r+0x1a>
 800a1e6:	4b09      	ldr	r3, [pc, #36]	; (800a20c <__swbuf_r+0xa0>)
 800a1e8:	429c      	cmp	r4, r3
 800a1ea:	bf08      	it	eq
 800a1ec:	68ec      	ldreq	r4, [r5, #12]
 800a1ee:	e7ca      	b.n	800a186 <__swbuf_r+0x1a>
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f000 f80c 	bl	800a210 <__swsetup_r>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d0cb      	beq.n	800a194 <__swbuf_r+0x28>
 800a1fc:	f04f 37ff 	mov.w	r7, #4294967295
 800a200:	e7ea      	b.n	800a1d8 <__swbuf_r+0x6c>
 800a202:	bf00      	nop
 800a204:	0800b464 	.word	0x0800b464
 800a208:	0800b484 	.word	0x0800b484
 800a20c:	0800b444 	.word	0x0800b444

0800a210 <__swsetup_r>:
 800a210:	4b32      	ldr	r3, [pc, #200]	; (800a2dc <__swsetup_r+0xcc>)
 800a212:	b570      	push	{r4, r5, r6, lr}
 800a214:	681d      	ldr	r5, [r3, #0]
 800a216:	4606      	mov	r6, r0
 800a218:	460c      	mov	r4, r1
 800a21a:	b125      	cbz	r5, 800a226 <__swsetup_r+0x16>
 800a21c:	69ab      	ldr	r3, [r5, #24]
 800a21e:	b913      	cbnz	r3, 800a226 <__swsetup_r+0x16>
 800a220:	4628      	mov	r0, r5
 800a222:	f000 f97d 	bl	800a520 <__sinit>
 800a226:	4b2e      	ldr	r3, [pc, #184]	; (800a2e0 <__swsetup_r+0xd0>)
 800a228:	429c      	cmp	r4, r3
 800a22a:	d10f      	bne.n	800a24c <__swsetup_r+0x3c>
 800a22c:	686c      	ldr	r4, [r5, #4]
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a234:	0719      	lsls	r1, r3, #28
 800a236:	d42c      	bmi.n	800a292 <__swsetup_r+0x82>
 800a238:	06dd      	lsls	r5, r3, #27
 800a23a:	d411      	bmi.n	800a260 <__swsetup_r+0x50>
 800a23c:	2309      	movs	r3, #9
 800a23e:	6033      	str	r3, [r6, #0]
 800a240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a244:	81a3      	strh	r3, [r4, #12]
 800a246:	f04f 30ff 	mov.w	r0, #4294967295
 800a24a:	e03e      	b.n	800a2ca <__swsetup_r+0xba>
 800a24c:	4b25      	ldr	r3, [pc, #148]	; (800a2e4 <__swsetup_r+0xd4>)
 800a24e:	429c      	cmp	r4, r3
 800a250:	d101      	bne.n	800a256 <__swsetup_r+0x46>
 800a252:	68ac      	ldr	r4, [r5, #8]
 800a254:	e7eb      	b.n	800a22e <__swsetup_r+0x1e>
 800a256:	4b24      	ldr	r3, [pc, #144]	; (800a2e8 <__swsetup_r+0xd8>)
 800a258:	429c      	cmp	r4, r3
 800a25a:	bf08      	it	eq
 800a25c:	68ec      	ldreq	r4, [r5, #12]
 800a25e:	e7e6      	b.n	800a22e <__swsetup_r+0x1e>
 800a260:	0758      	lsls	r0, r3, #29
 800a262:	d512      	bpl.n	800a28a <__swsetup_r+0x7a>
 800a264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a266:	b141      	cbz	r1, 800a27a <__swsetup_r+0x6a>
 800a268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a26c:	4299      	cmp	r1, r3
 800a26e:	d002      	beq.n	800a276 <__swsetup_r+0x66>
 800a270:	4630      	mov	r0, r6
 800a272:	f000 fa5b 	bl	800a72c <_free_r>
 800a276:	2300      	movs	r3, #0
 800a278:	6363      	str	r3, [r4, #52]	; 0x34
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	2300      	movs	r3, #0
 800a284:	6063      	str	r3, [r4, #4]
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	f043 0308 	orr.w	r3, r3, #8
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	b94b      	cbnz	r3, 800a2aa <__swsetup_r+0x9a>
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a29c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2a0:	d003      	beq.n	800a2aa <__swsetup_r+0x9a>
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f000 fa01 	bl	800a6ac <__smakebuf_r>
 800a2aa:	89a0      	ldrh	r0, [r4, #12]
 800a2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2b0:	f010 0301 	ands.w	r3, r0, #1
 800a2b4:	d00a      	beq.n	800a2cc <__swsetup_r+0xbc>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60a3      	str	r3, [r4, #8]
 800a2ba:	6963      	ldr	r3, [r4, #20]
 800a2bc:	425b      	negs	r3, r3
 800a2be:	61a3      	str	r3, [r4, #24]
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	b943      	cbnz	r3, 800a2d6 <__swsetup_r+0xc6>
 800a2c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2c8:	d1ba      	bne.n	800a240 <__swsetup_r+0x30>
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
 800a2cc:	0781      	lsls	r1, r0, #30
 800a2ce:	bf58      	it	pl
 800a2d0:	6963      	ldrpl	r3, [r4, #20]
 800a2d2:	60a3      	str	r3, [r4, #8]
 800a2d4:	e7f4      	b.n	800a2c0 <__swsetup_r+0xb0>
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	e7f7      	b.n	800a2ca <__swsetup_r+0xba>
 800a2da:	bf00      	nop
 800a2dc:	2000000c 	.word	0x2000000c
 800a2e0:	0800b464 	.word	0x0800b464
 800a2e4:	0800b484 	.word	0x0800b484
 800a2e8:	0800b444 	.word	0x0800b444

0800a2ec <__sflush_r>:
 800a2ec:	898a      	ldrh	r2, [r1, #12]
 800a2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	0710      	lsls	r0, r2, #28
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	d458      	bmi.n	800a3ac <__sflush_r+0xc0>
 800a2fa:	684b      	ldr	r3, [r1, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	dc05      	bgt.n	800a30c <__sflush_r+0x20>
 800a300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a302:	2b00      	cmp	r3, #0
 800a304:	dc02      	bgt.n	800a30c <__sflush_r+0x20>
 800a306:	2000      	movs	r0, #0
 800a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a30c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a30e:	2e00      	cmp	r6, #0
 800a310:	d0f9      	beq.n	800a306 <__sflush_r+0x1a>
 800a312:	2300      	movs	r3, #0
 800a314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a318:	682f      	ldr	r7, [r5, #0]
 800a31a:	602b      	str	r3, [r5, #0]
 800a31c:	d032      	beq.n	800a384 <__sflush_r+0x98>
 800a31e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	075a      	lsls	r2, r3, #29
 800a324:	d505      	bpl.n	800a332 <__sflush_r+0x46>
 800a326:	6863      	ldr	r3, [r4, #4]
 800a328:	1ac0      	subs	r0, r0, r3
 800a32a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a32c:	b10b      	cbz	r3, 800a332 <__sflush_r+0x46>
 800a32e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a330:	1ac0      	subs	r0, r0, r3
 800a332:	2300      	movs	r3, #0
 800a334:	4602      	mov	r2, r0
 800a336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a338:	6a21      	ldr	r1, [r4, #32]
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b0      	blx	r6
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	d106      	bne.n	800a352 <__sflush_r+0x66>
 800a344:	6829      	ldr	r1, [r5, #0]
 800a346:	291d      	cmp	r1, #29
 800a348:	d82c      	bhi.n	800a3a4 <__sflush_r+0xb8>
 800a34a:	4a2a      	ldr	r2, [pc, #168]	; (800a3f4 <__sflush_r+0x108>)
 800a34c:	40ca      	lsrs	r2, r1
 800a34e:	07d6      	lsls	r6, r2, #31
 800a350:	d528      	bpl.n	800a3a4 <__sflush_r+0xb8>
 800a352:	2200      	movs	r2, #0
 800a354:	6062      	str	r2, [r4, #4]
 800a356:	04d9      	lsls	r1, r3, #19
 800a358:	6922      	ldr	r2, [r4, #16]
 800a35a:	6022      	str	r2, [r4, #0]
 800a35c:	d504      	bpl.n	800a368 <__sflush_r+0x7c>
 800a35e:	1c42      	adds	r2, r0, #1
 800a360:	d101      	bne.n	800a366 <__sflush_r+0x7a>
 800a362:	682b      	ldr	r3, [r5, #0]
 800a364:	b903      	cbnz	r3, 800a368 <__sflush_r+0x7c>
 800a366:	6560      	str	r0, [r4, #84]	; 0x54
 800a368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a36a:	602f      	str	r7, [r5, #0]
 800a36c:	2900      	cmp	r1, #0
 800a36e:	d0ca      	beq.n	800a306 <__sflush_r+0x1a>
 800a370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a374:	4299      	cmp	r1, r3
 800a376:	d002      	beq.n	800a37e <__sflush_r+0x92>
 800a378:	4628      	mov	r0, r5
 800a37a:	f000 f9d7 	bl	800a72c <_free_r>
 800a37e:	2000      	movs	r0, #0
 800a380:	6360      	str	r0, [r4, #52]	; 0x34
 800a382:	e7c1      	b.n	800a308 <__sflush_r+0x1c>
 800a384:	6a21      	ldr	r1, [r4, #32]
 800a386:	2301      	movs	r3, #1
 800a388:	4628      	mov	r0, r5
 800a38a:	47b0      	blx	r6
 800a38c:	1c41      	adds	r1, r0, #1
 800a38e:	d1c7      	bne.n	800a320 <__sflush_r+0x34>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0c4      	beq.n	800a320 <__sflush_r+0x34>
 800a396:	2b1d      	cmp	r3, #29
 800a398:	d001      	beq.n	800a39e <__sflush_r+0xb2>
 800a39a:	2b16      	cmp	r3, #22
 800a39c:	d101      	bne.n	800a3a2 <__sflush_r+0xb6>
 800a39e:	602f      	str	r7, [r5, #0]
 800a3a0:	e7b1      	b.n	800a306 <__sflush_r+0x1a>
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a8:	81a3      	strh	r3, [r4, #12]
 800a3aa:	e7ad      	b.n	800a308 <__sflush_r+0x1c>
 800a3ac:	690f      	ldr	r7, [r1, #16]
 800a3ae:	2f00      	cmp	r7, #0
 800a3b0:	d0a9      	beq.n	800a306 <__sflush_r+0x1a>
 800a3b2:	0793      	lsls	r3, r2, #30
 800a3b4:	680e      	ldr	r6, [r1, #0]
 800a3b6:	bf08      	it	eq
 800a3b8:	694b      	ldreq	r3, [r1, #20]
 800a3ba:	600f      	str	r7, [r1, #0]
 800a3bc:	bf18      	it	ne
 800a3be:	2300      	movne	r3, #0
 800a3c0:	eba6 0807 	sub.w	r8, r6, r7
 800a3c4:	608b      	str	r3, [r1, #8]
 800a3c6:	f1b8 0f00 	cmp.w	r8, #0
 800a3ca:	dd9c      	ble.n	800a306 <__sflush_r+0x1a>
 800a3cc:	6a21      	ldr	r1, [r4, #32]
 800a3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3d0:	4643      	mov	r3, r8
 800a3d2:	463a      	mov	r2, r7
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	47b0      	blx	r6
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	dc06      	bgt.n	800a3ea <__sflush_r+0xfe>
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	e78e      	b.n	800a308 <__sflush_r+0x1c>
 800a3ea:	4407      	add	r7, r0
 800a3ec:	eba8 0800 	sub.w	r8, r8, r0
 800a3f0:	e7e9      	b.n	800a3c6 <__sflush_r+0xda>
 800a3f2:	bf00      	nop
 800a3f4:	20400001 	.word	0x20400001

0800a3f8 <_fflush_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	690b      	ldr	r3, [r1, #16]
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	460c      	mov	r4, r1
 800a400:	b913      	cbnz	r3, 800a408 <_fflush_r+0x10>
 800a402:	2500      	movs	r5, #0
 800a404:	4628      	mov	r0, r5
 800a406:	bd38      	pop	{r3, r4, r5, pc}
 800a408:	b118      	cbz	r0, 800a412 <_fflush_r+0x1a>
 800a40a:	6983      	ldr	r3, [r0, #24]
 800a40c:	b90b      	cbnz	r3, 800a412 <_fflush_r+0x1a>
 800a40e:	f000 f887 	bl	800a520 <__sinit>
 800a412:	4b14      	ldr	r3, [pc, #80]	; (800a464 <_fflush_r+0x6c>)
 800a414:	429c      	cmp	r4, r3
 800a416:	d11b      	bne.n	800a450 <_fflush_r+0x58>
 800a418:	686c      	ldr	r4, [r5, #4]
 800a41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0ef      	beq.n	800a402 <_fflush_r+0xa>
 800a422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a424:	07d0      	lsls	r0, r2, #31
 800a426:	d404      	bmi.n	800a432 <_fflush_r+0x3a>
 800a428:	0599      	lsls	r1, r3, #22
 800a42a:	d402      	bmi.n	800a432 <_fflush_r+0x3a>
 800a42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a42e:	f000 f915 	bl	800a65c <__retarget_lock_acquire_recursive>
 800a432:	4628      	mov	r0, r5
 800a434:	4621      	mov	r1, r4
 800a436:	f7ff ff59 	bl	800a2ec <__sflush_r>
 800a43a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a43c:	07da      	lsls	r2, r3, #31
 800a43e:	4605      	mov	r5, r0
 800a440:	d4e0      	bmi.n	800a404 <_fflush_r+0xc>
 800a442:	89a3      	ldrh	r3, [r4, #12]
 800a444:	059b      	lsls	r3, r3, #22
 800a446:	d4dd      	bmi.n	800a404 <_fflush_r+0xc>
 800a448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a44a:	f000 f908 	bl	800a65e <__retarget_lock_release_recursive>
 800a44e:	e7d9      	b.n	800a404 <_fflush_r+0xc>
 800a450:	4b05      	ldr	r3, [pc, #20]	; (800a468 <_fflush_r+0x70>)
 800a452:	429c      	cmp	r4, r3
 800a454:	d101      	bne.n	800a45a <_fflush_r+0x62>
 800a456:	68ac      	ldr	r4, [r5, #8]
 800a458:	e7df      	b.n	800a41a <_fflush_r+0x22>
 800a45a:	4b04      	ldr	r3, [pc, #16]	; (800a46c <_fflush_r+0x74>)
 800a45c:	429c      	cmp	r4, r3
 800a45e:	bf08      	it	eq
 800a460:	68ec      	ldreq	r4, [r5, #12]
 800a462:	e7da      	b.n	800a41a <_fflush_r+0x22>
 800a464:	0800b464 	.word	0x0800b464
 800a468:	0800b484 	.word	0x0800b484
 800a46c:	0800b444 	.word	0x0800b444

0800a470 <std>:
 800a470:	2300      	movs	r3, #0
 800a472:	b510      	push	{r4, lr}
 800a474:	4604      	mov	r4, r0
 800a476:	e9c0 3300 	strd	r3, r3, [r0]
 800a47a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a47e:	6083      	str	r3, [r0, #8]
 800a480:	8181      	strh	r1, [r0, #12]
 800a482:	6643      	str	r3, [r0, #100]	; 0x64
 800a484:	81c2      	strh	r2, [r0, #14]
 800a486:	6183      	str	r3, [r0, #24]
 800a488:	4619      	mov	r1, r3
 800a48a:	2208      	movs	r2, #8
 800a48c:	305c      	adds	r0, #92	; 0x5c
 800a48e:	f7ff fdd7 	bl	800a040 <memset>
 800a492:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <std+0x38>)
 800a494:	6263      	str	r3, [r4, #36]	; 0x24
 800a496:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <std+0x3c>)
 800a498:	62a3      	str	r3, [r4, #40]	; 0x28
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <std+0x40>)
 800a49c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a49e:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <std+0x44>)
 800a4a0:	6224      	str	r4, [r4, #32]
 800a4a2:	6323      	str	r3, [r4, #48]	; 0x30
 800a4a4:	bd10      	pop	{r4, pc}
 800a4a6:	bf00      	nop
 800a4a8:	0800aee9 	.word	0x0800aee9
 800a4ac:	0800af0b 	.word	0x0800af0b
 800a4b0:	0800af43 	.word	0x0800af43
 800a4b4:	0800af67 	.word	0x0800af67

0800a4b8 <_cleanup_r>:
 800a4b8:	4901      	ldr	r1, [pc, #4]	; (800a4c0 <_cleanup_r+0x8>)
 800a4ba:	f000 b8af 	b.w	800a61c <_fwalk_reent>
 800a4be:	bf00      	nop
 800a4c0:	0800a3f9 	.word	0x0800a3f9

0800a4c4 <__sfmoreglue>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	2268      	movs	r2, #104	; 0x68
 800a4c8:	1e4d      	subs	r5, r1, #1
 800a4ca:	4355      	muls	r5, r2
 800a4cc:	460e      	mov	r6, r1
 800a4ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4d2:	f000 f997 	bl	800a804 <_malloc_r>
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	b140      	cbz	r0, 800a4ec <__sfmoreglue+0x28>
 800a4da:	2100      	movs	r1, #0
 800a4dc:	e9c0 1600 	strd	r1, r6, [r0]
 800a4e0:	300c      	adds	r0, #12
 800a4e2:	60a0      	str	r0, [r4, #8]
 800a4e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4e8:	f7ff fdaa 	bl	800a040 <memset>
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}

0800a4f0 <__sfp_lock_acquire>:
 800a4f0:	4801      	ldr	r0, [pc, #4]	; (800a4f8 <__sfp_lock_acquire+0x8>)
 800a4f2:	f000 b8b3 	b.w	800a65c <__retarget_lock_acquire_recursive>
 800a4f6:	bf00      	nop
 800a4f8:	2000045d 	.word	0x2000045d

0800a4fc <__sfp_lock_release>:
 800a4fc:	4801      	ldr	r0, [pc, #4]	; (800a504 <__sfp_lock_release+0x8>)
 800a4fe:	f000 b8ae 	b.w	800a65e <__retarget_lock_release_recursive>
 800a502:	bf00      	nop
 800a504:	2000045d 	.word	0x2000045d

0800a508 <__sinit_lock_acquire>:
 800a508:	4801      	ldr	r0, [pc, #4]	; (800a510 <__sinit_lock_acquire+0x8>)
 800a50a:	f000 b8a7 	b.w	800a65c <__retarget_lock_acquire_recursive>
 800a50e:	bf00      	nop
 800a510:	2000045e 	.word	0x2000045e

0800a514 <__sinit_lock_release>:
 800a514:	4801      	ldr	r0, [pc, #4]	; (800a51c <__sinit_lock_release+0x8>)
 800a516:	f000 b8a2 	b.w	800a65e <__retarget_lock_release_recursive>
 800a51a:	bf00      	nop
 800a51c:	2000045e 	.word	0x2000045e

0800a520 <__sinit>:
 800a520:	b510      	push	{r4, lr}
 800a522:	4604      	mov	r4, r0
 800a524:	f7ff fff0 	bl	800a508 <__sinit_lock_acquire>
 800a528:	69a3      	ldr	r3, [r4, #24]
 800a52a:	b11b      	cbz	r3, 800a534 <__sinit+0x14>
 800a52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a530:	f7ff bff0 	b.w	800a514 <__sinit_lock_release>
 800a534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a538:	6523      	str	r3, [r4, #80]	; 0x50
 800a53a:	4b13      	ldr	r3, [pc, #76]	; (800a588 <__sinit+0x68>)
 800a53c:	4a13      	ldr	r2, [pc, #76]	; (800a58c <__sinit+0x6c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	62a2      	str	r2, [r4, #40]	; 0x28
 800a542:	42a3      	cmp	r3, r4
 800a544:	bf04      	itt	eq
 800a546:	2301      	moveq	r3, #1
 800a548:	61a3      	streq	r3, [r4, #24]
 800a54a:	4620      	mov	r0, r4
 800a54c:	f000 f820 	bl	800a590 <__sfp>
 800a550:	6060      	str	r0, [r4, #4]
 800a552:	4620      	mov	r0, r4
 800a554:	f000 f81c 	bl	800a590 <__sfp>
 800a558:	60a0      	str	r0, [r4, #8]
 800a55a:	4620      	mov	r0, r4
 800a55c:	f000 f818 	bl	800a590 <__sfp>
 800a560:	2200      	movs	r2, #0
 800a562:	60e0      	str	r0, [r4, #12]
 800a564:	2104      	movs	r1, #4
 800a566:	6860      	ldr	r0, [r4, #4]
 800a568:	f7ff ff82 	bl	800a470 <std>
 800a56c:	68a0      	ldr	r0, [r4, #8]
 800a56e:	2201      	movs	r2, #1
 800a570:	2109      	movs	r1, #9
 800a572:	f7ff ff7d 	bl	800a470 <std>
 800a576:	68e0      	ldr	r0, [r4, #12]
 800a578:	2202      	movs	r2, #2
 800a57a:	2112      	movs	r1, #18
 800a57c:	f7ff ff78 	bl	800a470 <std>
 800a580:	2301      	movs	r3, #1
 800a582:	61a3      	str	r3, [r4, #24]
 800a584:	e7d2      	b.n	800a52c <__sinit+0xc>
 800a586:	bf00      	nop
 800a588:	0800b440 	.word	0x0800b440
 800a58c:	0800a4b9 	.word	0x0800a4b9

0800a590 <__sfp>:
 800a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a592:	4607      	mov	r7, r0
 800a594:	f7ff ffac 	bl	800a4f0 <__sfp_lock_acquire>
 800a598:	4b1e      	ldr	r3, [pc, #120]	; (800a614 <__sfp+0x84>)
 800a59a:	681e      	ldr	r6, [r3, #0]
 800a59c:	69b3      	ldr	r3, [r6, #24]
 800a59e:	b913      	cbnz	r3, 800a5a6 <__sfp+0x16>
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f7ff ffbd 	bl	800a520 <__sinit>
 800a5a6:	3648      	adds	r6, #72	; 0x48
 800a5a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	d503      	bpl.n	800a5b8 <__sfp+0x28>
 800a5b0:	6833      	ldr	r3, [r6, #0]
 800a5b2:	b30b      	cbz	r3, 800a5f8 <__sfp+0x68>
 800a5b4:	6836      	ldr	r6, [r6, #0]
 800a5b6:	e7f7      	b.n	800a5a8 <__sfp+0x18>
 800a5b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5bc:	b9d5      	cbnz	r5, 800a5f4 <__sfp+0x64>
 800a5be:	4b16      	ldr	r3, [pc, #88]	; (800a618 <__sfp+0x88>)
 800a5c0:	60e3      	str	r3, [r4, #12]
 800a5c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5c6:	6665      	str	r5, [r4, #100]	; 0x64
 800a5c8:	f000 f847 	bl	800a65a <__retarget_lock_init_recursive>
 800a5cc:	f7ff ff96 	bl	800a4fc <__sfp_lock_release>
 800a5d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5d8:	6025      	str	r5, [r4, #0]
 800a5da:	61a5      	str	r5, [r4, #24]
 800a5dc:	2208      	movs	r2, #8
 800a5de:	4629      	mov	r1, r5
 800a5e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5e4:	f7ff fd2c 	bl	800a040 <memset>
 800a5e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f4:	3468      	adds	r4, #104	; 0x68
 800a5f6:	e7d9      	b.n	800a5ac <__sfp+0x1c>
 800a5f8:	2104      	movs	r1, #4
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f7ff ff62 	bl	800a4c4 <__sfmoreglue>
 800a600:	4604      	mov	r4, r0
 800a602:	6030      	str	r0, [r6, #0]
 800a604:	2800      	cmp	r0, #0
 800a606:	d1d5      	bne.n	800a5b4 <__sfp+0x24>
 800a608:	f7ff ff78 	bl	800a4fc <__sfp_lock_release>
 800a60c:	230c      	movs	r3, #12
 800a60e:	603b      	str	r3, [r7, #0]
 800a610:	e7ee      	b.n	800a5f0 <__sfp+0x60>
 800a612:	bf00      	nop
 800a614:	0800b440 	.word	0x0800b440
 800a618:	ffff0001 	.word	0xffff0001

0800a61c <_fwalk_reent>:
 800a61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a620:	4606      	mov	r6, r0
 800a622:	4688      	mov	r8, r1
 800a624:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a628:	2700      	movs	r7, #0
 800a62a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a62e:	f1b9 0901 	subs.w	r9, r9, #1
 800a632:	d505      	bpl.n	800a640 <_fwalk_reent+0x24>
 800a634:	6824      	ldr	r4, [r4, #0]
 800a636:	2c00      	cmp	r4, #0
 800a638:	d1f7      	bne.n	800a62a <_fwalk_reent+0xe>
 800a63a:	4638      	mov	r0, r7
 800a63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a640:	89ab      	ldrh	r3, [r5, #12]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d907      	bls.n	800a656 <_fwalk_reent+0x3a>
 800a646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a64a:	3301      	adds	r3, #1
 800a64c:	d003      	beq.n	800a656 <_fwalk_reent+0x3a>
 800a64e:	4629      	mov	r1, r5
 800a650:	4630      	mov	r0, r6
 800a652:	47c0      	blx	r8
 800a654:	4307      	orrs	r7, r0
 800a656:	3568      	adds	r5, #104	; 0x68
 800a658:	e7e9      	b.n	800a62e <_fwalk_reent+0x12>

0800a65a <__retarget_lock_init_recursive>:
 800a65a:	4770      	bx	lr

0800a65c <__retarget_lock_acquire_recursive>:
 800a65c:	4770      	bx	lr

0800a65e <__retarget_lock_release_recursive>:
 800a65e:	4770      	bx	lr

0800a660 <__swhatbuf_r>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	460e      	mov	r6, r1
 800a664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a668:	2900      	cmp	r1, #0
 800a66a:	b096      	sub	sp, #88	; 0x58
 800a66c:	4614      	mov	r4, r2
 800a66e:	461d      	mov	r5, r3
 800a670:	da08      	bge.n	800a684 <__swhatbuf_r+0x24>
 800a672:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	602a      	str	r2, [r5, #0]
 800a67a:	061a      	lsls	r2, r3, #24
 800a67c:	d410      	bmi.n	800a6a0 <__swhatbuf_r+0x40>
 800a67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a682:	e00e      	b.n	800a6a2 <__swhatbuf_r+0x42>
 800a684:	466a      	mov	r2, sp
 800a686:	f000 fc95 	bl	800afb4 <_fstat_r>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	dbf1      	blt.n	800a672 <__swhatbuf_r+0x12>
 800a68e:	9a01      	ldr	r2, [sp, #4]
 800a690:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a694:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a698:	425a      	negs	r2, r3
 800a69a:	415a      	adcs	r2, r3
 800a69c:	602a      	str	r2, [r5, #0]
 800a69e:	e7ee      	b.n	800a67e <__swhatbuf_r+0x1e>
 800a6a0:	2340      	movs	r3, #64	; 0x40
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	b016      	add	sp, #88	; 0x58
 800a6a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6ac <__smakebuf_r>:
 800a6ac:	898b      	ldrh	r3, [r1, #12]
 800a6ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6b0:	079d      	lsls	r5, r3, #30
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	d507      	bpl.n	800a6c8 <__smakebuf_r+0x1c>
 800a6b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	6123      	str	r3, [r4, #16]
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	6163      	str	r3, [r4, #20]
 800a6c4:	b002      	add	sp, #8
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}
 800a6c8:	ab01      	add	r3, sp, #4
 800a6ca:	466a      	mov	r2, sp
 800a6cc:	f7ff ffc8 	bl	800a660 <__swhatbuf_r>
 800a6d0:	9900      	ldr	r1, [sp, #0]
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f000 f895 	bl	800a804 <_malloc_r>
 800a6da:	b948      	cbnz	r0, 800a6f0 <__smakebuf_r+0x44>
 800a6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e0:	059a      	lsls	r2, r3, #22
 800a6e2:	d4ef      	bmi.n	800a6c4 <__smakebuf_r+0x18>
 800a6e4:	f023 0303 	bic.w	r3, r3, #3
 800a6e8:	f043 0302 	orr.w	r3, r3, #2
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	e7e3      	b.n	800a6b8 <__smakebuf_r+0xc>
 800a6f0:	4b0d      	ldr	r3, [pc, #52]	; (800a728 <__smakebuf_r+0x7c>)
 800a6f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	6020      	str	r0, [r4, #0]
 800a6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	9b00      	ldr	r3, [sp, #0]
 800a700:	6163      	str	r3, [r4, #20]
 800a702:	9b01      	ldr	r3, [sp, #4]
 800a704:	6120      	str	r0, [r4, #16]
 800a706:	b15b      	cbz	r3, 800a720 <__smakebuf_r+0x74>
 800a708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a70c:	4630      	mov	r0, r6
 800a70e:	f000 fc63 	bl	800afd8 <_isatty_r>
 800a712:	b128      	cbz	r0, 800a720 <__smakebuf_r+0x74>
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	f023 0303 	bic.w	r3, r3, #3
 800a71a:	f043 0301 	orr.w	r3, r3, #1
 800a71e:	81a3      	strh	r3, [r4, #12]
 800a720:	89a0      	ldrh	r0, [r4, #12]
 800a722:	4305      	orrs	r5, r0
 800a724:	81a5      	strh	r5, [r4, #12]
 800a726:	e7cd      	b.n	800a6c4 <__smakebuf_r+0x18>
 800a728:	0800a4b9 	.word	0x0800a4b9

0800a72c <_free_r>:
 800a72c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a72e:	2900      	cmp	r1, #0
 800a730:	d044      	beq.n	800a7bc <_free_r+0x90>
 800a732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a736:	9001      	str	r0, [sp, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f1a1 0404 	sub.w	r4, r1, #4
 800a73e:	bfb8      	it	lt
 800a740:	18e4      	addlt	r4, r4, r3
 800a742:	f000 fc6b 	bl	800b01c <__malloc_lock>
 800a746:	4a1e      	ldr	r2, [pc, #120]	; (800a7c0 <_free_r+0x94>)
 800a748:	9801      	ldr	r0, [sp, #4]
 800a74a:	6813      	ldr	r3, [r2, #0]
 800a74c:	b933      	cbnz	r3, 800a75c <_free_r+0x30>
 800a74e:	6063      	str	r3, [r4, #4]
 800a750:	6014      	str	r4, [r2, #0]
 800a752:	b003      	add	sp, #12
 800a754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a758:	f000 bc66 	b.w	800b028 <__malloc_unlock>
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	d908      	bls.n	800a772 <_free_r+0x46>
 800a760:	6825      	ldr	r5, [r4, #0]
 800a762:	1961      	adds	r1, r4, r5
 800a764:	428b      	cmp	r3, r1
 800a766:	bf01      	itttt	eq
 800a768:	6819      	ldreq	r1, [r3, #0]
 800a76a:	685b      	ldreq	r3, [r3, #4]
 800a76c:	1949      	addeq	r1, r1, r5
 800a76e:	6021      	streq	r1, [r4, #0]
 800a770:	e7ed      	b.n	800a74e <_free_r+0x22>
 800a772:	461a      	mov	r2, r3
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	b10b      	cbz	r3, 800a77c <_free_r+0x50>
 800a778:	42a3      	cmp	r3, r4
 800a77a:	d9fa      	bls.n	800a772 <_free_r+0x46>
 800a77c:	6811      	ldr	r1, [r2, #0]
 800a77e:	1855      	adds	r5, r2, r1
 800a780:	42a5      	cmp	r5, r4
 800a782:	d10b      	bne.n	800a79c <_free_r+0x70>
 800a784:	6824      	ldr	r4, [r4, #0]
 800a786:	4421      	add	r1, r4
 800a788:	1854      	adds	r4, r2, r1
 800a78a:	42a3      	cmp	r3, r4
 800a78c:	6011      	str	r1, [r2, #0]
 800a78e:	d1e0      	bne.n	800a752 <_free_r+0x26>
 800a790:	681c      	ldr	r4, [r3, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	6053      	str	r3, [r2, #4]
 800a796:	4421      	add	r1, r4
 800a798:	6011      	str	r1, [r2, #0]
 800a79a:	e7da      	b.n	800a752 <_free_r+0x26>
 800a79c:	d902      	bls.n	800a7a4 <_free_r+0x78>
 800a79e:	230c      	movs	r3, #12
 800a7a0:	6003      	str	r3, [r0, #0]
 800a7a2:	e7d6      	b.n	800a752 <_free_r+0x26>
 800a7a4:	6825      	ldr	r5, [r4, #0]
 800a7a6:	1961      	adds	r1, r4, r5
 800a7a8:	428b      	cmp	r3, r1
 800a7aa:	bf04      	itt	eq
 800a7ac:	6819      	ldreq	r1, [r3, #0]
 800a7ae:	685b      	ldreq	r3, [r3, #4]
 800a7b0:	6063      	str	r3, [r4, #4]
 800a7b2:	bf04      	itt	eq
 800a7b4:	1949      	addeq	r1, r1, r5
 800a7b6:	6021      	streq	r1, [r4, #0]
 800a7b8:	6054      	str	r4, [r2, #4]
 800a7ba:	e7ca      	b.n	800a752 <_free_r+0x26>
 800a7bc:	b003      	add	sp, #12
 800a7be:	bd30      	pop	{r4, r5, pc}
 800a7c0:	20000460 	.word	0x20000460

0800a7c4 <sbrk_aligned>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	4e0e      	ldr	r6, [pc, #56]	; (800a800 <sbrk_aligned+0x3c>)
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	6831      	ldr	r1, [r6, #0]
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	b911      	cbnz	r1, 800a7d6 <sbrk_aligned+0x12>
 800a7d0:	f000 fb7a 	bl	800aec8 <_sbrk_r>
 800a7d4:	6030      	str	r0, [r6, #0]
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	4628      	mov	r0, r5
 800a7da:	f000 fb75 	bl	800aec8 <_sbrk_r>
 800a7de:	1c43      	adds	r3, r0, #1
 800a7e0:	d00a      	beq.n	800a7f8 <sbrk_aligned+0x34>
 800a7e2:	1cc4      	adds	r4, r0, #3
 800a7e4:	f024 0403 	bic.w	r4, r4, #3
 800a7e8:	42a0      	cmp	r0, r4
 800a7ea:	d007      	beq.n	800a7fc <sbrk_aligned+0x38>
 800a7ec:	1a21      	subs	r1, r4, r0
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f000 fb6a 	bl	800aec8 <_sbrk_r>
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	d101      	bne.n	800a7fc <sbrk_aligned+0x38>
 800a7f8:	f04f 34ff 	mov.w	r4, #4294967295
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	20000464 	.word	0x20000464

0800a804 <_malloc_r>:
 800a804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a808:	1ccd      	adds	r5, r1, #3
 800a80a:	f025 0503 	bic.w	r5, r5, #3
 800a80e:	3508      	adds	r5, #8
 800a810:	2d0c      	cmp	r5, #12
 800a812:	bf38      	it	cc
 800a814:	250c      	movcc	r5, #12
 800a816:	2d00      	cmp	r5, #0
 800a818:	4607      	mov	r7, r0
 800a81a:	db01      	blt.n	800a820 <_malloc_r+0x1c>
 800a81c:	42a9      	cmp	r1, r5
 800a81e:	d905      	bls.n	800a82c <_malloc_r+0x28>
 800a820:	230c      	movs	r3, #12
 800a822:	603b      	str	r3, [r7, #0]
 800a824:	2600      	movs	r6, #0
 800a826:	4630      	mov	r0, r6
 800a828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a82c:	4e2e      	ldr	r6, [pc, #184]	; (800a8e8 <_malloc_r+0xe4>)
 800a82e:	f000 fbf5 	bl	800b01c <__malloc_lock>
 800a832:	6833      	ldr	r3, [r6, #0]
 800a834:	461c      	mov	r4, r3
 800a836:	bb34      	cbnz	r4, 800a886 <_malloc_r+0x82>
 800a838:	4629      	mov	r1, r5
 800a83a:	4638      	mov	r0, r7
 800a83c:	f7ff ffc2 	bl	800a7c4 <sbrk_aligned>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	4604      	mov	r4, r0
 800a844:	d14d      	bne.n	800a8e2 <_malloc_r+0xde>
 800a846:	6834      	ldr	r4, [r6, #0]
 800a848:	4626      	mov	r6, r4
 800a84a:	2e00      	cmp	r6, #0
 800a84c:	d140      	bne.n	800a8d0 <_malloc_r+0xcc>
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	4631      	mov	r1, r6
 800a852:	4638      	mov	r0, r7
 800a854:	eb04 0803 	add.w	r8, r4, r3
 800a858:	f000 fb36 	bl	800aec8 <_sbrk_r>
 800a85c:	4580      	cmp	r8, r0
 800a85e:	d13a      	bne.n	800a8d6 <_malloc_r+0xd2>
 800a860:	6821      	ldr	r1, [r4, #0]
 800a862:	3503      	adds	r5, #3
 800a864:	1a6d      	subs	r5, r5, r1
 800a866:	f025 0503 	bic.w	r5, r5, #3
 800a86a:	3508      	adds	r5, #8
 800a86c:	2d0c      	cmp	r5, #12
 800a86e:	bf38      	it	cc
 800a870:	250c      	movcc	r5, #12
 800a872:	4629      	mov	r1, r5
 800a874:	4638      	mov	r0, r7
 800a876:	f7ff ffa5 	bl	800a7c4 <sbrk_aligned>
 800a87a:	3001      	adds	r0, #1
 800a87c:	d02b      	beq.n	800a8d6 <_malloc_r+0xd2>
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	442b      	add	r3, r5
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	e00e      	b.n	800a8a4 <_malloc_r+0xa0>
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	1b52      	subs	r2, r2, r5
 800a88a:	d41e      	bmi.n	800a8ca <_malloc_r+0xc6>
 800a88c:	2a0b      	cmp	r2, #11
 800a88e:	d916      	bls.n	800a8be <_malloc_r+0xba>
 800a890:	1961      	adds	r1, r4, r5
 800a892:	42a3      	cmp	r3, r4
 800a894:	6025      	str	r5, [r4, #0]
 800a896:	bf18      	it	ne
 800a898:	6059      	strne	r1, [r3, #4]
 800a89a:	6863      	ldr	r3, [r4, #4]
 800a89c:	bf08      	it	eq
 800a89e:	6031      	streq	r1, [r6, #0]
 800a8a0:	5162      	str	r2, [r4, r5]
 800a8a2:	604b      	str	r3, [r1, #4]
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	f104 060b 	add.w	r6, r4, #11
 800a8aa:	f000 fbbd 	bl	800b028 <__malloc_unlock>
 800a8ae:	f026 0607 	bic.w	r6, r6, #7
 800a8b2:	1d23      	adds	r3, r4, #4
 800a8b4:	1af2      	subs	r2, r6, r3
 800a8b6:	d0b6      	beq.n	800a826 <_malloc_r+0x22>
 800a8b8:	1b9b      	subs	r3, r3, r6
 800a8ba:	50a3      	str	r3, [r4, r2]
 800a8bc:	e7b3      	b.n	800a826 <_malloc_r+0x22>
 800a8be:	6862      	ldr	r2, [r4, #4]
 800a8c0:	42a3      	cmp	r3, r4
 800a8c2:	bf0c      	ite	eq
 800a8c4:	6032      	streq	r2, [r6, #0]
 800a8c6:	605a      	strne	r2, [r3, #4]
 800a8c8:	e7ec      	b.n	800a8a4 <_malloc_r+0xa0>
 800a8ca:	4623      	mov	r3, r4
 800a8cc:	6864      	ldr	r4, [r4, #4]
 800a8ce:	e7b2      	b.n	800a836 <_malloc_r+0x32>
 800a8d0:	4634      	mov	r4, r6
 800a8d2:	6876      	ldr	r6, [r6, #4]
 800a8d4:	e7b9      	b.n	800a84a <_malloc_r+0x46>
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	603b      	str	r3, [r7, #0]
 800a8da:	4638      	mov	r0, r7
 800a8dc:	f000 fba4 	bl	800b028 <__malloc_unlock>
 800a8e0:	e7a1      	b.n	800a826 <_malloc_r+0x22>
 800a8e2:	6025      	str	r5, [r4, #0]
 800a8e4:	e7de      	b.n	800a8a4 <_malloc_r+0xa0>
 800a8e6:	bf00      	nop
 800a8e8:	20000460 	.word	0x20000460

0800a8ec <__sfputc_r>:
 800a8ec:	6893      	ldr	r3, [r2, #8]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	b410      	push	{r4}
 800a8f4:	6093      	str	r3, [r2, #8]
 800a8f6:	da08      	bge.n	800a90a <__sfputc_r+0x1e>
 800a8f8:	6994      	ldr	r4, [r2, #24]
 800a8fa:	42a3      	cmp	r3, r4
 800a8fc:	db01      	blt.n	800a902 <__sfputc_r+0x16>
 800a8fe:	290a      	cmp	r1, #10
 800a900:	d103      	bne.n	800a90a <__sfputc_r+0x1e>
 800a902:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a906:	f7ff bc31 	b.w	800a16c <__swbuf_r>
 800a90a:	6813      	ldr	r3, [r2, #0]
 800a90c:	1c58      	adds	r0, r3, #1
 800a90e:	6010      	str	r0, [r2, #0]
 800a910:	7019      	strb	r1, [r3, #0]
 800a912:	4608      	mov	r0, r1
 800a914:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <__sfputs_r>:
 800a91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91c:	4606      	mov	r6, r0
 800a91e:	460f      	mov	r7, r1
 800a920:	4614      	mov	r4, r2
 800a922:	18d5      	adds	r5, r2, r3
 800a924:	42ac      	cmp	r4, r5
 800a926:	d101      	bne.n	800a92c <__sfputs_r+0x12>
 800a928:	2000      	movs	r0, #0
 800a92a:	e007      	b.n	800a93c <__sfputs_r+0x22>
 800a92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a930:	463a      	mov	r2, r7
 800a932:	4630      	mov	r0, r6
 800a934:	f7ff ffda 	bl	800a8ec <__sfputc_r>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d1f3      	bne.n	800a924 <__sfputs_r+0xa>
 800a93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a940 <_vfiprintf_r>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	460d      	mov	r5, r1
 800a946:	b09d      	sub	sp, #116	; 0x74
 800a948:	4614      	mov	r4, r2
 800a94a:	4698      	mov	r8, r3
 800a94c:	4606      	mov	r6, r0
 800a94e:	b118      	cbz	r0, 800a958 <_vfiprintf_r+0x18>
 800a950:	6983      	ldr	r3, [r0, #24]
 800a952:	b90b      	cbnz	r3, 800a958 <_vfiprintf_r+0x18>
 800a954:	f7ff fde4 	bl	800a520 <__sinit>
 800a958:	4b89      	ldr	r3, [pc, #548]	; (800ab80 <_vfiprintf_r+0x240>)
 800a95a:	429d      	cmp	r5, r3
 800a95c:	d11b      	bne.n	800a996 <_vfiprintf_r+0x56>
 800a95e:	6875      	ldr	r5, [r6, #4]
 800a960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a962:	07d9      	lsls	r1, r3, #31
 800a964:	d405      	bmi.n	800a972 <_vfiprintf_r+0x32>
 800a966:	89ab      	ldrh	r3, [r5, #12]
 800a968:	059a      	lsls	r2, r3, #22
 800a96a:	d402      	bmi.n	800a972 <_vfiprintf_r+0x32>
 800a96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a96e:	f7ff fe75 	bl	800a65c <__retarget_lock_acquire_recursive>
 800a972:	89ab      	ldrh	r3, [r5, #12]
 800a974:	071b      	lsls	r3, r3, #28
 800a976:	d501      	bpl.n	800a97c <_vfiprintf_r+0x3c>
 800a978:	692b      	ldr	r3, [r5, #16]
 800a97a:	b9eb      	cbnz	r3, 800a9b8 <_vfiprintf_r+0x78>
 800a97c:	4629      	mov	r1, r5
 800a97e:	4630      	mov	r0, r6
 800a980:	f7ff fc46 	bl	800a210 <__swsetup_r>
 800a984:	b1c0      	cbz	r0, 800a9b8 <_vfiprintf_r+0x78>
 800a986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a988:	07dc      	lsls	r4, r3, #31
 800a98a:	d50e      	bpl.n	800a9aa <_vfiprintf_r+0x6a>
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295
 800a990:	b01d      	add	sp, #116	; 0x74
 800a992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a996:	4b7b      	ldr	r3, [pc, #492]	; (800ab84 <_vfiprintf_r+0x244>)
 800a998:	429d      	cmp	r5, r3
 800a99a:	d101      	bne.n	800a9a0 <_vfiprintf_r+0x60>
 800a99c:	68b5      	ldr	r5, [r6, #8]
 800a99e:	e7df      	b.n	800a960 <_vfiprintf_r+0x20>
 800a9a0:	4b79      	ldr	r3, [pc, #484]	; (800ab88 <_vfiprintf_r+0x248>)
 800a9a2:	429d      	cmp	r5, r3
 800a9a4:	bf08      	it	eq
 800a9a6:	68f5      	ldreq	r5, [r6, #12]
 800a9a8:	e7da      	b.n	800a960 <_vfiprintf_r+0x20>
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	0598      	lsls	r0, r3, #22
 800a9ae:	d4ed      	bmi.n	800a98c <_vfiprintf_r+0x4c>
 800a9b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9b2:	f7ff fe54 	bl	800a65e <__retarget_lock_release_recursive>
 800a9b6:	e7e9      	b.n	800a98c <_vfiprintf_r+0x4c>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a9bc:	2320      	movs	r3, #32
 800a9be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9c6:	2330      	movs	r3, #48	; 0x30
 800a9c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab8c <_vfiprintf_r+0x24c>
 800a9cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9d0:	f04f 0901 	mov.w	r9, #1
 800a9d4:	4623      	mov	r3, r4
 800a9d6:	469a      	mov	sl, r3
 800a9d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9dc:	b10a      	cbz	r2, 800a9e2 <_vfiprintf_r+0xa2>
 800a9de:	2a25      	cmp	r2, #37	; 0x25
 800a9e0:	d1f9      	bne.n	800a9d6 <_vfiprintf_r+0x96>
 800a9e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a9e6:	d00b      	beq.n	800aa00 <_vfiprintf_r+0xc0>
 800a9e8:	465b      	mov	r3, fp
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7ff ff93 	bl	800a91a <__sfputs_r>
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	f000 80aa 	beq.w	800ab4e <_vfiprintf_r+0x20e>
 800a9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9fc:	445a      	add	r2, fp
 800a9fe:	9209      	str	r2, [sp, #36]	; 0x24
 800aa00:	f89a 3000 	ldrb.w	r3, [sl]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 80a2 	beq.w	800ab4e <_vfiprintf_r+0x20e>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa14:	f10a 0a01 	add.w	sl, sl, #1
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	9307      	str	r3, [sp, #28]
 800aa1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa20:	931a      	str	r3, [sp, #104]	; 0x68
 800aa22:	4654      	mov	r4, sl
 800aa24:	2205      	movs	r2, #5
 800aa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2a:	4858      	ldr	r0, [pc, #352]	; (800ab8c <_vfiprintf_r+0x24c>)
 800aa2c:	f7f5 fbd0 	bl	80001d0 <memchr>
 800aa30:	9a04      	ldr	r2, [sp, #16]
 800aa32:	b9d8      	cbnz	r0, 800aa6c <_vfiprintf_r+0x12c>
 800aa34:	06d1      	lsls	r1, r2, #27
 800aa36:	bf44      	itt	mi
 800aa38:	2320      	movmi	r3, #32
 800aa3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa3e:	0713      	lsls	r3, r2, #28
 800aa40:	bf44      	itt	mi
 800aa42:	232b      	movmi	r3, #43	; 0x2b
 800aa44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa48:	f89a 3000 	ldrb.w	r3, [sl]
 800aa4c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa4e:	d015      	beq.n	800aa7c <_vfiprintf_r+0x13c>
 800aa50:	9a07      	ldr	r2, [sp, #28]
 800aa52:	4654      	mov	r4, sl
 800aa54:	2000      	movs	r0, #0
 800aa56:	f04f 0c0a 	mov.w	ip, #10
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa60:	3b30      	subs	r3, #48	; 0x30
 800aa62:	2b09      	cmp	r3, #9
 800aa64:	d94e      	bls.n	800ab04 <_vfiprintf_r+0x1c4>
 800aa66:	b1b0      	cbz	r0, 800aa96 <_vfiprintf_r+0x156>
 800aa68:	9207      	str	r2, [sp, #28]
 800aa6a:	e014      	b.n	800aa96 <_vfiprintf_r+0x156>
 800aa6c:	eba0 0308 	sub.w	r3, r0, r8
 800aa70:	fa09 f303 	lsl.w	r3, r9, r3
 800aa74:	4313      	orrs	r3, r2
 800aa76:	9304      	str	r3, [sp, #16]
 800aa78:	46a2      	mov	sl, r4
 800aa7a:	e7d2      	b.n	800aa22 <_vfiprintf_r+0xe2>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	1d19      	adds	r1, r3, #4
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	9103      	str	r1, [sp, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bfbb      	ittet	lt
 800aa88:	425b      	neglt	r3, r3
 800aa8a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa8e:	9307      	strge	r3, [sp, #28]
 800aa90:	9307      	strlt	r3, [sp, #28]
 800aa92:	bfb8      	it	lt
 800aa94:	9204      	strlt	r2, [sp, #16]
 800aa96:	7823      	ldrb	r3, [r4, #0]
 800aa98:	2b2e      	cmp	r3, #46	; 0x2e
 800aa9a:	d10c      	bne.n	800aab6 <_vfiprintf_r+0x176>
 800aa9c:	7863      	ldrb	r3, [r4, #1]
 800aa9e:	2b2a      	cmp	r3, #42	; 0x2a
 800aaa0:	d135      	bne.n	800ab0e <_vfiprintf_r+0x1ce>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	1d1a      	adds	r2, r3, #4
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	9203      	str	r2, [sp, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	bfb8      	it	lt
 800aaae:	f04f 33ff 	movlt.w	r3, #4294967295
 800aab2:	3402      	adds	r4, #2
 800aab4:	9305      	str	r3, [sp, #20]
 800aab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab9c <_vfiprintf_r+0x25c>
 800aaba:	7821      	ldrb	r1, [r4, #0]
 800aabc:	2203      	movs	r2, #3
 800aabe:	4650      	mov	r0, sl
 800aac0:	f7f5 fb86 	bl	80001d0 <memchr>
 800aac4:	b140      	cbz	r0, 800aad8 <_vfiprintf_r+0x198>
 800aac6:	2340      	movs	r3, #64	; 0x40
 800aac8:	eba0 000a 	sub.w	r0, r0, sl
 800aacc:	fa03 f000 	lsl.w	r0, r3, r0
 800aad0:	9b04      	ldr	r3, [sp, #16]
 800aad2:	4303      	orrs	r3, r0
 800aad4:	3401      	adds	r4, #1
 800aad6:	9304      	str	r3, [sp, #16]
 800aad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aadc:	482c      	ldr	r0, [pc, #176]	; (800ab90 <_vfiprintf_r+0x250>)
 800aade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aae2:	2206      	movs	r2, #6
 800aae4:	f7f5 fb74 	bl	80001d0 <memchr>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d03f      	beq.n	800ab6c <_vfiprintf_r+0x22c>
 800aaec:	4b29      	ldr	r3, [pc, #164]	; (800ab94 <_vfiprintf_r+0x254>)
 800aaee:	bb1b      	cbnz	r3, 800ab38 <_vfiprintf_r+0x1f8>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	3307      	adds	r3, #7
 800aaf4:	f023 0307 	bic.w	r3, r3, #7
 800aaf8:	3308      	adds	r3, #8
 800aafa:	9303      	str	r3, [sp, #12]
 800aafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafe:	443b      	add	r3, r7
 800ab00:	9309      	str	r3, [sp, #36]	; 0x24
 800ab02:	e767      	b.n	800a9d4 <_vfiprintf_r+0x94>
 800ab04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab08:	460c      	mov	r4, r1
 800ab0a:	2001      	movs	r0, #1
 800ab0c:	e7a5      	b.n	800aa5a <_vfiprintf_r+0x11a>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	3401      	adds	r4, #1
 800ab12:	9305      	str	r3, [sp, #20]
 800ab14:	4619      	mov	r1, r3
 800ab16:	f04f 0c0a 	mov.w	ip, #10
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab20:	3a30      	subs	r2, #48	; 0x30
 800ab22:	2a09      	cmp	r2, #9
 800ab24:	d903      	bls.n	800ab2e <_vfiprintf_r+0x1ee>
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d0c5      	beq.n	800aab6 <_vfiprintf_r+0x176>
 800ab2a:	9105      	str	r1, [sp, #20]
 800ab2c:	e7c3      	b.n	800aab6 <_vfiprintf_r+0x176>
 800ab2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab32:	4604      	mov	r4, r0
 800ab34:	2301      	movs	r3, #1
 800ab36:	e7f0      	b.n	800ab1a <_vfiprintf_r+0x1da>
 800ab38:	ab03      	add	r3, sp, #12
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	4b16      	ldr	r3, [pc, #88]	; (800ab98 <_vfiprintf_r+0x258>)
 800ab40:	a904      	add	r1, sp, #16
 800ab42:	4630      	mov	r0, r6
 800ab44:	f3af 8000 	nop.w
 800ab48:	4607      	mov	r7, r0
 800ab4a:	1c78      	adds	r0, r7, #1
 800ab4c:	d1d6      	bne.n	800aafc <_vfiprintf_r+0x1bc>
 800ab4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab50:	07d9      	lsls	r1, r3, #31
 800ab52:	d405      	bmi.n	800ab60 <_vfiprintf_r+0x220>
 800ab54:	89ab      	ldrh	r3, [r5, #12]
 800ab56:	059a      	lsls	r2, r3, #22
 800ab58:	d402      	bmi.n	800ab60 <_vfiprintf_r+0x220>
 800ab5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab5c:	f7ff fd7f 	bl	800a65e <__retarget_lock_release_recursive>
 800ab60:	89ab      	ldrh	r3, [r5, #12]
 800ab62:	065b      	lsls	r3, r3, #25
 800ab64:	f53f af12 	bmi.w	800a98c <_vfiprintf_r+0x4c>
 800ab68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab6a:	e711      	b.n	800a990 <_vfiprintf_r+0x50>
 800ab6c:	ab03      	add	r3, sp, #12
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	462a      	mov	r2, r5
 800ab72:	4b09      	ldr	r3, [pc, #36]	; (800ab98 <_vfiprintf_r+0x258>)
 800ab74:	a904      	add	r1, sp, #16
 800ab76:	4630      	mov	r0, r6
 800ab78:	f000 f880 	bl	800ac7c <_printf_i>
 800ab7c:	e7e4      	b.n	800ab48 <_vfiprintf_r+0x208>
 800ab7e:	bf00      	nop
 800ab80:	0800b464 	.word	0x0800b464
 800ab84:	0800b484 	.word	0x0800b484
 800ab88:	0800b444 	.word	0x0800b444
 800ab8c:	0800b4a4 	.word	0x0800b4a4
 800ab90:	0800b4ae 	.word	0x0800b4ae
 800ab94:	00000000 	.word	0x00000000
 800ab98:	0800a91b 	.word	0x0800a91b
 800ab9c:	0800b4aa 	.word	0x0800b4aa

0800aba0 <_printf_common>:
 800aba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba4:	4616      	mov	r6, r2
 800aba6:	4699      	mov	r9, r3
 800aba8:	688a      	ldr	r2, [r1, #8]
 800abaa:	690b      	ldr	r3, [r1, #16]
 800abac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abb0:	4293      	cmp	r3, r2
 800abb2:	bfb8      	it	lt
 800abb4:	4613      	movlt	r3, r2
 800abb6:	6033      	str	r3, [r6, #0]
 800abb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abbc:	4607      	mov	r7, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	b10a      	cbz	r2, 800abc6 <_printf_common+0x26>
 800abc2:	3301      	adds	r3, #1
 800abc4:	6033      	str	r3, [r6, #0]
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	0699      	lsls	r1, r3, #26
 800abca:	bf42      	ittt	mi
 800abcc:	6833      	ldrmi	r3, [r6, #0]
 800abce:	3302      	addmi	r3, #2
 800abd0:	6033      	strmi	r3, [r6, #0]
 800abd2:	6825      	ldr	r5, [r4, #0]
 800abd4:	f015 0506 	ands.w	r5, r5, #6
 800abd8:	d106      	bne.n	800abe8 <_printf_common+0x48>
 800abda:	f104 0a19 	add.w	sl, r4, #25
 800abde:	68e3      	ldr	r3, [r4, #12]
 800abe0:	6832      	ldr	r2, [r6, #0]
 800abe2:	1a9b      	subs	r3, r3, r2
 800abe4:	42ab      	cmp	r3, r5
 800abe6:	dc26      	bgt.n	800ac36 <_printf_common+0x96>
 800abe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abec:	1e13      	subs	r3, r2, #0
 800abee:	6822      	ldr	r2, [r4, #0]
 800abf0:	bf18      	it	ne
 800abf2:	2301      	movne	r3, #1
 800abf4:	0692      	lsls	r2, r2, #26
 800abf6:	d42b      	bmi.n	800ac50 <_printf_common+0xb0>
 800abf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abfc:	4649      	mov	r1, r9
 800abfe:	4638      	mov	r0, r7
 800ac00:	47c0      	blx	r8
 800ac02:	3001      	adds	r0, #1
 800ac04:	d01e      	beq.n	800ac44 <_printf_common+0xa4>
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	68e5      	ldr	r5, [r4, #12]
 800ac0a:	6832      	ldr	r2, [r6, #0]
 800ac0c:	f003 0306 	and.w	r3, r3, #6
 800ac10:	2b04      	cmp	r3, #4
 800ac12:	bf08      	it	eq
 800ac14:	1aad      	subeq	r5, r5, r2
 800ac16:	68a3      	ldr	r3, [r4, #8]
 800ac18:	6922      	ldr	r2, [r4, #16]
 800ac1a:	bf0c      	ite	eq
 800ac1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac20:	2500      	movne	r5, #0
 800ac22:	4293      	cmp	r3, r2
 800ac24:	bfc4      	itt	gt
 800ac26:	1a9b      	subgt	r3, r3, r2
 800ac28:	18ed      	addgt	r5, r5, r3
 800ac2a:	2600      	movs	r6, #0
 800ac2c:	341a      	adds	r4, #26
 800ac2e:	42b5      	cmp	r5, r6
 800ac30:	d11a      	bne.n	800ac68 <_printf_common+0xc8>
 800ac32:	2000      	movs	r0, #0
 800ac34:	e008      	b.n	800ac48 <_printf_common+0xa8>
 800ac36:	2301      	movs	r3, #1
 800ac38:	4652      	mov	r2, sl
 800ac3a:	4649      	mov	r1, r9
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	47c0      	blx	r8
 800ac40:	3001      	adds	r0, #1
 800ac42:	d103      	bne.n	800ac4c <_printf_common+0xac>
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4c:	3501      	adds	r5, #1
 800ac4e:	e7c6      	b.n	800abde <_printf_common+0x3e>
 800ac50:	18e1      	adds	r1, r4, r3
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	2030      	movs	r0, #48	; 0x30
 800ac56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac5a:	4422      	add	r2, r4
 800ac5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac64:	3302      	adds	r3, #2
 800ac66:	e7c7      	b.n	800abf8 <_printf_common+0x58>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	4622      	mov	r2, r4
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	4638      	mov	r0, r7
 800ac70:	47c0      	blx	r8
 800ac72:	3001      	adds	r0, #1
 800ac74:	d0e6      	beq.n	800ac44 <_printf_common+0xa4>
 800ac76:	3601      	adds	r6, #1
 800ac78:	e7d9      	b.n	800ac2e <_printf_common+0x8e>
	...

0800ac7c <_printf_i>:
 800ac7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac80:	7e0f      	ldrb	r7, [r1, #24]
 800ac82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac84:	2f78      	cmp	r7, #120	; 0x78
 800ac86:	4691      	mov	r9, r2
 800ac88:	4680      	mov	r8, r0
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	469a      	mov	sl, r3
 800ac8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac92:	d807      	bhi.n	800aca4 <_printf_i+0x28>
 800ac94:	2f62      	cmp	r7, #98	; 0x62
 800ac96:	d80a      	bhi.n	800acae <_printf_i+0x32>
 800ac98:	2f00      	cmp	r7, #0
 800ac9a:	f000 80d8 	beq.w	800ae4e <_printf_i+0x1d2>
 800ac9e:	2f58      	cmp	r7, #88	; 0x58
 800aca0:	f000 80a3 	beq.w	800adea <_printf_i+0x16e>
 800aca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acac:	e03a      	b.n	800ad24 <_printf_i+0xa8>
 800acae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acb2:	2b15      	cmp	r3, #21
 800acb4:	d8f6      	bhi.n	800aca4 <_printf_i+0x28>
 800acb6:	a101      	add	r1, pc, #4	; (adr r1, 800acbc <_printf_i+0x40>)
 800acb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acbc:	0800ad15 	.word	0x0800ad15
 800acc0:	0800ad29 	.word	0x0800ad29
 800acc4:	0800aca5 	.word	0x0800aca5
 800acc8:	0800aca5 	.word	0x0800aca5
 800accc:	0800aca5 	.word	0x0800aca5
 800acd0:	0800aca5 	.word	0x0800aca5
 800acd4:	0800ad29 	.word	0x0800ad29
 800acd8:	0800aca5 	.word	0x0800aca5
 800acdc:	0800aca5 	.word	0x0800aca5
 800ace0:	0800aca5 	.word	0x0800aca5
 800ace4:	0800aca5 	.word	0x0800aca5
 800ace8:	0800ae35 	.word	0x0800ae35
 800acec:	0800ad59 	.word	0x0800ad59
 800acf0:	0800ae17 	.word	0x0800ae17
 800acf4:	0800aca5 	.word	0x0800aca5
 800acf8:	0800aca5 	.word	0x0800aca5
 800acfc:	0800ae57 	.word	0x0800ae57
 800ad00:	0800aca5 	.word	0x0800aca5
 800ad04:	0800ad59 	.word	0x0800ad59
 800ad08:	0800aca5 	.word	0x0800aca5
 800ad0c:	0800aca5 	.word	0x0800aca5
 800ad10:	0800ae1f 	.word	0x0800ae1f
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	1d1a      	adds	r2, r3, #4
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	602a      	str	r2, [r5, #0]
 800ad1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad24:	2301      	movs	r3, #1
 800ad26:	e0a3      	b.n	800ae70 <_printf_i+0x1f4>
 800ad28:	6820      	ldr	r0, [r4, #0]
 800ad2a:	6829      	ldr	r1, [r5, #0]
 800ad2c:	0606      	lsls	r6, r0, #24
 800ad2e:	f101 0304 	add.w	r3, r1, #4
 800ad32:	d50a      	bpl.n	800ad4a <_printf_i+0xce>
 800ad34:	680e      	ldr	r6, [r1, #0]
 800ad36:	602b      	str	r3, [r5, #0]
 800ad38:	2e00      	cmp	r6, #0
 800ad3a:	da03      	bge.n	800ad44 <_printf_i+0xc8>
 800ad3c:	232d      	movs	r3, #45	; 0x2d
 800ad3e:	4276      	negs	r6, r6
 800ad40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad44:	485e      	ldr	r0, [pc, #376]	; (800aec0 <_printf_i+0x244>)
 800ad46:	230a      	movs	r3, #10
 800ad48:	e019      	b.n	800ad7e <_printf_i+0x102>
 800ad4a:	680e      	ldr	r6, [r1, #0]
 800ad4c:	602b      	str	r3, [r5, #0]
 800ad4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad52:	bf18      	it	ne
 800ad54:	b236      	sxthne	r6, r6
 800ad56:	e7ef      	b.n	800ad38 <_printf_i+0xbc>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	6820      	ldr	r0, [r4, #0]
 800ad5c:	1d19      	adds	r1, r3, #4
 800ad5e:	6029      	str	r1, [r5, #0]
 800ad60:	0601      	lsls	r1, r0, #24
 800ad62:	d501      	bpl.n	800ad68 <_printf_i+0xec>
 800ad64:	681e      	ldr	r6, [r3, #0]
 800ad66:	e002      	b.n	800ad6e <_printf_i+0xf2>
 800ad68:	0646      	lsls	r6, r0, #25
 800ad6a:	d5fb      	bpl.n	800ad64 <_printf_i+0xe8>
 800ad6c:	881e      	ldrh	r6, [r3, #0]
 800ad6e:	4854      	ldr	r0, [pc, #336]	; (800aec0 <_printf_i+0x244>)
 800ad70:	2f6f      	cmp	r7, #111	; 0x6f
 800ad72:	bf0c      	ite	eq
 800ad74:	2308      	moveq	r3, #8
 800ad76:	230a      	movne	r3, #10
 800ad78:	2100      	movs	r1, #0
 800ad7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad7e:	6865      	ldr	r5, [r4, #4]
 800ad80:	60a5      	str	r5, [r4, #8]
 800ad82:	2d00      	cmp	r5, #0
 800ad84:	bfa2      	ittt	ge
 800ad86:	6821      	ldrge	r1, [r4, #0]
 800ad88:	f021 0104 	bicge.w	r1, r1, #4
 800ad8c:	6021      	strge	r1, [r4, #0]
 800ad8e:	b90e      	cbnz	r6, 800ad94 <_printf_i+0x118>
 800ad90:	2d00      	cmp	r5, #0
 800ad92:	d04d      	beq.n	800ae30 <_printf_i+0x1b4>
 800ad94:	4615      	mov	r5, r2
 800ad96:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad9a:	fb03 6711 	mls	r7, r3, r1, r6
 800ad9e:	5dc7      	ldrb	r7, [r0, r7]
 800ada0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ada4:	4637      	mov	r7, r6
 800ada6:	42bb      	cmp	r3, r7
 800ada8:	460e      	mov	r6, r1
 800adaa:	d9f4      	bls.n	800ad96 <_printf_i+0x11a>
 800adac:	2b08      	cmp	r3, #8
 800adae:	d10b      	bne.n	800adc8 <_printf_i+0x14c>
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	07de      	lsls	r6, r3, #31
 800adb4:	d508      	bpl.n	800adc8 <_printf_i+0x14c>
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	6861      	ldr	r1, [r4, #4]
 800adba:	4299      	cmp	r1, r3
 800adbc:	bfde      	ittt	le
 800adbe:	2330      	movle	r3, #48	; 0x30
 800adc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adc8:	1b52      	subs	r2, r2, r5
 800adca:	6122      	str	r2, [r4, #16]
 800adcc:	f8cd a000 	str.w	sl, [sp]
 800add0:	464b      	mov	r3, r9
 800add2:	aa03      	add	r2, sp, #12
 800add4:	4621      	mov	r1, r4
 800add6:	4640      	mov	r0, r8
 800add8:	f7ff fee2 	bl	800aba0 <_printf_common>
 800addc:	3001      	adds	r0, #1
 800adde:	d14c      	bne.n	800ae7a <_printf_i+0x1fe>
 800ade0:	f04f 30ff 	mov.w	r0, #4294967295
 800ade4:	b004      	add	sp, #16
 800ade6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adea:	4835      	ldr	r0, [pc, #212]	; (800aec0 <_printf_i+0x244>)
 800adec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800adf0:	6829      	ldr	r1, [r5, #0]
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800adf8:	6029      	str	r1, [r5, #0]
 800adfa:	061d      	lsls	r5, r3, #24
 800adfc:	d514      	bpl.n	800ae28 <_printf_i+0x1ac>
 800adfe:	07df      	lsls	r7, r3, #31
 800ae00:	bf44      	itt	mi
 800ae02:	f043 0320 	orrmi.w	r3, r3, #32
 800ae06:	6023      	strmi	r3, [r4, #0]
 800ae08:	b91e      	cbnz	r6, 800ae12 <_printf_i+0x196>
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	f023 0320 	bic.w	r3, r3, #32
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	2310      	movs	r3, #16
 800ae14:	e7b0      	b.n	800ad78 <_printf_i+0xfc>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	f043 0320 	orr.w	r3, r3, #32
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	2378      	movs	r3, #120	; 0x78
 800ae20:	4828      	ldr	r0, [pc, #160]	; (800aec4 <_printf_i+0x248>)
 800ae22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae26:	e7e3      	b.n	800adf0 <_printf_i+0x174>
 800ae28:	0659      	lsls	r1, r3, #25
 800ae2a:	bf48      	it	mi
 800ae2c:	b2b6      	uxthmi	r6, r6
 800ae2e:	e7e6      	b.n	800adfe <_printf_i+0x182>
 800ae30:	4615      	mov	r5, r2
 800ae32:	e7bb      	b.n	800adac <_printf_i+0x130>
 800ae34:	682b      	ldr	r3, [r5, #0]
 800ae36:	6826      	ldr	r6, [r4, #0]
 800ae38:	6961      	ldr	r1, [r4, #20]
 800ae3a:	1d18      	adds	r0, r3, #4
 800ae3c:	6028      	str	r0, [r5, #0]
 800ae3e:	0635      	lsls	r5, r6, #24
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	d501      	bpl.n	800ae48 <_printf_i+0x1cc>
 800ae44:	6019      	str	r1, [r3, #0]
 800ae46:	e002      	b.n	800ae4e <_printf_i+0x1d2>
 800ae48:	0670      	lsls	r0, r6, #25
 800ae4a:	d5fb      	bpl.n	800ae44 <_printf_i+0x1c8>
 800ae4c:	8019      	strh	r1, [r3, #0]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	6123      	str	r3, [r4, #16]
 800ae52:	4615      	mov	r5, r2
 800ae54:	e7ba      	b.n	800adcc <_printf_i+0x150>
 800ae56:	682b      	ldr	r3, [r5, #0]
 800ae58:	1d1a      	adds	r2, r3, #4
 800ae5a:	602a      	str	r2, [r5, #0]
 800ae5c:	681d      	ldr	r5, [r3, #0]
 800ae5e:	6862      	ldr	r2, [r4, #4]
 800ae60:	2100      	movs	r1, #0
 800ae62:	4628      	mov	r0, r5
 800ae64:	f7f5 f9b4 	bl	80001d0 <memchr>
 800ae68:	b108      	cbz	r0, 800ae6e <_printf_i+0x1f2>
 800ae6a:	1b40      	subs	r0, r0, r5
 800ae6c:	6060      	str	r0, [r4, #4]
 800ae6e:	6863      	ldr	r3, [r4, #4]
 800ae70:	6123      	str	r3, [r4, #16]
 800ae72:	2300      	movs	r3, #0
 800ae74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae78:	e7a8      	b.n	800adcc <_printf_i+0x150>
 800ae7a:	6923      	ldr	r3, [r4, #16]
 800ae7c:	462a      	mov	r2, r5
 800ae7e:	4649      	mov	r1, r9
 800ae80:	4640      	mov	r0, r8
 800ae82:	47d0      	blx	sl
 800ae84:	3001      	adds	r0, #1
 800ae86:	d0ab      	beq.n	800ade0 <_printf_i+0x164>
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	079b      	lsls	r3, r3, #30
 800ae8c:	d413      	bmi.n	800aeb6 <_printf_i+0x23a>
 800ae8e:	68e0      	ldr	r0, [r4, #12]
 800ae90:	9b03      	ldr	r3, [sp, #12]
 800ae92:	4298      	cmp	r0, r3
 800ae94:	bfb8      	it	lt
 800ae96:	4618      	movlt	r0, r3
 800ae98:	e7a4      	b.n	800ade4 <_printf_i+0x168>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	4649      	mov	r1, r9
 800aea0:	4640      	mov	r0, r8
 800aea2:	47d0      	blx	sl
 800aea4:	3001      	adds	r0, #1
 800aea6:	d09b      	beq.n	800ade0 <_printf_i+0x164>
 800aea8:	3501      	adds	r5, #1
 800aeaa:	68e3      	ldr	r3, [r4, #12]
 800aeac:	9903      	ldr	r1, [sp, #12]
 800aeae:	1a5b      	subs	r3, r3, r1
 800aeb0:	42ab      	cmp	r3, r5
 800aeb2:	dcf2      	bgt.n	800ae9a <_printf_i+0x21e>
 800aeb4:	e7eb      	b.n	800ae8e <_printf_i+0x212>
 800aeb6:	2500      	movs	r5, #0
 800aeb8:	f104 0619 	add.w	r6, r4, #25
 800aebc:	e7f5      	b.n	800aeaa <_printf_i+0x22e>
 800aebe:	bf00      	nop
 800aec0:	0800b4b5 	.word	0x0800b4b5
 800aec4:	0800b4c6 	.word	0x0800b4c6

0800aec8 <_sbrk_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4d06      	ldr	r5, [pc, #24]	; (800aee4 <_sbrk_r+0x1c>)
 800aecc:	2300      	movs	r3, #0
 800aece:	4604      	mov	r4, r0
 800aed0:	4608      	mov	r0, r1
 800aed2:	602b      	str	r3, [r5, #0]
 800aed4:	f7f6 f802 	bl	8000edc <_sbrk>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_sbrk_r+0x1a>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_sbrk_r+0x1a>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	20000468 	.word	0x20000468

0800aee8 <__sread>:
 800aee8:	b510      	push	{r4, lr}
 800aeea:	460c      	mov	r4, r1
 800aeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef0:	f000 f8a0 	bl	800b034 <_read_r>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	bfab      	itete	ge
 800aef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aefa:	89a3      	ldrhlt	r3, [r4, #12]
 800aefc:	181b      	addge	r3, r3, r0
 800aefe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af02:	bfac      	ite	ge
 800af04:	6563      	strge	r3, [r4, #84]	; 0x54
 800af06:	81a3      	strhlt	r3, [r4, #12]
 800af08:	bd10      	pop	{r4, pc}

0800af0a <__swrite>:
 800af0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af0e:	461f      	mov	r7, r3
 800af10:	898b      	ldrh	r3, [r1, #12]
 800af12:	05db      	lsls	r3, r3, #23
 800af14:	4605      	mov	r5, r0
 800af16:	460c      	mov	r4, r1
 800af18:	4616      	mov	r6, r2
 800af1a:	d505      	bpl.n	800af28 <__swrite+0x1e>
 800af1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af20:	2302      	movs	r3, #2
 800af22:	2200      	movs	r2, #0
 800af24:	f000 f868 	bl	800aff8 <_lseek_r>
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	4632      	mov	r2, r6
 800af36:	463b      	mov	r3, r7
 800af38:	4628      	mov	r0, r5
 800af3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	f000 b817 	b.w	800af70 <_write_r>

0800af42 <__sseek>:
 800af42:	b510      	push	{r4, lr}
 800af44:	460c      	mov	r4, r1
 800af46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af4a:	f000 f855 	bl	800aff8 <_lseek_r>
 800af4e:	1c43      	adds	r3, r0, #1
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	bf15      	itete	ne
 800af54:	6560      	strne	r0, [r4, #84]	; 0x54
 800af56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af5e:	81a3      	strheq	r3, [r4, #12]
 800af60:	bf18      	it	ne
 800af62:	81a3      	strhne	r3, [r4, #12]
 800af64:	bd10      	pop	{r4, pc}

0800af66 <__sclose>:
 800af66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af6a:	f000 b813 	b.w	800af94 <_close_r>
	...

0800af70 <_write_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	4d07      	ldr	r5, [pc, #28]	; (800af90 <_write_r+0x20>)
 800af74:	4604      	mov	r4, r0
 800af76:	4608      	mov	r0, r1
 800af78:	4611      	mov	r1, r2
 800af7a:	2200      	movs	r2, #0
 800af7c:	602a      	str	r2, [r5, #0]
 800af7e:	461a      	mov	r2, r3
 800af80:	f7f5 fff4 	bl	8000f6c <_write>
 800af84:	1c43      	adds	r3, r0, #1
 800af86:	d102      	bne.n	800af8e <_write_r+0x1e>
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	b103      	cbz	r3, 800af8e <_write_r+0x1e>
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	bd38      	pop	{r3, r4, r5, pc}
 800af90:	20000468 	.word	0x20000468

0800af94 <_close_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	4d06      	ldr	r5, [pc, #24]	; (800afb0 <_close_r+0x1c>)
 800af98:	2300      	movs	r3, #0
 800af9a:	4604      	mov	r4, r0
 800af9c:	4608      	mov	r0, r1
 800af9e:	602b      	str	r3, [r5, #0]
 800afa0:	f7f5 ff67 	bl	8000e72 <_close>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	d102      	bne.n	800afae <_close_r+0x1a>
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	b103      	cbz	r3, 800afae <_close_r+0x1a>
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	20000468 	.word	0x20000468

0800afb4 <_fstat_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d07      	ldr	r5, [pc, #28]	; (800afd4 <_fstat_r+0x20>)
 800afb8:	2300      	movs	r3, #0
 800afba:	4604      	mov	r4, r0
 800afbc:	4608      	mov	r0, r1
 800afbe:	4611      	mov	r1, r2
 800afc0:	602b      	str	r3, [r5, #0]
 800afc2:	f7f5 ff62 	bl	8000e8a <_fstat>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	d102      	bne.n	800afd0 <_fstat_r+0x1c>
 800afca:	682b      	ldr	r3, [r5, #0]
 800afcc:	b103      	cbz	r3, 800afd0 <_fstat_r+0x1c>
 800afce:	6023      	str	r3, [r4, #0]
 800afd0:	bd38      	pop	{r3, r4, r5, pc}
 800afd2:	bf00      	nop
 800afd4:	20000468 	.word	0x20000468

0800afd8 <_isatty_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d06      	ldr	r5, [pc, #24]	; (800aff4 <_isatty_r+0x1c>)
 800afdc:	2300      	movs	r3, #0
 800afde:	4604      	mov	r4, r0
 800afe0:	4608      	mov	r0, r1
 800afe2:	602b      	str	r3, [r5, #0]
 800afe4:	f7f5 ff61 	bl	8000eaa <_isatty>
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	d102      	bne.n	800aff2 <_isatty_r+0x1a>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	b103      	cbz	r3, 800aff2 <_isatty_r+0x1a>
 800aff0:	6023      	str	r3, [r4, #0]
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	20000468 	.word	0x20000468

0800aff8 <_lseek_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4d07      	ldr	r5, [pc, #28]	; (800b018 <_lseek_r+0x20>)
 800affc:	4604      	mov	r4, r0
 800affe:	4608      	mov	r0, r1
 800b000:	4611      	mov	r1, r2
 800b002:	2200      	movs	r2, #0
 800b004:	602a      	str	r2, [r5, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	f7f5 ff5a 	bl	8000ec0 <_lseek>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d102      	bne.n	800b016 <_lseek_r+0x1e>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b103      	cbz	r3, 800b016 <_lseek_r+0x1e>
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	20000468 	.word	0x20000468

0800b01c <__malloc_lock>:
 800b01c:	4801      	ldr	r0, [pc, #4]	; (800b024 <__malloc_lock+0x8>)
 800b01e:	f7ff bb1d 	b.w	800a65c <__retarget_lock_acquire_recursive>
 800b022:	bf00      	nop
 800b024:	2000045c 	.word	0x2000045c

0800b028 <__malloc_unlock>:
 800b028:	4801      	ldr	r0, [pc, #4]	; (800b030 <__malloc_unlock+0x8>)
 800b02a:	f7ff bb18 	b.w	800a65e <__retarget_lock_release_recursive>
 800b02e:	bf00      	nop
 800b030:	2000045c 	.word	0x2000045c

0800b034 <_read_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d07      	ldr	r5, [pc, #28]	; (800b054 <_read_r+0x20>)
 800b038:	4604      	mov	r4, r0
 800b03a:	4608      	mov	r0, r1
 800b03c:	4611      	mov	r1, r2
 800b03e:	2200      	movs	r2, #0
 800b040:	602a      	str	r2, [r5, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	f7f5 fef8 	bl	8000e38 <_read>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_read_r+0x1e>
 800b04c:	682b      	ldr	r3, [r5, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_read_r+0x1e>
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	20000468 	.word	0x20000468

0800b058 <_init>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	bf00      	nop
 800b05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05e:	bc08      	pop	{r3}
 800b060:	469e      	mov	lr, r3
 800b062:	4770      	bx	lr

0800b064 <_fini>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	bf00      	nop
 800b068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06a:	bc08      	pop	{r3}
 800b06c:	469e      	mov	lr, r3
 800b06e:	4770      	bx	lr
