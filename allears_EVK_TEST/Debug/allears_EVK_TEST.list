
allears_EVK_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bf4  08009bf4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009bf4  08009bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bfc  08009bfc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bfc  08009bfc  00019bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c00  08009c00  00019c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000070  08009c74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000448  08009c74  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ee9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b24  00000000  00000000  00036f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00039aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003aedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d94a  00000000  00000000  0003c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164a9  00000000  00000000  00059b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdc3b  00000000  00000000  0006fff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012dc2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d48  00000000  00000000  0012dc7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009a34 	.word	0x08009a34

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08009a34 	.word	0x08009a34

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_GPIO_EXTI_Callback>:

/*
 * STIM LIB :: EXTI CALLBACK
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Trigger Input External Interrupt Process
	 * */
	stimLib_trgInput_callback(GPIO_Pin);
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	4618      	mov	r0, r3
 80004de:	f007 fe67 	bl	80081b0 <stimLib_trgInput_callback>

	/* Application Code */
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <HAL_TIM_ErrorCallback>:

void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	stimLib_timError_callback(htim);
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f007 fe87 	bl	8008208 <stimLib_timError_callback>
	TD_DEBUG_PRINT(("HAL_TIM_ErrorCallback\n"));
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <HAL_TIM_ErrorCallback+0x1c>)
 80004fc:	f008 fe0a 	bl	8009114 <puts>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	08009a4c 	.word	0x08009a4c

0800050c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	TD_DEBUG_PRINT(("HAL_TIM_PWM_PulseFinishedHalfCpltCallback\n"));
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 8000516:	f008 fdfd 	bl	8009114 <puts>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	08009a64 	.word	0x08009a64

08000528 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	stimLib_timPwmPluseFinished_callback(htim);
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f007 fe6b 	bl	800820c <stimLib_timPwmPluseFinished_callback>
	TD_DEBUG_PRINT(("HAL_TIM_PWM_PulseFinishedCallback\n"));
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000538:	f008 fdec 	bl	8009114 <puts>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	08009a90 	.word	0x08009a90

08000548 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800054e:	f000 fcf7 	bl	8000f40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000552:	f000 f821 	bl	8000598 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_USART3_UART_Init();
 8000556:	f000 f86f 	bl	8000638 <MX_USART3_UART_Init>
	stimLib_stimInit();
 800055a:	f007 fd2b 	bl	8007fb4 <stimLib_stimInit>
#endif
	stim_signal_cfg_t pulse_data;

	stim_trg_cfg_t trg_data;

	pulse_data.freq = 10;
 800055e:	230a      	movs	r3, #10
 8000560:	733b      	strb	r3, [r7, #12]
	pulse_data.pulse_width = 1000;
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	81fb      	strh	r3, [r7, #14]
	pulse_data.degree = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	743b      	strb	r3, [r7, #16]
	stimLib_stimSignalConfig(&pulse_data);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4618      	mov	r0, r3
 8000572:	f007 fd33 	bl	8007fdc <stimLib_stimSignalConfig>

	trg_data.trg_out_enable = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	717b      	strb	r3, [r7, #5]
	trg_data.trg_out_active_pol = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	71bb      	strb	r3, [r7, #6]

	trg_data.trg_in_enable = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	71fb      	strb	r3, [r7, #7]
	trg_data.trg_in_active_pol = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	723b      	strb	r3, [r7, #8]
	trg_data.trg_in_toggled = 1;
 8000586:	2301      	movs	r3, #1
 8000588:	727b      	strb	r3, [r7, #9]
	stimLib_stimTriggerConfig(&trg_data);
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4618      	mov	r0, r3
 800058e:	f007 fd39 	bl	8008004 <stimLib_stimTriggerConfig>

	stimLib_stimSessionStart();
 8000592:	f007 fd4b 	bl	800802c <stimLib_stimSessionStart>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000596:	e7fe      	b.n	8000596 <main+0x4e>

08000598 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	; 0x58
 800059c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2244      	movs	r2, #68	; 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f008 fd3e 	bl	8009028 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005be:	f003 fe63 	bl	8004288 <HAL_PWREx_ControlVoltageScaling>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x34>
	{
		Error_Handler();
 80005c8:	f000 f866 	bl	8000698 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005cc:	2310      	movs	r3, #16
 80005ce:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d8:	2360      	movs	r3, #96	; 0x60
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e0:	2301      	movs	r3, #1
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 80005e8:	2328      	movs	r3, #40	; 0x28
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 fe9b 	bl	8004334 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x70>
	{
		Error_Handler();
 8000604:	f000 f848 	bl	8000698 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2303      	movs	r3, #3
 800060e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	2104      	movs	r1, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fae9 	bl	8004bf8 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800062c:	f000 f834 	bl	8000698 <Error_Handler>
	}
}
 8000630:	bf00      	nop
 8000632:	3758      	adds	r7, #88	; 0x58
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART3_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_USART3_UART_Init+0x58>)
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <MX_USART3_UART_Init+0x5c>)
 8000640:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART3_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART3_UART_Init+0x58>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART3_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART3_UART_Init+0x58>)
 800067c:	f006 fc94 	bl	8006fa8 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8000686:	f000 f807 	bl	8000698 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000358 	.word	0x20000358
 8000694:	40004800 	.word	0x40004800

08000698 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_MspInit+0x44>)
 80006ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_MspInit+0x44>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6613      	str	r3, [r2, #96]	; 0x60
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_MspInit+0x44>)
 80006b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_MspInit+0x44>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_MspInit+0x44>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	6593      	str	r3, [r2, #88]	; 0x58
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_MspInit+0x44>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a67      	ldr	r2, [pc, #412]	; (80008a8 <HAL_ADC_MspInit+0x1bc>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d161      	bne.n	80007d2 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800070e:	4b67      	ldr	r3, [pc, #412]	; (80008ac <HAL_ADC_MspInit+0x1c0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a65      	ldr	r2, [pc, #404]	; (80008ac <HAL_ADC_MspInit+0x1c0>)
 8000716:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000718:	4b64      	ldr	r3, [pc, #400]	; (80008ac <HAL_ADC_MspInit+0x1c0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d10b      	bne.n	8000738 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000720:	4b63      	ldr	r3, [pc, #396]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 8000722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000724:	4a62      	ldr	r2, [pc, #392]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 8000726:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800072a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072c:	4b60      	ldr	r3, [pc, #384]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 800072e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b5d      	ldr	r3, [pc, #372]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 800073a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073c:	4a5c      	ldr	r2, [pc, #368]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000744:	4b5a      	ldr	r3, [pc, #360]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 8000746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STEP_UP_FEEDBACK_Pin;
 8000750:	2310      	movs	r3, #16
 8000752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000754:	230b      	movs	r3, #11
 8000756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_UP_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000766:	f003 faf5 	bl	8003d54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 800076c:	4a52      	ldr	r2, [pc, #328]	; (80008b8 <HAL_ADC_MspInit+0x1cc>)
 800076e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000770:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000776:	4b4f      	ldr	r3, [pc, #316]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800077c:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000782:	4b4c      	ldr	r3, [pc, #304]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000788:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 800078a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000790:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 8000792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000796:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000798:	4b46      	ldr	r3, [pc, #280]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 800079a:	2220      	movs	r2, #32
 800079c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800079e:	4b45      	ldr	r3, [pc, #276]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007a4:	4843      	ldr	r0, [pc, #268]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 80007a6:	f002 ffcd 	bl	8003744 <HAL_DMA_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80007b0:	f7ff ff72 	bl	8000698 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a3f      	ldr	r2, [pc, #252]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 80007b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80007ba:	4a3e      	ldr	r2, [pc, #248]	; (80008b4 <HAL_ADC_MspInit+0x1c8>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	2012      	movs	r0, #18
 80007c6:	f002 ff78 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007ca:	2012      	movs	r0, #18
 80007cc:	f002 ff91 	bl	80036f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80007d0:	e065      	b.n	800089e <HAL_ADC_MspInit+0x1b2>
  else if(hadc->Instance==ADC2)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a39      	ldr	r2, [pc, #228]	; (80008bc <HAL_ADC_MspInit+0x1d0>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d160      	bne.n	800089e <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC_CLK_ENABLED++;
 80007dc:	4b33      	ldr	r3, [pc, #204]	; (80008ac <HAL_ADC_MspInit+0x1c0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a32      	ldr	r2, [pc, #200]	; (80008ac <HAL_ADC_MspInit+0x1c0>)
 80007e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <HAL_ADC_MspInit+0x1c0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10b      	bne.n	8000806 <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC_CLK_ENABLE();
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a2f      	ldr	r2, [pc, #188]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 80007f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a29      	ldr	r2, [pc, #164]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <HAL_ADC_MspInit+0x1c4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PEAK_DETECTION_R_Pin|PEAK_DETECTION_L_Pin;
 800081e:	23c0      	movs	r3, #192	; 0xc0
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000822:	230b      	movs	r3, #11
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f003 fa8e 	bl	8003d54 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000838:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 800083a:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <HAL_ADC_MspInit+0x1d8>)
 800083c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 8000858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 8000860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000864:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 8000868:	2220      	movs	r2, #32
 800086a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 8000874:	f002 ff66 	bl	8003744 <HAL_DMA_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_ADC_MspInit+0x196>
      Error_Handler();
 800087e:	f7ff ff0b 	bl	8000698 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 8000886:	64da      	str	r2, [r3, #76]	; 0x4c
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <HAL_ADC_MspInit+0x1d4>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2101      	movs	r1, #1
 8000892:	2012      	movs	r0, #18
 8000894:	f002 ff11 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000898:	2012      	movs	r0, #18
 800089a:	f002 ff2a 	bl	80036f2 <HAL_NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	50040000 	.word	0x50040000
 80008ac:	200003dc 	.word	0x200003dc
 80008b0:	40021000 	.word	0x40021000
 80008b4:	20000154 	.word	0x20000154
 80008b8:	40020430 	.word	0x40020430
 80008bc:	50040100 	.word	0x50040100
 80008c0:	2000019c 	.word	0x2000019c
 80008c4:	4002001c 	.word	0x4002001c

080008c8 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <HAL_ADC_MspDeInit+0x8c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d119      	bne.n	800090e <HAL_ADC_MspDeInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_ADC_CLK_ENABLED--;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <HAL_ADC_MspDeInit+0x90>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	3b01      	subs	r3, #1
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <HAL_ADC_MspDeInit+0x90>)
 80008e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==0){
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <HAL_ADC_MspDeInit+0x90>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d105      	bne.n	80008f8 <HAL_ADC_MspDeInit+0x30>
      __HAL_RCC_ADC_CLK_DISABLE();
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <HAL_ADC_MspDeInit+0x94>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f0:	4a1a      	ldr	r2, [pc, #104]	; (800095c <HAL_ADC_MspDeInit+0x94>)
 80008f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f6:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    HAL_GPIO_DeInit(STEP_UP_FEEDBACK_GPIO_Port, STEP_UP_FEEDBACK_Pin);
 80008f8:	2110      	movs	r1, #16
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f003 fb9b 	bl	8004038 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4618      	mov	r0, r3
 8000908:	f002 ffd4 	bl	80038b4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 800090c:	e01d      	b.n	800094a <HAL_ADC_MspDeInit+0x82>
  else if(hadc->Instance==ADC2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a13      	ldr	r2, [pc, #76]	; (8000960 <HAL_ADC_MspDeInit+0x98>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d118      	bne.n	800094a <HAL_ADC_MspDeInit+0x82>
    HAL_RCC_ADC_CLK_ENABLED--;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_ADC_MspDeInit+0x90>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3b01      	subs	r3, #1
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_ADC_MspDeInit+0x90>)
 8000920:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==0){
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_ADC_MspDeInit+0x90>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d105      	bne.n	8000936 <HAL_ADC_MspDeInit+0x6e>
      __HAL_RCC_ADC_CLK_DISABLE();
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_ADC_MspDeInit+0x94>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <HAL_ADC_MspDeInit+0x94>)
 8000930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOA, PEAK_DETECTION_R_Pin|PEAK_DETECTION_L_Pin);
 8000936:	21c0      	movs	r1, #192	; 0xc0
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	f003 fb7c 	bl	8004038 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	4618      	mov	r0, r3
 8000946:	f002 ffb5 	bl	80038b4 <HAL_DMA_DeInit>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	50040000 	.word	0x50040000
 8000958:	200003dc 	.word	0x200003dc
 800095c:	40021000 	.word	0x40021000
 8000960:	50040100 	.word	0x50040100

08000964 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a49      	ldr	r2, [pc, #292]	; (8000a98 <HAL_TIM_PWM_MspInit+0x134>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d114      	bne.n	80009a0 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000976:	4b49      	ldr	r3, [pc, #292]	; (8000a9c <HAL_TIM_PWM_MspInit+0x138>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	4a48      	ldr	r2, [pc, #288]	; (8000a9c <HAL_TIM_PWM_MspInit+0x138>)
 800097c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000980:	6613      	str	r3, [r2, #96]	; 0x60
 8000982:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <HAL_TIM_PWM_MspInit+0x138>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2102      	movs	r1, #2
 8000992:	2019      	movs	r0, #25
 8000994:	f002 fe91 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000998:	2019      	movs	r0, #25
 800099a:	f002 feaa 	bl	80036f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800099e:	e076      	b.n	8000a8e <HAL_TIM_PWM_MspInit+0x12a>
  else if(htim_pwm->Instance==TIM2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009a8:	d171      	bne.n	8000a8e <HAL_TIM_PWM_MspInit+0x12a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <HAL_TIM_PWM_MspInit+0x138>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	4a3b      	ldr	r2, [pc, #236]	; (8000a9c <HAL_TIM_PWM_MspInit+0x138>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6593      	str	r3, [r2, #88]	; 0x58
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <HAL_TIM_PWM_MspInit+0x138>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80009c2:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 80009c4:	4a37      	ldr	r2, [pc, #220]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x140>)
 80009c6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 80009c8:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 80009d0:	2210      	movs	r2, #16
 80009d2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d4:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80009da:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009e0:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 80009e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009e8:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 80009ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009ee:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 80009f2:	2220      	movs	r2, #32
 80009f4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 80009f8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80009fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80009fe:	4828      	ldr	r0, [pc, #160]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 8000a00:	f002 fea0 	bl	8003744 <HAL_DMA_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 8000a0a:	f7ff fe45 	bl	8000698 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
 8000a14:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 8000a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a20:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x13c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a28:	4a20      	ldr	r2, [pc, #128]	; (8000aac <HAL_TIM_PWM_MspInit+0x148>)
 8000a2a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a52:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a56:	2220      	movs	r2, #32
 8000a58:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a5c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000a60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a64:	f002 fe6e 	bl	8003744 <HAL_DMA_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_TIM_PWM_MspInit+0x10e>
      Error_Handler();
 8000a6e:	f7ff fe13 	bl	8000698 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a78:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x144>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	201c      	movs	r0, #28
 8000a84:	f002 fe19 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a88:	201c      	movs	r0, #28
 8000a8a:	f002 fe32 	bl	80036f2 <HAL_NVIC_EnableIRQ>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40012c00 	.word	0x40012c00
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	200002c8 	.word	0x200002c8
 8000aa4:	40020080 	.word	0x40020080
 8000aa8:	20000310 	.word	0x20000310
 8000aac:	40020008 	.word	0x40020008

08000ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_TIM_Base_MspInit+0x38>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d10b      	bne.n	8000ada <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_TIM_Base_MspInit+0x3c>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	4a09      	ldr	r2, [pc, #36]	; (8000aec <HAL_TIM_Base_MspInit+0x3c>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <HAL_TIM_Base_MspInit+0x3c>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40001000 	.word	0x40001000
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_TIM_PWM_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <HAL_TIM_PWM_MspDeInit+0x68>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d109      	bne.n	8000b16 <HAL_TIM_PWM_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b0c:	6613      	str	r3, [r2, #96]	; 0x60

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 8000b0e:	2019      	movs	r0, #25
 8000b10:	f002 fdfd 	bl	800370e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 8000b14:	e01c      	b.n	8000b50 <HAL_TIM_PWM_MspDeInit+0x60>
  else if(htim_pwm->Instance==TIM2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1e:	d117      	bne.n	8000b50 <HAL_TIM_PWM_MspDeInit+0x60>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <HAL_TIM_PWM_MspDeInit+0x6c>)
 8000b26:	f023 0301 	bic.w	r3, r3, #1
 8000b2a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC2]);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 febf 	bl	80038b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC4]);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 feba 	bl	80038b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(htim_pwm->hdma[TIM_DMA_ID_CC3]);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 feb5 	bl	80038b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8000b4a:	201c      	movs	r0, #28
 8000b4c:	f002 fddf 	bl	800370e <HAL_NVIC_DisableIRQ>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40012c00 	.word	0x40012c00
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b096      	sub	sp, #88	; 0x58
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	2234      	movs	r2, #52	; 0x34
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f008 fa51 	bl	8009028 <memset>
  if(huart->Instance==USART3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a23      	ldr	r2, [pc, #140]	; (8000c18 <HAL_UART_MspInit+0xb8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d13e      	bne.n	8000c0e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b90:	2304      	movs	r3, #4
 8000b92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 fa4f 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ba8:	f7ff fd76 	bl	8000698 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_UART_MspInit+0xbc>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb0:	4a1a      	ldr	r2, [pc, #104]	; (8000c1c <HAL_UART_MspInit+0xbc>)
 8000bb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0xbc>)
 8000bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_UART_MspInit+0xbc>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <HAL_UART_MspInit+0xbc>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_UART_MspInit+0xbc>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <HAL_UART_MspInit+0xc0>)
 8000bfa:	f003 f8ab 	bl	8003d54 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2027      	movs	r0, #39	; 0x27
 8000c04:	f002 fd59 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c08:	2027      	movs	r0, #39	; 0x27
 8000c0a:	f002 fd72 	bl	80036f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3758      	adds	r7, #88	; 0x58
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40004800 	.word	0x40004800
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000400 	.word	0x48000400

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f9c2 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STIM_TRIGGER_INPUT_Pin);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f003 fadd 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <DMA1_Channel1_IRQHandler+0x10>)
 8000c8e:	f002 ff82 	bl	8003b96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000310 	.word	0x20000310

08000c9c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <DMA1_Channel2_IRQHandler+0x10>)
 8000ca2:	f002 ff78 	bl	8003b96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000019c 	.word	0x2000019c

08000cb0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA1_Channel7_IRQHandler+0x10>)
 8000cb6:	f002 ff6e 	bl	8003b96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200002c8 	.word	0x200002c8

08000cc4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <ADC1_2_IRQHandler+0x14>)
 8000cca:	f001 f87b 	bl	8001dc4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000cce:	4803      	ldr	r0, [pc, #12]	; (8000cdc <ADC1_2_IRQHandler+0x18>)
 8000cd0:	f001 f878 	bl	8001dc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000008c 	.word	0x2000008c
 8000cdc:	200000f0 	.word	0x200000f0

08000ce0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ce6:	f005 f98d 	bl	8006004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200001e4 	.word	0x200001e4

08000cf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <TIM2_IRQHandler+0x10>)
 8000cfa:	f005 f983 	bl	8006004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000230 	.word	0x20000230

08000d08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <USART3_IRQHandler+0x10>)
 8000d0e:	f006 f999 	bl	8007044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000358 	.word	0x20000358

08000d1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QCC_CTRL0_Pin);
 8000d20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d24:	f003 fa8a 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QCC_CTRL1_Pin);
 8000d28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d2c:	f003 fa86 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
  }

  return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d96:	605a      	str	r2, [r3, #4]
  return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <_isatty>:

int _isatty(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f008 f8e4 	bl	8008fd4 <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000a000 	.word	0x2000a000
 8000e38:	000007ff 	.word	0x000007ff
 8000e3c:	200003e0 	.word	0x200003e0
 8000e40:	20000448 	.word	0x20000448

08000e44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <_write>:

int __io_putchar(int ch);

/* With GCC, printf calls _write() */
int _write(int file, char *ptr, int len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	e009      	b.n	8000e8e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	60ba      	str	r2, [r7, #8]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f80c 	bl	8000ea0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dbf1      	blt.n	8000e7a <_write+0x12>
	}
	return len;
 8000e96:	687b      	ldr	r3, [r7, #4]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <__io_putchar>:
FILE __stdin;

int fputc(int ch, FILE *f)

#endif /* __GNUC__ */
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b0a      	cmp	r3, #10
 8000eac:	d109      	bne.n	8000ec2 <__io_putchar+0x22>
	{
		/* output CR  */
		while (!(TD_RETARGET_UART->ISR & UART_FLAG_TXE))
 8000eae:	bf00      	nop
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <__io_putchar+0x48>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f9      	beq.n	8000eb0 <__io_putchar+0x10>
			;

		TD_RETARGET_UART->TDR = '\r';
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <__io_putchar+0x48>)
 8000ebe:	220d      	movs	r2, #13
 8000ec0:	851a      	strh	r2, [r3, #40]	; 0x28
	}

	while (!(TD_RETARGET_UART->ISR & UART_FLAG_TXE))
 8000ec2:	bf00      	nop
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <__io_putchar+0x48>)
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f9      	beq.n	8000ec4 <__io_putchar+0x24>
		;

	TD_RETARGET_UART->TDR = (uint8_t) ch;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__io_putchar+0x48>)
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	851a      	strh	r2, [r3, #40]	; 0x28

	return ch;
 8000eda:	687b      	ldr	r3, [r7, #4]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	40004800 	.word	0x40004800

08000eec <Reset_Handler>:
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopForever+0x2>
 8000ef0:	f7ff ffa8 	bl	8000e44 <SystemInit>
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <LoopForever+0x6>)
 8000ef6:	490d      	ldr	r1, [pc, #52]	; (8000f2c <LoopForever+0xa>)
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <LoopForever+0xe>)
 8000efa:	2300      	movs	r3, #0
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:
 8000efe:	58d4      	ldr	r4, [r2, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:
 8000f04:	18c4      	adds	r4, r0, r3
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopForever+0x12>)
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	; (8000f38 <LoopForever+0x16>)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:
 8000f16:	42a2      	cmp	r2, r4
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>
 8000f1a:	f008 f861 	bl	8008fe0 <__libc_init_array>
 8000f1e:	f7ff fb13 	bl	8000548 <main>

08000f22 <LoopForever>:
 8000f22:	e7fe      	b.n	8000f22 <LoopForever>
 8000f24:	2000a000 	.word	0x2000a000
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000070 	.word	0x20000070
 8000f30:	08009c04 	.word	0x08009c04
 8000f34:	20000070 	.word	0x20000070
 8000f38:	20000448 	.word	0x20000448

08000f3c <COMP_IRQHandler>:
 8000f3c:	e7fe      	b.n	8000f3c <COMP_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_Init+0x3c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_Init+0x3c>)
 8000f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f002 fba4 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 f80f 	bl	8000f80 <HAL_InitTick>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	e001      	b.n	8000f72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f6e:	f7ff fb99 	bl	80006a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40022000 	.word	0x40022000

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_InitTick+0x6c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d023      	beq.n	8000fdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_InitTick+0x70>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_InitTick+0x6c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 fbbd 	bl	800372a <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10f      	bne.n	8000fd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d809      	bhi.n	8000fd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f002 fb79 	bl	80036ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_InitTick+0x74>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e007      	b.n	8000fe0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e004      	b.n	8000fe0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e001      	b.n	8000fe0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	200003e4 	.word	0x200003e4

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200003e4 	.word	0x200003e4

08001038 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	609a      	str	r2, [r3, #8]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	609a      	str	r2, [r3, #8]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3360      	adds	r3, #96	; 0x60
 80010b2:	461a      	mov	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <LL_ADC_SetOffset+0x44>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	4313      	orrs	r3, r2
 80010d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010d8:	bf00      	nop
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	03fff000 	.word	0x03fff000

080010e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3360      	adds	r3, #96	; 0x60
 80010f6:	461a      	mov	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3360      	adds	r3, #96	; 0x60
 8001124:	461a      	mov	r2, r3
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	431a      	orrs	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	615a      	str	r2, [r3, #20]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001196:	b480      	push	{r7}
 8001198:	b087      	sub	sp, #28
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3330      	adds	r3, #48	; 0x30
 80011a6:	461a      	mov	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	4413      	add	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f003 031f 	and.w	r3, r3, #31
 80011c0:	211f      	movs	r1, #31
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	401a      	ands	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	0e9b      	lsrs	r3, r3, #26
 80011ce:	f003 011f 	and.w	r1, r3, #31
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	431a      	orrs	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011e2:	bf00      	nop
 80011e4:	371c      	adds	r7, #28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3314      	adds	r3, #20
 8001224:	461a      	mov	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	0e5b      	lsrs	r3, r3, #25
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	4413      	add	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	0d1b      	lsrs	r3, r3, #20
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	2107      	movs	r1, #7
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	401a      	ands	r2, r3
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	0d1b      	lsrs	r3, r3, #20
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	431a      	orrs	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800125e:	bf00      	nop
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0318 	and.w	r3, r3, #24
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001290:	40d9      	lsrs	r1, r3
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	400b      	ands	r3, r1
 8001296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800129a:	431a      	orrs	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	0007ffff 	.word	0x0007ffff

080012b4 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	330c      	adds	r3, #12
 80012c4:	4618      	mov	r0, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	0d1b      	lsrs	r3, r3, #20
 80012ca:	f003 0103 	and.w	r1, r3, #3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f003 0201 	and.w	r2, r3, #1
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4403      	add	r3, r0
 80012e2:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 80012ee:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 80012f2:	43db      	mvns	r3, r3
 80012f4:	401a      	ands	r2, r3
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	400b      	ands	r3, r1
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8001302:	bf00      	nop
 8001304:	371c      	adds	r7, #28
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 800130e:	b480      	push	{r7}
 8001310:	b087      	sub	sp, #28
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3320      	adds	r3, #32
 8001320:	461a      	mov	r2, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	0d1b      	lsrs	r3, r3, #20
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	4413      	add	r3, r2
 800132e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	0419      	lsls	r1, r3, #16
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	430b      	orrs	r3, r1
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8001346:	bf00      	nop
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 031f 	and.w	r3, r3, #31
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800139a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6093      	str	r3, [r2, #8]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013c2:	d101      	bne.n	80013c8 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001412:	d101      	bne.n	8001418 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001436:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800143a:	f043 0201 	orr.w	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800145e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001462:	f043 0202 	orr.w	r2, r3, #2
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <LL_ADC_IsEnabled+0x18>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <LL_ADC_IsEnabled+0x1a>
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d101      	bne.n	80014b4 <LL_ADC_IsDisableOngoing+0x18>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <LL_ADC_IsDisableOngoing+0x1a>
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d6:	f043 0204 	orr.w	r2, r3, #4
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014fe:	f043 0210 	orr.w	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	2b04      	cmp	r3, #4
 8001524:	d101      	bne.n	800152a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800154c:	f043 0220 	orr.w	r2, r3, #32
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b08      	cmp	r3, #8
 8001572:	d101      	bne.n	8001578 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	605a      	str	r2, [r3, #4]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	605a      	str	r2, [r3, #4]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	605a      	str	r2, [r3, #4]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	605a      	str	r2, [r3, #4]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	605a      	str	r2, [r3, #4]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	605a      	str	r2, [r3, #4]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e131      	b.n	8001916 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff f813 	bl	80006ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe68 	bl	80013ae <LL_ADC_IsDeepPowerDownEnabled>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fe4e 	bl	800138a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fe83 	bl	80013fe <LL_ADC_IsInternalRegulatorEnabled>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d115      	bne.n	800172a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fe67 	bl	80013d6 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001708:	4b85      	ldr	r3, [pc, #532]	; (8001920 <HAL_ADC_Init+0x288>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	4a85      	ldr	r2, [pc, #532]	; (8001924 <HAL_ADC_Init+0x28c>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	3301      	adds	r3, #1
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800171c:	e002      	b.n	8001724 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3b01      	subs	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f9      	bne.n	800171e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe65 	bl	80013fe <LL_ADC_IsInternalRegulatorEnabled>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fed9 	bl	8001512 <LL_ADC_REG_IsConversionOngoing>
 8001760:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 80ca 	bne.w	8001904 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 80c6 	bne.w	8001904 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001780:	f043 0202 	orr.w	r2, r3, #2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe72 	bl	8001476 <LL_ADC_IsEnabled>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d110      	bne.n	80017ba <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001798:	4863      	ldr	r0, [pc, #396]	; (8001928 <HAL_ADC_Init+0x290>)
 800179a:	f7ff fe6c 	bl	8001476 <LL_ADC_IsEnabled>
 800179e:	4604      	mov	r4, r0
 80017a0:	4862      	ldr	r0, [pc, #392]	; (800192c <HAL_ADC_Init+0x294>)
 80017a2:	f7ff fe68 	bl	8001476 <LL_ADC_IsEnabled>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4323      	orrs	r3, r4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d105      	bne.n	80017ba <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4619      	mov	r1, r3
 80017b4:	485e      	ldr	r0, [pc, #376]	; (8001930 <HAL_ADC_Init+0x298>)
 80017b6:	f7ff fc3f 	bl	8001038 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7e5b      	ldrb	r3, [r3, #25]
 80017be:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017c4:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80017ca:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80017d0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d8:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d106      	bne.n	80017f6 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	3b01      	subs	r3, #1
 80017ee:	045b      	lsls	r3, r3, #17
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4b46      	ldr	r3, [pc, #280]	; (8001934 <HAL_ADC_Init+0x29c>)
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	430b      	orrs	r3, r1
 8001824:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fe71 	bl	8001512 <LL_ADC_REG_IsConversionOngoing>
 8001830:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fe92 	bl	8001560 <LL_ADC_INJ_IsConversionOngoing>
 800183c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d13d      	bne.n	80018c0 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d13a      	bne.n	80018c0 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800184e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001856:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001866:	f023 0302 	bic.w	r3, r3, #2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	69b9      	ldr	r1, [r7, #24]
 8001870:	430b      	orrs	r3, r1
 8001872:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800187a:	2b01      	cmp	r3, #1
 800187c:	d118      	bne.n	80018b0 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001888:	f023 0304 	bic.w	r3, r3, #4
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001894:	4311      	orrs	r1, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800189a:	4311      	orrs	r1, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018a0:	430a      	orrs	r2, r1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f042 0201 	orr.w	r2, r2, #1
 80018ac:	611a      	str	r2, [r3, #16]
 80018ae:	e007      	b.n	80018c0 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10c      	bne.n	80018e2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f023 010f 	bic.w	r1, r3, #15
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
 80018e0:	e007      	b.n	80018f2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 020f 	bic.w	r2, r2, #15
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	655a      	str	r2, [r3, #84]	; 0x54
 8001902:	e007      	b.n	8001914 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	f043 0210 	orr.w	r2, r3, #16
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001914:	7ffb      	ldrb	r3, [r7, #31]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	bf00      	nop
 8001920:	20000000 	.word	0x20000000
 8001924:	053e2d63 	.word	0x053e2d63
 8001928:	50040000 	.word	0x50040000
 800192c:	50040100 	.word	0x50040100
 8001930:	50040300 	.word	0x50040300
 8001934:	fff0c007 	.word	0xfff0c007

08001938 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e111      	b.n	8001b6e <HAL_ADC_DeInit+0x236>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f043 0202 	orr.w	r2, r3, #2
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001956:	2103      	movs	r1, #3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f001 fa7d 	bl	8002e58 <ADC_ConversionStop>
 800195e:	4603      	mov	r3, r0
 8001960:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001970:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10a      	bne.n	800198e <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f001 fbaf 	bl	80030dc <ADC_Disable>
 800197e:	4603      	mov	r3, r0
 8001980:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800199c:	f023 0307 	bic.w	r3, r3, #7
 80019a0:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019aa:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 80019ba:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019ca:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68d9      	ldr	r1, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <HAL_ADC_DeInit+0x240>)
 80019d8:	400b      	ands	r3, r1
 80019da:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019ea:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019fa:	f023 0307 	bic.w	r3, r3, #7
 80019fe:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a0e:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8001a1e:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6a1a      	ldr	r2, [r3, #32]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8001a2e:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <HAL_ADC_DeInit+0x244>)
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b45      	ldr	r3, [pc, #276]	; (8001b80 <HAL_ADC_DeInit+0x248>)
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	6353      	str	r3, [r2, #52]	; 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_ADC_DeInit+0x248>)
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	6393      	str	r3, [r2, #56]	; 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 8001a8e:	f023 0307 	bic.w	r3, r3, #7
 8001a92:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_ADC_DeInit+0x24c>)
 8001aa0:	400b      	ands	r3, r1
 8001aa2:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <HAL_ADC_DeInit+0x24c>)
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_ADC_DeInit+0x24c>)
 8001ac0:	400b      	ands	r3, r1
 8001ac2:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_ADC_DeInit+0x24c>)
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	0cdb      	lsrs	r3, r3, #19
 8001ae2:	04db      	lsls	r3, r3, #19
 8001ae4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	0cdb      	lsrs	r3, r3, #19
 8001af6:	04db      	lsls	r3, r3, #19
 8001af8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	0cdb      	lsrs	r3, r3, #19
 8001b0a:	04db      	lsls	r3, r3, #19
 8001b0c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8001b20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b24:	4818      	ldr	r0, [pc, #96]	; (8001b88 <HAL_ADC_DeInit+0x250>)
 8001b26:	f7ff fca6 	bl	8001476 <LL_ADC_IsEnabled>
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4817      	ldr	r0, [pc, #92]	; (8001b8c <HAL_ADC_DeInit+0x254>)
 8001b2e:	f7ff fca2 	bl	8001476 <LL_ADC_IsEnabled>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4323      	orrs	r3, r4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d108      	bne.n	8001b4c <HAL_ADC_DeInit+0x214>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_ADC_DeInit+0x258>)
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	4914      	ldr	r1, [pc, #80]	; (8001b90 <HAL_ADC_DeInit+0x258>)
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_ADC_DeInit+0x25c>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe febe 	bl	80008c8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	65da      	str	r2, [r3, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	80008004 	.word	0x80008004
 8001b7c:	e0820830 	.word	0xe0820830
 8001b80:	e0820820 	.word	0xe0820820
 8001b84:	03fff000 	.word	0x03fff000
 8001b88:	50040000 	.word	0x50040000
 8001b8c:	50040100 	.word	0x50040100
 8001b90:	50040300 	.word	0x50040300
 8001b94:	fe0010e0 	.word	0xfe0010e0

08001b98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ba4:	4850      	ldr	r0, [pc, #320]	; (8001ce8 <HAL_ADC_Start_DMA+0x150>)
 8001ba6:	f7ff fbd4 	bl	8001352 <LL_ADC_GetMultimode>
 8001baa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fcae 	bl	8001512 <LL_ADC_REG_IsConversionOngoing>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 808e 	bne.w	8001cda <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_Start_DMA+0x34>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e089      	b.n	8001ce0 <HAL_ADC_Start_DMA+0x148>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d002      	beq.n	8001be6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b09      	cmp	r3, #9
 8001be4:	d172      	bne.n	8001ccc <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f001 f9f2 	bl	8002fd0 <ADC_Enable>
 8001bec:	4603      	mov	r3, r0
 8001bee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d165      	bne.n	8001cc2 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a37      	ldr	r2, [pc, #220]	; (8001cec <HAL_ADC_Start_DMA+0x154>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d002      	beq.n	8001c1a <HAL_ADC_Start_DMA+0x82>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e000      	b.n	8001c1c <HAL_ADC_Start_DMA+0x84>
 8001c1a:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <HAL_ADC_Start_DMA+0x158>)
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d002      	beq.n	8001c2a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f023 0206 	bic.w	r2, r3, #6
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c4e:	e002      	b.n	8001c56 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_ADC_Start_DMA+0x15c>)
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <HAL_ADC_Start_DMA+0x160>)
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <HAL_ADC_Start_DMA+0x164>)
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	221c      	movs	r2, #28
 8001c74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0210 	orr.w	r2, r2, #16
 8001c8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3340      	adds	r3, #64	; 0x40
 8001ca8:	4619      	mov	r1, r3
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f001 fe93 	bl	80039d8 <HAL_DMA_Start_IT>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fc01 	bl	80014c2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001cc0:	e00d      	b.n	8001cde <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001cca:	e008      	b.n	8001cde <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001cd8:	e001      	b.n	8001cde <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	50040300 	.word	0x50040300
 8001cec:	50040100 	.word	0x50040100
 8001cf0:	50040000 	.word	0x50040000
 8001cf4:	0800319b 	.word	0x0800319b
 8001cf8:	08003273 	.word	0x08003273
 8001cfc:	0800328f 	.word	0x0800328f

08001d00 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Stop_DMA+0x16>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e051      	b.n	8001dba <HAL_ADC_Stop_DMA+0xba>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001d1e:	2103      	movs	r1, #3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f001 f899 	bl	8002e58 <ADC_ConversionStop>
 8001d26:	4603      	mov	r3, r0
 8001d28:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d13f      	bne.n	8001db0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d10f      	bne.n	8001d6e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fea0 	bl	8003a98 <HAL_DMA_Abort>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0210 	bic.w	r2, r2, #16
 8001d7c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f001 f9a9 	bl	80030dc <ADC_Disable>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e002      	b.n	8001d96 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f001 f9a3 	bl	80030dc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de0:	4882      	ldr	r0, [pc, #520]	; (8001fec <HAL_ADC_IRQHandler+0x228>)
 8001de2:	f7ff fab6 	bl	8001352 <LL_ADC_GetMultimode>
 8001de6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d017      	beq.n	8001e22 <HAL_ADC_IRQHandler+0x5e>
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d012      	beq.n	8001e22 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f001 faa2 	bl	800335e <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <HAL_ADC_IRQHandler+0x72>
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8083 	beq.w	8001f48 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d07d      	beq.n	8001f48 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f981 	bl	8001170 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d062      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a5d      	ldr	r2, [pc, #372]	; (8001ff0 <HAL_ADC_IRQHandler+0x22c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d002      	beq.n	8001e84 <HAL_ADC_IRQHandler+0xc0>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	e000      	b.n	8001e86 <HAL_ADC_IRQHandler+0xc2>
 8001e84:	4b5b      	ldr	r3, [pc, #364]	; (8001ff4 <HAL_ADC_IRQHandler+0x230>)
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d008      	beq.n	8001ea0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d002      	beq.n	8001ea0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	d104      	bne.n	8001eaa <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	e00c      	b.n	8001ec4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a50      	ldr	r2, [pc, #320]	; (8001ff0 <HAL_ADC_IRQHandler+0x22c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d002      	beq.n	8001eba <HAL_ADC_IRQHandler+0xf6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	e000      	b.n	8001ebc <HAL_ADC_IRQHandler+0xf8>
 8001eba:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <HAL_ADC_IRQHandler+0x230>)
 8001ebc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d135      	bne.n	8001f3a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d12e      	bne.n	8001f3a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fb16 	bl	8001512 <LL_ADC_REG_IsConversionOngoing>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d11a      	bne.n	8001f22 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 020c 	bic.w	r2, r2, #12
 8001efa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d112      	bne.n	8001f3a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
 8001f20:	e00b      	b.n	8001f3a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f95c 	bl	80021f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	220c      	movs	r2, #12
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x198>
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10b      	bne.n	8001f74 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 809f 	beq.w	80020a6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8099 	beq.w	80020a6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f92c 	bl	80011ee <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f96:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff f8e7 	bl	8001170 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fa2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <HAL_ADC_IRQHandler+0x22c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d002      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x1f0>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e000      	b.n	8001fb6 <HAL_ADC_IRQHandler+0x1f2>
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_ADC_IRQHandler+0x230>)
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d008      	beq.n	8001fd0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d002      	beq.n	8001fd0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b07      	cmp	r3, #7
 8001fce:	d104      	bne.n	8001fda <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	623b      	str	r3, [r7, #32]
 8001fd8:	e013      	b.n	8002002 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <HAL_ADC_IRQHandler+0x22c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d009      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x234>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	e007      	b.n	8001ffa <HAL_ADC_IRQHandler+0x236>
 8001fea:	bf00      	nop
 8001fec:	50040300 	.word	0x50040300
 8001ff0:	50040100 	.word	0x50040100
 8001ff4:	50040000 	.word	0x50040000
 8001ff8:	4b7d      	ldr	r3, [pc, #500]	; (80021f0 <HAL_ADC_IRQHandler+0x42c>)
 8001ffa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d047      	beq.n	8002098 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_ADC_IRQHandler+0x25e>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03f      	beq.n	8002098 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	d13a      	bne.n	8002098 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202c:	2b40      	cmp	r3, #64	; 0x40
 800202e:	d133      	bne.n	8002098 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d12e      	bne.n	8002098 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fa8e 	bl	8001560 <LL_ADC_INJ_IsConversionOngoing>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d11a      	bne.n	8002080 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002058:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d112      	bne.n	8002098 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
 800207e:	e00b      	b.n	8002098 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f001 f938 	bl	800330e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2260      	movs	r2, #96	; 0x60
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d011      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x310>
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00c      	beq.n	80020d4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8aa 	bl	8002220 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d012      	beq.n	8002104 <HAL_ADC_IRQHandler+0x340>
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00d      	beq.n	8002104 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f001 f91e 	bl	8003336 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210a:	2b00      	cmp	r3, #0
 800210c:	d012      	beq.n	8002134 <HAL_ADC_IRQHandler+0x370>
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00d      	beq.n	8002134 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f001 f910 	bl	800334a <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d036      	beq.n	80021ac <HAL_ADC_IRQHandler+0x3e8>
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d031      	beq.n	80021ac <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002150:	2301      	movs	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
 8002154:	e014      	b.n	8002180 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800215c:	4825      	ldr	r0, [pc, #148]	; (80021f4 <HAL_ADC_IRQHandler+0x430>)
 800215e:	f7ff f906 	bl	800136e <LL_ADC_GetMultiDMATransfer>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002168:	2301      	movs	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	e008      	b.n	8002180 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800217c:	2301      	movs	r3, #1
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	2b01      	cmp	r3, #1
 8002184:	d10e      	bne.n	80021a4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f848 	bl	8002234 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2210      	movs	r2, #16
 80021aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d018      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x424>
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f043 0208 	orr.w	r2, r3, #8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f001 f89d 	bl	8003322 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	50040000 	.word	0x50040000
 80021f4:	50040300 	.word	0x50040300

080021f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0b6      	sub	sp, #216	; 0xd8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x22>
 8002266:	2302      	movs	r3, #2
 8002268:	e3d5      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x7ce>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f94b 	bl	8001512 <LL_ADC_REG_IsConversionOngoing>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 83ba 	bne.w	80029f8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d824      	bhi.n	80022d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	3b02      	subs	r3, #2
 8002292:	2b03      	cmp	r3, #3
 8002294:	d81b      	bhi.n	80022ce <HAL_ADC_ConfigChannel+0x86>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <HAL_ADC_ConfigChannel+0x54>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022b5 	.word	0x080022b5
 80022a4:	080022bd 	.word	0x080022bd
 80022a8:	080022c5 	.word	0x080022c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	220c      	movs	r2, #12
 80022b0:	605a      	str	r2, [r3, #4]
          break;
 80022b2:	e011      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2212      	movs	r2, #18
 80022b8:	605a      	str	r2, [r3, #4]
          break;
 80022ba:	e00d      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2218      	movs	r2, #24
 80022c0:	605a      	str	r2, [r3, #4]
          break;
 80022c2:	e009      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ca:	605a      	str	r2, [r3, #4]
          break;
 80022cc:	e004      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2206      	movs	r2, #6
 80022d2:	605a      	str	r2, [r3, #4]
          break;
 80022d4:	e000      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80022d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	f7fe ff56 	bl	8001196 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f90f 	bl	8001512 <LL_ADC_REG_IsConversionOngoing>
 80022f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f92f 	bl	8001560 <LL_ADC_INJ_IsConversionOngoing>
 8002302:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002306:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 81c1 	bne.w	8002692 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002314:	2b00      	cmp	r3, #0
 8002316:	f040 81bc 	bne.w	8002692 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002322:	d10f      	bne.n	8002344 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2200      	movs	r2, #0
 800232e:	4619      	mov	r1, r3
 8002330:	f7fe ff70 	bl	8001214 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe ff04 	bl	800114a <LL_ADC_SetSamplingTimeCommonConfig>
 8002342:	e00e      	b.n	8002362 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	461a      	mov	r2, r3
 8002352:	f7fe ff5f 	bl	8001214 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fef4 	bl	800114a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d00a      	beq.n	800239a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6919      	ldr	r1, [r3, #16]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002394:	f7fe fe84 	bl	80010a0 <LL_ADC_SetOffset>
 8002398:	e17b      	b.n	8002692 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fea1 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x17e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fe96 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	e01e      	b.n	8002404 <HAL_ADC_ConfigChannel+0x1bc>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fe8b 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80023f4:	2320      	movs	r3, #32
 80023f6:	e004      	b.n	8002402 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80023f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1d4>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	e018      	b.n	800244e <HAL_ADC_ConfigChannel+0x206>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002438:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002440:	2320      	movs	r3, #32
 8002442:	e004      	b.n	800244e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002444:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800244e:	429a      	cmp	r2, r3
 8002450:	d106      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fe5a 	bl	8001114 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fe3e 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <HAL_ADC_ConfigChannel+0x244>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2101      	movs	r1, #1
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fe33 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	f003 021f 	and.w	r2, r3, #31
 800248a:	e01e      	b.n	80024ca <HAL_ADC_ConfigChannel+0x282>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fe28 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80024aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80024ba:	2320      	movs	r3, #32
 80024bc:	e004      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80024be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d105      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x29a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	e018      	b.n	8002514 <HAL_ADC_ConfigChannel+0x2cc>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002506:	2320      	movs	r3, #32
 8002508:	e004      	b.n	8002514 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800250a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002514:	429a      	cmp	r2, r3
 8002516:	d106      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2200      	movs	r2, #0
 800251e:	2101      	movs	r1, #1
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fdf7 	bl	8001114 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2102      	movs	r1, #2
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fddb 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x30a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2102      	movs	r1, #2
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fdd0 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	e01e      	b.n	8002590 <HAL_ADC_ConfigChannel+0x348>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2102      	movs	r1, #2
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fdc5 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002574:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e004      	b.n	800258e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002584:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x360>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	e016      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x38e>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80025c8:	2320      	movs	r3, #32
 80025ca:	e004      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80025cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d106      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	2102      	movs	r1, #2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fd96 	bl	8001114 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2103      	movs	r1, #3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fd7a 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10a      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x3cc>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2103      	movs	r1, #3
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fd6f 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	f003 021f 	and.w	r2, r3, #31
 8002612:	e017      	b.n	8002644 <HAL_ADC_ConfigChannel+0x3fc>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2103      	movs	r1, #3
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fd64 	bl	80010e8 <LL_ADC_GetOffsetChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800262c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800262e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e003      	b.n	8002642 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800263a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_ADC_ConfigChannel+0x414>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	e011      	b.n	8002680 <HAL_ADC_ConfigChannel+0x438>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800266a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800266c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800266e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002674:	2320      	movs	r3, #32
 8002676:	e003      	b.n	8002680 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002680:	429a      	cmp	r2, r3
 8002682:	d106      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2200      	movs	r2, #0
 800268a:	2103      	movs	r1, #3
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fd41 	bl	8001114 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe feed 	bl	8001476 <LL_ADC_IsEnabled>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 8140 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f7fe fddb 	bl	800126c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4a8f      	ldr	r2, [pc, #572]	; (80028f8 <HAL_ADC_ConfigChannel+0x6b0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	f040 8131 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x4a2>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	3301      	adds	r3, #1
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	2b09      	cmp	r3, #9
 80026e0:	bf94      	ite	ls
 80026e2:	2301      	movls	r3, #1
 80026e4:	2300      	movhi	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	e019      	b.n	800271e <HAL_ADC_ConfigChannel+0x4d6>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026fa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e003      	b.n	800270e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2b09      	cmp	r3, #9
 8002716:	bf94      	ite	ls
 8002718:	2301      	movls	r3, #1
 800271a:	2300      	movhi	r3, #0
 800271c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271e:	2b00      	cmp	r3, #0
 8002720:	d079      	beq.n	8002816 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_ADC_ConfigChannel+0x4f6>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	3301      	adds	r3, #1
 8002736:	069b      	lsls	r3, r3, #26
 8002738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800273c:	e015      	b.n	800276a <HAL_ADC_ConfigChannel+0x522>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800274c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800274e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e003      	b.n	8002762 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800275a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3301      	adds	r3, #1
 8002764:	069b      	lsls	r3, r3, #26
 8002766:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_ADC_ConfigChannel+0x542>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0e9b      	lsrs	r3, r3, #26
 800277c:	3301      	adds	r3, #1
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2101      	movs	r1, #1
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	e017      	b.n	80027ba <HAL_ADC_ConfigChannel+0x572>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800279c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80027a2:	2320      	movs	r3, #32
 80027a4:	e003      	b.n	80027ae <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80027a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	ea42 0103 	orr.w	r1, r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x598>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	3301      	adds	r3, #1
 80027d2:	f003 021f 	and.w	r2, r3, #31
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	051b      	lsls	r3, r3, #20
 80027de:	e018      	b.n	8002812 <HAL_ADC_ConfigChannel+0x5ca>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e003      	b.n	8002804 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80027fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f003 021f 	and.w	r2, r3, #31
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002812:	430b      	orrs	r3, r1
 8002814:	e081      	b.n	800291a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x5ea>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0e9b      	lsrs	r3, r3, #26
 8002828:	3301      	adds	r3, #1
 800282a:	069b      	lsls	r3, r3, #26
 800282c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002830:	e015      	b.n	800285e <HAL_ADC_ConfigChannel+0x616>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800284a:	2320      	movs	r3, #32
 800284c:	e003      	b.n	8002856 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	3301      	adds	r3, #1
 8002858:	069b      	lsls	r3, r3, #26
 800285a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_ADC_ConfigChannel+0x636>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	3301      	adds	r3, #1
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2101      	movs	r1, #1
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	e017      	b.n	80028ae <HAL_ADC_ConfigChannel+0x666>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	61fb      	str	r3, [r7, #28]
  return result;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002896:	2320      	movs	r3, #32
 8002898:	e003      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	ea42 0103 	orr.w	r1, r2, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <HAL_ADC_ConfigChannel+0x692>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	3301      	adds	r3, #1
 80028c6:	f003 021f 	and.w	r2, r3, #31
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	3b1e      	subs	r3, #30
 80028d2:	051b      	lsls	r3, r3, #20
 80028d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028d8:	e01e      	b.n	8002918 <HAL_ADC_ConfigChannel+0x6d0>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	613b      	str	r3, [r7, #16]
  return result;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e006      	b.n	8002904 <HAL_ADC_ConfigChannel+0x6bc>
 80028f6:	bf00      	nop
 80028f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	3301      	adds	r3, #1
 8002906:	f003 021f 	and.w	r2, r3, #31
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	3b1e      	subs	r3, #30
 8002912:	051b      	lsls	r3, r3, #20
 8002914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002918:	430b      	orrs	r3, r1
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	6892      	ldr	r2, [r2, #8]
 800291e:	4619      	mov	r1, r3
 8002920:	f7fe fc78 	bl	8001214 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <HAL_ADC_ConfigChannel+0x7d8>)
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d06c      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002930:	483c      	ldr	r0, [pc, #240]	; (8002a24 <HAL_ADC_ConfigChannel+0x7dc>)
 8002932:	f7fe fba7 	bl	8001084 <LL_ADC_GetCommonPathInternalCh>
 8002936:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a3a      	ldr	r2, [pc, #232]	; (8002a28 <HAL_ADC_ConfigChannel+0x7e0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d127      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d121      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a35      	ldr	r2, [pc, #212]	; (8002a2c <HAL_ADC_ConfigChannel+0x7e4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d157      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800295a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800295e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002962:	4619      	mov	r1, r3
 8002964:	482f      	ldr	r0, [pc, #188]	; (8002a24 <HAL_ADC_ConfigChannel+0x7dc>)
 8002966:	f7fe fb7a 	bl	800105e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800296a:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_ADC_ConfigChannel+0x7e8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	4a30      	ldr	r2, [pc, #192]	; (8002a34 <HAL_ADC_ConfigChannel+0x7ec>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	099b      	lsrs	r3, r3, #6
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002984:	e002      	b.n	800298c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3b01      	subs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f9      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002992:	e03a      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a27      	ldr	r2, [pc, #156]	; (8002a38 <HAL_ADC_ConfigChannel+0x7f0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d113      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x77e>
 800299e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_ADC_ConfigChannel+0x7e4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d12a      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029bc:	4619      	mov	r1, r3
 80029be:	4819      	ldr	r0, [pc, #100]	; (8002a24 <HAL_ADC_ConfigChannel+0x7dc>)
 80029c0:	f7fe fb4d 	bl	800105e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c4:	e021      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_ADC_ConfigChannel+0x7f4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d11c      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d116      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_ADC_ConfigChannel+0x7e4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d111      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029ee:	4619      	mov	r1, r3
 80029f0:	480c      	ldr	r0, [pc, #48]	; (8002a24 <HAL_ADC_ConfigChannel+0x7dc>)
 80029f2:	f7fe fb34 	bl	800105e <LL_ADC_SetCommonPathInternalCh>
 80029f6:	e008      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	37d8      	adds	r7, #216	; 0xd8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	80080000 	.word	0x80080000
 8002a24:	50040300 	.word	0x50040300
 8002a28:	c7520000 	.word	0xc7520000
 8002a2c:	50040000 	.word	0x50040000
 8002a30:	20000000 	.word	0x20000000
 8002a34:	053e2d63 	.word	0x053e2d63
 8002a38:	cb840000 	.word	0xcb840000
 8002a3c:	80000001 	.word	0x80000001

08002a40 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	; 0x38
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a58:	d003      	beq.n	8002a62 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002a5e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_AnalogWDGConfig+0x30>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e1ec      	b.n	8002e4a <HAL_ADC_AnalogWDGConfig+0x40a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe fd48 	bl	8001512 <LL_ADC_REG_IsConversionOngoing>
 8002a82:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe fd69 	bl	8001560 <LL_ADC_INJ_IsConversionOngoing>
 8002a8e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 81ca 	bne.w	8002e2c <HAL_ADC_AnalogWDGConfig+0x3ec>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f040 81c6 	bne.w	8002e2c <HAL_ADC_AnalogWDGConfig+0x3ec>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a9b      	ldr	r2, [pc, #620]	; (8002d14 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	f040 80a2 	bne.w	8002bf0 <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002ab4:	d034      	beq.n	8002b20 <HAL_ADC_AnalogWDGConfig+0xe0>
 8002ab6:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002aba:	d856      	bhi.n	8002b6a <HAL_ADC_AnalogWDGConfig+0x12a>
 8002abc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ac0:	d04b      	beq.n	8002b5a <HAL_ADC_AnalogWDGConfig+0x11a>
 8002ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ac6:	d850      	bhi.n	8002b6a <HAL_ADC_AnalogWDGConfig+0x12a>
 8002ac8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002acc:	d01b      	beq.n	8002b06 <HAL_ADC_AnalogWDGConfig+0xc6>
 8002ace:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002ad2:	d84a      	bhi.n	8002b6a <HAL_ADC_AnalogWDGConfig+0x12a>
 8002ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad8:	d037      	beq.n	8002b4a <HAL_ADC_AnalogWDGConfig+0x10a>
 8002ada:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ade:	d844      	bhi.n	8002b6a <HAL_ADC_AnalogWDGConfig+0x12a>
 8002ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ae4:	d029      	beq.n	8002b3a <HAL_ADC_AnalogWDGConfig+0xfa>
 8002ae6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aea:	d13e      	bne.n	8002b6a <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002af8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8002afc:	461a      	mov	r2, r3
 8002afe:	4985      	ldr	r1, [pc, #532]	; (8002d14 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002b00:	f7fe fbd8 	bl	80012b4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8002b04:	e039      	b.n	8002b7a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002b12:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8002b16:	461a      	mov	r2, r3
 8002b18:	497e      	ldr	r1, [pc, #504]	; (8002d14 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002b1a:	f7fe fbcb 	bl	80012b4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8002b1e:	e02c      	b.n	8002b7a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002b2c:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8002b30:	461a      	mov	r2, r3
 8002b32:	4978      	ldr	r1, [pc, #480]	; (8002d14 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002b34:	f7fe fbbe 	bl	80012b4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8002b38:	e01f      	b.n	8002b7a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a76      	ldr	r2, [pc, #472]	; (8002d18 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8002b40:	4974      	ldr	r1, [pc, #464]	; (8002d14 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe fbb6 	bl	80012b4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002b48:	e017      	b.n	8002b7a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a73      	ldr	r2, [pc, #460]	; (8002d1c <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8002b50:	4970      	ldr	r1, [pc, #448]	; (8002d14 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fbae 	bl	80012b4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002b58:	e00f      	b.n	8002b7a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a70      	ldr	r2, [pc, #448]	; (8002d20 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8002b60:	496c      	ldr	r1, [pc, #432]	; (8002d14 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fba6 	bl	80012b4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002b68:	e007      	b.n	8002b7a <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	4968      	ldr	r1, [pc, #416]	; (8002d14 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fb9e 	bl	80012b4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002b78:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb6:	f7fe fbaa 	bl	800130e <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fcdb 	bl	8001586 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	7b1b      	ldrb	r3, [r3, #12]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe fcfb 	bl	80015d8 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002be2:	e12c      	b.n	8002e3e <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe fd25 	bl	8001638 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002bee:	e126      	b.n	8002e3e <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002bf8:	d01d      	beq.n	8002c36 <HAL_ADC_AnalogWDGConfig+0x1f6>
 8002bfa:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002bfe:	f200 8093 	bhi.w	8002d28 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002c02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c06:	d07b      	beq.n	8002d00 <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c0c:	f200 808c 	bhi.w	8002d28 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002c10:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002c14:	d00f      	beq.n	8002c36 <HAL_ADC_AnalogWDGConfig+0x1f6>
 8002c16:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002c1a:	f200 8085 	bhi.w	8002d28 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002c1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c22:	d06d      	beq.n	8002d00 <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c28:	d87e      	bhi.n	8002d28 <HAL_ADC_AnalogWDGConfig+0x2e8>
 8002c2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c2e:	d067      	beq.n	8002d00 <HAL_ADC_AnalogWDGConfig+0x2c0>
 8002c30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c34:	d178      	bne.n	8002d28 <HAL_ADC_AnalogWDGConfig+0x2e8>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d12f      	bne.n	8002ca0 <HAL_ADC_AnalogWDGConfig+0x260>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d108      	bne.n	8002c5e <HAL_ADC_AnalogWDGConfig+0x21e>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2201      	movs	r2, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	e016      	b.n	8002c8c <HAL_ADC_AnalogWDGConfig+0x24c>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	61bb      	str	r3, [r7, #24]
  return result;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_AnalogWDGConfig+0x23a>
    return 32U;
 8002c76:	2320      	movs	r3, #32
 8002c78:	e003      	b.n	8002c82 <HAL_ADC_AnalogWDGConfig+0x242>
  return __builtin_clz(value);
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2201      	movs	r2, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8002c9e:	e04c      	b.n	8002d3a <HAL_ADC_AnalogWDGConfig+0x2fa>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d108      	bne.n	8002cbe <HAL_ADC_AnalogWDGConfig+0x27e>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	e016      	b.n	8002cec <HAL_ADC_AnalogWDGConfig+0x2ac>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	60fb      	str	r3, [r7, #12]
  return result;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_AnalogWDGConfig+0x29a>
    return 32U;
 8002cd6:	2320      	movs	r3, #32
 8002cd8:	e003      	b.n	8002ce2 <HAL_ADC_AnalogWDGConfig+0x2a2>
  return __builtin_clz(value);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8002cfe:	e01c      	b.n	8002d3a <HAL_ADC_AnalogWDGConfig+0x2fa>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f7fe fad2 	bl	80012b4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d10:	e013      	b.n	8002d3a <HAL_ADC_AnalogWDGConfig+0x2fa>
 8002d12:	bf00      	nop
 8002d14:	7dc00000 	.word	0x7dc00000
 8002d18:	0087ffff 	.word	0x0087ffff
 8002d1c:	0107ffff 	.word	0x0107ffff
 8002d20:	0187ffff 	.word	0x0187ffff
 8002d24:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2200      	movs	r2, #0
 8002d32:	4619      	mov	r1, r3
 8002d34:	f7fe fabe 	bl	80012b4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002d38:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0318 	and.w	r3, r3, #24
 8002d44:	2b18      	cmp	r3, #24
 8002d46:	d00f      	beq.n	8002d68 <HAL_ADC_AnalogWDGConfig+0x328>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	08db      	lsrs	r3, r3, #3
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	f1c3 0302 	rsb	r3, r3, #2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	f003 031e 	and.w	r3, r3, #30
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	e002      	b.n	8002d6e <HAL_ADC_AnalogWDGConfig+0x32e>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0318 	and.w	r3, r3, #24
 8002d7a:	2b18      	cmp	r3, #24
 8002d7c:	d00f      	beq.n	8002d9e <HAL_ADC_AnalogWDGConfig+0x35e>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	08db      	lsrs	r3, r3, #3
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	f1c3 0302 	rsb	r3, r3, #2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	f003 031e 	and.w	r3, r3, #30
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	e002      	b.n	8002da4 <HAL_ADC_AnalogWDGConfig+0x364>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db2:	f7fe faac 	bl	800130e <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <HAL_ADC_AnalogWDGConfig+0x414>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d11a      	bne.n	8002df6 <HAL_ADC_AnalogWDGConfig+0x3b6>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fbe5 	bl	80015a0 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	7b1b      	ldrb	r3, [r3, #12]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_ADC_AnalogWDGConfig+0x3aa>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fc08 	bl	80015f8 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002de8:	e029      	b.n	8002e3e <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fc32 	bl	8001658 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002df4:	e023      	b.n	8002e3e <HAL_ADC_AnalogWDGConfig+0x3fe>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fbd8 	bl	80015bc <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	7b1b      	ldrb	r3, [r3, #12]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_ADC_AnalogWDGConfig+0x3e0>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fbfd 	bl	8001618 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002e1e:	e00e      	b.n	8002e3e <HAL_ADC_AnalogWDGConfig+0x3fe>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe fc27 	bl	8001678 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002e2a:	e008      	b.n	8002e3e <HAL_ADC_AnalogWDGConfig+0x3fe>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3738      	adds	r7, #56	; 0x38
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	0017ffff 	.word	0x0017ffff

08002e58 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fb4f 	bl	8001512 <LL_ADC_REG_IsConversionOngoing>
 8002e74:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fb70 	bl	8001560 <LL_ADC_INJ_IsConversionOngoing>
 8002e80:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d103      	bne.n	8002e90 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8098 	beq.w	8002fc0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d02a      	beq.n	8002ef4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7e5b      	ldrb	r3, [r3, #25]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d126      	bne.n	8002ef4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7e1b      	ldrb	r3, [r3, #24]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d122      	bne.n	8002ef4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002eb2:	e014      	b.n	8002ede <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4a45      	ldr	r2, [pc, #276]	; (8002fcc <ADC_ConversionStop+0x174>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d90d      	bls.n	8002ed8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	f043 0210 	orr.w	r2, r3, #16
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e074      	b.n	8002fc2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3301      	adds	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d1e3      	bne.n	8002eb4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2240      	movs	r2, #64	; 0x40
 8002ef2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d014      	beq.n	8002f24 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fb07 	bl	8001512 <LL_ADC_REG_IsConversionOngoing>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00c      	beq.n	8002f24 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fac4 	bl	800149c <LL_ADC_IsDisableOngoing>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fae3 	bl	80014ea <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d014      	beq.n	8002f54 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fb16 	bl	8001560 <LL_ADC_INJ_IsConversionOngoing>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe faac 	bl	800149c <LL_ADC_IsDisableOngoing>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe faf2 	bl	8001538 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d005      	beq.n	8002f66 <ADC_ConversionStop+0x10e>
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d105      	bne.n	8002f6c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002f60:	230c      	movs	r3, #12
 8002f62:	617b      	str	r3, [r7, #20]
        break;
 8002f64:	e005      	b.n	8002f72 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002f66:	2308      	movs	r3, #8
 8002f68:	617b      	str	r3, [r7, #20]
        break;
 8002f6a:	e002      	b.n	8002f72 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	617b      	str	r3, [r7, #20]
        break;
 8002f70:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002f72:	f7fe f855 	bl	8001020 <HAL_GetTick>
 8002f76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f78:	e01b      	b.n	8002fb2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002f7a:	f7fe f851 	bl	8001020 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d914      	bls.n	8002fb2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	f043 0210 	orr.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e007      	b.n	8002fc2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1dc      	bne.n	8002f7a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	a33fffff 	.word	0xa33fffff

08002fd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe fa48 	bl	8001476 <LL_ADC_IsEnabled>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d169      	bne.n	80030c0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <ADC_Enable+0xfc>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e055      	b.n	80030c2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fa03 	bl	8001426 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003020:	482b      	ldr	r0, [pc, #172]	; (80030d0 <ADC_Enable+0x100>)
 8003022:	f7fe f82f 	bl	8001084 <LL_ADC_GetCommonPathInternalCh>
 8003026:	4603      	mov	r3, r0
 8003028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003030:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <ADC_Enable+0x104>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <ADC_Enable+0x108>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800304a:	e002      	b.n	8003052 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3b01      	subs	r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f9      	bne.n	800304c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003058:	f7fd ffe2 	bl	8001020 <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800305e:	e028      	b.n	80030b2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fa06 	bl	8001476 <LL_ADC_IsEnabled>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe f9d6 	bl	8001426 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800307a:	f7fd ffd1 	bl	8001020 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d914      	bls.n	80030b2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d00d      	beq.n	80030b2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	f043 0210 	orr.w	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e007      	b.n	80030c2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d1cf      	bne.n	8003060 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	8000003f 	.word	0x8000003f
 80030d0:	50040300 	.word	0x50040300
 80030d4:	20000000 	.word	0x20000000
 80030d8:	053e2d63 	.word	0x053e2d63

080030dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe f9d7 	bl	800149c <LL_ADC_IsDisableOngoing>
 80030ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe f9be 	bl	8001476 <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d047      	beq.n	8003190 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d144      	bne.n	8003190 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030d 	and.w	r3, r3, #13
 8003110:	2b01      	cmp	r3, #1
 8003112:	d10c      	bne.n	800312e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe f998 	bl	800144e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2203      	movs	r2, #3
 8003124:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003126:	f7fd ff7b 	bl	8001020 <HAL_GetTick>
 800312a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800312c:	e029      	b.n	8003182 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	f043 0210 	orr.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	f043 0201 	orr.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e023      	b.n	8003192 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800314a:	f7fd ff69 	bl	8001020 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d914      	bls.n	8003182 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f043 0210 	orr.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e007      	b.n	8003192 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1dc      	bne.n	800314a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d14b      	bne.n	800324c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d021      	beq.n	8003212 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd ffcc 	bl	8001170 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d032      	beq.n	8003244 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d12b      	bne.n	8003244 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11f      	bne.n	8003244 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	f043 0201 	orr.w	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	655a      	str	r2, [r3, #84]	; 0x54
 8003210:	e018      	b.n	8003244 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d111      	bne.n	8003244 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7fe ffd7 	bl	80021f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800324a:	e00e      	b.n	800326a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7fe ffeb 	bl	8002234 <HAL_ADC_ErrorCallback>
}
 800325e:	e004      	b.n	800326a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7fe ffc3 	bl	800220c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7fe ffbd 	bl	8002234 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <LL_ADC_IsEnabled>:
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <LL_ADC_IsEnabled+0x18>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_ADC_IsEnabled+0x1a>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_ADC_REG_IsConversionOngoing>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d101      	bne.n	8003300 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b09f      	sub	sp, #124	; 0x7c
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800338e:	2302      	movs	r3, #2
 8003390:	e089      	b.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800339a:	2300      	movs	r3, #0
 800339c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800339e:	2300      	movs	r3, #0
 80033a0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a42      	ldr	r2, [pc, #264]	; (80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d102      	bne.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033ac:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	e001      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e068      	b.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff86 	bl	80032e8 <LL_ADC_REG_IsConversionOngoing>
 80033dc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff ff80 	bl	80032e8 <LL_ADC_REG_IsConversionOngoing>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d14a      	bne.n	8003484 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d147      	bne.n	8003484 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033f4:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80033f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d027      	beq.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003412:	035b      	lsls	r3, r3, #13
 8003414:	430b      	orrs	r3, r1
 8003416:	431a      	orrs	r2, r3
 8003418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800341c:	4824      	ldr	r0, [pc, #144]	; (80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800341e:	f7ff ff50 	bl	80032c2 <LL_ADC_IsEnabled>
 8003422:	4604      	mov	r4, r0
 8003424:	4823      	ldr	r0, [pc, #140]	; (80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003426:	f7ff ff4c 	bl	80032c2 <LL_ADC_IsEnabled>
 800342a:	4603      	mov	r3, r0
 800342c:	4323      	orrs	r3, r4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d132      	bne.n	8003498 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800343a:	f023 030f 	bic.w	r3, r3, #15
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	6811      	ldr	r1, [r2, #0]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	6892      	ldr	r2, [r2, #8]
 8003446:	430a      	orrs	r2, r1
 8003448:	431a      	orrs	r2, r3
 800344a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800344e:	e023      	b.n	8003498 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800345c:	4814      	ldr	r0, [pc, #80]	; (80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800345e:	f7ff ff30 	bl	80032c2 <LL_ADC_IsEnabled>
 8003462:	4604      	mov	r4, r0
 8003464:	4813      	ldr	r0, [pc, #76]	; (80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003466:	f7ff ff2c 	bl	80032c2 <LL_ADC_IsEnabled>
 800346a:	4603      	mov	r3, r0
 800346c:	4323      	orrs	r3, r4
 800346e:	2b00      	cmp	r3, #0
 8003470:	d112      	bne.n	8003498 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800347a:	f023 030f 	bic.w	r3, r3, #15
 800347e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003480:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003482:	e009      	b.n	8003498 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003496:	e000      	b.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003498:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	377c      	adds	r7, #124	; 0x7c
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd90      	pop	{r4, r7, pc}
 80034ae:	bf00      	nop
 80034b0:	50040000 	.word	0x50040000
 80034b4:	50040100 	.word	0x50040100
 80034b8:	50040300 	.word	0x50040300

080034bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ee:	4a04      	ldr	r2, [pc, #16]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60d3      	str	r3, [r2, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <__NVIC_GetPriorityGrouping+0x18>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0307 	and.w	r3, r3, #7
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4907      	ldr	r1, [pc, #28]	; (8003558 <__NVIC_EnableIRQ+0x38>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000e100 	.word	0xe000e100

0800355c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db12      	blt.n	8003594 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	490a      	ldr	r1, [pc, #40]	; (80035a0 <__NVIC_DisableIRQ+0x44>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2001      	movs	r0, #1
 800357e:	fa00 f202 	lsl.w	r2, r0, r2
 8003582:	3320      	adds	r3, #32
 8003584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003588:	f3bf 8f4f 	dsb	sy
}
 800358c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800358e:	f3bf 8f6f 	isb	sy
}
 8003592:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	; (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	; (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	; 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	; 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f7ff ff8e 	bl	80035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff05 	bl	80034bc <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036cc:	f7ff ff1a 	bl	8003504 <__NVIC_GetPriorityGrouping>
 80036d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff8e 	bl	80035f8 <NVIC_EncodePriority>
 80036dc:	4602      	mov	r2, r0
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff5d 	bl	80035a4 <__NVIC_SetPriority>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff0d 	bl	8003520 <__NVIC_EnableIRQ>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff1d 	bl	800355c <__NVIC_DisableIRQ>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff ff94 	bl	8003660 <SysTick_Config>
 8003738:	4603      	mov	r3, r0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e098      	b.n	8003888 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <HAL_DMA_Init+0x150>)
 800375e:	429a      	cmp	r2, r3
 8003760:	d80f      	bhi.n	8003782 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <HAL_DMA_Init+0x154>)
 800376a:	4413      	add	r3, r2
 800376c:	4a4b      	ldr	r2, [pc, #300]	; (800389c <HAL_DMA_Init+0x158>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	009a      	lsls	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a48      	ldr	r2, [pc, #288]	; (80038a0 <HAL_DMA_Init+0x15c>)
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
 8003780:	e00e      	b.n	80037a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	4b46      	ldr	r3, [pc, #280]	; (80038a4 <HAL_DMA_Init+0x160>)
 800378a:	4413      	add	r3, r2
 800378c:	4a43      	ldr	r2, [pc, #268]	; (800389c <HAL_DMA_Init+0x158>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	009a      	lsls	r2, r3, #2
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a42      	ldr	r2, [pc, #264]	; (80038a8 <HAL_DMA_Init+0x164>)
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037fa:	d039      	beq.n	8003870 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	4a27      	ldr	r2, [pc, #156]	; (80038a0 <HAL_DMA_Init+0x15c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d11a      	bne.n	800383c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <HAL_DMA_Init+0x168>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f003 031c 	and.w	r3, r3, #28
 8003812:	210f      	movs	r1, #15
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	4924      	ldr	r1, [pc, #144]	; (80038ac <HAL_DMA_Init+0x168>)
 800381c:	4013      	ands	r3, r2
 800381e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003820:	4b22      	ldr	r3, [pc, #136]	; (80038ac <HAL_DMA_Init+0x168>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	f003 031c 	and.w	r3, r3, #28
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	491d      	ldr	r1, [pc, #116]	; (80038ac <HAL_DMA_Init+0x168>)
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
 800383a:	e019      	b.n	8003870 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800383c:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <HAL_DMA_Init+0x16c>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	f003 031c 	and.w	r3, r3, #28
 8003848:	210f      	movs	r1, #15
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	4917      	ldr	r1, [pc, #92]	; (80038b0 <HAL_DMA_Init+0x16c>)
 8003852:	4013      	ands	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003856:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <HAL_DMA_Init+0x16c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f003 031c 	and.w	r3, r3, #28
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	4911      	ldr	r1, [pc, #68]	; (80038b0 <HAL_DMA_Init+0x16c>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40020407 	.word	0x40020407
 8003898:	bffdfff8 	.word	0xbffdfff8
 800389c:	cccccccd 	.word	0xcccccccd
 80038a0:	40020000 	.word	0x40020000
 80038a4:	bffdfbf8 	.word	0xbffdfbf8
 80038a8:	40020400 	.word	0x40020400
 80038ac:	400200a8 	.word	0x400200a8
 80038b0:	400204a8 	.word	0x400204a8

080038b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e072      	b.n	80039ac <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <HAL_DMA_DeInit+0x104>)
 80038de:	429a      	cmp	r2, r3
 80038e0:	d80f      	bhi.n	8003902 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <HAL_DMA_DeInit+0x108>)
 80038ea:	4413      	add	r3, r2
 80038ec:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <HAL_DMA_DeInit+0x10c>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	009a      	lsls	r2, r3, #2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a31      	ldr	r2, [pc, #196]	; (80039c4 <HAL_DMA_DeInit+0x110>)
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003900:	e00e      	b.n	8003920 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <HAL_DMA_DeInit+0x114>)
 800390a:	4413      	add	r3, r2
 800390c:	4a2c      	ldr	r2, [pc, #176]	; (80039c0 <HAL_DMA_DeInit+0x10c>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	009a      	lsls	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <HAL_DMA_DeInit+0x118>)
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	f003 021c 	and.w	r2, r3, #28
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	2101      	movs	r1, #1
 8003936:	fa01 f202 	lsl.w	r2, r1, r2
 800393a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <HAL_DMA_DeInit+0x110>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d10d      	bne.n	8003962 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003946:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <HAL_DMA_DeInit+0x11c>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f003 031c 	and.w	r3, r3, #28
 8003952:	210f      	movs	r1, #15
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	491d      	ldr	r1, [pc, #116]	; (80039d0 <HAL_DMA_DeInit+0x11c>)
 800395c:	4013      	ands	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
 8003960:	e00c      	b.n	800397c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003962:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <HAL_DMA_DeInit+0x120>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f003 031c 	and.w	r3, r3, #28
 800396e:	210f      	movs	r1, #15
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	4917      	ldr	r1, [pc, #92]	; (80039d4 <HAL_DMA_DeInit+0x120>)
 8003978:	4013      	ands	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40020407 	.word	0x40020407
 80039bc:	bffdfff8 	.word	0xbffdfff8
 80039c0:	cccccccd 	.word	0xcccccccd
 80039c4:	40020000 	.word	0x40020000
 80039c8:	bffdfbf8 	.word	0xbffdfbf8
 80039cc:	40020400 	.word	0x40020400
 80039d0:	400200a8 	.word	0x400200a8
 80039d4:	400204a8 	.word	0x400204a8

080039d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_DMA_Start_IT+0x20>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e04b      	b.n	8003a90 <HAL_DMA_Start_IT+0xb8>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d13a      	bne.n	8003a82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f95f 	bl	8003cf4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 020e 	orr.w	r2, r2, #14
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e00f      	b.n	8003a70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0204 	bic.w	r2, r2, #4
 8003a5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 020a 	orr.w	r2, r2, #10
 8003a6e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e005      	b.n	8003a8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d008      	beq.n	8003ac2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e022      	b.n	8003b08 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 020e 	bic.w	r2, r2, #14
 8003ad0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f003 021c 	and.w	r2, r3, #28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2101      	movs	r1, #1
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d005      	beq.n	8003b38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2204      	movs	r2, #4
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
 8003b36:	e029      	b.n	8003b8c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 020e 	bic.w	r2, r2, #14
 8003b46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f003 021c 	and.w	r2, r3, #28
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
    }
  }
  return status;
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	f003 031c 	and.w	r3, r3, #28
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d026      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x7a>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d021      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d107      	bne.n	8003bea <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0204 	bic.w	r2, r2, #4
 8003be8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f003 021c 	and.w	r2, r3, #28
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	2104      	movs	r1, #4
 8003bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d071      	beq.n	8003cea <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003c0e:	e06c      	b.n	8003cea <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f003 031c 	and.w	r3, r3, #28
 8003c18:	2202      	movs	r2, #2
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d02e      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xec>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d029      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 020a 	bic.w	r2, r2, #10
 8003c4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f003 021c 	and.w	r2, r3, #28
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	2102      	movs	r1, #2
 8003c62:	fa01 f202 	lsl.w	r2, r1, r2
 8003c66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d038      	beq.n	8003cea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c80:	e033      	b.n	8003cea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	f003 031c 	and.w	r3, r3, #28
 8003c8a:	2208      	movs	r2, #8
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d02a      	beq.n	8003cec <HAL_DMA_IRQHandler+0x156>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d025      	beq.n	8003cec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 020e 	bic.w	r2, r2, #14
 8003cae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	f003 021c 	and.w	r2, r3, #28
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cea:	bf00      	nop
 8003cec:	bf00      	nop
}
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	f003 021c 	and.w	r2, r3, #28
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f202 	lsl.w	r2, r1, r2
 8003d14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d108      	bne.n	8003d38 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d36:	e007      	b.n	8003d48 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	60da      	str	r2, [r3, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d62:	e14e      	b.n	8004002 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	2101      	movs	r1, #1
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d70:	4013      	ands	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8140 	beq.w	8003ffc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d005      	beq.n	8003d94 <HAL_GPIO_Init+0x40>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d130      	bne.n	8003df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dca:	2201      	movs	r2, #1
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	f003 0201 	and.w	r2, r3, #1
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d017      	beq.n	8003e32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d123      	bne.n	8003e86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	08da      	lsrs	r2, r3, #3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3208      	adds	r2, #8
 8003e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	220f      	movs	r2, #15
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	08da      	lsrs	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3208      	adds	r2, #8
 8003e80:	6939      	ldr	r1, [r7, #16]
 8003e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	2203      	movs	r2, #3
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 0203 	and.w	r2, r3, #3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 809a 	beq.w	8003ffc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec8:	4b55      	ldr	r3, [pc, #340]	; (8004020 <HAL_GPIO_Init+0x2cc>)
 8003eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ecc:	4a54      	ldr	r2, [pc, #336]	; (8004020 <HAL_GPIO_Init+0x2cc>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ed4:	4b52      	ldr	r3, [pc, #328]	; (8004020 <HAL_GPIO_Init+0x2cc>)
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ee0:	4a50      	ldr	r2, [pc, #320]	; (8004024 <HAL_GPIO_Init+0x2d0>)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4013      	ands	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f0a:	d013      	beq.n	8003f34 <HAL_GPIO_Init+0x1e0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a46      	ldr	r2, [pc, #280]	; (8004028 <HAL_GPIO_Init+0x2d4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00d      	beq.n	8003f30 <HAL_GPIO_Init+0x1dc>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a45      	ldr	r2, [pc, #276]	; (800402c <HAL_GPIO_Init+0x2d8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <HAL_GPIO_Init+0x1d8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a44      	ldr	r2, [pc, #272]	; (8004030 <HAL_GPIO_Init+0x2dc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_GPIO_Init+0x1d4>
 8003f24:	2303      	movs	r3, #3
 8003f26:	e006      	b.n	8003f36 <HAL_GPIO_Init+0x1e2>
 8003f28:	2307      	movs	r3, #7
 8003f2a:	e004      	b.n	8003f36 <HAL_GPIO_Init+0x1e2>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e002      	b.n	8003f36 <HAL_GPIO_Init+0x1e2>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_GPIO_Init+0x1e2>
 8003f34:	2300      	movs	r3, #0
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	f002 0203 	and.w	r2, r2, #3
 8003f3c:	0092      	lsls	r2, r2, #2
 8003f3e:	4093      	lsls	r3, r2
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f46:	4937      	ldr	r1, [pc, #220]	; (8004024 <HAL_GPIO_Init+0x2d0>)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f54:	4b37      	ldr	r3, [pc, #220]	; (8004034 <HAL_GPIO_Init+0x2e0>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f78:	4a2e      	ldr	r2, [pc, #184]	; (8004034 <HAL_GPIO_Init+0x2e0>)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f7e:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <HAL_GPIO_Init+0x2e0>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fa2:	4a24      	ldr	r2, [pc, #144]	; (8004034 <HAL_GPIO_Init+0x2e0>)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fa8:	4b22      	ldr	r3, [pc, #136]	; (8004034 <HAL_GPIO_Init+0x2e0>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fcc:	4a19      	ldr	r2, [pc, #100]	; (8004034 <HAL_GPIO_Init+0x2e0>)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003fd2:	4b18      	ldr	r3, [pc, #96]	; (8004034 <HAL_GPIO_Init+0x2e0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ff6:	4a0f      	ldr	r2, [pc, #60]	; (8004034 <HAL_GPIO_Init+0x2e0>)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3301      	adds	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	f47f aea9 	bne.w	8003d64 <HAL_GPIO_Init+0x10>
  }
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40021000 	.word	0x40021000
 8004024:	40010000 	.word	0x40010000
 8004028:	48000400 	.word	0x48000400
 800402c:	48000800 	.word	0x48000800
 8004030:	48000c00 	.word	0x48000c00
 8004034:	40010400 	.word	0x40010400

08004038 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004046:	e0b1      	b.n	80041ac <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004048:	2201      	movs	r2, #1
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80a4 	beq.w	80041a6 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800405e:	4a5a      	ldr	r2, [pc, #360]	; (80041c8 <HAL_GPIO_DeInit+0x190>)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	3302      	adds	r3, #2
 8004066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004086:	d013      	beq.n	80040b0 <HAL_GPIO_DeInit+0x78>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a50      	ldr	r2, [pc, #320]	; (80041cc <HAL_GPIO_DeInit+0x194>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00d      	beq.n	80040ac <HAL_GPIO_DeInit+0x74>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a4f      	ldr	r2, [pc, #316]	; (80041d0 <HAL_GPIO_DeInit+0x198>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d007      	beq.n	80040a8 <HAL_GPIO_DeInit+0x70>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a4e      	ldr	r2, [pc, #312]	; (80041d4 <HAL_GPIO_DeInit+0x19c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_GPIO_DeInit+0x6c>
 80040a0:	2303      	movs	r3, #3
 80040a2:	e006      	b.n	80040b2 <HAL_GPIO_DeInit+0x7a>
 80040a4:	2307      	movs	r3, #7
 80040a6:	e004      	b.n	80040b2 <HAL_GPIO_DeInit+0x7a>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e002      	b.n	80040b2 <HAL_GPIO_DeInit+0x7a>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_GPIO_DeInit+0x7a>
 80040b0:	2300      	movs	r3, #0
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	f002 0203 	and.w	r2, r2, #3
 80040b8:	0092      	lsls	r2, r2, #2
 80040ba:	4093      	lsls	r3, r2
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d132      	bne.n	8004128 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80040c2:	4b45      	ldr	r3, [pc, #276]	; (80041d8 <HAL_GPIO_DeInit+0x1a0>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	4943      	ldr	r1, [pc, #268]	; (80041d8 <HAL_GPIO_DeInit+0x1a0>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80040d0:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <HAL_GPIO_DeInit+0x1a0>)
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	493f      	ldr	r1, [pc, #252]	; (80041d8 <HAL_GPIO_DeInit+0x1a0>)
 80040da:	4013      	ands	r3, r2
 80040dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80040de:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <HAL_GPIO_DeInit+0x1a0>)
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	493c      	ldr	r1, [pc, #240]	; (80041d8 <HAL_GPIO_DeInit+0x1a0>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80040ec:	4b3a      	ldr	r3, [pc, #232]	; (80041d8 <HAL_GPIO_DeInit+0x1a0>)
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	4938      	ldr	r1, [pc, #224]	; (80041d8 <HAL_GPIO_DeInit+0x1a0>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	220f      	movs	r2, #15
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800410a:	4a2f      	ldr	r2, [pc, #188]	; (80041c8 <HAL_GPIO_DeInit+0x190>)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	3302      	adds	r3, #2
 8004112:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	43da      	mvns	r2, r3
 800411a:	482b      	ldr	r0, [pc, #172]	; (80041c8 <HAL_GPIO_DeInit+0x190>)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	089b      	lsrs	r3, r3, #2
 8004120:	400a      	ands	r2, r1
 8004122:	3302      	adds	r3, #2
 8004124:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	2103      	movs	r1, #3
 8004132:	fa01 f303 	lsl.w	r3, r1, r3
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	08da      	lsrs	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3208      	adds	r2, #8
 8004144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	220f      	movs	r2, #15
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	08d2      	lsrs	r2, r2, #3
 800415c:	4019      	ands	r1, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3208      	adds	r2, #8
 8004162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	2103      	movs	r1, #3
 8004170:	fa01 f303 	lsl.w	r3, r1, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	401a      	ands	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	2101      	movs	r1, #1
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	2103      	movs	r1, #3
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	401a      	ands	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3301      	adds	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f47f af47 	bne.w	8004048 <HAL_GPIO_DeInit+0x10>
  }
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40010000 	.word	0x40010000
 80041cc:	48000400 	.word	0x48000400
 80041d0:	48000800 	.word	0x48000800
 80041d4:	48000c00 	.word	0x48000c00
 80041d8:	40010400 	.word	0x40010400

080041dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	887b      	ldrh	r3, [r7, #2]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	e001      	b.n	80041fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
 8004218:	4613      	mov	r3, r2
 800421a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800421c:	787b      	ldrb	r3, [r7, #1]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004222:	887a      	ldrh	r2, [r7, #2]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004228:	e002      	b.n	8004230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004252:	4a05      	ldr	r2, [pc, #20]	; (8004268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fc f938 	bl	80004d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40010400 	.word	0x40010400

0800426c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_PWREx_GetVoltageRange+0x18>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40007000 	.word	0x40007000

08004288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004296:	d130      	bne.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004298:	4b23      	ldr	r3, [pc, #140]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d038      	beq.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2232      	movs	r2, #50	; 0x32
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	0c9b      	lsrs	r3, r3, #18
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042cc:	e002      	b.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e0:	d102      	bne.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f2      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	d110      	bne.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004306:	d007      	beq.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004308:	4b07      	ldr	r3, [pc, #28]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004310:	4a05      	ldr	r2, [pc, #20]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004316:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40007000 	.word	0x40007000
 800432c:	20000000 	.word	0x20000000
 8004330:	431bde83 	.word	0x431bde83

08004334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f000 bc4f 	b.w	8004be6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004348:	4b97      	ldr	r3, [pc, #604]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004352:	4b95      	ldr	r3, [pc, #596]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80e6 	beq.w	8004536 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <HAL_RCC_OscConfig+0x4c>
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	f040 808d 	bne.w	8004492 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	2b01      	cmp	r3, #1
 800437c:	f040 8089 	bne.w	8004492 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004380:	4b89      	ldr	r3, [pc, #548]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d006      	beq.n	800439a <HAL_RCC_OscConfig+0x66>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d102      	bne.n	800439a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f000 bc26 	b.w	8004be6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800439e:	4b82      	ldr	r3, [pc, #520]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <HAL_RCC_OscConfig+0x80>
 80043aa:	4b7f      	ldr	r3, [pc, #508]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b2:	e005      	b.n	80043c0 <HAL_RCC_OscConfig+0x8c>
 80043b4:	4b7c      	ldr	r3, [pc, #496]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d224      	bcs.n	800440e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fdd9 	bl	8004f80 <RCC_SetFlashLatencyFromMSIRange>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f000 bc06 	b.w	8004be6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043da:	4b73      	ldr	r3, [pc, #460]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a72      	ldr	r2, [pc, #456]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043e0:	f043 0308 	orr.w	r3, r3, #8
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4b70      	ldr	r3, [pc, #448]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	496d      	ldr	r1, [pc, #436]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043f8:	4b6b      	ldr	r3, [pc, #428]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	4968      	ldr	r1, [pc, #416]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004408:	4313      	orrs	r3, r2
 800440a:	604b      	str	r3, [r1, #4]
 800440c:	e025      	b.n	800445a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440e:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a65      	ldr	r2, [pc, #404]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004414:	f043 0308 	orr.w	r3, r3, #8
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b63      	ldr	r3, [pc, #396]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	4960      	ldr	r1, [pc, #384]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442c:	4b5e      	ldr	r3, [pc, #376]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	495b      	ldr	r1, [pc, #364]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 800443c:	4313      	orrs	r3, r2
 800443e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fd98 	bl	8004f80 <RCC_SetFlashLatencyFromMSIRange>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e3c5      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800445a:	f000 fccd 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 800445e:	4602      	mov	r2, r0
 8004460:	4b51      	ldr	r3, [pc, #324]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	4950      	ldr	r1, [pc, #320]	; (80045ac <HAL_RCC_OscConfig+0x278>)
 800446c:	5ccb      	ldrb	r3, [r1, r3]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	fa22 f303 	lsr.w	r3, r2, r3
 8004476:	4a4e      	ldr	r2, [pc, #312]	; (80045b0 <HAL_RCC_OscConfig+0x27c>)
 8004478:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800447a:	4b4e      	ldr	r3, [pc, #312]	; (80045b4 <HAL_RCC_OscConfig+0x280>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc fd7e 	bl	8000f80 <HAL_InitTick>
 8004484:	4603      	mov	r3, r0
 8004486:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d052      	beq.n	8004534 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800448e:	7dfb      	ldrb	r3, [r7, #23]
 8004490:	e3a9      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d032      	beq.n	8004500 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800449a:	4b43      	ldr	r3, [pc, #268]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a42      	ldr	r2, [pc, #264]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044a6:	f7fc fdbb 	bl	8001020 <HAL_GetTick>
 80044aa:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ae:	f7fc fdb7 	bl	8001020 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e392      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c0:	4b39      	ldr	r3, [pc, #228]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044cc:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a35      	ldr	r2, [pc, #212]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044d2:	f043 0308 	orr.w	r3, r3, #8
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	4930      	ldr	r1, [pc, #192]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ea:	4b2f      	ldr	r3, [pc, #188]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	492b      	ldr	r1, [pc, #172]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	604b      	str	r3, [r1, #4]
 80044fe:	e01a      	b.n	8004536 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a28      	ldr	r2, [pc, #160]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800450c:	f7fc fd88 	bl	8001020 <HAL_GetTick>
 8004510:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004514:	f7fc fd84 	bl	8001020 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e35f      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004526:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x1e0>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d073      	beq.n	800462a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d005      	beq.n	8004554 <HAL_RCC_OscConfig+0x220>
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	2b0c      	cmp	r3, #12
 800454c:	d10e      	bne.n	800456c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d10b      	bne.n	800456c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d063      	beq.n	8004628 <HAL_RCC_OscConfig+0x2f4>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d15f      	bne.n	8004628 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e33c      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d106      	bne.n	8004584 <HAL_RCC_OscConfig+0x250>
 8004576:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e025      	b.n	80045d0 <HAL_RCC_OscConfig+0x29c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800458c:	d114      	bne.n	80045b8 <HAL_RCC_OscConfig+0x284>
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a05      	ldr	r2, [pc, #20]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a02      	ldr	r2, [pc, #8]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e013      	b.n	80045d0 <HAL_RCC_OscConfig+0x29c>
 80045a8:	40021000 	.word	0x40021000
 80045ac:	08009ab4 	.word	0x08009ab4
 80045b0:	20000000 	.word	0x20000000
 80045b4:	20000004 	.word	0x20000004
 80045b8:	4b8f      	ldr	r3, [pc, #572]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a8e      	ldr	r2, [pc, #568]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	4b8c      	ldr	r3, [pc, #560]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a8b      	ldr	r2, [pc, #556]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80045ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d013      	beq.n	8004600 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fc fd22 	bl	8001020 <HAL_GetTick>
 80045dc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fc fd1e 	bl	8001020 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	; 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e2f9      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f2:	4b81      	ldr	r3, [pc, #516]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x2ac>
 80045fe:	e014      	b.n	800462a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fc fd0e 	bl	8001020 <HAL_GetTick>
 8004604:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004608:	f7fc fd0a 	bl	8001020 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e2e5      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800461a:	4b77      	ldr	r3, [pc, #476]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x2d4>
 8004626:	e000      	b.n	800462a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d060      	beq.n	80046f8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d005      	beq.n	8004648 <HAL_RCC_OscConfig+0x314>
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d119      	bne.n	8004676 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d116      	bne.n	8004676 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004648:	4b6b      	ldr	r3, [pc, #428]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_RCC_OscConfig+0x32c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e2c2      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	4b65      	ldr	r3, [pc, #404]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	4962      	ldr	r1, [pc, #392]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004674:	e040      	b.n	80046f8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d023      	beq.n	80046c6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467e:	4b5e      	ldr	r3, [pc, #376]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a5d      	ldr	r2, [pc, #372]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fc fcc9 	bl	8001020 <HAL_GetTick>
 800468e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004692:	f7fc fcc5 	bl	8001020 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e2a0      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a4:	4b54      	ldr	r3, [pc, #336]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	494e      	ldr	r1, [pc, #312]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
 80046c4:	e018      	b.n	80046f8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b4c      	ldr	r3, [pc, #304]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a4b      	ldr	r2, [pc, #300]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fc fca5 	bl	8001020 <HAL_GetTick>
 80046d6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046da:	f7fc fca1 	bl	8001020 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e27c      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ec:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f0      	bne.n	80046da <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8082 	beq.w	800480a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d05f      	beq.n	80047ce <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800470e:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 8004710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004714:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	429a      	cmp	r2, r3
 8004722:	d037      	beq.n	8004794 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d006      	beq.n	800473c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e254      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01b      	beq.n	800477e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004746:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474c:	4a2a      	ldr	r2, [pc, #168]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004756:	f7fc fc63 	bl	8001020 <HAL_GetTick>
 800475a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475e:	f7fc fc5f 	bl	8001020 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b11      	cmp	r3, #17
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e23a      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004770:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 8004772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ef      	bne.n	800475e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 8004780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004784:	f023 0210 	bic.w	r2, r3, #16
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	491a      	ldr	r1, [pc, #104]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004794:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fc fc3c 	bl	8001020 <HAL_GetTick>
 80047a8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ac:	f7fc fc38 	bl	8001020 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b11      	cmp	r3, #17
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e213      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047be:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ef      	beq.n	80047ac <HAL_RCC_OscConfig+0x478>
 80047cc:	e01d      	b.n	800480a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d4:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <HAL_RCC_OscConfig+0x4c4>)
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fc fc1f 	bl	8001020 <HAL_GetTick>
 80047e2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e6:	f7fc fc1b 	bl	8001020 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b11      	cmp	r3, #17
 80047f2:	d903      	bls.n	80047fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e1f6      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
 80047f8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047fc:	4ba9      	ldr	r3, [pc, #676]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80047fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1ed      	bne.n	80047e6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 80bd 	beq.w	8004992 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004818:	2300      	movs	r3, #0
 800481a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800481e:	4ba1      	ldr	r3, [pc, #644]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10e      	bne.n	8004848 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	4b9e      	ldr	r3, [pc, #632]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	4a9d      	ldr	r2, [pc, #628]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004834:	6593      	str	r3, [r2, #88]	; 0x58
 8004836:	4b9b      	ldr	r3, [pc, #620]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004848:	4b97      	ldr	r3, [pc, #604]	; (8004aa8 <HAL_RCC_OscConfig+0x774>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d118      	bne.n	8004886 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004854:	4b94      	ldr	r3, [pc, #592]	; (8004aa8 <HAL_RCC_OscConfig+0x774>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a93      	ldr	r2, [pc, #588]	; (8004aa8 <HAL_RCC_OscConfig+0x774>)
 800485a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004860:	f7fc fbde 	bl	8001020 <HAL_GetTick>
 8004864:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004868:	f7fc fbda 	bl	8001020 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e1b5      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487a:	4b8b      	ldr	r3, [pc, #556]	; (8004aa8 <HAL_RCC_OscConfig+0x774>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d02c      	beq.n	80048ec <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004892:	4b84      	ldr	r3, [pc, #528]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a4:	497f      	ldr	r1, [pc, #508]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d010      	beq.n	80048da <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048b8:	4b7a      	ldr	r3, [pc, #488]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	4a79      	ldr	r2, [pc, #484]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80048c0:	f043 0304 	orr.w	r3, r3, #4
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048c8:	4b76      	ldr	r3, [pc, #472]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	4a75      	ldr	r2, [pc, #468]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048d8:	e018      	b.n	800490c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048da:	4b72      	ldr	r3, [pc, #456]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80048dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e0:	4a70      	ldr	r2, [pc, #448]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ea:	e00f      	b.n	800490c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048ec:	4b6d      	ldr	r3, [pc, #436]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	4a6c      	ldr	r2, [pc, #432]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048fc:	4b69      	ldr	r3, [pc, #420]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	4a68      	ldr	r2, [pc, #416]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004904:	f023 0304 	bic.w	r3, r3, #4
 8004908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d016      	beq.n	8004942 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fc fb84 	bl	8001020 <HAL_GetTick>
 8004918:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800491a:	e00a      	b.n	8004932 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491c:	f7fc fb80 	bl	8001020 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	; 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e159      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004932:	4b5c      	ldr	r3, [pc, #368]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0ed      	beq.n	800491c <HAL_RCC_OscConfig+0x5e8>
 8004940:	e01d      	b.n	800497e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004942:	f7fc fb6d 	bl	8001020 <HAL_GetTick>
 8004946:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004948:	e00a      	b.n	8004960 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494a:	f7fc fb69 	bl	8001020 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f241 3288 	movw	r2, #5000	; 0x1388
 8004958:	4293      	cmp	r3, r2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e142      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004960:	4b50      	ldr	r3, [pc, #320]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1ed      	bne.n	800494a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800496e:	4b4d      	ldr	r3, [pc, #308]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	4a4b      	ldr	r2, [pc, #300]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800497a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800497e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004982:	2b01      	cmp	r3, #1
 8004984:	d105      	bne.n	8004992 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004986:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	4a46      	ldr	r2, [pc, #280]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 800498c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004990:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d03c      	beq.n	8004a18 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01c      	beq.n	80049e0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049a6:	4b3f      	ldr	r3, [pc, #252]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80049a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049ac:	4a3d      	ldr	r2, [pc, #244]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b6:	f7fc fb33 	bl	8001020 <HAL_GetTick>
 80049ba:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049be:	f7fc fb2f 	bl	8001020 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e10a      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049d0:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80049d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0ef      	beq.n	80049be <HAL_RCC_OscConfig+0x68a>
 80049de:	e01b      	b.n	8004a18 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049e0:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80049e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049e6:	4a2f      	ldr	r2, [pc, #188]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fc fb16 	bl	8001020 <HAL_GetTick>
 80049f4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049f8:	f7fc fb12 	bl	8001020 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0ed      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a0a:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ef      	bne.n	80049f8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80e1 	beq.w	8004be4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	f040 80b5 	bne.w	8004b96 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a2c:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f003 0203 	and.w	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d124      	bne.n	8004a8a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d11b      	bne.n	8004a8a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d113      	bne.n	8004a8a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d109      	bne.n	8004a8a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	3b01      	subs	r3, #1
 8004a84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d05f      	beq.n	8004b4a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d05a      	beq.n	8004b46 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a90:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a03      	ldr	r2, [pc, #12]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a9c:	f7fc fac0 	bl	8001020 <HAL_GetTick>
 8004aa0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa2:	e00c      	b.n	8004abe <HAL_RCC_OscConfig+0x78a>
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fc fab8 	bl	8001020 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e093      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004abe:	4b4c      	ldr	r3, [pc, #304]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aca:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	4b49      	ldr	r3, [pc, #292]	; (8004bf4 <HAL_RCC_OscConfig+0x8c0>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ada:	3a01      	subs	r2, #1
 8004adc:	0112      	lsls	r2, r2, #4
 8004ade:	4311      	orrs	r1, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ae4:	0212      	lsls	r2, r2, #8
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004aec:	0852      	lsrs	r2, r2, #1
 8004aee:	3a01      	subs	r2, #1
 8004af0:	0552      	lsls	r2, r2, #21
 8004af2:	4311      	orrs	r1, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004af8:	0852      	lsrs	r2, r2, #1
 8004afa:	3a01      	subs	r2, #1
 8004afc:	0652      	lsls	r2, r2, #25
 8004afe:	430a      	orrs	r2, r1
 8004b00:	493b      	ldr	r1, [pc, #236]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b06:	4b3a      	ldr	r3, [pc, #232]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a39      	ldr	r2, [pc, #228]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b10:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b12:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4a36      	ldr	r2, [pc, #216]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b1c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b1e:	f7fc fa7f 	bl	8001020 <HAL_GetTick>
 8004b22:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b26:	f7fc fa7b 	bl	8001020 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e056      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b38:	4b2d      	ldr	r3, [pc, #180]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0f0      	beq.n	8004b26 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b44:	e04e      	b.n	8004be4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e04d      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4a:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d146      	bne.n	8004be4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b56:	4b26      	ldr	r3, [pc, #152]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a25      	ldr	r2, [pc, #148]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b60:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	4a22      	ldr	r2, [pc, #136]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b6c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b6e:	f7fc fa57 	bl	8001020 <HAL_GetTick>
 8004b72:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b76:	f7fc fa53 	bl	8001020 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e02e      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x842>
 8004b94:	e026      	b.n	8004be4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d021      	beq.n	8004be0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9c:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fc fa3a 	bl	8001020 <HAL_GetTick>
 8004bac:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fc fa36 	bl	8001020 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e011      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	4a07      	ldr	r2, [pc, #28]	; (8004bf0 <HAL_RCC_OscConfig+0x8bc>)
 8004bd4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bd8:	f023 0303 	bic.w	r3, r3, #3
 8004bdc:	60d3      	str	r3, [r2, #12]
 8004bde:	e001      	b.n	8004be4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3728      	adds	r7, #40	; 0x28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	f99f808c 	.word	0xf99f808c

08004bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0e7      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b75      	ldr	r3, [pc, #468]	; (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d910      	bls.n	8004c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b72      	ldr	r3, [pc, #456]	; (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 0207 	bic.w	r2, r3, #7
 8004c22:	4970      	ldr	r1, [pc, #448]	; (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2a:	4b6e      	ldr	r3, [pc, #440]	; (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0cf      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d010      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	4b66      	ldr	r3, [pc, #408]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d908      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c58:	4b63      	ldr	r3, [pc, #396]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4960      	ldr	r1, [pc, #384]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d04c      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c7e:	4b5a      	ldr	r3, [pc, #360]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d121      	bne.n	8004cce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0a6      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c96:	4b54      	ldr	r3, [pc, #336]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d115      	bne.n	8004cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e09a      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cae:	4b4e      	ldr	r3, [pc, #312]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e08e      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cbe:	4b4a      	ldr	r3, [pc, #296]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e086      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cce:	4b46      	ldr	r3, [pc, #280]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 0203 	bic.w	r2, r3, #3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4943      	ldr	r1, [pc, #268]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce0:	f7fc f99e 	bl	8001020 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce8:	f7fc f99a 	bl	8001020 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e06e      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	4b3a      	ldr	r3, [pc, #232]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 020c 	and.w	r2, r3, #12
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1eb      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d010      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	4b31      	ldr	r3, [pc, #196]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d208      	bcs.n	8004d3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d2c:	4b2e      	ldr	r3, [pc, #184]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	492b      	ldr	r1, [pc, #172]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3e:	4b29      	ldr	r3, [pc, #164]	; (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d210      	bcs.n	8004d6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4c:	4b25      	ldr	r3, [pc, #148]	; (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f023 0207 	bic.w	r2, r3, #7
 8004d54:	4923      	ldr	r1, [pc, #140]	; (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5c:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d001      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e036      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d7a:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	4918      	ldr	r1, [pc, #96]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d98:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	4910      	ldr	r1, [pc, #64]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dac:	f000 f824 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	490b      	ldr	r1, [pc, #44]	; (8004dec <HAL_RCC_ClockConfig+0x1f4>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc8:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <HAL_RCC_ClockConfig+0x1f8>)
 8004dca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_RCC_ClockConfig+0x1fc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fc f8d5 	bl	8000f80 <HAL_InitTick>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004dda:	7afb      	ldrb	r3, [r7, #11]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40022000 	.word	0x40022000
 8004de8:	40021000 	.word	0x40021000
 8004dec:	08009ab4 	.word	0x08009ab4
 8004df0:	20000000 	.word	0x20000000
 8004df4:	20000004 	.word	0x20000004

08004df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b089      	sub	sp, #36	; 0x24
 8004dfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e06:	4b3e      	ldr	r3, [pc, #248]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e10:	4b3b      	ldr	r3, [pc, #236]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x34>
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b0c      	cmp	r3, #12
 8004e24:	d121      	bne.n	8004e6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d11e      	bne.n	8004e6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e2c:	4b34      	ldr	r3, [pc, #208]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e38:	4b31      	ldr	r3, [pc, #196]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	e005      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e48:	4b2d      	ldr	r3, [pc, #180]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e54:	4a2b      	ldr	r2, [pc, #172]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10d      	bne.n	8004e80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d102      	bne.n	8004e76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e70:	4b25      	ldr	r3, [pc, #148]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e72:	61bb      	str	r3, [r7, #24]
 8004e74:	e004      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e7c:	4b23      	ldr	r3, [pc, #140]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004e7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b0c      	cmp	r3, #12
 8004e84:	d134      	bne.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e86:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0xa6>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d003      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xac>
 8004e9c:	e005      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e9e:	4b1a      	ldr	r3, [pc, #104]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ea0:	617b      	str	r3, [r7, #20]
      break;
 8004ea2:	e005      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ea4:	4b19      	ldr	r3, [pc, #100]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ea6:	617b      	str	r3, [r7, #20]
      break;
 8004ea8:	e002      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	617b      	str	r3, [r7, #20]
      break;
 8004eae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eb0:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	3301      	adds	r3, #1
 8004ebc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ebe:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	fb03 f202 	mul.w	r2, r3, r2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	0e5b      	lsrs	r3, r3, #25
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3724      	adds	r7, #36	; 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
 8004f04:	08009acc 	.word	0x08009acc
 8004f08:	00f42400 	.word	0x00f42400
 8004f0c:	007a1200 	.word	0x007a1200

08004f10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f16:	681b      	ldr	r3, [r3, #0]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000000 	.word	0x20000000

08004f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f2c:	f7ff fff0 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004f30:	4602      	mov	r2, r0
 8004f32:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	4904      	ldr	r1, [pc, #16]	; (8004f50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f3e:	5ccb      	ldrb	r3, [r1, r3]
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	08009ac4 	.word	0x08009ac4

08004f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f58:	f7ff ffda 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	0adb      	lsrs	r3, r3, #11
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	4904      	ldr	r1, [pc, #16]	; (8004f7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f6a:	5ccb      	ldrb	r3, [r1, r3]
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	08009ac4 	.word	0x08009ac4

08004f80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f8c:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f98:	f7ff f968 	bl	800426c <HAL_PWREx_GetVoltageRange>
 8004f9c:	6178      	str	r0, [r7, #20]
 8004f9e:	e014      	b.n	8004fca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fa0:	4b25      	ldr	r3, [pc, #148]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	4a24      	ldr	r2, [pc, #144]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004faa:	6593      	str	r3, [r2, #88]	; 0x58
 8004fac:	4b22      	ldr	r3, [pc, #136]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fb8:	f7ff f958 	bl	800426c <HAL_PWREx_GetVoltageRange>
 8004fbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fbe:	4b1e      	ldr	r3, [pc, #120]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd0:	d10b      	bne.n	8004fea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b80      	cmp	r3, #128	; 0x80
 8004fd6:	d919      	bls.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2ba0      	cmp	r3, #160	; 0xa0
 8004fdc:	d902      	bls.n	8004fe4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fde:	2302      	movs	r3, #2
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	e013      	b.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	e010      	b.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b80      	cmp	r3, #128	; 0x80
 8004fee:	d902      	bls.n	8004ff6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	e00a      	b.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b80      	cmp	r3, #128	; 0x80
 8004ffa:	d102      	bne.n	8005002 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	e004      	b.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b70      	cmp	r3, #112	; 0x70
 8005006:	d101      	bne.n	800500c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005008:	2301      	movs	r3, #1
 800500a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 0207 	bic.w	r2, r3, #7
 8005014:	4909      	ldr	r1, [pc, #36]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	40022000 	.word	0x40022000

08005040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005048:	2300      	movs	r3, #0
 800504a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800504c:	2300      	movs	r3, #0
 800504e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 809e 	beq.w	800519a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800505e:	2300      	movs	r3, #0
 8005060:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005062:	4b46      	ldr	r3, [pc, #280]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00d      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005078:	4b40      	ldr	r3, [pc, #256]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	4a3f      	ldr	r2, [pc, #252]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800507e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005082:	6593      	str	r3, [r2, #88]	; 0x58
 8005084:	4b3d      	ldr	r3, [pc, #244]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005090:	2301      	movs	r3, #1
 8005092:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005094:	4b3a      	ldr	r3, [pc, #232]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a39      	ldr	r2, [pc, #228]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050a0:	f7fb ffbe 	bl	8001020 <HAL_GetTick>
 80050a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050a6:	e009      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a8:	f7fb ffba 	bl	8001020 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d902      	bls.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	74fb      	strb	r3, [r7, #19]
        break;
 80050ba:	e005      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050bc:	4b30      	ldr	r3, [pc, #192]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ef      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80050c8:	7cfb      	ldrb	r3, [r7, #19]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d15a      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050ce:	4b2b      	ldr	r3, [pc, #172]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01e      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d019      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050ea:	4b24      	ldr	r3, [pc, #144]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050f6:	4b21      	ldr	r3, [pc, #132]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	4a1f      	ldr	r2, [pc, #124]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80050fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005106:	4b1d      	ldr	r3, [pc, #116]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	4a1b      	ldr	r2, [pc, #108]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800510e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005116:	4a19      	ldr	r2, [pc, #100]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d016      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fb ff7a 	bl	8001020 <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800512e:	e00b      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005130:	f7fb ff76 	bl	8001020 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f241 3288 	movw	r2, #5000	; 0x1388
 800513e:	4293      	cmp	r3, r2
 8005140:	d902      	bls.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	74fb      	strb	r3, [r7, #19]
            break;
 8005146:	e006      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0ec      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005156:	7cfb      	ldrb	r3, [r7, #19]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10b      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800515c:	4b07      	ldr	r3, [pc, #28]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	4904      	ldr	r1, [pc, #16]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005172:	e009      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	74bb      	strb	r3, [r7, #18]
 8005178:	e006      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000
 8005180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005188:	7c7b      	ldrb	r3, [r7, #17]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d105      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518e:	4b6e      	ldr	r3, [pc, #440]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005192:	4a6d      	ldr	r2, [pc, #436]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005198:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051a6:	4b68      	ldr	r3, [pc, #416]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f023 0203 	bic.w	r2, r3, #3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4964      	ldr	r1, [pc, #400]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051c8:	4b5f      	ldr	r3, [pc, #380]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f023 020c 	bic.w	r2, r3, #12
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	495c      	ldr	r1, [pc, #368]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051ea:	4b57      	ldr	r3, [pc, #348]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4953      	ldr	r1, [pc, #332]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800520c:	4b4e      	ldr	r3, [pc, #312]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	494b      	ldr	r1, [pc, #300]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800522e:	4b46      	ldr	r3, [pc, #280]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	4942      	ldr	r1, [pc, #264]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005250:	4b3d      	ldr	r3, [pc, #244]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	493a      	ldr	r1, [pc, #232]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005272:	4b35      	ldr	r3, [pc, #212]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	4931      	ldr	r1, [pc, #196]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005294:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	4929      	ldr	r1, [pc, #164]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052b6:	4b24      	ldr	r3, [pc, #144]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	4920      	ldr	r1, [pc, #128]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d015      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052d8:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	4918      	ldr	r1, [pc, #96]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052f6:	d105      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f8:	4b13      	ldr	r3, [pc, #76]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4a12      	ldr	r2, [pc, #72]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005302:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d015      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	490a      	ldr	r1, [pc, #40]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800532e:	d105      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a04      	ldr	r2, [pc, #16]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800533a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800533c:	7cbb      	ldrb	r3, [r7, #18]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000

0800534c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e049      	b.n	80053f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fb fb9c 	bl	8000ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f001 fa08 	bl	80067a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	f241 1311 	movw	r3, #4369	; 0x1111
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <HAL_TIM_Base_Stop+0x38>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	f240 4344 	movw	r3, #1092	; 0x444
 800541c:	4013      	ands	r3, r2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d107      	bne.n	8005432 <HAL_TIM_Base_Stop+0x38>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d001      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e03b      	b.n	80054d8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a19      	ldr	r2, [pc, #100]	; (80054e4 <HAL_TIM_Base_Start_IT+0x9c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_TIM_Base_Start_IT+0x4e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d004      	beq.n	8005496 <HAL_TIM_Base_Start_IT+0x4e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d115      	bne.n	80054c2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	4b13      	ldr	r3, [pc, #76]	; (80054ec <HAL_TIM_Base_Start_IT+0xa4>)
 800549e:	4013      	ands	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b06      	cmp	r3, #6
 80054a6:	d015      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x8c>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ae:	d011      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c0:	e008      	b.n	80054d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0201 	orr.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	e000      	b.n	80054d6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40014000 	.word	0x40014000
 80054ec:	00010007 	.word	0x00010007

080054f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0201 	bic.w	r2, r2, #1
 8005506:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a1a      	ldr	r2, [r3, #32]
 800550e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10f      	bne.n	8005538 <HAL_TIM_Base_Stop_IT+0x48>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6a1a      	ldr	r2, [r3, #32]
 800551e:	f240 4344 	movw	r3, #1092	; 0x444
 8005522:	4013      	ands	r3, r2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d107      	bne.n	8005538 <HAL_TIM_Base_Stop_IT+0x48>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e049      	b.n	80055f4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f841 	bl	80055fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3304      	adds	r3, #4
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f001 f907 	bl	80067a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_OC_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                       uint16_t Length)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <HAL_TIM_OC_Start_DMA+0x2c>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	bf0c      	ite	eq
 8005634:	2301      	moveq	r3, #1
 8005636:	2300      	movne	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e03c      	b.n	80056b6 <HAL_TIM_OC_Start_DMA+0xa6>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b04      	cmp	r3, #4
 8005640:	d109      	bne.n	8005656 <HAL_TIM_OC_Start_DMA+0x46>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	e02f      	b.n	80056b6 <HAL_TIM_OC_Start_DMA+0xa6>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b08      	cmp	r3, #8
 800565a:	d109      	bne.n	8005670 <HAL_TIM_OC_Start_DMA+0x60>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	e022      	b.n	80056b6 <HAL_TIM_OC_Start_DMA+0xa6>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b0c      	cmp	r3, #12
 8005674:	d109      	bne.n	800568a <HAL_TIM_OC_Start_DMA+0x7a>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	bf0c      	ite	eq
 8005682:	2301      	moveq	r3, #1
 8005684:	2300      	movne	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	e015      	b.n	80056b6 <HAL_TIM_OC_Start_DMA+0xa6>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b10      	cmp	r3, #16
 800568e:	d109      	bne.n	80056a4 <HAL_TIM_OC_Start_DMA+0x94>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	e008      	b.n	80056b6 <HAL_TIM_OC_Start_DMA+0xa6>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	bf0c      	ite	eq
 80056b0:	2301      	moveq	r3, #1
 80056b2:	2300      	movne	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_TIM_OC_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
 80056bc:	e18d      	b.n	80059da <HAL_TIM_OC_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d109      	bne.n	80056d8 <HAL_TIM_OC_Start_DMA+0xc8>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	e03c      	b.n	8005752 <HAL_TIM_OC_Start_DMA+0x142>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d109      	bne.n	80056f2 <HAL_TIM_OC_Start_DMA+0xe2>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	e02f      	b.n	8005752 <HAL_TIM_OC_Start_DMA+0x142>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d109      	bne.n	800570c <HAL_TIM_OC_Start_DMA+0xfc>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	e022      	b.n	8005752 <HAL_TIM_OC_Start_DMA+0x142>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b0c      	cmp	r3, #12
 8005710:	d109      	bne.n	8005726 <HAL_TIM_OC_Start_DMA+0x116>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	bf0c      	ite	eq
 800571e:	2301      	moveq	r3, #1
 8005720:	2300      	movne	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e015      	b.n	8005752 <HAL_TIM_OC_Start_DMA+0x142>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b10      	cmp	r3, #16
 800572a:	d109      	bne.n	8005740 <HAL_TIM_OC_Start_DMA+0x130>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	bf0c      	ite	eq
 8005738:	2301      	moveq	r3, #1
 800573a:	2300      	movne	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	e008      	b.n	8005752 <HAL_TIM_OC_Start_DMA+0x142>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	bf0c      	ite	eq
 800574c:	2301      	moveq	r3, #1
 800574e:	2300      	movne	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d034      	beq.n	80057c0 <HAL_TIM_OC_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_TIM_OC_Start_DMA+0x152>
 800575c:	887b      	ldrh	r3, [r7, #2]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_TIM_OC_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e139      	b.n	80059da <HAL_TIM_OC_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d104      	bne.n	8005776 <HAL_TIM_OC_Start_DMA+0x166>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005774:	e026      	b.n	80057c4 <HAL_TIM_OC_Start_DMA+0x1b4>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b04      	cmp	r3, #4
 800577a:	d104      	bne.n	8005786 <HAL_TIM_OC_Start_DMA+0x176>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005784:	e01e      	b.n	80057c4 <HAL_TIM_OC_Start_DMA+0x1b4>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b08      	cmp	r3, #8
 800578a:	d104      	bne.n	8005796 <HAL_TIM_OC_Start_DMA+0x186>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005794:	e016      	b.n	80057c4 <HAL_TIM_OC_Start_DMA+0x1b4>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b0c      	cmp	r3, #12
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_OC_Start_DMA+0x196>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057a4:	e00e      	b.n	80057c4 <HAL_TIM_OC_Start_DMA+0x1b4>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_OC_Start_DMA+0x1a6>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b4:	e006      	b.n	80057c4 <HAL_TIM_OC_Start_DMA+0x1b4>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2202      	movs	r2, #2
 80057ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057be:	e001      	b.n	80057c4 <HAL_TIM_OC_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e10a      	b.n	80059da <HAL_TIM_OC_Start_DMA+0x3ca>
  }

  switch (Channel)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	f200 80ae 	bhi.w	8005928 <HAL_TIM_OC_Start_DMA+0x318>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <HAL_TIM_OC_Start_DMA+0x1c4>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	08005809 	.word	0x08005809
 80057d8:	08005929 	.word	0x08005929
 80057dc:	08005929 	.word	0x08005929
 80057e0:	08005929 	.word	0x08005929
 80057e4:	08005851 	.word	0x08005851
 80057e8:	08005929 	.word	0x08005929
 80057ec:	08005929 	.word	0x08005929
 80057f0:	08005929 	.word	0x08005929
 80057f4:	08005899 	.word	0x08005899
 80057f8:	08005929 	.word	0x08005929
 80057fc:	08005929 	.word	0x08005929
 8005800:	08005929 	.word	0x08005929
 8005804:	080058e1 	.word	0x080058e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	4a75      	ldr	r2, [pc, #468]	; (80059e4 <HAL_TIM_OC_Start_DMA+0x3d4>)
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	4a74      	ldr	r2, [pc, #464]	; (80059e8 <HAL_TIM_OC_Start_DMA+0x3d8>)
 8005816:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	4a73      	ldr	r2, [pc, #460]	; (80059ec <HAL_TIM_OC_Start_DMA+0x3dc>)
 800581e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3334      	adds	r3, #52	; 0x34
 800582c:	461a      	mov	r2, r3
 800582e:	887b      	ldrh	r3, [r7, #2]
 8005830:	f7fe f8d2 	bl	80039d8 <HAL_DMA_Start_IT>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_TIM_OC_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e0cd      	b.n	80059da <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584c:	60da      	str	r2, [r3, #12]
      break;
 800584e:	e06e      	b.n	800592e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	4a63      	ldr	r2, [pc, #396]	; (80059e4 <HAL_TIM_OC_Start_DMA+0x3d4>)
 8005856:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	4a62      	ldr	r2, [pc, #392]	; (80059e8 <HAL_TIM_OC_Start_DMA+0x3d8>)
 800585e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005864:	4a61      	ldr	r2, [pc, #388]	; (80059ec <HAL_TIM_OC_Start_DMA+0x3dc>)
 8005866:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3338      	adds	r3, #56	; 0x38
 8005874:	461a      	mov	r2, r3
 8005876:	887b      	ldrh	r3, [r7, #2]
 8005878:	f7fe f8ae 	bl	80039d8 <HAL_DMA_Start_IT>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_TIM_OC_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e0a9      	b.n	80059da <HAL_TIM_OC_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005894:	60da      	str	r2, [r3, #12]
      break;
 8005896:	e04a      	b.n	800592e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	4a51      	ldr	r2, [pc, #324]	; (80059e4 <HAL_TIM_OC_Start_DMA+0x3d4>)
 800589e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	4a50      	ldr	r2, [pc, #320]	; (80059e8 <HAL_TIM_OC_Start_DMA+0x3d8>)
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	4a4f      	ldr	r2, [pc, #316]	; (80059ec <HAL_TIM_OC_Start_DMA+0x3dc>)
 80058ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	333c      	adds	r3, #60	; 0x3c
 80058bc:	461a      	mov	r2, r3
 80058be:	887b      	ldrh	r3, [r7, #2]
 80058c0:	f7fe f88a 	bl	80039d8 <HAL_DMA_Start_IT>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_TIM_OC_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e085      	b.n	80059da <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058dc:	60da      	str	r2, [r3, #12]
      break;
 80058de:	e026      	b.n	800592e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	4a3f      	ldr	r2, [pc, #252]	; (80059e4 <HAL_TIM_OC_Start_DMA+0x3d4>)
 80058e6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	4a3e      	ldr	r2, [pc, #248]	; (80059e8 <HAL_TIM_OC_Start_DMA+0x3d8>)
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	4a3d      	ldr	r2, [pc, #244]	; (80059ec <HAL_TIM_OC_Start_DMA+0x3dc>)
 80058f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3340      	adds	r3, #64	; 0x40
 8005904:	461a      	mov	r2, r3
 8005906:	887b      	ldrh	r3, [r7, #2]
 8005908:	f7fe f866 	bl	80039d8 <HAL_DMA_Start_IT>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <HAL_TIM_OC_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e061      	b.n	80059da <HAL_TIM_OC_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005924:	60da      	str	r2, [r3, #12]
      break;
 8005926:	e002      	b.n	800592e <HAL_TIM_OC_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	75fb      	strb	r3, [r7, #23]
      break;
 800592c:	bf00      	nop
  }

  if (status == HAL_OK)
 800592e:	7dfb      	ldrb	r3, [r7, #23]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d151      	bne.n	80059d8 <HAL_TIM_OC_Start_DMA+0x3c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2201      	movs	r2, #1
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	4618      	mov	r0, r3
 800593e:	f001 fa11 	bl	8006d64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <HAL_TIM_OC_Start_DMA+0x3e0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_TIM_OC_Start_DMA+0x350>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a28      	ldr	r2, [pc, #160]	; (80059f4 <HAL_TIM_OC_Start_DMA+0x3e4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIM_OC_Start_DMA+0x350>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a27      	ldr	r2, [pc, #156]	; (80059f8 <HAL_TIM_OC_Start_DMA+0x3e8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d101      	bne.n	8005964 <HAL_TIM_OC_Start_DMA+0x354>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <HAL_TIM_OC_Start_DMA+0x356>
 8005964:	2300      	movs	r3, #0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_TIM_OC_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005978:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_TIM_OC_Start_DMA+0x3e0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d009      	beq.n	8005998 <HAL_TIM_OC_Start_DMA+0x388>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598c:	d004      	beq.n	8005998 <HAL_TIM_OC_Start_DMA+0x388>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a18      	ldr	r2, [pc, #96]	; (80059f4 <HAL_TIM_OC_Start_DMA+0x3e4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d115      	bne.n	80059c4 <HAL_TIM_OC_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	4b17      	ldr	r3, [pc, #92]	; (80059fc <HAL_TIM_OC_Start_DMA+0x3ec>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b06      	cmp	r3, #6
 80059a8:	d015      	beq.n	80059d6 <HAL_TIM_OC_Start_DMA+0x3c6>
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b0:	d011      	beq.n	80059d6 <HAL_TIM_OC_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	e008      	b.n	80059d6 <HAL_TIM_OC_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e000      	b.n	80059d8 <HAL_TIM_OC_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	08006691 	.word	0x08006691
 80059e8:	08006739 	.word	0x08006739
 80059ec:	080065ff 	.word	0x080065ff
 80059f0:	40012c00 	.word	0x40012c00
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	00010007 	.word	0x00010007

08005a00 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b0c      	cmp	r3, #12
 8005a12:	d855      	bhi.n	8005ac0 <HAL_TIM_OC_Stop_DMA+0xc0>
 8005a14:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <HAL_TIM_OC_Stop_DMA+0x1c>)
 8005a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1a:	bf00      	nop
 8005a1c:	08005a51 	.word	0x08005a51
 8005a20:	08005ac1 	.word	0x08005ac1
 8005a24:	08005ac1 	.word	0x08005ac1
 8005a28:	08005ac1 	.word	0x08005ac1
 8005a2c:	08005a6d 	.word	0x08005a6d
 8005a30:	08005ac1 	.word	0x08005ac1
 8005a34:	08005ac1 	.word	0x08005ac1
 8005a38:	08005ac1 	.word	0x08005ac1
 8005a3c:	08005a89 	.word	0x08005a89
 8005a40:	08005ac1 	.word	0x08005ac1
 8005a44:	08005ac1 	.word	0x08005ac1
 8005a48:	08005ac1 	.word	0x08005ac1
 8005a4c:	08005aa5 	.word	0x08005aa5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe f855 	bl	8003b14 <HAL_DMA_Abort_IT>
      break;
 8005a6a:	e02c      	b.n	8005ac6 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe f847 	bl	8003b14 <HAL_DMA_Abort_IT>
      break;
 8005a86:	e01e      	b.n	8005ac6 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe f839 	bl	8003b14 <HAL_DMA_Abort_IT>
      break;
 8005aa2:	e010      	b.n	8005ac6 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ab2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe f82b 	bl	8003b14 <HAL_DMA_Abort_IT>
      break;
 8005abe:	e002      	b.n	8005ac6 <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d176      	bne.n	8005bba <HAL_TIM_OC_Stop_DMA+0x1ba>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f945 	bl	8006d64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a39      	ldr	r2, [pc, #228]	; (8005bc4 <HAL_TIM_OC_Stop_DMA+0x1c4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d009      	beq.n	8005af8 <HAL_TIM_OC_Stop_DMA+0xf8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a37      	ldr	r2, [pc, #220]	; (8005bc8 <HAL_TIM_OC_Stop_DMA+0x1c8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <HAL_TIM_OC_Stop_DMA+0xf8>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a36      	ldr	r2, [pc, #216]	; (8005bcc <HAL_TIM_OC_Stop_DMA+0x1cc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d101      	bne.n	8005afc <HAL_TIM_OC_Stop_DMA+0xfc>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <HAL_TIM_OC_Stop_DMA+0xfe>
 8005afc:	2300      	movs	r3, #0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d017      	beq.n	8005b32 <HAL_TIM_OC_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10f      	bne.n	8005b32 <HAL_TIM_OC_Stop_DMA+0x132>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6a1a      	ldr	r2, [r3, #32]
 8005b18:	f240 4344 	movw	r3, #1092	; 0x444
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d107      	bne.n	8005b32 <HAL_TIM_OC_Stop_DMA+0x132>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6a1a      	ldr	r2, [r3, #32]
 8005b38:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10f      	bne.n	8005b62 <HAL_TIM_OC_Stop_DMA+0x162>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6a1a      	ldr	r2, [r3, #32]
 8005b48:	f240 4344 	movw	r3, #1092	; 0x444
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d107      	bne.n	8005b62 <HAL_TIM_OC_Stop_DMA+0x162>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0201 	bic.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_OC_Stop_DMA+0x172>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b70:	e023      	b.n	8005bba <HAL_TIM_OC_Stop_DMA+0x1ba>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d104      	bne.n	8005b82 <HAL_TIM_OC_Stop_DMA+0x182>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b80:	e01b      	b.n	8005bba <HAL_TIM_OC_Stop_DMA+0x1ba>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d104      	bne.n	8005b92 <HAL_TIM_OC_Stop_DMA+0x192>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b90:	e013      	b.n	8005bba <HAL_TIM_OC_Stop_DMA+0x1ba>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b0c      	cmp	r3, #12
 8005b96:	d104      	bne.n	8005ba2 <HAL_TIM_OC_Stop_DMA+0x1a2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ba0:	e00b      	b.n	8005bba <HAL_TIM_OC_Stop_DMA+0x1ba>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d104      	bne.n	8005bb2 <HAL_TIM_OC_Stop_DMA+0x1b2>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb0:	e003      	b.n	8005bba <HAL_TIM_OC_Stop_DMA+0x1ba>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400

08005bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e049      	b.n	8005c76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fa feb4 	bl	8000964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f000 fdc6 	bl	80067a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6a1a      	ldr	r2, [r3, #32]
 8005c94:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10f      	bne.n	8005cbe <HAL_TIM_PWM_DeInit+0x40>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	f240 4344 	movw	r3, #1092	; 0x444
 8005ca8:	4013      	ands	r3, r2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d107      	bne.n	8005cbe <HAL_TIM_PWM_DeInit+0x40>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0201 	bic.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fa ff16 	bl	8000af0 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <HAL_TIM_PWM_Start+0x24>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	bf14      	ite	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	2300      	moveq	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	e03c      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x9e>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d109      	bne.n	8005d76 <HAL_TIM_PWM_Start+0x3e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	bf14      	ite	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	2300      	moveq	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	e02f      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x9e>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d109      	bne.n	8005d90 <HAL_TIM_PWM_Start+0x58>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e022      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x9e>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b0c      	cmp	r3, #12
 8005d94:	d109      	bne.n	8005daa <HAL_TIM_PWM_Start+0x72>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	bf14      	ite	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	2300      	moveq	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	e015      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x9e>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b10      	cmp	r3, #16
 8005dae:	d109      	bne.n	8005dc4 <HAL_TIM_PWM_Start+0x8c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	e008      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x9e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	bf14      	ite	ne
 8005dd0:	2301      	movne	r3, #1
 8005dd2:	2300      	moveq	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e07e      	b.n	8005edc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d104      	bne.n	8005dee <HAL_TIM_PWM_Start+0xb6>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dec:	e023      	b.n	8005e36 <HAL_TIM_PWM_Start+0xfe>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_PWM_Start+0xc6>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dfc:	e01b      	b.n	8005e36 <HAL_TIM_PWM_Start+0xfe>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xd6>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e0c:	e013      	b.n	8005e36 <HAL_TIM_PWM_Start+0xfe>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Start+0xe6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e1c:	e00b      	b.n	8005e36 <HAL_TIM_PWM_Start+0xfe>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Start+0xf6>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e2c:	e003      	b.n	8005e36 <HAL_TIM_PWM_Start+0xfe>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 ff90 	bl	8006d64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <HAL_TIM_PWM_Start+0x1ac>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_TIM_PWM_Start+0x12a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a25      	ldr	r2, [pc, #148]	; (8005ee8 <HAL_TIM_PWM_Start+0x1b0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d004      	beq.n	8005e62 <HAL_TIM_PWM_Start+0x12a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a23      	ldr	r2, [pc, #140]	; (8005eec <HAL_TIM_PWM_Start+0x1b4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d101      	bne.n	8005e66 <HAL_TIM_PWM_Start+0x12e>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <HAL_TIM_PWM_Start+0x130>
 8005e66:	2300      	movs	r3, #0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <HAL_TIM_PWM_Start+0x1ac>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_TIM_PWM_Start+0x162>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8e:	d004      	beq.n	8005e9a <HAL_TIM_PWM_Start+0x162>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <HAL_TIM_PWM_Start+0x1b0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d115      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <HAL_TIM_PWM_Start+0x1b8>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b06      	cmp	r3, #6
 8005eaa:	d015      	beq.n	8005ed8 <HAL_TIM_PWM_Start+0x1a0>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb2:	d011      	beq.n	8005ed8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec4:	e008      	b.n	8005ed8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0201 	orr.w	r2, r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	e000      	b.n	8005eda <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	00010007 	.word	0x00010007

08005ef4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2200      	movs	r2, #0
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 ff2c 	bl	8006d64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a39      	ldr	r2, [pc, #228]	; (8005ff8 <HAL_TIM_PWM_Stop+0x104>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d009      	beq.n	8005f2a <HAL_TIM_PWM_Stop+0x36>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a38      	ldr	r2, [pc, #224]	; (8005ffc <HAL_TIM_PWM_Stop+0x108>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d004      	beq.n	8005f2a <HAL_TIM_PWM_Stop+0x36>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a36      	ldr	r2, [pc, #216]	; (8006000 <HAL_TIM_PWM_Stop+0x10c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d101      	bne.n	8005f2e <HAL_TIM_PWM_Stop+0x3a>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <HAL_TIM_PWM_Stop+0x3c>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d017      	beq.n	8005f64 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10f      	bne.n	8005f64 <HAL_TIM_PWM_Stop+0x70>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	f240 4344 	movw	r3, #1092	; 0x444
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d107      	bne.n	8005f64 <HAL_TIM_PWM_Stop+0x70>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10f      	bne.n	8005f94 <HAL_TIM_PWM_Stop+0xa0>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a1a      	ldr	r2, [r3, #32]
 8005f7a:	f240 4344 	movw	r3, #1092	; 0x444
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d107      	bne.n	8005f94 <HAL_TIM_PWM_Stop+0xa0>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0201 	bic.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d104      	bne.n	8005fa4 <HAL_TIM_PWM_Stop+0xb0>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fa2:	e023      	b.n	8005fec <HAL_TIM_PWM_Stop+0xf8>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d104      	bne.n	8005fb4 <HAL_TIM_PWM_Stop+0xc0>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb2:	e01b      	b.n	8005fec <HAL_TIM_PWM_Stop+0xf8>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d104      	bne.n	8005fc4 <HAL_TIM_PWM_Stop+0xd0>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc2:	e013      	b.n	8005fec <HAL_TIM_PWM_Stop+0xf8>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b0c      	cmp	r3, #12
 8005fc8:	d104      	bne.n	8005fd4 <HAL_TIM_PWM_Stop+0xe0>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fd2:	e00b      	b.n	8005fec <HAL_TIM_PWM_Stop+0xf8>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b10      	cmp	r3, #16
 8005fd8:	d104      	bne.n	8005fe4 <HAL_TIM_PWM_Stop+0xf0>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fe2:	e003      	b.n	8005fec <HAL_TIM_PWM_Stop+0xf8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400

08006004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d122      	bne.n	8006060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b02      	cmp	r3, #2
 8006026:	d11b      	bne.n	8006060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0202 	mvn.w	r2, #2
 8006030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fac5 	bl	80065d6 <HAL_TIM_IC_CaptureCallback>
 800604c:	e005      	b.n	800605a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fab7 	bl	80065c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fa fa67 	bl	8000528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b04      	cmp	r3, #4
 800606c:	d122      	bne.n	80060b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b04      	cmp	r3, #4
 800607a:	d11b      	bne.n	80060b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0204 	mvn.w	r2, #4
 8006084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa9b 	bl	80065d6 <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa8d 	bl	80065c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7fa fa3d 	bl	8000528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d122      	bne.n	8006108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d11b      	bne.n	8006108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0208 	mvn.w	r2, #8
 80060d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2204      	movs	r2, #4
 80060de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa71 	bl	80065d6 <HAL_TIM_IC_CaptureCallback>
 80060f4:	e005      	b.n	8006102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa63 	bl	80065c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7fa fa13 	bl	8000528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b10      	cmp	r3, #16
 8006114:	d122      	bne.n	800615c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b10      	cmp	r3, #16
 8006122:	d11b      	bne.n	800615c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0210 	mvn.w	r2, #16
 800612c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2208      	movs	r2, #8
 8006132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fa47 	bl	80065d6 <HAL_TIM_IC_CaptureCallback>
 8006148:	e005      	b.n	8006156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa39 	bl	80065c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7fa f9e9 	bl	8000528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b01      	cmp	r3, #1
 8006168:	d10e      	bne.n	8006188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b01      	cmp	r3, #1
 8006176:	d107      	bne.n	8006188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0201 	mvn.w	r2, #1
 8006180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa13 	bl	80065ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006192:	2b80      	cmp	r3, #128	; 0x80
 8006194:	d10e      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a0:	2b80      	cmp	r3, #128	; 0x80
 80061a2:	d107      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fee6 	bl	8006f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c2:	d10e      	bne.n	80061e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ce:	2b80      	cmp	r3, #128	; 0x80
 80061d0:	d107      	bne.n	80061e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fed9 	bl	8006f94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d10e      	bne.n	800620e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	d107      	bne.n	800620e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f9ee 	bl	80065ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b20      	cmp	r3, #32
 800621a:	d10e      	bne.n	800623a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f003 0320 	and.w	r3, r3, #32
 8006226:	2b20      	cmp	r3, #32
 8006228:	d107      	bne.n	800623a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f06f 0220 	mvn.w	r2, #32
 8006232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fe99 	bl	8006f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_TIM_OC_ConfigChannel+0x1e>
 800625e:	2302      	movs	r3, #2
 8006260:	e066      	b.n	8006330 <HAL_TIM_OC_ConfigChannel+0xec>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b14      	cmp	r3, #20
 800626e:	d857      	bhi.n	8006320 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	080062cd 	.word	0x080062cd
 800627c:	08006321 	.word	0x08006321
 8006280:	08006321 	.word	0x08006321
 8006284:	08006321 	.word	0x08006321
 8006288:	080062db 	.word	0x080062db
 800628c:	08006321 	.word	0x08006321
 8006290:	08006321 	.word	0x08006321
 8006294:	08006321 	.word	0x08006321
 8006298:	080062e9 	.word	0x080062e9
 800629c:	08006321 	.word	0x08006321
 80062a0:	08006321 	.word	0x08006321
 80062a4:	08006321 	.word	0x08006321
 80062a8:	080062f7 	.word	0x080062f7
 80062ac:	08006321 	.word	0x08006321
 80062b0:	08006321 	.word	0x08006321
 80062b4:	08006321 	.word	0x08006321
 80062b8:	08006305 	.word	0x08006305
 80062bc:	08006321 	.word	0x08006321
 80062c0:	08006321 	.word	0x08006321
 80062c4:	08006321 	.word	0x08006321
 80062c8:	08006313 	.word	0x08006313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fac8 	bl	8006868 <TIM_OC1_SetConfig>
      break;
 80062d8:	e025      	b.n	8006326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fb3d 	bl	8006960 <TIM_OC2_SetConfig>
      break;
 80062e6:	e01e      	b.n	8006326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fbb0 	bl	8006a54 <TIM_OC3_SetConfig>
      break;
 80062f4:	e017      	b.n	8006326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fc21 	bl	8006b44 <TIM_OC4_SetConfig>
      break;
 8006302:	e010      	b.n	8006326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fc78 	bl	8006c00 <TIM_OC5_SetConfig>
      break;
 8006310:	e009      	b.n	8006326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	4618      	mov	r0, r3
 800631a:	f000 fcc9 	bl	8006cb0 <TIM_OC6_SetConfig>
      break;
 800631e:	e002      	b.n	8006326 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
      break;
 8006324:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006352:	2302      	movs	r3, #2
 8006354:	e0ff      	b.n	8006556 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b14      	cmp	r3, #20
 8006362:	f200 80f0 	bhi.w	8006546 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	080063c1 	.word	0x080063c1
 8006370:	08006547 	.word	0x08006547
 8006374:	08006547 	.word	0x08006547
 8006378:	08006547 	.word	0x08006547
 800637c:	08006401 	.word	0x08006401
 8006380:	08006547 	.word	0x08006547
 8006384:	08006547 	.word	0x08006547
 8006388:	08006547 	.word	0x08006547
 800638c:	08006443 	.word	0x08006443
 8006390:	08006547 	.word	0x08006547
 8006394:	08006547 	.word	0x08006547
 8006398:	08006547 	.word	0x08006547
 800639c:	08006483 	.word	0x08006483
 80063a0:	08006547 	.word	0x08006547
 80063a4:	08006547 	.word	0x08006547
 80063a8:	08006547 	.word	0x08006547
 80063ac:	080064c5 	.word	0x080064c5
 80063b0:	08006547 	.word	0x08006547
 80063b4:	08006547 	.word	0x08006547
 80063b8:	08006547 	.word	0x08006547
 80063bc:	08006505 	.word	0x08006505
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fa4e 	bl	8006868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0208 	orr.w	r2, r2, #8
 80063da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0204 	bic.w	r2, r2, #4
 80063ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6999      	ldr	r1, [r3, #24]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691a      	ldr	r2, [r3, #16]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	619a      	str	r2, [r3, #24]
      break;
 80063fe:	e0a5      	b.n	800654c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 faaa 	bl	8006960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699a      	ldr	r2, [r3, #24]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800641a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800642a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6999      	ldr	r1, [r3, #24]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	021a      	lsls	r2, r3, #8
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	619a      	str	r2, [r3, #24]
      break;
 8006440:	e084      	b.n	800654c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fb03 	bl	8006a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0208 	orr.w	r2, r2, #8
 800645c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0204 	bic.w	r2, r2, #4
 800646c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69d9      	ldr	r1, [r3, #28]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	61da      	str	r2, [r3, #28]
      break;
 8006480:	e064      	b.n	800654c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	4618      	mov	r0, r3
 800648a:	f000 fb5b 	bl	8006b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800649c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69d9      	ldr	r1, [r3, #28]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	021a      	lsls	r2, r3, #8
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	61da      	str	r2, [r3, #28]
      break;
 80064c2:	e043      	b.n	800654c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fb98 	bl	8006c00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0208 	orr.w	r2, r2, #8
 80064de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0204 	bic.w	r2, r2, #4
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006502:	e023      	b.n	800654c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fbd0 	bl	8006cb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800651e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	021a      	lsls	r2, r3, #8
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006544:	e002      	b.n	800654c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	75fb      	strb	r3, [r7, #23]
      break;
 800654a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006554:	7dfb      	ldrb	r3, [r7, #23]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop

08006560 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIM_GenerateEvent+0x18>
 8006574:	2302      	movs	r3, #2
 8006576:	e014      	b.n	80065a2 <HAL_TIM_GenerateEvent+0x42>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	d107      	bne.n	8006626 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006624:	e02a      	b.n	800667c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d107      	bne.n	8006640 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2202      	movs	r2, #2
 8006634:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800663e:	e01d      	b.n	800667c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d107      	bne.n	800665a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2204      	movs	r2, #4
 800664e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006658:	e010      	b.n	800667c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	429a      	cmp	r2, r3
 8006662:	d107      	bne.n	8006674 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2208      	movs	r2, #8
 8006668:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006672:	e003      	b.n	800667c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7f9 ff35 	bl	80004ec <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	771a      	strb	r2, [r3, #28]
}
 8006688:	bf00      	nop
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d10b      	bne.n	80066c0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d136      	bne.n	8006724 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066be:	e031      	b.n	8006724 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d10b      	bne.n	80066e2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2202      	movs	r2, #2
 80066ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d125      	bne.n	8006724 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e0:	e020      	b.n	8006724 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d10b      	bne.n	8006704 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2204      	movs	r2, #4
 80066f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d114      	bne.n	8006724 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006702:	e00f      	b.n	8006724 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d10a      	bne.n	8006724 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2208      	movs	r2, #8
 8006712:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7f9 feff 	bl	8000528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	771a      	strb	r2, [r3, #28]
}
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	d103      	bne.n	8006758 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2201      	movs	r2, #1
 8006754:	771a      	strb	r2, [r3, #28]
 8006756:	e019      	b.n	800678c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	d103      	bne.n	800676a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2202      	movs	r2, #2
 8006766:	771a      	strb	r2, [r3, #28]
 8006768:	e010      	b.n	800678c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d103      	bne.n	800677c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2204      	movs	r2, #4
 8006778:	771a      	strb	r2, [r3, #28]
 800677a:	e007      	b.n	800678c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d102      	bne.n	800678c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2208      	movs	r2, #8
 800678a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7f9 febd 	bl	800050c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a2a      	ldr	r2, [pc, #168]	; (800685c <TIM_Base_SetConfig+0xbc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_Base_SetConfig+0x20>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067be:	d108      	bne.n	80067d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a21      	ldr	r2, [pc, #132]	; (800685c <TIM_Base_SetConfig+0xbc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00b      	beq.n	80067f2 <TIM_Base_SetConfig+0x52>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e0:	d007      	beq.n	80067f2 <TIM_Base_SetConfig+0x52>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a1e      	ldr	r2, [pc, #120]	; (8006860 <TIM_Base_SetConfig+0xc0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_Base_SetConfig+0x52>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <TIM_Base_SetConfig+0xc4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d108      	bne.n	8006804 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a0c      	ldr	r2, [pc, #48]	; (800685c <TIM_Base_SetConfig+0xbc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d007      	beq.n	8006840 <TIM_Base_SetConfig+0xa0>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a0b      	ldr	r2, [pc, #44]	; (8006860 <TIM_Base_SetConfig+0xc0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d003      	beq.n	8006840 <TIM_Base_SetConfig+0xa0>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a0a      	ldr	r2, [pc, #40]	; (8006864 <TIM_Base_SetConfig+0xc4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d103      	bne.n	8006848 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	615a      	str	r2, [r3, #20]
}
 800684e:	bf00      	nop
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400

08006868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f023 0201 	bic.w	r2, r3, #1
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f023 0302 	bic.w	r3, r3, #2
 80068b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a24      	ldr	r2, [pc, #144]	; (8006954 <TIM_OC1_SetConfig+0xec>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_OC1_SetConfig+0x70>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a23      	ldr	r2, [pc, #140]	; (8006958 <TIM_OC1_SetConfig+0xf0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC1_SetConfig+0x70>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a22      	ldr	r2, [pc, #136]	; (800695c <TIM_OC1_SetConfig+0xf4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d10c      	bne.n	80068f2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 0308 	bic.w	r3, r3, #8
 80068de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f023 0304 	bic.w	r3, r3, #4
 80068f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a17      	ldr	r2, [pc, #92]	; (8006954 <TIM_OC1_SetConfig+0xec>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d007      	beq.n	800690a <TIM_OC1_SetConfig+0xa2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a16      	ldr	r2, [pc, #88]	; (8006958 <TIM_OC1_SetConfig+0xf0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_OC1_SetConfig+0xa2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <TIM_OC1_SetConfig+0xf4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d111      	bne.n	800692e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	621a      	str	r2, [r3, #32]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	40012c00 	.word	0x40012c00
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400

08006960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0210 	bic.w	r2, r3, #16
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f023 0320 	bic.w	r3, r3, #32
 80069ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a22      	ldr	r2, [pc, #136]	; (8006a48 <TIM_OC2_SetConfig+0xe8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d10d      	bne.n	80069e0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a19      	ldr	r2, [pc, #100]	; (8006a48 <TIM_OC2_SetConfig+0xe8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d007      	beq.n	80069f8 <TIM_OC2_SetConfig+0x98>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a18      	ldr	r2, [pc, #96]	; (8006a4c <TIM_OC2_SetConfig+0xec>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <TIM_OC2_SetConfig+0x98>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <TIM_OC2_SetConfig+0xf0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d113      	bne.n	8006a20 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40014400 	.word	0x40014400

08006a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a21      	ldr	r2, [pc, #132]	; (8006b38 <TIM_OC3_SetConfig+0xe4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d10d      	bne.n	8006ad2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a18      	ldr	r2, [pc, #96]	; (8006b38 <TIM_OC3_SetConfig+0xe4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d007      	beq.n	8006aea <TIM_OC3_SetConfig+0x96>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <TIM_OC3_SetConfig+0xe8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d003      	beq.n	8006aea <TIM_OC3_SetConfig+0x96>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <TIM_OC3_SetConfig+0xec>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d113      	bne.n	8006b12 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	621a      	str	r2, [r3, #32]
}
 8006b2c:	bf00      	nop
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	40012c00 	.word	0x40012c00
 8006b3c:	40014000 	.word	0x40014000
 8006b40:	40014400 	.word	0x40014400

08006b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	031b      	lsls	r3, r3, #12
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a14      	ldr	r2, [pc, #80]	; (8006bf4 <TIM_OC4_SetConfig+0xb0>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_OC4_SetConfig+0x74>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <TIM_OC4_SetConfig+0xb4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_OC4_SetConfig+0x74>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a12      	ldr	r2, [pc, #72]	; (8006bfc <TIM_OC4_SetConfig+0xb8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d109      	bne.n	8006bcc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	019b      	lsls	r3, r3, #6
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	621a      	str	r2, [r3, #32]
}
 8006be6:	bf00      	nop
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40012c00 	.word	0x40012c00
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40014400 	.word	0x40014400

08006c00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	041b      	lsls	r3, r3, #16
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <TIM_OC5_SetConfig+0xa4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d007      	beq.n	8006c6a <TIM_OC5_SetConfig+0x6a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a12      	ldr	r2, [pc, #72]	; (8006ca8 <TIM_OC5_SetConfig+0xa8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d003      	beq.n	8006c6a <TIM_OC5_SetConfig+0x6a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a11      	ldr	r2, [pc, #68]	; (8006cac <TIM_OC5_SetConfig+0xac>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d109      	bne.n	8006c7e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	621a      	str	r2, [r3, #32]
}
 8006c98:	bf00      	nop
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	40012c00 	.word	0x40012c00
 8006ca8:	40014000 	.word	0x40014000
 8006cac:	40014400 	.word	0x40014400

08006cb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	051b      	lsls	r3, r3, #20
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <TIM_OC6_SetConfig+0xa8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <TIM_OC6_SetConfig+0x6c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <TIM_OC6_SetConfig+0xac>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_OC6_SetConfig+0x6c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a12      	ldr	r2, [pc, #72]	; (8006d60 <TIM_OC6_SetConfig+0xb0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d109      	bne.n	8006d30 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	029b      	lsls	r3, r3, #10
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40012c00 	.word	0x40012c00
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400

08006d64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f003 031f 	and.w	r3, r3, #31
 8006d76:	2201      	movs	r2, #1
 8006d78:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a1a      	ldr	r2, [r3, #32]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	43db      	mvns	r3, r3
 8006d86:	401a      	ands	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1a      	ldr	r2, [r3, #32]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	621a      	str	r2, [r3, #32]
}
 8006da2:	bf00      	nop
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d101      	bne.n	8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e04f      	b.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a21      	ldr	r2, [pc, #132]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d108      	bne.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006df8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a14      	ldr	r2, [pc, #80]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d009      	beq.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e30:	d004      	beq.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a10      	ldr	r2, [pc, #64]	; (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d10c      	bne.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40014000 	.word	0x40014000

08006e7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e060      	b.n	8006f5a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	041b      	lsls	r3, r3, #16
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a14      	ldr	r2, [pc, #80]	; (8006f68 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d115      	bne.n	8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	051b      	lsls	r3, r3, #20
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40012c00 	.word	0x40012c00

08006f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e040      	b.n	800703c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7f9 fdc8 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2224      	movs	r2, #36	; 0x24
 8006fd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0201 	bic.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fb2e 	bl	8007648 <UART_SetConfig>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e022      	b.n	800703c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fd7c 	bl	8007afc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fe03 	bl	8007c40 <UART_CheckIdleState>
 800703a:	4603      	mov	r3, r0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b0ba      	sub	sp, #232	; 0xe8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800706a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800706e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007072:	4013      	ands	r3, r2
 8007074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d115      	bne.n	80070ac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007084:	f003 0320 	and.w	r3, r3, #32
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00f      	beq.n	80070ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b00      	cmp	r3, #0
 8007096:	d009      	beq.n	80070ac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 82a6 	beq.w	80075ee <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
      }
      return;
 80070aa:	e2a0      	b.n	80075ee <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80070ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8117 	beq.w	80072e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d106      	bne.n	80070d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070c6:	4b85      	ldr	r3, [pc, #532]	; (80072dc <HAL_UART_IRQHandler+0x298>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 810a 	beq.w	80072e4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d011      	beq.n	8007100 <HAL_UART_IRQHandler+0xbc>
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2201      	movs	r2, #1
 80070ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070f6:	f043 0201 	orr.w	r2, r3, #1
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d011      	beq.n	8007130 <HAL_UART_IRQHandler+0xec>
 800710c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2202      	movs	r2, #2
 800711e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007126:	f043 0204 	orr.w	r2, r3, #4
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d011      	beq.n	8007160 <HAL_UART_IRQHandler+0x11c>
 800713c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2204      	movs	r2, #4
 800714e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007156:	f043 0202 	orr.w	r2, r3, #2
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d017      	beq.n	800719c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800716c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800717c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00b      	beq.n	800719c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2208      	movs	r2, #8
 800718a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007192:	f043 0208 	orr.w	r2, r3, #8
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800719c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d012      	beq.n	80071ce <HAL_UART_IRQHandler+0x18a>
 80071a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00c      	beq.n	80071ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c4:	f043 0220 	orr.w	r2, r3, #32
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 820c 	beq.w	80075f2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00d      	beq.n	8007202 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007216:	2b40      	cmp	r3, #64	; 0x40
 8007218:	d005      	beq.n	8007226 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800721a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800721e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007222:	2b00      	cmp	r3, #0
 8007224:	d04f      	beq.n	80072c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fe17 	bl	8007e5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d141      	bne.n	80072be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800726a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800727e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1d9      	bne.n	800723a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728a:	2b00      	cmp	r3, #0
 800728c:	d013      	beq.n	80072b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007292:	4a13      	ldr	r2, [pc, #76]	; (80072e0 <HAL_UART_IRQHandler+0x29c>)
 8007294:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729a:	4618      	mov	r0, r3
 800729c:	f7fc fc3a 	bl	8003b14 <HAL_DMA_Abort_IT>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d017      	beq.n	80072d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b4:	e00f      	b.n	80072d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9b0 	bl	800761c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072bc:	e00b      	b.n	80072d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f9ac 	bl	800761c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	e007      	b.n	80072d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f9a8 	bl	800761c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80072d4:	e18d      	b.n	80075f2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d6:	bf00      	nop
    return;
 80072d8:	e18b      	b.n	80075f2 <HAL_UART_IRQHandler+0x5ae>
 80072da:	bf00      	nop
 80072dc:	04000120 	.word	0x04000120
 80072e0:	08007f21 	.word	0x08007f21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	f040 8146 	bne.w	800757a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f2:	f003 0310 	and.w	r3, r3, #16
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 813f 	beq.w	800757a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007300:	f003 0310 	and.w	r3, r3, #16
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8138 	beq.w	800757a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2210      	movs	r2, #16
 8007310:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	f040 80b4 	bne.w	800748a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800732e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 815f 	beq.w	80075f6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800733e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007342:	429a      	cmp	r2, r3
 8007344:	f080 8157 	bcs.w	80075f6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800734e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	f040 8085 	bne.w	800746e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800737c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800738e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007392:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800739a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1da      	bne.n	8007364 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3308      	adds	r3, #8
 80073b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073c0:	f023 0301 	bic.w	r3, r3, #1
 80073c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3308      	adds	r3, #8
 80073ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e1      	bne.n	80073ae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3308      	adds	r3, #8
 80073f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800740e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800741c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e3      	bne.n	80073ea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800743c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743e:	f023 0310 	bic.w	r3, r3, #16
 8007442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007450:	65bb      	str	r3, [r7, #88]	; 0x58
 8007452:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800745e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e4      	bne.n	800742e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007468:	4618      	mov	r0, r3
 800746a:	f7fc fb15 	bl	8003a98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800747a:	b29b      	uxth	r3, r3
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	b29b      	uxth	r3, r3
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8d4 	bl	8007630 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007488:	e0b5      	b.n	80075f6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007496:	b29b      	uxth	r3, r3
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 80a7 	beq.w	80075fa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80074ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 80a2 	beq.w	80075fa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074d8:	647b      	str	r3, [r7, #68]	; 0x44
 80074da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e4      	bne.n	80074b6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3308      	adds	r3, #8
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	623b      	str	r3, [r7, #32]
   return(result);
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	f023 0301 	bic.w	r3, r3, #1
 8007502:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007510:	633a      	str	r2, [r7, #48]	; 0x30
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e3      	bne.n	80074ec <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2220      	movs	r2, #32
 8007528:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	60fb      	str	r3, [r7, #12]
   return(result);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0310 	bic.w	r3, r3, #16
 800754a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	69b9      	ldr	r1, [r7, #24]
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	617b      	str	r3, [r7, #20]
   return(result);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e4      	bne.n	8007536 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800756c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f85c 	bl	8007630 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007578:	e03f      	b.n	80075fa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800757a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00e      	beq.n	80075a4 <HAL_UART_IRQHandler+0x560>
 8007586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800758a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d008      	beq.n	80075a4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800759a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fcff 	bl	8007fa0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075a2:	e02d      	b.n	8007600 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00e      	beq.n	80075ce <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01c      	beq.n	80075fe <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	4798      	blx	r3
    }
    return;
 80075cc:	e017      	b.n	80075fe <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d012      	beq.n	8007600 <HAL_UART_IRQHandler+0x5bc>
 80075da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00c      	beq.n	8007600 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fcb0 	bl	8007f4c <UART_EndTransmit_IT>
    return;
 80075ec:	e008      	b.n	8007600 <HAL_UART_IRQHandler+0x5bc>
      return;
 80075ee:	bf00      	nop
 80075f0:	e006      	b.n	8007600 <HAL_UART_IRQHandler+0x5bc>
    return;
 80075f2:	bf00      	nop
 80075f4:	e004      	b.n	8007600 <HAL_UART_IRQHandler+0x5bc>
      return;
 80075f6:	bf00      	nop
 80075f8:	e002      	b.n	8007600 <HAL_UART_IRQHandler+0x5bc>
      return;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <HAL_UART_IRQHandler+0x5bc>
    return;
 80075fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007600:	37e8      	adds	r7, #232	; 0xe8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop

08007608 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800764c:	b08a      	sub	sp, #40	; 0x28
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	431a      	orrs	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	431a      	orrs	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	4313      	orrs	r3, r2
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4b9e      	ldr	r3, [pc, #632]	; (80078f0 <UART_SetConfig+0x2a8>)
 8007678:	4013      	ands	r3, r2
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007680:	430b      	orrs	r3, r1
 8007682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a93      	ldr	r2, [pc, #588]	; (80078f4 <UART_SetConfig+0x2ac>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d004      	beq.n	80076b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b0:	4313      	orrs	r3, r2
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c4:	430a      	orrs	r2, r1
 80076c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a8a      	ldr	r2, [pc, #552]	; (80078f8 <UART_SetConfig+0x2b0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d126      	bne.n	8007720 <UART_SetConfig+0xd8>
 80076d2:	4b8a      	ldr	r3, [pc, #552]	; (80078fc <UART_SetConfig+0x2b4>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d81b      	bhi.n	8007718 <UART_SetConfig+0xd0>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <UART_SetConfig+0xa0>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	080076f9 	.word	0x080076f9
 80076ec:	08007709 	.word	0x08007709
 80076f0:	08007701 	.word	0x08007701
 80076f4:	08007711 	.word	0x08007711
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fe:	e0ab      	b.n	8007858 <UART_SetConfig+0x210>
 8007700:	2302      	movs	r3, #2
 8007702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007706:	e0a7      	b.n	8007858 <UART_SetConfig+0x210>
 8007708:	2304      	movs	r3, #4
 800770a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770e:	e0a3      	b.n	8007858 <UART_SetConfig+0x210>
 8007710:	2308      	movs	r3, #8
 8007712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007716:	e09f      	b.n	8007858 <UART_SetConfig+0x210>
 8007718:	2310      	movs	r3, #16
 800771a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800771e:	e09b      	b.n	8007858 <UART_SetConfig+0x210>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a76      	ldr	r2, [pc, #472]	; (8007900 <UART_SetConfig+0x2b8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d138      	bne.n	800779c <UART_SetConfig+0x154>
 800772a:	4b74      	ldr	r3, [pc, #464]	; (80078fc <UART_SetConfig+0x2b4>)
 800772c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007730:	f003 030c 	and.w	r3, r3, #12
 8007734:	2b0c      	cmp	r3, #12
 8007736:	d82d      	bhi.n	8007794 <UART_SetConfig+0x14c>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <UART_SetConfig+0xf8>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007775 	.word	0x08007775
 8007744:	08007795 	.word	0x08007795
 8007748:	08007795 	.word	0x08007795
 800774c:	08007795 	.word	0x08007795
 8007750:	08007785 	.word	0x08007785
 8007754:	08007795 	.word	0x08007795
 8007758:	08007795 	.word	0x08007795
 800775c:	08007795 	.word	0x08007795
 8007760:	0800777d 	.word	0x0800777d
 8007764:	08007795 	.word	0x08007795
 8007768:	08007795 	.word	0x08007795
 800776c:	08007795 	.word	0x08007795
 8007770:	0800778d 	.word	0x0800778d
 8007774:	2300      	movs	r3, #0
 8007776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800777a:	e06d      	b.n	8007858 <UART_SetConfig+0x210>
 800777c:	2302      	movs	r3, #2
 800777e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007782:	e069      	b.n	8007858 <UART_SetConfig+0x210>
 8007784:	2304      	movs	r3, #4
 8007786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800778a:	e065      	b.n	8007858 <UART_SetConfig+0x210>
 800778c:	2308      	movs	r3, #8
 800778e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007792:	e061      	b.n	8007858 <UART_SetConfig+0x210>
 8007794:	2310      	movs	r3, #16
 8007796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800779a:	e05d      	b.n	8007858 <UART_SetConfig+0x210>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a58      	ldr	r2, [pc, #352]	; (8007904 <UART_SetConfig+0x2bc>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d125      	bne.n	80077f2 <UART_SetConfig+0x1aa>
 80077a6:	4b55      	ldr	r3, [pc, #340]	; (80078fc <UART_SetConfig+0x2b4>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077b0:	2b30      	cmp	r3, #48	; 0x30
 80077b2:	d016      	beq.n	80077e2 <UART_SetConfig+0x19a>
 80077b4:	2b30      	cmp	r3, #48	; 0x30
 80077b6:	d818      	bhi.n	80077ea <UART_SetConfig+0x1a2>
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d00a      	beq.n	80077d2 <UART_SetConfig+0x18a>
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d814      	bhi.n	80077ea <UART_SetConfig+0x1a2>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <UART_SetConfig+0x182>
 80077c4:	2b10      	cmp	r3, #16
 80077c6:	d008      	beq.n	80077da <UART_SetConfig+0x192>
 80077c8:	e00f      	b.n	80077ea <UART_SetConfig+0x1a2>
 80077ca:	2300      	movs	r3, #0
 80077cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d0:	e042      	b.n	8007858 <UART_SetConfig+0x210>
 80077d2:	2302      	movs	r3, #2
 80077d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d8:	e03e      	b.n	8007858 <UART_SetConfig+0x210>
 80077da:	2304      	movs	r3, #4
 80077dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077e0:	e03a      	b.n	8007858 <UART_SetConfig+0x210>
 80077e2:	2308      	movs	r3, #8
 80077e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077e8:	e036      	b.n	8007858 <UART_SetConfig+0x210>
 80077ea:	2310      	movs	r3, #16
 80077ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077f0:	e032      	b.n	8007858 <UART_SetConfig+0x210>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a3f      	ldr	r2, [pc, #252]	; (80078f4 <UART_SetConfig+0x2ac>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d12a      	bne.n	8007852 <UART_SetConfig+0x20a>
 80077fc:	4b3f      	ldr	r3, [pc, #252]	; (80078fc <UART_SetConfig+0x2b4>)
 80077fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007802:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007806:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800780a:	d01a      	beq.n	8007842 <UART_SetConfig+0x1fa>
 800780c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007810:	d81b      	bhi.n	800784a <UART_SetConfig+0x202>
 8007812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007816:	d00c      	beq.n	8007832 <UART_SetConfig+0x1ea>
 8007818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800781c:	d815      	bhi.n	800784a <UART_SetConfig+0x202>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <UART_SetConfig+0x1e2>
 8007822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007826:	d008      	beq.n	800783a <UART_SetConfig+0x1f2>
 8007828:	e00f      	b.n	800784a <UART_SetConfig+0x202>
 800782a:	2300      	movs	r3, #0
 800782c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007830:	e012      	b.n	8007858 <UART_SetConfig+0x210>
 8007832:	2302      	movs	r3, #2
 8007834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007838:	e00e      	b.n	8007858 <UART_SetConfig+0x210>
 800783a:	2304      	movs	r3, #4
 800783c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007840:	e00a      	b.n	8007858 <UART_SetConfig+0x210>
 8007842:	2308      	movs	r3, #8
 8007844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007848:	e006      	b.n	8007858 <UART_SetConfig+0x210>
 800784a:	2310      	movs	r3, #16
 800784c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007850:	e002      	b.n	8007858 <UART_SetConfig+0x210>
 8007852:	2310      	movs	r3, #16
 8007854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a25      	ldr	r2, [pc, #148]	; (80078f4 <UART_SetConfig+0x2ac>)
 800785e:	4293      	cmp	r3, r2
 8007860:	f040 808a 	bne.w	8007978 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007868:	2b08      	cmp	r3, #8
 800786a:	d824      	bhi.n	80078b6 <UART_SetConfig+0x26e>
 800786c:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <UART_SetConfig+0x22c>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	08007899 	.word	0x08007899
 8007878:	080078b7 	.word	0x080078b7
 800787c:	080078a1 	.word	0x080078a1
 8007880:	080078b7 	.word	0x080078b7
 8007884:	080078a7 	.word	0x080078a7
 8007888:	080078b7 	.word	0x080078b7
 800788c:	080078b7 	.word	0x080078b7
 8007890:	080078b7 	.word	0x080078b7
 8007894:	080078af 	.word	0x080078af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007898:	f7fd fb46 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 800789c:	61f8      	str	r0, [r7, #28]
        break;
 800789e:	e010      	b.n	80078c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078a0:	4b19      	ldr	r3, [pc, #100]	; (8007908 <UART_SetConfig+0x2c0>)
 80078a2:	61fb      	str	r3, [r7, #28]
        break;
 80078a4:	e00d      	b.n	80078c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078a6:	f7fd faa7 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 80078aa:	61f8      	str	r0, [r7, #28]
        break;
 80078ac:	e009      	b.n	80078c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078b2:	61fb      	str	r3, [r7, #28]
        break;
 80078b4:	e005      	b.n	80078c2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80078c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8109 	beq.w	8007adc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	4413      	add	r3, r2
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d305      	bcc.n	80078e6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d912      	bls.n	800790c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078ec:	e0f6      	b.n	8007adc <UART_SetConfig+0x494>
 80078ee:	bf00      	nop
 80078f0:	efff69f3 	.word	0xefff69f3
 80078f4:	40008000 	.word	0x40008000
 80078f8:	40013800 	.word	0x40013800
 80078fc:	40021000 	.word	0x40021000
 8007900:	40004400 	.word	0x40004400
 8007904:	40004800 	.word	0x40004800
 8007908:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	2200      	movs	r2, #0
 8007910:	461c      	mov	r4, r3
 8007912:	4615      	mov	r5, r2
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	022b      	lsls	r3, r5, #8
 800791e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007922:	0222      	lsls	r2, r4, #8
 8007924:	68f9      	ldr	r1, [r7, #12]
 8007926:	6849      	ldr	r1, [r1, #4]
 8007928:	0849      	lsrs	r1, r1, #1
 800792a:	2000      	movs	r0, #0
 800792c:	4688      	mov	r8, r1
 800792e:	4681      	mov	r9, r0
 8007930:	eb12 0a08 	adds.w	sl, r2, r8
 8007934:	eb43 0b09 	adc.w	fp, r3, r9
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	607a      	str	r2, [r7, #4]
 8007942:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007946:	4650      	mov	r0, sl
 8007948:	4659      	mov	r1, fp
 800794a:	f7f8 fc3f 	bl	80001cc <__aeabi_uldivmod>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4613      	mov	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800795c:	d308      	bcc.n	8007970 <UART_SetConfig+0x328>
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007964:	d204      	bcs.n	8007970 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	60da      	str	r2, [r3, #12]
 800796e:	e0b5      	b.n	8007adc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007976:	e0b1      	b.n	8007adc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007980:	d15d      	bne.n	8007a3e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007982:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007986:	2b08      	cmp	r3, #8
 8007988:	d827      	bhi.n	80079da <UART_SetConfig+0x392>
 800798a:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0x348>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079c5 	.word	0x080079c5
 800799c:	080079db 	.word	0x080079db
 80079a0:	080079cb 	.word	0x080079cb
 80079a4:	080079db 	.word	0x080079db
 80079a8:	080079db 	.word	0x080079db
 80079ac:	080079db 	.word	0x080079db
 80079b0:	080079d3 	.word	0x080079d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b4:	f7fd fab8 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 80079b8:	61f8      	str	r0, [r7, #28]
        break;
 80079ba:	e014      	b.n	80079e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079bc:	f7fd faca 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 80079c0:	61f8      	str	r0, [r7, #28]
        break;
 80079c2:	e010      	b.n	80079e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079c4:	4b4c      	ldr	r3, [pc, #304]	; (8007af8 <UART_SetConfig+0x4b0>)
 80079c6:	61fb      	str	r3, [r7, #28]
        break;
 80079c8:	e00d      	b.n	80079e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ca:	f7fd fa15 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 80079ce:	61f8      	str	r0, [r7, #28]
        break;
 80079d0:	e009      	b.n	80079e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079d6:	61fb      	str	r3, [r7, #28]
        break;
 80079d8:	e005      	b.n	80079e6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d077      	beq.n	8007adc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	005a      	lsls	r2, r3, #1
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	085b      	lsrs	r3, r3, #1
 80079f6:	441a      	add	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	2b0f      	cmp	r3, #15
 8007a06:	d916      	bls.n	8007a36 <UART_SetConfig+0x3ee>
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0e:	d212      	bcs.n	8007a36 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f023 030f 	bic.w	r3, r3, #15
 8007a18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	085b      	lsrs	r3, r3, #1
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	8afb      	ldrh	r3, [r7, #22]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	8afa      	ldrh	r2, [r7, #22]
 8007a32:	60da      	str	r2, [r3, #12]
 8007a34:	e052      	b.n	8007adc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a3c:	e04e      	b.n	8007adc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a42:	2b08      	cmp	r3, #8
 8007a44:	d827      	bhi.n	8007a96 <UART_SetConfig+0x44e>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <UART_SetConfig+0x404>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a71 	.word	0x08007a71
 8007a50:	08007a79 	.word	0x08007a79
 8007a54:	08007a81 	.word	0x08007a81
 8007a58:	08007a97 	.word	0x08007a97
 8007a5c:	08007a87 	.word	0x08007a87
 8007a60:	08007a97 	.word	0x08007a97
 8007a64:	08007a97 	.word	0x08007a97
 8007a68:	08007a97 	.word	0x08007a97
 8007a6c:	08007a8f 	.word	0x08007a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a70:	f7fd fa5a 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 8007a74:	61f8      	str	r0, [r7, #28]
        break;
 8007a76:	e014      	b.n	8007aa2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a78:	f7fd fa6c 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 8007a7c:	61f8      	str	r0, [r7, #28]
        break;
 8007a7e:	e010      	b.n	8007aa2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a80:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <UART_SetConfig+0x4b0>)
 8007a82:	61fb      	str	r3, [r7, #28]
        break;
 8007a84:	e00d      	b.n	8007aa2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a86:	f7fd f9b7 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8007a8a:	61f8      	str	r0, [r7, #28]
        break;
 8007a8c:	e009      	b.n	8007aa2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a92:	61fb      	str	r3, [r7, #28]
        break;
 8007a94:	e005      	b.n	8007aa2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007aa0:	bf00      	nop
    }

    if (pclk != 0U)
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d019      	beq.n	8007adc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	085a      	lsrs	r2, r3, #1
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2b0f      	cmp	r3, #15
 8007ac0:	d909      	bls.n	8007ad6 <UART_SetConfig+0x48e>
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac8:	d205      	bcs.n	8007ad6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	e002      	b.n	8007adc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007ae8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3728      	adds	r7, #40	; 0x28
 8007af0:	46bd      	mov	sp, r7
 8007af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007af6:	bf00      	nop
 8007af8:	00f42400 	.word	0x00f42400

08007afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00a      	beq.n	8007b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	f003 0308 	and.w	r3, r3, #8
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01a      	beq.n	8007c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bfa:	d10a      	bne.n	8007c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	605a      	str	r2, [r3, #4]
  }
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c50:	f7f9 f9e6 	bl	8001020 <HAL_GetTick>
 8007c54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d10e      	bne.n	8007c82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f82d 	bl	8007cd2 <UART_WaitOnFlagUntilTimeout>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e023      	b.n	8007cca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d10e      	bne.n	8007cae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f817 	bl	8007cd2 <UART_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e00d      	b.n	8007cca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b09c      	sub	sp, #112	; 0x70
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	603b      	str	r3, [r7, #0]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce2:	e0a5      	b.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cea:	f000 80a1 	beq.w	8007e30 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cee:	f7f9 f997 	bl	8001020 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d302      	bcc.n	8007d04 <UART_WaitOnFlagUntilTimeout+0x32>
 8007cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d13e      	bne.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d18:	667b      	str	r3, [r7, #100]	; 0x64
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d24:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e6      	bne.n	8007d04 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3308      	adds	r3, #8
 8007d54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d56:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e5      	bne.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2220      	movs	r2, #32
 8007d74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e067      	b.n	8007e52 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d04f      	beq.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d9e:	d147      	bne.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007da8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e6      	bne.n	8007daa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3308      	adds	r3, #8
 8007de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	613b      	str	r3, [r7, #16]
   return(result);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f023 0301 	bic.w	r3, r3, #1
 8007df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3308      	adds	r3, #8
 8007dfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dfc:	623a      	str	r2, [r7, #32]
 8007dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	69f9      	ldr	r1, [r7, #28]
 8007e02:	6a3a      	ldr	r2, [r7, #32]
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e5      	bne.n	8007ddc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2220      	movs	r2, #32
 8007e14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e010      	b.n	8007e52 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69da      	ldr	r2, [r3, #28]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	bf0c      	ite	eq
 8007e40:	2301      	moveq	r3, #1
 8007e42:	2300      	movne	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	461a      	mov	r2, r3
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	f43f af4a 	beq.w	8007ce4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3770      	adds	r7, #112	; 0x70
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b095      	sub	sp, #84	; 0x54
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e80:	643b      	str	r3, [r7, #64]	; 0x40
 8007e82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e6      	bne.n	8007e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3308      	adds	r3, #8
 8007e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f023 0301 	bic.w	r3, r3, #1
 8007eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e5      	bne.n	8007e94 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d118      	bne.n	8007f02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f023 0310 	bic.w	r3, r3, #16
 8007ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6979      	ldr	r1, [r7, #20]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	613b      	str	r3, [r7, #16]
   return(result);
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e6      	bne.n	8007ed0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007f14:	bf00      	nop
 8007f16:	3754      	adds	r7, #84	; 0x54
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff fb6c 	bl	800761c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f44:	bf00      	nop
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	61bb      	str	r3, [r7, #24]
 8007f74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6979      	ldr	r1, [r7, #20]
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e6      	bne.n	8007f54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff fb38 	bl	8007608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f98:	bf00      	nop
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <stimLib_stimInit>:
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	4808      	ldr	r0, [pc, #32]	; (8007fd8 <stimLib_stimInit+0x24>)
 8007fb8:	f001 f8ac 	bl	8009114 <puts>
 8007fbc:	f000 fd90 	bl	8008ae0 <stimLib_stateGet>
 8007fc0:	b940      	cbnz	r0, 8007fd4 <stimLib_stimInit+0x20>
 8007fc2:	f000 f875 	bl	80080b0 <stimLib_initResrc>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	b910      	cbnz	r0, 8007fd0 <stimLib_stimInit+0x1c>
 8007fca:	2001      	movs	r0, #1
 8007fcc:	f000 fd8e 	bl	8008aec <stimLib_stateSet>
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	bd10      	pop	{r4, pc}
 8007fd4:	2403      	movs	r4, #3
 8007fd6:	e7fb      	b.n	8007fd0 <stimLib_stimInit+0x1c>
 8007fd8:	08009afc 	.word	0x08009afc

08007fdc <stimLib_stimSignalConfig>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	4604      	mov	r4, r0
 8007fe0:	b908      	cbnz	r0, 8007fe6 <stimLib_stimSignalConfig+0xa>
 8007fe2:	2004      	movs	r0, #4
 8007fe4:	bd10      	pop	{r4, pc}
 8007fe6:	f000 fde7 	bl	8008bb8 <stimLib_signalParamCheck>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d0f9      	beq.n	8007fe2 <stimLib_stimSignalConfig+0x6>
 8007fee:	f000 fd77 	bl	8008ae0 <stimLib_stateGet>
 8007ff2:	2801      	cmp	r0, #1
 8007ff4:	d104      	bne.n	8008000 <stimLib_stimSignalConfig+0x24>
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 fd9a 	bl	8008b30 <stimLib_stateSigParamSet>
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	e7f1      	b.n	8007fe4 <stimLib_stimSignalConfig+0x8>
 8008000:	2003      	movs	r0, #3
 8008002:	e7ef      	b.n	8007fe4 <stimLib_stimSignalConfig+0x8>

08008004 <stimLib_stimTriggerConfig>:
 8008004:	b510      	push	{r4, lr}
 8008006:	4604      	mov	r4, r0
 8008008:	b908      	cbnz	r0, 800800e <stimLib_stimTriggerConfig+0xa>
 800800a:	2004      	movs	r0, #4
 800800c:	bd10      	pop	{r4, pc}
 800800e:	f000 fdeb 	bl	8008be8 <stimLib_triggerParamCheck>
 8008012:	2800      	cmp	r0, #0
 8008014:	d0f9      	beq.n	800800a <stimLib_stimTriggerConfig+0x6>
 8008016:	f000 fd63 	bl	8008ae0 <stimLib_stateGet>
 800801a:	2801      	cmp	r0, #1
 800801c:	d104      	bne.n	8008028 <stimLib_stimTriggerConfig+0x24>
 800801e:	4620      	mov	r0, r4
 8008020:	f000 fd98 	bl	8008b54 <stimLib_stateTrgParamSet>
 8008024:	2000      	movs	r0, #0
 8008026:	e7f1      	b.n	800800c <stimLib_stimTriggerConfig+0x8>
 8008028:	2003      	movs	r0, #3
 800802a:	e7ef      	b.n	800800c <stimLib_stimTriggerConfig+0x8>

0800802c <stimLib_stimSessionStart>:
 800802c:	b508      	push	{r3, lr}
 800802e:	f000 fd57 	bl	8008ae0 <stimLib_stateGet>
 8008032:	2801      	cmp	r0, #1
 8008034:	d111      	bne.n	800805a <stimLib_stimSessionStart+0x2e>
 8008036:	f000 fda3 	bl	8008b80 <stimLib_stateSigParamCheck>
 800803a:	b180      	cbz	r0, 800805e <stimLib_stimSessionStart+0x32>
 800803c:	f000 fdd8 	bl	8008bf0 <stimLib_paramSetting>
 8008040:	4b08      	ldr	r3, [pc, #32]	; (8008064 <stimLib_stimSessionStart+0x38>)
 8008042:	7c1b      	ldrb	r3, [r3, #16]
 8008044:	b10b      	cbz	r3, 800804a <stimLib_stimSessionStart+0x1e>
 8008046:	f000 ff45 	bl	8008ed4 <stimLib_stepupStart>
 800804a:	2002      	movs	r0, #2
 800804c:	f000 fd4e 	bl	8008aec <stimLib_stateSet>
 8008050:	4805      	ldr	r0, [pc, #20]	; (8008068 <stimLib_stimSessionStart+0x3c>)
 8008052:	f001 f85f 	bl	8009114 <puts>
 8008056:	2000      	movs	r0, #0
 8008058:	bd08      	pop	{r3, pc}
 800805a:	2003      	movs	r0, #3
 800805c:	e7fc      	b.n	8008058 <stimLib_stimSessionStart+0x2c>
 800805e:	2004      	movs	r0, #4
 8008060:	e7fa      	b.n	8008058 <stimLib_stimSessionStart+0x2c>
 8008062:	bf00      	nop
 8008064:	200003ec 	.word	0x200003ec
 8008068:	08009b19 	.word	0x08009b19

0800806c <stimLib_stimStart>:
 800806c:	b508      	push	{r3, lr}
 800806e:	f000 fd37 	bl	8008ae0 <stimLib_stateGet>
 8008072:	2802      	cmp	r0, #2
 8008074:	d106      	bne.n	8008084 <stimLib_stimStart+0x18>
 8008076:	f000 fdcb 	bl	8008c10 <stimLib_stimPulseStart>
 800807a:	2003      	movs	r0, #3
 800807c:	f000 fd36 	bl	8008aec <stimLib_stateSet>
 8008080:	2000      	movs	r0, #0
 8008082:	bd08      	pop	{r3, pc}
 8008084:	2003      	movs	r0, #3
 8008086:	e7fc      	b.n	8008082 <stimLib_stimStart+0x16>

08008088 <stimLib_chkSystem>:
 8008088:	2001      	movs	r0, #1
 800808a:	4770      	bx	lr

0800808c <stimLib_errorHandle>:
 800808c:	b508      	push	{r3, lr}
 800808e:	f000 ff28 	bl	8008ee2 <stimLib_stepupStop>
 8008092:	f000 fdc6 	bl	8008c22 <stimLib_stimPulseStop>
 8008096:	f000 fdb4 	bl	8008c02 <stimLib_paramClear>
 800809a:	2005      	movs	r0, #5
 800809c:	f000 fd26 	bl	8008aec <stimLib_stateSet>
 80080a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80080a4:	4801      	ldr	r0, [pc, #4]	; (80080ac <stimLib_errorHandle+0x20>)
 80080a6:	f001 b835 	b.w	8009114 <puts>
 80080aa:	bf00      	nop
 80080ac:	08009b41 	.word	0x08009b41

080080b0 <stimLib_initResrc>:
 80080b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080b2:	2300      	movs	r3, #0
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	f8cd 3003 	str.w	r3, [sp, #3]
 80080ba:	f7ff ffe5 	bl	8008088 <stimLib_chkSystem>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d05b      	beq.n	800817a <stimLib_initResrc+0xca>
 80080c2:	4b39      	ldr	r3, [pc, #228]	; (80081a8 <stimLib_initResrc+0xf8>)
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	4b39      	ldr	r3, [pc, #228]	; (80081ac <stimLib_initResrc+0xfc>)
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d156      	bne.n	800817a <stimLib_initResrc+0xca>
 80080cc:	f000 fd08 	bl	8008ae0 <stimLib_stateGet>
 80080d0:	4604      	mov	r4, r0
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d153      	bne.n	800817e <stimLib_initResrc+0xce>
 80080d6:	466d      	mov	r5, sp
 80080d8:	9000      	str	r0, [sp, #0]
 80080da:	462f      	mov	r7, r5
 80080dc:	f8cd 0003 	str.w	r0, [sp, #3]
 80080e0:	4606      	mov	r6, r0
 80080e2:	b2f3      	uxtb	r3, r6
 80080e4:	3b01      	subs	r3, #1
 80080e6:	2b05      	cmp	r3, #5
 80080e8:	d804      	bhi.n	80080f4 <stimLib_initResrc+0x44>
 80080ea:	e8df f003 	tbb	[pc, r3]
 80080ee:	1d18      	.short	0x1d18
 80080f0:	312c2722 	.word	0x312c2722
 80080f4:	f000 f910 	bl	8008318 <stimLib_dmaInit>
 80080f8:	f88d 0000 	strb.w	r0, [sp]
 80080fc:	f817 3b01 	ldrb.w	r3, [r7], #1
 8008100:	b11b      	cbz	r3, 800810a <stimLib_initResrc+0x5a>
 8008102:	3601      	adds	r6, #1
 8008104:	2e07      	cmp	r6, #7
 8008106:	d1ec      	bne.n	80080e2 <stimLib_initResrc+0x32>
 8008108:	2300      	movs	r3, #0
 800810a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	b3b9      	cbz	r1, 8008182 <stimLib_initResrc+0xd2>
 8008112:	3301      	adds	r3, #1
 8008114:	2b07      	cmp	r3, #7
 8008116:	d1f8      	bne.n	800810a <stimLib_initResrc+0x5a>
 8008118:	4620      	mov	r0, r4
 800811a:	b003      	add	sp, #12
 800811c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800811e:	f000 f92d 	bl	800837c <stimLib_tim1_Init>
 8008122:	f88d 0001 	strb.w	r0, [sp, #1]
 8008126:	e7e9      	b.n	80080fc <stimLib_initResrc+0x4c>
 8008128:	f000 f988 	bl	800843c <stimLib_tim2_Init>
 800812c:	f88d 0002 	strb.w	r0, [sp, #2]
 8008130:	e7e4      	b.n	80080fc <stimLib_initResrc+0x4c>
 8008132:	f000 fa11 	bl	8008558 <stimLib_tim6_Init>
 8008136:	f88d 0003 	strb.w	r0, [sp, #3]
 800813a:	e7df      	b.n	80080fc <stimLib_initResrc+0x4c>
 800813c:	f000 fa50 	bl	80085e0 <stimLib_adc1_Init>
 8008140:	f88d 0004 	strb.w	r0, [sp, #4]
 8008144:	e7da      	b.n	80080fc <stimLib_initResrc+0x4c>
 8008146:	f000 fab5 	bl	80086b4 <stimLib_adc2_Init>
 800814a:	f88d 0005 	strb.w	r0, [sp, #5]
 800814e:	e7d5      	b.n	80080fc <stimLib_initResrc+0x4c>
 8008150:	f000 f88a 	bl	8008268 <stimLib_gpioInit>
 8008154:	f88d 0006 	strb.w	r0, [sp, #6]
 8008158:	e7d0      	b.n	80080fc <stimLib_initResrc+0x4c>
 800815a:	f000 fb01 	bl	8008760 <stimLib_gpioDeinit>
 800815e:	f000 fb45 	bl	80087ec <stimLib_adc2_Deinit>
 8008162:	f000 fb3d 	bl	80087e0 <stimLib_adc1_Deinit>
 8008166:	f000 fb35 	bl	80087d4 <stimLib_tim6_Deinit>
 800816a:	f000 fb2d 	bl	80087c8 <stimLib_tim2_Deinit>
 800816e:	f000 fb25 	bl	80087bc <stimLib_tim1_Deinit>
 8008172:	f000 fb0b 	bl	800878c <stimLib_dmaDeinit>
 8008176:	2401      	movs	r4, #1
 8008178:	e7ce      	b.n	8008118 <stimLib_initResrc+0x68>
 800817a:	2405      	movs	r4, #5
 800817c:	e7cc      	b.n	8008118 <stimLib_initResrc+0x68>
 800817e:	2403      	movs	r4, #3
 8008180:	e7ca      	b.n	8008118 <stimLib_initResrc+0x68>
 8008182:	1e53      	subs	r3, r2, #1
 8008184:	2b05      	cmp	r3, #5
 8008186:	d8f4      	bhi.n	8008172 <stimLib_initResrc+0xc2>
 8008188:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <stimLib_initResrc+0xe0>)
 800818a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818e:	bf00      	nop
 8008190:	0800816f 	.word	0x0800816f
 8008194:	0800816b 	.word	0x0800816b
 8008198:	08008167 	.word	0x08008167
 800819c:	08008163 	.word	0x08008163
 80081a0:	0800815f 	.word	0x0800815f
 80081a4:	0800815b 	.word	0x0800815b
 80081a8:	20000000 	.word	0x20000000
 80081ac:	04c4b400 	.word	0x04c4b400

080081b0 <stimLib_trgInput_callback>:
 80081b0:	2801      	cmp	r0, #1
 80081b2:	b508      	push	{r3, lr}
 80081b4:	4601      	mov	r1, r0
 80081b6:	d122      	bne.n	80081fe <stimLib_trgInput_callback+0x4e>
 80081b8:	4b11      	ldr	r3, [pc, #68]	; (8008200 <stimLib_trgInput_callback+0x50>)
 80081ba:	7cda      	ldrb	r2, [r3, #19]
 80081bc:	b1fa      	cbz	r2, 80081fe <stimLib_trgInput_callback+0x4e>
 80081be:	8a9a      	ldrh	r2, [r3, #20]
 80081c0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80081c4:	d108      	bne.n	80081d8 <stimLib_trgInput_callback+0x28>
 80081c6:	480f      	ldr	r0, [pc, #60]	; (8008204 <stimLib_trgInput_callback+0x54>)
 80081c8:	f7fc f808 	bl	80041dc <HAL_GPIO_ReadPin>
 80081cc:	2801      	cmp	r0, #1
 80081ce:	d10c      	bne.n	80081ea <stimLib_trgInput_callback+0x3a>
 80081d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80081d4:	f000 b822 	b.w	800821c <stimLib_stimStopDelayRaw>
 80081d8:	f240 1001 	movw	r0, #257	; 0x101
 80081dc:	4282      	cmp	r2, r0
 80081de:	d108      	bne.n	80081f2 <stimLib_trgInput_callback+0x42>
 80081e0:	4808      	ldr	r0, [pc, #32]	; (8008204 <stimLib_trgInput_callback+0x54>)
 80081e2:	f7fb fffb 	bl	80041dc <HAL_GPIO_ReadPin>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d0f2      	beq.n	80081d0 <stimLib_trgInput_callback+0x20>
 80081ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80081ee:	f7ff bf3d 	b.w	800806c <stimLib_stimStart>
 80081f2:	7d1a      	ldrb	r2, [r3, #20]
 80081f4:	2a01      	cmp	r2, #1
 80081f6:	d802      	bhi.n	80081fe <stimLib_trgInput_callback+0x4e>
 80081f8:	7d5b      	ldrb	r3, [r3, #21]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0f5      	beq.n	80081ea <stimLib_trgInput_callback+0x3a>
 80081fe:	bd08      	pop	{r3, pc}
 8008200:	200003ec 	.word	0x200003ec
 8008204:	48000400 	.word	0x48000400

08008208 <stimLib_timError_callback>:
 8008208:	f7ff bf40 	b.w	800808c <stimLib_errorHandle>

0800820c <stimLib_timPwmPluseFinished_callback>:
 800820c:	6803      	ldr	r3, [r0, #0]
 800820e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008212:	d101      	bne.n	8008218 <stimLib_timPwmPluseFinished_callback+0xc>
 8008214:	f000 bd05 	b.w	8008c22 <stimLib_stimPulseStop>
 8008218:	4770      	bx	lr
	...

0800821c <stimLib_stimStopDelayRaw>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	f000 fc5f 	bl	8008ae0 <stimLib_stateGet>
 8008222:	2803      	cmp	r0, #3
 8008224:	d11b      	bne.n	800825e <stimLib_stimStopDelayRaw+0x42>
 8008226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800822a:	4d0d      	ldr	r5, [pc, #52]	; (8008260 <stimLib_stimStopDelayRaw+0x44>)
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	402a      	ands	r2, r5
 8008230:	619a      	str	r2, [r3, #24]
 8008232:	6998      	ldr	r0, [r3, #24]
 8008234:	f244 0440 	movw	r4, #16448	; 0x4040
 8008238:	4320      	orrs	r0, r4
 800823a:	6198      	str	r0, [r3, #24]
 800823c:	69d9      	ldr	r1, [r3, #28]
 800823e:	4029      	ands	r1, r5
 8008240:	61d9      	str	r1, [r3, #28]
 8008242:	69da      	ldr	r2, [r3, #28]
 8008244:	4322      	orrs	r2, r4
 8008246:	61da      	str	r2, [r3, #28]
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <stimLib_stimStopDelayRaw+0x48>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	6813      	ldr	r3, [r2, #0]
 800824e:	f043 0302 	orr.w	r3, r3, #2
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	2004      	movs	r0, #4
 8008256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800825a:	f000 bc47 	b.w	8008aec <stimLib_stateSet>
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	fefe8f8f 	.word	0xfefe8f8f
 8008264:	20000310 	.word	0x20000310

08008268 <stimLib_gpioInit>:
 8008268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800826a:	2214      	movs	r2, #20
 800826c:	b08b      	sub	sp, #44	; 0x2c
 800826e:	eb0d 0002 	add.w	r0, sp, r2
 8008272:	2100      	movs	r1, #0
 8008274:	f000 fed8 	bl	8009028 <memset>
 8008278:	4b24      	ldr	r3, [pc, #144]	; (800830c <stimLib_gpioInit+0xa4>)
 800827a:	4f25      	ldr	r7, [pc, #148]	; (8008310 <stimLib_gpioInit+0xa8>)
 800827c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800827e:	4e25      	ldr	r6, [pc, #148]	; (8008314 <stimLib_gpioInit+0xac>)
 8008280:	f042 0204 	orr.w	r2, r2, #4
 8008284:	64da      	str	r2, [r3, #76]	; 0x4c
 8008286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008288:	f002 0204 	and.w	r2, r2, #4
 800828c:	9201      	str	r2, [sp, #4]
 800828e:	9a01      	ldr	r2, [sp, #4]
 8008290:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008292:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008296:	64da      	str	r2, [r3, #76]	; 0x4c
 8008298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800829a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800829e:	9202      	str	r2, [sp, #8]
 80082a0:	9a02      	ldr	r2, [sp, #8]
 80082a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082a4:	f042 0201 	orr.w	r2, r2, #1
 80082a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80082aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082ac:	f002 0201 	and.w	r2, r2, #1
 80082b0:	9203      	str	r2, [sp, #12]
 80082b2:	9a03      	ldr	r2, [sp, #12]
 80082b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082b6:	f042 0202 	orr.w	r2, r2, #2
 80082ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80082bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	9304      	str	r3, [sp, #16]
 80082c4:	4638      	mov	r0, r7
 80082c6:	2200      	movs	r2, #0
 80082c8:	f241 11fe 	movw	r1, #4606	; 0x11fe
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	f7fb ff9d 	bl	800420c <HAL_GPIO_WritePin>
 80082d2:	2200      	movs	r2, #0
 80082d4:	4630      	mov	r0, r6
 80082d6:	2108      	movs	r1, #8
 80082d8:	f7fb ff98 	bl	800420c <HAL_GPIO_WritePin>
 80082dc:	2501      	movs	r5, #1
 80082de:	f241 13fe 	movw	r3, #4606	; 0x11fe
 80082e2:	2400      	movs	r4, #0
 80082e4:	a905      	add	r1, sp, #20
 80082e6:	4638      	mov	r0, r7
 80082e8:	e9cd 3505 	strd	r3, r5, [sp, #20]
 80082ec:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80082f0:	f7fb fd30 	bl	8003d54 <HAL_GPIO_Init>
 80082f4:	2308      	movs	r3, #8
 80082f6:	4630      	mov	r0, r6
 80082f8:	a905      	add	r1, sp, #20
 80082fa:	e9cd 3505 	strd	r3, r5, [sp, #20]
 80082fe:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8008302:	f7fb fd27 	bl	8003d54 <HAL_GPIO_Init>
 8008306:	4628      	mov	r0, r5
 8008308:	b00b      	add	sp, #44	; 0x2c
 800830a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830c:	40021000 	.word	0x40021000
 8008310:	48000400 	.word	0x48000400
 8008314:	48001c00 	.word	0x48001c00

08008318 <stimLib_dmaInit>:
 8008318:	4b17      	ldr	r3, [pc, #92]	; (8008378 <stimLib_dmaInit+0x60>)
 800831a:	b507      	push	{r0, r1, r2, lr}
 800831c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800831e:	f042 0201 	orr.w	r2, r2, #1
 8008322:	649a      	str	r2, [r3, #72]	; 0x48
 8008324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008326:	f002 0201 	and.w	r2, r2, #1
 800832a:	9200      	str	r2, [sp, #0]
 800832c:	9a00      	ldr	r2, [sp, #0]
 800832e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008330:	f042 0202 	orr.w	r2, r2, #2
 8008334:	649a      	str	r2, [r3, #72]	; 0x48
 8008336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	2101      	movs	r1, #1
 8008342:	200b      	movs	r0, #11
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	f7fb f9b8 	bl	80036ba <HAL_NVIC_SetPriority>
 800834a:	200b      	movs	r0, #11
 800834c:	f7fb f9d1 	bl	80036f2 <HAL_NVIC_EnableIRQ>
 8008350:	2200      	movs	r2, #0
 8008352:	2101      	movs	r1, #1
 8008354:	2011      	movs	r0, #17
 8008356:	f7fb f9b0 	bl	80036ba <HAL_NVIC_SetPriority>
 800835a:	2011      	movs	r0, #17
 800835c:	f7fb f9c9 	bl	80036f2 <HAL_NVIC_EnableIRQ>
 8008360:	2200      	movs	r2, #0
 8008362:	2101      	movs	r1, #1
 8008364:	200c      	movs	r0, #12
 8008366:	f7fb f9a8 	bl	80036ba <HAL_NVIC_SetPriority>
 800836a:	200c      	movs	r0, #12
 800836c:	f7fb f9c1 	bl	80036f2 <HAL_NVIC_EnableIRQ>
 8008370:	2001      	movs	r0, #1
 8008372:	b003      	add	sp, #12
 8008374:	f85d fb04 	ldr.w	pc, [sp], #4
 8008378:	40021000 	.word	0x40021000

0800837c <stimLib_tim1_Init>:
 800837c:	b530      	push	{r4, r5, lr}
 800837e:	2500      	movs	r5, #0
 8008380:	b097      	sub	sp, #92	; 0x5c
 8008382:	4629      	mov	r1, r5
 8008384:	221c      	movs	r2, #28
 8008386:	a804      	add	r0, sp, #16
 8008388:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800838c:	9503      	str	r5, [sp, #12]
 800838e:	f000 fe4b 	bl	8009028 <memset>
 8008392:	222c      	movs	r2, #44	; 0x2c
 8008394:	4629      	mov	r1, r5
 8008396:	eb0d 0002 	add.w	r0, sp, r2
 800839a:	f000 fe45 	bl	8009028 <memset>
 800839e:	4c25      	ldr	r4, [pc, #148]	; (8008434 <stimLib_tim1_Init+0xb8>)
 80083a0:	4a25      	ldr	r2, [pc, #148]	; (8008438 <stimLib_tim1_Init+0xbc>)
 80083a2:	2303      	movs	r3, #3
 80083a4:	e9c4 2300 	strd	r2, r3, [r4]
 80083a8:	2110      	movs	r1, #16
 80083aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80083ae:	e9c4 1302 	strd	r1, r3, [r4, #8]
 80083b2:	4620      	mov	r0, r4
 80083b4:	2380      	movs	r3, #128	; 0x80
 80083b6:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083ba:	61a3      	str	r3, [r4, #24]
 80083bc:	f7fd fc08 	bl	8005bd0 <HAL_TIM_PWM_Init>
 80083c0:	4605      	mov	r5, r0
 80083c2:	b110      	cbz	r0, 80083ca <stimLib_tim1_Init+0x4e>
 80083c4:	2000      	movs	r0, #0
 80083c6:	b017      	add	sp, #92	; 0x5c
 80083c8:	bd30      	pop	{r4, r5, pc}
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fab4 	bl	8008938 <stimLib_tim_pwmmspInit>
 80083d0:	a901      	add	r1, sp, #4
 80083d2:	4620      	mov	r0, r4
 80083d4:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80083d8:	9503      	str	r5, [sp, #12]
 80083da:	f7fe fce9 	bl	8006db0 <HAL_TIMEx_MasterConfigSynchronization>
 80083de:	4602      	mov	r2, r0
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1ef      	bne.n	80083c4 <stimLib_tim1_Init+0x48>
 80083e4:	2360      	movs	r3, #96	; 0x60
 80083e6:	e9cd 3004 	strd	r3, r0, [sp, #16]
 80083ea:	e9cd 0006 	strd	r0, r0, [sp, #24]
 80083ee:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80083f2:	900a      	str	r0, [sp, #40]	; 0x28
 80083f4:	a904      	add	r1, sp, #16
 80083f6:	4620      	mov	r0, r4
 80083f8:	f7fd ff9e 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d1e1      	bne.n	80083c4 <stimLib_tim1_Init+0x48>
 8008400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008404:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
 8008408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800840c:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 8008410:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 8008414:	e9cd 3013 	strd	r3, r0, [sp, #76]	; 0x4c
 8008418:	900f      	str	r0, [sp, #60]	; 0x3c
 800841a:	9012      	str	r0, [sp, #72]	; 0x48
 800841c:	9015      	str	r0, [sp, #84]	; 0x54
 800841e:	a90b      	add	r1, sp, #44	; 0x2c
 8008420:	4620      	mov	r0, r4
 8008422:	f7fe fd2b 	bl	8006e7c <HAL_TIMEx_ConfigBreakDeadTime>
 8008426:	2800      	cmp	r0, #0
 8008428:	d1cc      	bne.n	80083c4 <stimLib_tim1_Init+0x48>
 800842a:	4620      	mov	r0, r4
 800842c:	f000 fb14 	bl	8008a58 <stimLib_tim_msppostInit>
 8008430:	2001      	movs	r0, #1
 8008432:	e7c8      	b.n	80083c6 <stimLib_tim1_Init+0x4a>
 8008434:	200001e4 	.word	0x200001e4
 8008438:	40012c00 	.word	0x40012c00

0800843c <stimLib_tim2_Init>:
 800843c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800843e:	2400      	movs	r4, #0
 8008440:	b08b      	sub	sp, #44	; 0x2c
 8008442:	4e42      	ldr	r6, [pc, #264]	; (800854c <stimLib_tim2_Init+0x110>)
 8008444:	9402      	str	r4, [sp, #8]
 8008446:	221c      	movs	r2, #28
 8008448:	4621      	mov	r1, r4
 800844a:	a803      	add	r0, sp, #12
 800844c:	e9cd 4400 	strd	r4, r4, [sp]
 8008450:	f000 fdea 	bl	8009028 <memset>
 8008454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	f7fc fd59 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 800845e:	4d3c      	ldr	r5, [pc, #240]	; (8008550 <stimLib_tim2_Init+0x114>)
 8008460:	4f3c      	ldr	r7, [pc, #240]	; (8008554 <stimLib_tim2_Init+0x118>)
 8008462:	fbb7 f0f0 	udiv	r0, r7, r0
 8008466:	2350      	movs	r3, #80	; 0x50
 8008468:	fbb3 f0f0 	udiv	r0, r3, r0
 800846c:	792b      	ldrb	r3, [r5, #4]
 800846e:	3801      	subs	r0, #1
 8008470:	e9c6 0401 	strd	r0, r4, [r6, #4]
 8008474:	b90b      	cbnz	r3, 800847a <stimLib_tim2_Init+0x3e>
 8008476:	2301      	movs	r3, #1
 8008478:	712b      	strb	r3, [r5, #4]
 800847a:	f7fc fd49 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 800847e:	4604      	mov	r4, r0
 8008480:	f7fc fd46 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8008484:	2300      	movs	r3, #0
 8008486:	fbb7 f0f0 	udiv	r0, r7, r0
 800848a:	6133      	str	r3, [r6, #16]
 800848c:	2750      	movs	r7, #80	; 0x50
 800848e:	2380      	movs	r3, #128	; 0x80
 8008490:	fbb7 f0f0 	udiv	r0, r7, r0
 8008494:	fbb4 f4f0 	udiv	r4, r4, r0
 8008498:	7928      	ldrb	r0, [r5, #4]
 800849a:	fbb4 f4f0 	udiv	r4, r4, r0
 800849e:	482b      	ldr	r0, [pc, #172]	; (800854c <stimLib_tim2_Init+0x110>)
 80084a0:	61b3      	str	r3, [r6, #24]
 80084a2:	3c01      	subs	r4, #1
 80084a4:	60f4      	str	r4, [r6, #12]
 80084a6:	f7fd fb93 	bl	8005bd0 <HAL_TIM_PWM_Init>
 80084aa:	b110      	cbz	r0, 80084b2 <stimLib_tim2_Init+0x76>
 80084ac:	2000      	movs	r0, #0
 80084ae:	b00b      	add	sp, #44	; 0x2c
 80084b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b2:	4826      	ldr	r0, [pc, #152]	; (800854c <stimLib_tim2_Init+0x110>)
 80084b4:	f000 fa40 	bl	8008938 <stimLib_tim_pwmmspInit>
 80084b8:	4824      	ldr	r0, [pc, #144]	; (800854c <stimLib_tim2_Init+0x110>)
 80084ba:	f7fd f848 	bl	800554e <HAL_TIM_OC_Init>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d1f4      	bne.n	80084ac <stimLib_tim2_Init+0x70>
 80084c2:	9002      	str	r0, [sp, #8]
 80084c4:	4669      	mov	r1, sp
 80084c6:	4821      	ldr	r0, [pc, #132]	; (800854c <stimLib_tim2_Init+0x110>)
 80084c8:	9700      	str	r7, [sp, #0]
 80084ca:	f7fe fc71 	bl	8006db0 <HAL_TIMEx_MasterConfigSynchronization>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d1ec      	bne.n	80084ac <stimLib_tim2_Init+0x70>
 80084d2:	2360      	movs	r3, #96	; 0x60
 80084d4:	9303      	str	r3, [sp, #12]
 80084d6:	88eb      	ldrh	r3, [r5, #6]
 80084d8:	330f      	adds	r3, #15
 80084da:	005b      	lsls	r3, r3, #1
 80084dc:	9304      	str	r3, [sp, #16]
 80084de:	7cab      	ldrb	r3, [r5, #18]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d12e      	bne.n	8008542 <stimLib_tim2_Init+0x106>
 80084e4:	2302      	movs	r3, #2
 80084e6:	9305      	str	r3, [sp, #20]
 80084e8:	4818      	ldr	r0, [pc, #96]	; (800854c <stimLib_tim2_Init+0x110>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	a903      	add	r1, sp, #12
 80084ee:	f7fd ff23 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d1da      	bne.n	80084ac <stimLib_tim2_Init+0x70>
 80084f6:	88eb      	ldrh	r3, [r5, #6]
 80084f8:	330a      	adds	r3, #10
 80084fa:	e9cd 3004 	strd	r3, r0, [sp, #16]
 80084fe:	2204      	movs	r2, #4
 8008500:	4812      	ldr	r0, [pc, #72]	; (800854c <stimLib_tim2_Init+0x110>)
 8008502:	a903      	add	r1, sp, #12
 8008504:	f7fd ff18 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 8008508:	2800      	cmp	r0, #0
 800850a:	d1cf      	bne.n	80084ac <stimLib_tim2_Init+0x70>
 800850c:	2330      	movs	r3, #48	; 0x30
 800850e:	9303      	str	r3, [sp, #12]
 8008510:	88eb      	ldrh	r3, [r5, #6]
 8008512:	480e      	ldr	r0, [pc, #56]	; (800854c <stimLib_tim2_Init+0x110>)
 8008514:	3314      	adds	r3, #20
 8008516:	2208      	movs	r2, #8
 8008518:	a903      	add	r1, sp, #12
 800851a:	9304      	str	r3, [sp, #16]
 800851c:	f7fd fe92 	bl	8006244 <HAL_TIM_OC_ConfigChannel>
 8008520:	2800      	cmp	r0, #0
 8008522:	d1c3      	bne.n	80084ac <stimLib_tim2_Init+0x70>
 8008524:	220c      	movs	r2, #12
 8008526:	2305      	movs	r3, #5
 8008528:	4808      	ldr	r0, [pc, #32]	; (800854c <stimLib_tim2_Init+0x110>)
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	eb0d 0102 	add.w	r1, sp, r2
 8008530:	f7fd fe88 	bl	8006244 <HAL_TIM_OC_ConfigChannel>
 8008534:	2800      	cmp	r0, #0
 8008536:	d1b9      	bne.n	80084ac <stimLib_tim2_Init+0x70>
 8008538:	4804      	ldr	r0, [pc, #16]	; (800854c <stimLib_tim2_Init+0x110>)
 800853a:	f000 fa8d 	bl	8008a58 <stimLib_tim_msppostInit>
 800853e:	2001      	movs	r0, #1
 8008540:	e7b5      	b.n	80084ae <stimLib_tim2_Init+0x72>
 8008542:	2b01      	cmp	r3, #1
 8008544:	bf08      	it	eq
 8008546:	9005      	streq	r0, [sp, #20]
 8008548:	e7ce      	b.n	80084e8 <stimLib_tim2_Init+0xac>
 800854a:	bf00      	nop
 800854c:	20000230 	.word	0x20000230
 8008550:	200003ec 	.word	0x200003ec
 8008554:	04c4b400 	.word	0x04c4b400

08008558 <stimLib_tim6_Init>:
 8008558:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800855c:	4e1d      	ldr	r6, [pc, #116]	; (80085d4 <stimLib_tim6_Init+0x7c>)
 800855e:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <stimLib_tim6_Init+0x80>)
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	2400      	movs	r4, #0
 8008564:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8008568:	9403      	str	r4, [sp, #12]
 800856a:	f7fc fcd1 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 800856e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80085dc <stimLib_tim6_Init+0x84>
 8008572:	fbb8 f0f0 	udiv	r0, r8, r0
 8008576:	f44f 7748 	mov.w	r7, #800	; 0x320
 800857a:	fbb7 f0f0 	udiv	r0, r7, r0
 800857e:	3801      	subs	r0, #1
 8008580:	e9c6 0401 	strd	r0, r4, [r6, #4]
 8008584:	f7fc fcc4 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8008588:	4605      	mov	r5, r0
 800858a:	f7fc fcc1 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 800858e:	2380      	movs	r3, #128	; 0x80
 8008590:	fbb8 f0f0 	udiv	r0, r8, r0
 8008594:	fbb7 f7f0 	udiv	r7, r7, r0
 8008598:	200a      	movs	r0, #10
 800859a:	fbb5 f5f7 	udiv	r5, r5, r7
 800859e:	fbb5 f5f0 	udiv	r5, r5, r0
 80085a2:	4630      	mov	r0, r6
 80085a4:	3d01      	subs	r5, #1
 80085a6:	60f5      	str	r5, [r6, #12]
 80085a8:	61b3      	str	r3, [r6, #24]
 80085aa:	f7fc fecf 	bl	800534c <HAL_TIM_Base_Init>
 80085ae:	4605      	mov	r5, r0
 80085b0:	b970      	cbnz	r0, 80085d0 <stimLib_tim6_Init+0x78>
 80085b2:	4630      	mov	r0, r6
 80085b4:	f000 fa30 	bl	8008a18 <stimLib_tim_basemspInit>
 80085b8:	a901      	add	r1, sp, #4
 80085ba:	4630      	mov	r0, r6
 80085bc:	9501      	str	r5, [sp, #4]
 80085be:	9503      	str	r5, [sp, #12]
 80085c0:	f7fe fbf6 	bl	8006db0 <HAL_TIMEx_MasterConfigSynchronization>
 80085c4:	fab0 f080 	clz	r0, r0
 80085c8:	0940      	lsrs	r0, r0, #5
 80085ca:	b004      	add	sp, #16
 80085cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d0:	4620      	mov	r0, r4
 80085d2:	e7fa      	b.n	80085ca <stimLib_tim6_Init+0x72>
 80085d4:	2000027c 	.word	0x2000027c
 80085d8:	40001000 	.word	0x40001000
 80085dc:	04c4b400 	.word	0x04c4b400

080085e0 <stimLib_adc1_Init>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	2500      	movs	r5, #0
 80085e4:	b090      	sub	sp, #64	; 0x40
 80085e6:	4629      	mov	r1, r5
 80085e8:	2218      	movs	r2, #24
 80085ea:	a804      	add	r0, sp, #16
 80085ec:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80085f0:	9503      	str	r5, [sp, #12]
 80085f2:	f000 fd19 	bl	8009028 <memset>
 80085f6:	4629      	mov	r1, r5
 80085f8:	2218      	movs	r2, #24
 80085fa:	a80a      	add	r0, sp, #40	; 0x28
 80085fc:	f000 fd14 	bl	8009028 <memset>
 8008600:	4c28      	ldr	r4, [pc, #160]	; (80086a4 <stimLib_adc1_Init+0xc4>)
 8008602:	4b29      	ldr	r3, [pc, #164]	; (80086a8 <stimLib_adc1_Init+0xc8>)
 8008604:	6125      	str	r5, [r4, #16]
 8008606:	e9c4 3500 	strd	r3, r5, [r4]
 800860a:	2308      	movs	r3, #8
 800860c:	6163      	str	r3, [r4, #20]
 800860e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008612:	8323      	strh	r3, [r4, #24]
 8008614:	2601      	movs	r6, #1
 8008616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800861a:	4620      	mov	r0, r4
 800861c:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8008620:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 8008624:	f884 5020 	strb.w	r5, [r4, #32]
 8008628:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 800862c:	61e6      	str	r6, [r4, #28]
 800862e:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8008632:	6363      	str	r3, [r4, #52]	; 0x34
 8008634:	f7f9 f830 	bl	8001698 <HAL_ADC_Init>
 8008638:	4605      	mov	r5, r0
 800863a:	b110      	cbz	r0, 8008642 <stimLib_adc1_Init+0x62>
 800863c:	2000      	movs	r0, #0
 800863e:	b010      	add	sp, #64	; 0x40
 8008640:	bd70      	pop	{r4, r5, r6, pc}
 8008642:	4620      	mov	r0, r4
 8008644:	f000 f8d8 	bl	80087f8 <stimLib_adc_mspInit>
 8008648:	a901      	add	r1, sp, #4
 800864a:	4620      	mov	r0, r4
 800864c:	65a5      	str	r5, [r4, #88]	; 0x58
 800864e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8008652:	9501      	str	r5, [sp, #4]
 8008654:	f7fa fe8e 	bl	8003374 <HAL_ADCEx_MultiModeConfigChannel>
 8008658:	2800      	cmp	r0, #0
 800865a:	d1ef      	bne.n	800863c <stimLib_adc1_Init+0x5c>
 800865c:	4913      	ldr	r1, [pc, #76]	; (80086ac <stimLib_adc1_Init+0xcc>)
 800865e:	4d14      	ldr	r5, [pc, #80]	; (80086b0 <stimLib_adc1_Init+0xd0>)
 8008660:	9506      	str	r5, [sp, #24]
 8008662:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8008666:	e9cd 1304 	strd	r1, r3, [sp, #16]
 800866a:	f640 2328 	movw	r3, #2600	; 0xa28
 800866e:	e9cd 3008 	strd	r3, r0, [sp, #32]
 8008672:	a904      	add	r1, sp, #16
 8008674:	4620      	mov	r0, r4
 8008676:	f88d 601c 	strb.w	r6, [sp, #28]
 800867a:	f7fa f9e1 	bl	8002a40 <HAL_ADC_AnalogWDGConfig>
 800867e:	2800      	cmp	r0, #0
 8008680:	d1dc      	bne.n	800863c <stimLib_adc1_Init+0x5c>
 8008682:	2306      	movs	r3, #6
 8008684:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
 8008688:	227f      	movs	r2, #127	; 0x7f
 800868a:	2304      	movs	r3, #4
 800868c:	900f      	str	r0, [sp, #60]	; 0x3c
 800868e:	a90a      	add	r1, sp, #40	; 0x28
 8008690:	4620      	mov	r0, r4
 8008692:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
 8008696:	950a      	str	r5, [sp, #40]	; 0x28
 8008698:	f7f9 fdd6 	bl	8002248 <HAL_ADC_ConfigChannel>
 800869c:	fab0 f080 	clz	r0, r0
 80086a0:	0940      	lsrs	r0, r0, #5
 80086a2:	e7cc      	b.n	800863e <stimLib_adc1_Init+0x5e>
 80086a4:	2000008c 	.word	0x2000008c
 80086a8:	50040000 	.word	0x50040000
 80086ac:	7dc00000 	.word	0x7dc00000
 80086b0:	25b00200 	.word	0x25b00200

080086b4 <stimLib_adc2_Init>:
 80086b4:	b530      	push	{r4, r5, lr}
 80086b6:	b087      	sub	sp, #28
 80086b8:	4c25      	ldr	r4, [pc, #148]	; (8008750 <stimLib_adc2_Init+0x9c>)
 80086ba:	2218      	movs	r2, #24
 80086bc:	2100      	movs	r1, #0
 80086be:	4668      	mov	r0, sp
 80086c0:	f000 fcb2 	bl	8009028 <memset>
 80086c4:	2201      	movs	r2, #1
 80086c6:	4823      	ldr	r0, [pc, #140]	; (8008754 <stimLib_adc2_Init+0xa0>)
 80086c8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 80086cc:	2108      	movs	r1, #8
 80086ce:	2300      	movs	r3, #0
 80086d0:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80086d4:	2102      	movs	r1, #2
 80086d6:	e9c4 0300 	strd	r0, r3, [r4]
 80086da:	61e1      	str	r1, [r4, #28]
 80086dc:	f44f 65d8 	mov.w	r5, #1728	; 0x6c0
 80086e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80086e8:	4620      	mov	r0, r4
 80086ea:	e9c4 510a 	strd	r5, r1, [r4, #40]	; 0x28
 80086ee:	e9c4 3302 	strd	r3, r3, [r4, #8]
 80086f2:	8323      	strh	r3, [r4, #24]
 80086f4:	f884 3020 	strb.w	r3, [r4, #32]
 80086f8:	6362      	str	r2, [r4, #52]	; 0x34
 80086fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80086fe:	f7f8 ffcb 	bl	8001698 <HAL_ADC_Init>
 8008702:	4605      	mov	r5, r0
 8008704:	b110      	cbz	r0, 800870c <stimLib_adc2_Init+0x58>
 8008706:	2000      	movs	r0, #0
 8008708:	b007      	add	sp, #28
 800870a:	bd30      	pop	{r4, r5, pc}
 800870c:	4620      	mov	r0, r4
 800870e:	f000 f873 	bl	80087f8 <stimLib_adc_mspInit>
 8008712:	4911      	ldr	r1, [pc, #68]	; (8008758 <stimLib_adc2_Init+0xa4>)
 8008714:	65a5      	str	r5, [r4, #88]	; 0x58
 8008716:	2306      	movs	r3, #6
 8008718:	e9cd 1300 	strd	r1, r3, [sp]
 800871c:	227f      	movs	r2, #127	; 0x7f
 800871e:	2304      	movs	r3, #4
 8008720:	4669      	mov	r1, sp
 8008722:	4620      	mov	r0, r4
 8008724:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8008728:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800872c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8008730:	f7f9 fd8a 	bl	8002248 <HAL_ADC_ConfigChannel>
 8008734:	2800      	cmp	r0, #0
 8008736:	d1e6      	bne.n	8008706 <stimLib_adc2_Init+0x52>
 8008738:	4a08      	ldr	r2, [pc, #32]	; (800875c <stimLib_adc2_Init+0xa8>)
 800873a:	230c      	movs	r3, #12
 800873c:	4669      	mov	r1, sp
 800873e:	4620      	mov	r0, r4
 8008740:	e9cd 2300 	strd	r2, r3, [sp]
 8008744:	f7f9 fd80 	bl	8002248 <HAL_ADC_ConfigChannel>
 8008748:	fab0 f080 	clz	r0, r0
 800874c:	0940      	lsrs	r0, r0, #5
 800874e:	e7db      	b.n	8008708 <stimLib_adc2_Init+0x54>
 8008750:	200000f0 	.word	0x200000f0
 8008754:	50040100 	.word	0x50040100
 8008758:	2e300800 	.word	0x2e300800
 800875c:	32601000 	.word	0x32601000

08008760 <stimLib_gpioDeinit>:
 8008760:	b508      	push	{r3, lr}
 8008762:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8008766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800876a:	f7fb fc65 	bl	8004038 <HAL_GPIO_DeInit>
 800876e:	4805      	ldr	r0, [pc, #20]	; (8008784 <stimLib_gpioDeinit+0x24>)
 8008770:	f241 11ff 	movw	r1, #4607	; 0x11ff
 8008774:	f7fb fc60 	bl	8004038 <HAL_GPIO_DeInit>
 8008778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800877c:	4802      	ldr	r0, [pc, #8]	; (8008788 <stimLib_gpioDeinit+0x28>)
 800877e:	2108      	movs	r1, #8
 8008780:	f7fb bc5a 	b.w	8004038 <HAL_GPIO_DeInit>
 8008784:	48000400 	.word	0x48000400
 8008788:	48001c00 	.word	0x48001c00

0800878c <stimLib_dmaDeinit>:
 800878c:	b508      	push	{r3, lr}
 800878e:	4807      	ldr	r0, [pc, #28]	; (80087ac <stimLib_dmaDeinit+0x20>)
 8008790:	f7fb f890 	bl	80038b4 <HAL_DMA_DeInit>
 8008794:	4806      	ldr	r0, [pc, #24]	; (80087b0 <stimLib_dmaDeinit+0x24>)
 8008796:	f7fb f88d 	bl	80038b4 <HAL_DMA_DeInit>
 800879a:	4806      	ldr	r0, [pc, #24]	; (80087b4 <stimLib_dmaDeinit+0x28>)
 800879c:	f7fb f88a 	bl	80038b4 <HAL_DMA_DeInit>
 80087a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80087a4:	4804      	ldr	r0, [pc, #16]	; (80087b8 <stimLib_dmaDeinit+0x2c>)
 80087a6:	f7fb b885 	b.w	80038b4 <HAL_DMA_DeInit>
 80087aa:	bf00      	nop
 80087ac:	20000154 	.word	0x20000154
 80087b0:	2000019c 	.word	0x2000019c
 80087b4:	200002c8 	.word	0x200002c8
 80087b8:	20000310 	.word	0x20000310

080087bc <stimLib_tim1_Deinit>:
 80087bc:	4801      	ldr	r0, [pc, #4]	; (80087c4 <stimLib_tim1_Deinit+0x8>)
 80087be:	f7fd ba5e 	b.w	8005c7e <HAL_TIM_PWM_DeInit>
 80087c2:	bf00      	nop
 80087c4:	200001e4 	.word	0x200001e4

080087c8 <stimLib_tim2_Deinit>:
 80087c8:	4801      	ldr	r0, [pc, #4]	; (80087d0 <stimLib_tim2_Deinit+0x8>)
 80087ca:	f7fd ba58 	b.w	8005c7e <HAL_TIM_PWM_DeInit>
 80087ce:	bf00      	nop
 80087d0:	20000230 	.word	0x20000230

080087d4 <stimLib_tim6_Deinit>:
 80087d4:	4801      	ldr	r0, [pc, #4]	; (80087dc <stimLib_tim6_Deinit+0x8>)
 80087d6:	f7fd ba52 	b.w	8005c7e <HAL_TIM_PWM_DeInit>
 80087da:	bf00      	nop
 80087dc:	2000027c 	.word	0x2000027c

080087e0 <stimLib_adc1_Deinit>:
 80087e0:	4801      	ldr	r0, [pc, #4]	; (80087e8 <stimLib_adc1_Deinit+0x8>)
 80087e2:	f7f9 b8a9 	b.w	8001938 <HAL_ADC_DeInit>
 80087e6:	bf00      	nop
 80087e8:	2000008c 	.word	0x2000008c

080087ec <stimLib_adc2_Deinit>:
 80087ec:	4801      	ldr	r0, [pc, #4]	; (80087f4 <stimLib_adc2_Deinit+0x8>)
 80087ee:	f7f9 b8a3 	b.w	8001938 <HAL_ADC_DeInit>
 80087f2:	bf00      	nop
 80087f4:	200000f0 	.word	0x200000f0

080087f8 <stimLib_adc_mspInit>:
 80087f8:	b570      	push	{r4, r5, r6, lr}
 80087fa:	2214      	movs	r2, #20
 80087fc:	b08a      	sub	sp, #40	; 0x28
 80087fe:	4605      	mov	r5, r0
 8008800:	2100      	movs	r1, #0
 8008802:	eb0d 0002 	add.w	r0, sp, r2
 8008806:	f000 fc0f 	bl	8009028 <memset>
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	4a42      	ldr	r2, [pc, #264]	; (8008918 <stimLib_adc_mspInit+0x120>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d144      	bne.n	800889c <stimLib_adc_mspInit+0xa4>
 8008812:	4a42      	ldr	r2, [pc, #264]	; (800891c <stimLib_adc_mspInit+0x124>)
 8008814:	6813      	ldr	r3, [r2, #0]
 8008816:	3301      	adds	r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	4b40      	ldr	r3, [pc, #256]	; (8008920 <stimLib_adc_mspInit+0x128>)
 800881e:	d108      	bne.n	8008832 <stimLib_adc_mspInit+0x3a>
 8008820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008822:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008826:	64da      	str	r2, [r3, #76]	; 0x4c
 8008828:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800882a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800882e:	9201      	str	r2, [sp, #4]
 8008830:	9a01      	ldr	r2, [sp, #4]
 8008832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008834:	4c3b      	ldr	r4, [pc, #236]	; (8008924 <stimLib_adc_mspInit+0x12c>)
 8008836:	f042 0201 	orr.w	r2, r2, #1
 800883a:	64da      	str	r2, [r3, #76]	; 0x4c
 800883c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	9302      	str	r3, [sp, #8]
 8008844:	f04f 0c10 	mov.w	ip, #16
 8008848:	a905      	add	r1, sp, #20
 800884a:	9b02      	ldr	r3, [sp, #8]
 800884c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008850:	230b      	movs	r3, #11
 8008852:	e9cd c305 	strd	ip, r3, [sp, #20]
 8008856:	f7fb fa7d 	bl	8003d54 <HAL_GPIO_Init>
 800885a:	4b33      	ldr	r3, [pc, #204]	; (8008928 <stimLib_adc_mspInit+0x130>)
 800885c:	2600      	movs	r6, #0
 800885e:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8008862:	e9c4 3600 	strd	r3, r6, [r4]
 8008866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800886a:	e9c4 e304 	strd	lr, r3, [r4, #16]
 800886e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008872:	2320      	movs	r3, #32
 8008874:	4620      	mov	r0, r4
 8008876:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800887a:	e9c4 6602 	strd	r6, r6, [r4, #8]
 800887e:	6226      	str	r6, [r4, #32]
 8008880:	f7fa ff60 	bl	8003744 <HAL_DMA_Init>
 8008884:	2012      	movs	r0, #18
 8008886:	64ec      	str	r4, [r5, #76]	; 0x4c
 8008888:	4632      	mov	r2, r6
 800888a:	2101      	movs	r1, #1
 800888c:	62a5      	str	r5, [r4, #40]	; 0x28
 800888e:	f7fa ff14 	bl	80036ba <HAL_NVIC_SetPriority>
 8008892:	2012      	movs	r0, #18
 8008894:	f7fa ff2d 	bl	80036f2 <HAL_NVIC_EnableIRQ>
 8008898:	b00a      	add	sp, #40	; 0x28
 800889a:	bd70      	pop	{r4, r5, r6, pc}
 800889c:	4a23      	ldr	r2, [pc, #140]	; (800892c <stimLib_adc_mspInit+0x134>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d1fa      	bne.n	8008898 <stimLib_adc_mspInit+0xa0>
 80088a2:	4a1e      	ldr	r2, [pc, #120]	; (800891c <stimLib_adc_mspInit+0x124>)
 80088a4:	6813      	ldr	r3, [r2, #0]
 80088a6:	3301      	adds	r3, #1
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	4b1c      	ldr	r3, [pc, #112]	; (8008920 <stimLib_adc_mspInit+0x128>)
 80088ae:	d108      	bne.n	80088c2 <stimLib_adc_mspInit+0xca>
 80088b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80088b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80088be:	9203      	str	r2, [sp, #12]
 80088c0:	9a03      	ldr	r2, [sp, #12]
 80088c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088c4:	4c1a      	ldr	r4, [pc, #104]	; (8008930 <stimLib_adc_mspInit+0x138>)
 80088c6:	f042 0201 	orr.w	r2, r2, #1
 80088ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80088cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	9304      	str	r3, [sp, #16]
 80088d4:	22c0      	movs	r2, #192	; 0xc0
 80088d6:	9b04      	ldr	r3, [sp, #16]
 80088d8:	a905      	add	r1, sp, #20
 80088da:	230b      	movs	r3, #11
 80088dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088e4:	f7fb fa36 	bl	8003d54 <HAL_GPIO_Init>
 80088e8:	4912      	ldr	r1, [pc, #72]	; (8008934 <stimLib_adc_mspInit+0x13c>)
 80088ea:	2080      	movs	r0, #128	; 0x80
 80088ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088f0:	2300      	movs	r3, #0
 80088f2:	e9c4 0204 	strd	r0, r2, [r4, #16]
 80088f6:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80088fa:	2220      	movs	r2, #32
 80088fc:	4620      	mov	r0, r4
 80088fe:	e9c4 1300 	strd	r1, r3, [r4]
 8008902:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8008906:	e9c4 6206 	strd	r6, r2, [r4, #24]
 800890a:	6223      	str	r3, [r4, #32]
 800890c:	f7fa ff1a 	bl	8003744 <HAL_DMA_Init>
 8008910:	64ec      	str	r4, [r5, #76]	; 0x4c
 8008912:	62a5      	str	r5, [r4, #40]	; 0x28
 8008914:	e7c0      	b.n	8008898 <stimLib_adc_mspInit+0xa0>
 8008916:	bf00      	nop
 8008918:	50040000 	.word	0x50040000
 800891c:	200003e8 	.word	0x200003e8
 8008920:	40021000 	.word	0x40021000
 8008924:	20000154 	.word	0x20000154
 8008928:	40020430 	.word	0x40020430
 800892c:	50040100 	.word	0x50040100
 8008930:	2000019c 	.word	0x2000019c
 8008934:	4002001c 	.word	0x4002001c

08008938 <stimLib_tim_pwmmspInit>:
 8008938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	6803      	ldr	r3, [r0, #0]
 800893e:	4a30      	ldr	r2, [pc, #192]	; (8008a00 <stimLib_tim_pwmmspInit+0xc8>)
 8008940:	4293      	cmp	r3, r2
 8008942:	4605      	mov	r5, r0
 8008944:	d114      	bne.n	8008970 <stimLib_tim_pwmmspInit+0x38>
 8008946:	4b2f      	ldr	r3, [pc, #188]	; (8008a04 <stimLib_tim_pwmmspInit+0xcc>)
 8008948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800894a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800894e:	661a      	str	r2, [r3, #96]	; 0x60
 8008950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	2019      	movs	r0, #25
 800895a:	2200      	movs	r2, #0
 800895c:	2102      	movs	r1, #2
 800895e:	9b00      	ldr	r3, [sp, #0]
 8008960:	f7fa feab 	bl	80036ba <HAL_NVIC_SetPriority>
 8008964:	2019      	movs	r0, #25
 8008966:	b003      	add	sp, #12
 8008968:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	f7fa bec1 	b.w	80036f2 <HAL_NVIC_EnableIRQ>
 8008970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008974:	d141      	bne.n	80089fa <stimLib_tim_pwmmspInit+0xc2>
 8008976:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800897a:	4c23      	ldr	r4, [pc, #140]	; (8008a08 <stimLib_tim_pwmmspInit+0xd0>)
 800897c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800897e:	f042 0201 	orr.w	r2, r2, #1
 8008982:	659a      	str	r2, [r3, #88]	; 0x58
 8008984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	9b01      	ldr	r3, [sp, #4]
 800898e:	4b1f      	ldr	r3, [pc, #124]	; (8008a0c <stimLib_tim_pwmmspInit+0xd4>)
 8008990:	2204      	movs	r2, #4
 8008992:	e9c4 3200 	strd	r3, r2, [r4]
 8008996:	2600      	movs	r6, #0
 8008998:	2310      	movs	r3, #16
 800899a:	f04f 0b80 	mov.w	fp, #128	; 0x80
 800899e:	f44f 7a00 	mov.w	sl, #512	; 0x200
 80089a2:	f44f 6900 	mov.w	r9, #2048	; 0x800
 80089a6:	f04f 0820 	mov.w	r8, #32
 80089aa:	f44f 5740 	mov.w	r7, #12288	; 0x3000
 80089ae:	4620      	mov	r0, r4
 80089b0:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80089b4:	e9c4 ba04 	strd	fp, sl, [r4, #16]
 80089b8:	e9c4 9806 	strd	r9, r8, [r4, #24]
 80089bc:	6227      	str	r7, [r4, #32]
 80089be:	f7fa fec1 	bl	8003744 <HAL_DMA_Init>
 80089c2:	62ac      	str	r4, [r5, #40]	; 0x28
 80089c4:	632c      	str	r4, [r5, #48]	; 0x30
 80089c6:	62a5      	str	r5, [r4, #40]	; 0x28
 80089c8:	4c11      	ldr	r4, [pc, #68]	; (8008a10 <stimLib_tim_pwmmspInit+0xd8>)
 80089ca:	4912      	ldr	r1, [pc, #72]	; (8008a14 <stimLib_tim_pwmmspInit+0xdc>)
 80089cc:	6227      	str	r7, [r4, #32]
 80089ce:	2204      	movs	r2, #4
 80089d0:	2310      	movs	r3, #16
 80089d2:	4620      	mov	r0, r4
 80089d4:	e9c4 1200 	strd	r1, r2, [r4]
 80089d8:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80089dc:	e9c4 ba04 	strd	fp, sl, [r4, #16]
 80089e0:	e9c4 9806 	strd	r9, r8, [r4, #24]
 80089e4:	f7fa feae 	bl	8003744 <HAL_DMA_Init>
 80089e8:	201c      	movs	r0, #28
 80089ea:	62ec      	str	r4, [r5, #44]	; 0x2c
 80089ec:	4632      	mov	r2, r6
 80089ee:	2102      	movs	r1, #2
 80089f0:	62a5      	str	r5, [r4, #40]	; 0x28
 80089f2:	f7fa fe62 	bl	80036ba <HAL_NVIC_SetPriority>
 80089f6:	201c      	movs	r0, #28
 80089f8:	e7b5      	b.n	8008966 <stimLib_tim_pwmmspInit+0x2e>
 80089fa:	b003      	add	sp, #12
 80089fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a00:	40012c00 	.word	0x40012c00
 8008a04:	40021000 	.word	0x40021000
 8008a08:	200002c8 	.word	0x200002c8
 8008a0c:	40020080 	.word	0x40020080
 8008a10:	20000310 	.word	0x20000310
 8008a14:	40020008 	.word	0x40020008

08008a18 <stimLib_tim_basemspInit>:
 8008a18:	b507      	push	{r0, r1, r2, lr}
 8008a1a:	4b0e      	ldr	r3, [pc, #56]	; (8008a54 <stimLib_tim_basemspInit+0x3c>)
 8008a1c:	6802      	ldr	r2, [r0, #0]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d115      	bne.n	8008a4e <stimLib_tim_basemspInit+0x36>
 8008a22:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8008a26:	2102      	movs	r1, #2
 8008a28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008a2a:	f042 0210 	orr.w	r2, r2, #16
 8008a2e:	659a      	str	r2, [r3, #88]	; 0x58
 8008a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a32:	f003 0310 	and.w	r3, r3, #16
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2036      	movs	r0, #54	; 0x36
 8008a3c:	9b01      	ldr	r3, [sp, #4]
 8008a3e:	f7fa fe3c 	bl	80036ba <HAL_NVIC_SetPriority>
 8008a42:	2036      	movs	r0, #54	; 0x36
 8008a44:	b003      	add	sp, #12
 8008a46:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a4a:	f7fa be52 	b.w	80036f2 <HAL_NVIC_EnableIRQ>
 8008a4e:	b003      	add	sp, #12
 8008a50:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a54:	40001000 	.word	0x40001000

08008a58 <stimLib_tim_msppostInit>:
 8008a58:	b510      	push	{r4, lr}
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	b088      	sub	sp, #32
 8008a5e:	2214      	movs	r2, #20
 8008a60:	2100      	movs	r1, #0
 8008a62:	a803      	add	r0, sp, #12
 8008a64:	f000 fae0 	bl	8009028 <memset>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	4a1b      	ldr	r2, [pc, #108]	; (8008ad8 <stimLib_tim_msppostInit+0x80>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d117      	bne.n	8008aa0 <stimLib_tim_msppostInit+0x48>
 8008a70:	4b1a      	ldr	r3, [pc, #104]	; (8008adc <stimLib_tim_msppostInit+0x84>)
 8008a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a74:	f042 0201 	orr.w	r2, r2, #1
 8008a78:	64da      	str	r2, [r3, #76]	; 0x4c
 8008a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	9b01      	ldr	r3, [sp, #4]
 8008a84:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008a88:	2302      	movs	r3, #2
 8008a8a:	e9cd 0303 	strd	r0, r3, [sp, #12]
 8008a8e:	2301      	movs	r3, #1
 8008a90:	9307      	str	r3, [sp, #28]
 8008a92:	a903      	add	r1, sp, #12
 8008a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a98:	f7fb f95c 	bl	8003d54 <HAL_GPIO_Init>
 8008a9c:	b008      	add	sp, #32
 8008a9e:	bd10      	pop	{r4, pc}
 8008aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa4:	d1fa      	bne.n	8008a9c <stimLib_tim_msppostInit+0x44>
 8008aa6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008aaa:	2103      	movs	r1, #3
 8008aac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008aae:	f042 0201 	orr.w	r2, r2, #1
 8008ab2:	64da      	str	r2, [r3, #76]	; 0x4c
 8008ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	9302      	str	r3, [sp, #8]
 8008abc:	9b02      	ldr	r3, [sp, #8]
 8008abe:	222e      	movs	r2, #46	; 0x2e
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e9cd 1306 	strd	r1, r3, [sp, #24]
 8008acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ad0:	a903      	add	r1, sp, #12
 8008ad2:	f7fb f93f 	bl	8003d54 <HAL_GPIO_Init>
 8008ad6:	e7dc      	b.n	8008a92 <stimLib_tim_msppostInit+0x3a>
 8008ad8:	40012c00 	.word	0x40012c00
 8008adc:	40021000 	.word	0x40021000

08008ae0 <stimLib_stateGet>:
 8008ae0:	4b01      	ldr	r3, [pc, #4]	; (8008ae8 <stimLib_stateGet+0x8>)
 8008ae2:	7818      	ldrb	r0, [r3, #0]
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	200003ec 	.word	0x200003ec

08008aec <stimLib_stateSet>:
 8008aec:	4a0f      	ldr	r2, [pc, #60]	; (8008b2c <stimLib_stateSet+0x40>)
 8008aee:	7813      	ldrb	r3, [r2, #0]
 8008af0:	4283      	cmp	r3, r0
 8008af2:	d010      	beq.n	8008b16 <stimLib_stateSet+0x2a>
 8008af4:	2805      	cmp	r0, #5
 8008af6:	d80e      	bhi.n	8008b16 <stimLib_stateSet+0x2a>
 8008af8:	e8df f000 	tbb	[pc, r0]
 8008afc:	130f0803 	.word	0x130f0803
 8008b00:	0515      	.short	0x0515
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d107      	bne.n	8008b16 <stimLib_stateSet+0x2a>
 8008b06:	7010      	strb	r0, [r2, #0]
 8008b08:	2001      	movs	r0, #1
 8008b0a:	4770      	bx	lr
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0fa      	beq.n	8008b06 <stimLib_stateSet+0x1a>
 8008b10:	3b02      	subs	r3, #2
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d9f7      	bls.n	8008b06 <stimLib_stateSet+0x1a>
 8008b16:	2000      	movs	r0, #0
 8008b18:	4770      	bx	lr
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d0f3      	beq.n	8008b06 <stimLib_stateSet+0x1a>
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	e7f0      	b.n	8008b04 <stimLib_stateSet+0x18>
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	e7ee      	b.n	8008b04 <stimLib_stateSet+0x18>
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	e7ec      	b.n	8008b04 <stimLib_stateSet+0x18>
 8008b2a:	bf00      	nop
 8008b2c:	200003ec 	.word	0x200003ec

08008b30 <stimLib_stateSigParamSet>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	4604      	mov	r4, r0
 8008b34:	f000 f840 	bl	8008bb8 <stimLib_signalParamCheck>
 8008b38:	b140      	cbz	r0, 8008b4c <stimLib_stateSigParamSet+0x1c>
 8008b3a:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <stimLib_stateSigParamSet+0x20>)
 8008b3c:	7822      	ldrb	r2, [r4, #0]
 8008b3e:	711a      	strb	r2, [r3, #4]
 8008b40:	8862      	ldrh	r2, [r4, #2]
 8008b42:	80da      	strh	r2, [r3, #6]
 8008b44:	7922      	ldrb	r2, [r4, #4]
 8008b46:	721a      	strb	r2, [r3, #8]
 8008b48:	68a2      	ldr	r2, [r4, #8]
 8008b4a:	60da      	str	r2, [r3, #12]
 8008b4c:	bd10      	pop	{r4, pc}
 8008b4e:	bf00      	nop
 8008b50:	200003ec 	.word	0x200003ec

08008b54 <stimLib_stateTrgParamSet>:
 8008b54:	b510      	push	{r4, lr}
 8008b56:	4604      	mov	r4, r0
 8008b58:	f000 f846 	bl	8008be8 <stimLib_triggerParamCheck>
 8008b5c:	b160      	cbz	r0, 8008b78 <stimLib_stateTrgParamSet+0x24>
 8008b5e:	4b07      	ldr	r3, [pc, #28]	; (8008b7c <stimLib_stateTrgParamSet+0x28>)
 8008b60:	7822      	ldrb	r2, [r4, #0]
 8008b62:	741a      	strb	r2, [r3, #16]
 8008b64:	7862      	ldrb	r2, [r4, #1]
 8008b66:	745a      	strb	r2, [r3, #17]
 8008b68:	78a2      	ldrb	r2, [r4, #2]
 8008b6a:	749a      	strb	r2, [r3, #18]
 8008b6c:	78e2      	ldrb	r2, [r4, #3]
 8008b6e:	74da      	strb	r2, [r3, #19]
 8008b70:	7922      	ldrb	r2, [r4, #4]
 8008b72:	751a      	strb	r2, [r3, #20]
 8008b74:	7962      	ldrb	r2, [r4, #5]
 8008b76:	755a      	strb	r2, [r3, #21]
 8008b78:	bd10      	pop	{r4, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200003ec 	.word	0x200003ec

08008b80 <stimLib_stateSigParamCheck>:
 8008b80:	b508      	push	{r3, lr}
 8008b82:	4805      	ldr	r0, [pc, #20]	; (8008b98 <stimLib_stateSigParamCheck+0x18>)
 8008b84:	f000 f818 	bl	8008bb8 <stimLib_signalParamCheck>
 8008b88:	b120      	cbz	r0, 8008b94 <stimLib_stateSigParamCheck+0x14>
 8008b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b8e:	4803      	ldr	r0, [pc, #12]	; (8008b9c <stimLib_stateSigParamCheck+0x1c>)
 8008b90:	f000 b82a 	b.w	8008be8 <stimLib_triggerParamCheck>
 8008b94:	bd08      	pop	{r3, pc}
 8008b96:	bf00      	nop
 8008b98:	200003f0 	.word	0x200003f0
 8008b9c:	200003fc 	.word	0x200003fc

08008ba0 <stimLib_stateParamClear>:
 8008ba0:	4b04      	ldr	r3, [pc, #16]	; (8008bb4 <stimLib_stateParamClear+0x14>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	e9c3 2203 	strd	r2, r2, [r3, #12]
 8008ba8:	711a      	strb	r2, [r3, #4]
 8008baa:	80da      	strh	r2, [r3, #6]
 8008bac:	721a      	strb	r2, [r3, #8]
 8008bae:	829a      	strh	r2, [r3, #20]
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	200003ec 	.word	0x200003ec

08008bb8 <stimLib_signalParamCheck>:
 8008bb8:	b1a8      	cbz	r0, 8008be6 <stimLib_signalParamCheck+0x2e>
 8008bba:	7803      	ldrb	r3, [r0, #0]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	2b3b      	cmp	r3, #59	; 0x3b
 8008bc0:	d810      	bhi.n	8008be4 <stimLib_signalParamCheck+0x2c>
 8008bc2:	8843      	ldrh	r3, [r0, #2]
 8008bc4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8008bc8:	f5b2 7f61 	cmp.w	r2, #900	; 0x384
 8008bcc:	d80a      	bhi.n	8008be4 <stimLib_signalParamCheck+0x2c>
 8008bce:	2264      	movs	r2, #100	; 0x64
 8008bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008bd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	8043      	strh	r3, [r0, #2]
 8008be0:	2001      	movs	r0, #1
 8008be2:	4770      	bx	lr
 8008be4:	2000      	movs	r0, #0
 8008be6:	4770      	bx	lr

08008be8 <stimLib_triggerParamCheck>:
 8008be8:	3800      	subs	r0, #0
 8008bea:	bf18      	it	ne
 8008bec:	2001      	movne	r0, #1
 8008bee:	4770      	bx	lr

08008bf0 <stimLib_paramSetting>:
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	f000 f825 	bl	8008c40 <stimLib_paramPulseSettingRaw>
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	b108      	cbz	r0, 8008bfe <stimLib_paramSetting+0xe>
 8008bfa:	f000 f8b3 	bl	8008d64 <stimLib_paramTrgSettingRaw>
 8008bfe:	4620      	mov	r0, r4
 8008c00:	bd10      	pop	{r4, pc}

08008c02 <stimLib_paramClear>:
 8008c02:	b508      	push	{r3, lr}
 8008c04:	f000 f8e6 	bl	8008dd4 <stimLib_paramTrgResettingRaw>
 8008c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c0c:	f7ff bfc8 	b.w	8008ba0 <stimLib_stateParamClear>

08008c10 <stimLib_stimPulseStart>:
 8008c10:	b508      	push	{r3, lr}
 8008c12:	f000 f8e3 	bl	8008ddc <stimLib_pulseConfigRaw>
 8008c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c1a:	f000 b905 	b.w	8008e28 <stimLib_stimStartRaw>

08008c1e <stimLib_stimPulseSetiing>:
 8008c1e:	f000 b80f 	b.w	8008c40 <stimLib_paramPulseSettingRaw>

08008c22 <stimLib_stimPulseStop>:
 8008c22:	b508      	push	{r3, lr}
 8008c24:	f7ff ff5c 	bl	8008ae0 <stimLib_stateGet>
 8008c28:	2804      	cmp	r0, #4
 8008c2a:	d108      	bne.n	8008c3e <stimLib_stimPulseStop+0x1c>
 8008c2c:	f000 f92e 	bl	8008e8c <stimLib_stimStopRaw>
 8008c30:	f7ff fff5 	bl	8008c1e <stimLib_stimPulseSetiing>
 8008c34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c38:	2002      	movs	r0, #2
 8008c3a:	f7ff bf57 	b.w	8008aec <stimLib_stateSet>
 8008c3e:	bd08      	pop	{r3, pc}

08008c40 <stimLib_paramPulseSettingRaw>:
 8008c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c44:	f04f 0800 	mov.w	r8, #0
 8008c48:	b08a      	sub	sp, #40	; 0x28
 8008c4a:	4c41      	ldr	r4, [pc, #260]	; (8008d50 <stimLib_paramPulseSettingRaw+0x110>)
 8008c4c:	f8cd 8008 	str.w	r8, [sp, #8]
 8008c50:	221c      	movs	r2, #28
 8008c52:	4641      	mov	r1, r8
 8008c54:	a803      	add	r0, sp, #12
 8008c56:	e9cd 8800 	strd	r8, r8, [sp]
 8008c5a:	f000 f9e5 	bl	8009028 <memset>
 8008c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	f7fc f954 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8008c68:	4f3a      	ldr	r7, [pc, #232]	; (8008d54 <stimLib_paramPulseSettingRaw+0x114>)
 8008c6a:	fbb7 f0f0 	udiv	r0, r7, r0
 8008c6e:	2650      	movs	r6, #80	; 0x50
 8008c70:	fbb6 f0f0 	udiv	r0, r6, r0
 8008c74:	3801      	subs	r0, #1
 8008c76:	e9c4 0801 	strd	r0, r8, [r4, #4]
 8008c7a:	f7fc f949 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8008c7e:	4605      	mov	r5, r0
 8008c80:	f7fc f946 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8008c84:	fbb7 f0f0 	udiv	r0, r7, r0
 8008c88:	4f33      	ldr	r7, [pc, #204]	; (8008d58 <stimLib_paramPulseSettingRaw+0x118>)
 8008c8a:	fbb6 f0f0 	udiv	r0, r6, r0
 8008c8e:	fbb5 f5f0 	udiv	r5, r5, r0
 8008c92:	7938      	ldrb	r0, [r7, #4]
 8008c94:	fbb5 f5f0 	udiv	r5, r5, r0
 8008c98:	3d01      	subs	r5, #1
 8008c9a:	e9c4 5803 	strd	r5, r8, [r4, #12]
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	2580      	movs	r5, #128	; 0x80
 8008ca2:	61a5      	str	r5, [r4, #24]
 8008ca4:	f7fc ff94 	bl	8005bd0 <HAL_TIM_PWM_Init>
 8008ca8:	b118      	cbz	r0, 8008cb2 <stimLib_paramPulseSettingRaw+0x72>
 8008caa:	2000      	movs	r0, #0
 8008cac:	b00a      	add	sp, #40	; 0x28
 8008cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7ff fe40 	bl	8008938 <stimLib_tim_pwmmspInit>
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f7fc fc48 	bl	800554e <HAL_TIM_OC_Init>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d1f3      	bne.n	8008caa <stimLib_paramPulseSettingRaw+0x6a>
 8008cc2:	4669      	mov	r1, sp
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	9600      	str	r6, [sp, #0]
 8008cc8:	9502      	str	r5, [sp, #8]
 8008cca:	f7fe f871 	bl	8006db0 <HAL_TIMEx_MasterConfigSynchronization>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d1eb      	bne.n	8008caa <stimLib_paramPulseSettingRaw+0x6a>
 8008cd2:	2360      	movs	r3, #96	; 0x60
 8008cd4:	9303      	str	r3, [sp, #12]
 8008cd6:	88fb      	ldrh	r3, [r7, #6]
 8008cd8:	330f      	adds	r3, #15
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	7cbb      	ldrb	r3, [r7, #18]
 8008ce0:	b9ab      	cbnz	r3, 8008d0e <stimLib_paramPulseSettingRaw+0xce>
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	9305      	str	r3, [sp, #20]
 8008ce6:	481a      	ldr	r0, [pc, #104]	; (8008d50 <stimLib_paramPulseSettingRaw+0x110>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	a903      	add	r1, sp, #12
 8008cec:	f7fd fb24 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 8008cf0:	bb60      	cbnz	r0, 8008d4c <stimLib_paramPulseSettingRaw+0x10c>
 8008cf2:	88fb      	ldrh	r3, [r7, #6]
 8008cf4:	330a      	adds	r3, #10
 8008cf6:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	4814      	ldr	r0, [pc, #80]	; (8008d50 <stimLib_paramPulseSettingRaw+0x110>)
 8008cfe:	a903      	add	r1, sp, #12
 8008d00:	f7fd fb1a 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 8008d04:	b138      	cbz	r0, 8008d16 <stimLib_paramPulseSettingRaw+0xd6>
 8008d06:	4815      	ldr	r0, [pc, #84]	; (8008d5c <stimLib_paramPulseSettingRaw+0x11c>)
 8008d08:	f000 fa04 	bl	8009114 <puts>
 8008d0c:	e7cd      	b.n	8008caa <stimLib_paramPulseSettingRaw+0x6a>
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	bf08      	it	eq
 8008d12:	9005      	streq	r0, [sp, #20]
 8008d14:	e7e7      	b.n	8008ce6 <stimLib_paramPulseSettingRaw+0xa6>
 8008d16:	2330      	movs	r3, #48	; 0x30
 8008d18:	9303      	str	r3, [sp, #12]
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	480c      	ldr	r0, [pc, #48]	; (8008d50 <stimLib_paramPulseSettingRaw+0x110>)
 8008d1e:	3314      	adds	r3, #20
 8008d20:	2208      	movs	r2, #8
 8008d22:	a903      	add	r1, sp, #12
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	f7fd fa8d 	bl	8006244 <HAL_TIM_OC_ConfigChannel>
 8008d2a:	b108      	cbz	r0, 8008d30 <stimLib_paramPulseSettingRaw+0xf0>
 8008d2c:	480c      	ldr	r0, [pc, #48]	; (8008d60 <stimLib_paramPulseSettingRaw+0x120>)
 8008d2e:	e7eb      	b.n	8008d08 <stimLib_paramPulseSettingRaw+0xc8>
 8008d30:	220c      	movs	r2, #12
 8008d32:	2305      	movs	r3, #5
 8008d34:	4806      	ldr	r0, [pc, #24]	; (8008d50 <stimLib_paramPulseSettingRaw+0x110>)
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	eb0d 0102 	add.w	r1, sp, r2
 8008d3c:	f7fd fa82 	bl	8006244 <HAL_TIM_OC_ConfigChannel>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d1b2      	bne.n	8008caa <stimLib_paramPulseSettingRaw+0x6a>
 8008d44:	4802      	ldr	r0, [pc, #8]	; (8008d50 <stimLib_paramPulseSettingRaw+0x110>)
 8008d46:	2101      	movs	r1, #1
 8008d48:	f7fd fc0a 	bl	8006560 <HAL_TIM_GenerateEvent>
 8008d4c:	2001      	movs	r0, #1
 8008d4e:	e7ad      	b.n	8008cac <stimLib_paramPulseSettingRaw+0x6c>
 8008d50:	20000230 	.word	0x20000230
 8008d54:	04c4b400 	.word	0x04c4b400
 8008d58:	200003ec 	.word	0x200003ec
 8008d5c:	08009b53 	.word	0x08009b53
 8008d60:	08009b71 	.word	0x08009b71

08008d64 <stimLib_paramTrgSettingRaw>:
 8008d64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008d66:	2214      	movs	r2, #20
 8008d68:	2100      	movs	r1, #0
 8008d6a:	a801      	add	r0, sp, #4
 8008d6c:	f000 f95c 	bl	8009028 <memset>
 8008d70:	4b16      	ldr	r3, [pc, #88]	; (8008dcc <stimLib_paramTrgSettingRaw+0x68>)
 8008d72:	7cda      	ldrb	r2, [r3, #19]
 8008d74:	b1a2      	cbz	r2, 8008da0 <stimLib_paramTrgSettingRaw+0x3c>
 8008d76:	7d1a      	ldrb	r2, [r3, #20]
 8008d78:	b9aa      	cbnz	r2, 8008da6 <stimLib_paramTrgSettingRaw+0x42>
 8008d7a:	7d5a      	ldrb	r2, [r3, #21]
 8008d7c:	b9da      	cbnz	r2, 8008db6 <stimLib_paramTrgSettingRaw+0x52>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008d86:	4812      	ldr	r0, [pc, #72]	; (8008dd0 <stimLib_paramTrgSettingRaw+0x6c>)
 8008d88:	9302      	str	r3, [sp, #8]
 8008d8a:	a901      	add	r1, sp, #4
 8008d8c:	f7fa ffe2 	bl	8003d54 <HAL_GPIO_Init>
 8008d90:	2200      	movs	r2, #0
 8008d92:	2006      	movs	r0, #6
 8008d94:	4611      	mov	r1, r2
 8008d96:	f7fa fc90 	bl	80036ba <HAL_NVIC_SetPriority>
 8008d9a:	2006      	movs	r0, #6
 8008d9c:	f7fa fca9 	bl	80036f2 <HAL_NVIC_EnableIRQ>
 8008da0:	b007      	add	sp, #28
 8008da2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008da6:	2a01      	cmp	r2, #1
 8008da8:	d105      	bne.n	8008db6 <stimLib_paramTrgSettingRaw+0x52>
 8008daa:	7d59      	ldrb	r1, [r3, #21]
 8008dac:	b919      	cbnz	r1, 8008db6 <stimLib_paramTrgSettingRaw+0x52>
 8008dae:	9201      	str	r2, [sp, #4]
 8008db0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008db4:	e7e7      	b.n	8008d86 <stimLib_paramTrgSettingRaw+0x22>
 8008db6:	8a9b      	ldrh	r3, [r3, #20]
 8008db8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d8e6      	bhi.n	8008d90 <stimLib_paramTrgSettingRaw+0x2c>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8008dca:	e7dc      	b.n	8008d86 <stimLib_paramTrgSettingRaw+0x22>
 8008dcc:	200003ec 	.word	0x200003ec
 8008dd0:	48000400 	.word	0x48000400

08008dd4 <stimLib_paramTrgResettingRaw>:
 8008dd4:	2006      	movs	r0, #6
 8008dd6:	f7fa bc9a 	b.w	800370e <HAL_NVIC_DisableIRQ>
	...

08008ddc <stimLib_pulseConfigRaw>:
 8008ddc:	4b0e      	ldr	r3, [pc, #56]	; (8008e18 <stimLib_pulseConfigRaw+0x3c>)
 8008dde:	490f      	ldr	r1, [pc, #60]	; (8008e1c <stimLib_pulseConfigRaw+0x40>)
 8008de0:	88da      	ldrh	r2, [r3, #6]
 8008de2:	1d53      	adds	r3, r2, #5
 8008de4:	600b      	str	r3, [r1, #0]
 8008de6:	f102 0319 	add.w	r3, r2, #25
 8008dea:	604b      	str	r3, [r1, #4]
 8008dec:	f102 030a 	add.w	r3, r2, #10
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	1d58      	adds	r0, r3, #5
 8008df4:	6088      	str	r0, [r1, #8]
 8008df6:	2005      	movs	r0, #5
 8008df8:	60c8      	str	r0, [r1, #12]
 8008dfa:	4809      	ldr	r0, [pc, #36]	; (8008e20 <stimLib_pulseConfigRaw+0x44>)
 8008dfc:	f503 519d 	add.w	r1, r3, #5024	; 0x13a0
 8008e00:	3106      	adds	r1, #6
 8008e02:	6001      	str	r1, [r0, #0]
 8008e04:	f103 011e 	add.w	r1, r3, #30
 8008e08:	6041      	str	r1, [r0, #4]
 8008e0a:	4906      	ldr	r1, [pc, #24]	; (8008e24 <stimLib_pulseConfigRaw+0x48>)
 8008e0c:	330a      	adds	r3, #10
 8008e0e:	3214      	adds	r2, #20
 8008e10:	600b      	str	r3, [r1, #0]
 8008e12:	2000      	movs	r0, #0
 8008e14:	604a      	str	r2, [r1, #4]
 8008e16:	4770      	bx	lr
 8008e18:	200003ec 	.word	0x200003ec
 8008e1c:	2000040c 	.word	0x2000040c
 8008e20:	2000041c 	.word	0x2000041c
 8008e24:	20000404 	.word	0x20000404

08008e28 <stimLib_stimStartRaw>:
 8008e28:	b508      	push	{r3, lr}
 8008e2a:	4a12      	ldr	r2, [pc, #72]	; (8008e74 <stimLib_stimStartRaw+0x4c>)
 8008e2c:	4812      	ldr	r0, [pc, #72]	; (8008e78 <stimLib_stimStartRaw+0x50>)
 8008e2e:	2304      	movs	r3, #4
 8008e30:	210c      	movs	r1, #12
 8008e32:	f7fc fbed 	bl	8005610 <HAL_TIM_OC_Start_DMA>
 8008e36:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <stimLib_stimStartRaw+0x54>)
 8008e38:	480f      	ldr	r0, [pc, #60]	; (8008e78 <stimLib_stimStartRaw+0x50>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	6813      	ldr	r3, [r2, #0]
 8008e3e:	f023 0306 	bic.w	r3, r3, #6
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	2104      	movs	r1, #4
 8008e46:	f7fc ff77 	bl	8005d38 <HAL_TIM_PWM_Start>
 8008e4a:	4a0d      	ldr	r2, [pc, #52]	; (8008e80 <stimLib_stimStartRaw+0x58>)
 8008e4c:	480a      	ldr	r0, [pc, #40]	; (8008e78 <stimLib_stimStartRaw+0x50>)
 8008e4e:	2302      	movs	r3, #2
 8008e50:	2108      	movs	r1, #8
 8008e52:	f7fc fbdd 	bl	8005610 <HAL_TIM_OC_Start_DMA>
 8008e56:	4b0b      	ldr	r3, [pc, #44]	; (8008e84 <stimLib_stimStartRaw+0x5c>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	6813      	ldr	r3, [r2, #0]
 8008e5c:	f023 0306 	bic.w	r3, r3, #6
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <stimLib_stimStartRaw+0x60>)
 8008e64:	7c5b      	ldrb	r3, [r3, #17]
 8008e66:	b11b      	cbz	r3, 8008e70 <stimLib_stimStartRaw+0x48>
 8008e68:	4803      	ldr	r0, [pc, #12]	; (8008e78 <stimLib_stimStartRaw+0x50>)
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	f7fc ff64 	bl	8005d38 <HAL_TIM_PWM_Start>
 8008e70:	2000      	movs	r0, #0
 8008e72:	bd08      	pop	{r3, pc}
 8008e74:	2000040c 	.word	0x2000040c
 8008e78:	20000230 	.word	0x20000230
 8008e7c:	200002c8 	.word	0x200002c8
 8008e80:	20000404 	.word	0x20000404
 8008e84:	20000310 	.word	0x20000310
 8008e88:	200003ec 	.word	0x200003ec

08008e8c <stimLib_stimStopRaw>:
 8008e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008e90:	4b0e      	ldr	r3, [pc, #56]	; (8008ecc <stimLib_stimStopRaw+0x40>)
 8008e92:	6991      	ldr	r1, [r2, #24]
 8008e94:	400b      	ands	r3, r1
 8008e96:	b510      	push	{r4, lr}
 8008e98:	6193      	str	r3, [r2, #24]
 8008e9a:	6993      	ldr	r3, [r2, #24]
 8008e9c:	4c0c      	ldr	r4, [pc, #48]	; (8008ed0 <stimLib_stimStopRaw+0x44>)
 8008e9e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8008ea2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008ea6:	6193      	str	r3, [r2, #24]
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7fd f822 	bl	8005ef4 <HAL_TIM_PWM_Stop>
 8008eb0:	2104      	movs	r1, #4
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f7fd f81e 	bl	8005ef4 <HAL_TIM_PWM_Stop>
 8008eb8:	2108      	movs	r1, #8
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f7fc fda0 	bl	8005a00 <HAL_TIM_OC_Stop_DMA>
 8008ec0:	210c      	movs	r1, #12
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f7fc fd9c 	bl	8005a00 <HAL_TIM_OC_Stop_DMA>
 8008ec8:	2000      	movs	r0, #0
 8008eca:	bd10      	pop	{r4, pc}
 8008ecc:	fefe8f8f 	.word	0xfefe8f8f
 8008ed0:	20000230 	.word	0x20000230

08008ed4 <stimLib_stepupStart>:
 8008ed4:	b508      	push	{r3, lr}
 8008ed6:	f000 f85d 	bl	8008f94 <stimLib_stepup_adcStartRaw>
 8008eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ede:	f000 b807 	b.w	8008ef0 <stimLib_stepup_startRaw>

08008ee2 <stimLib_stepupStop>:
 8008ee2:	b508      	push	{r3, lr}
 8008ee4:	f000 f83e 	bl	8008f64 <stimLib_stepup_stopRaw>
 8008ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008eec:	f000 b86c 	b.w	8008fc8 <stimLib_stepup_adcStopRaw>

08008ef0 <stimLib_stepup_startRaw>:
 8008ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef4:	4d15      	ldr	r5, [pc, #84]	; (8008f4c <stimLib_stepup_startRaw+0x5c>)
 8008ef6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8008f60 <stimLib_stepup_startRaw+0x70>
 8008efa:	2600      	movs	r6, #0
 8008efc:	626e      	str	r6, [r5, #36]	; 0x24
 8008efe:	f7fc f807 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8008f02:	f44f 7748 	mov.w	r7, #800	; 0x320
 8008f06:	fbb8 f0f0 	udiv	r0, r8, r0
 8008f0a:	fbb7 f0f0 	udiv	r0, r7, r0
 8008f0e:	3801      	subs	r0, #1
 8008f10:	62a8      	str	r0, [r5, #40]	; 0x28
 8008f12:	f7fb fffd 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8008f16:	4604      	mov	r4, r0
 8008f18:	f7fb fffa 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8008f1c:	4b0c      	ldr	r3, [pc, #48]	; (8008f50 <stimLib_stepup_startRaw+0x60>)
 8008f1e:	fbb8 f0f0 	udiv	r0, r8, r0
 8008f22:	fbb7 f7f0 	udiv	r7, r7, r0
 8008f26:	200a      	movs	r0, #10
 8008f28:	fbb4 f4f7 	udiv	r4, r4, r7
 8008f2c:	fbb4 f4f0 	udiv	r4, r4, r0
 8008f30:	3c01      	subs	r4, #1
 8008f32:	62ec      	str	r4, [r5, #44]	; 0x2c
 8008f34:	781a      	ldrb	r2, [r3, #0]
 8008f36:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <stimLib_stepup_startRaw+0x64>)
 8008f38:	4807      	ldr	r0, [pc, #28]	; (8008f58 <stimLib_stepup_startRaw+0x68>)
 8008f3a:	635a      	str	r2, [r3, #52]	; 0x34
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	f7fc fefb 	bl	8005d38 <HAL_TIM_PWM_Start>
 8008f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f46:	4805      	ldr	r0, [pc, #20]	; (8008f5c <stimLib_stepup_startRaw+0x6c>)
 8008f48:	f7fc ba7e 	b.w	8005448 <HAL_TIM_Base_Start_IT>
 8008f4c:	40001000 	.word	0x40001000
 8008f50:	20000438 	.word	0x20000438
 8008f54:	40012c00 	.word	0x40012c00
 8008f58:	200001e4 	.word	0x200001e4
 8008f5c:	2000027c 	.word	0x2000027c
 8008f60:	04c4b400 	.word	0x04c4b400

08008f64 <stimLib_stepup_stopRaw>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4c08      	ldr	r4, [pc, #32]	; (8008f88 <stimLib_stepup_stopRaw+0x24>)
 8008f68:	4b08      	ldr	r3, [pc, #32]	; (8008f8c <stimLib_stepup_stopRaw+0x28>)
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	701d      	strb	r5, [r3, #0]
 8008f70:	f7fc fa43 	bl	80053fa <HAL_TIM_Base_Stop>
 8008f74:	4629      	mov	r1, r5
 8008f76:	4620      	mov	r0, r4
 8008f78:	f7fc ffbc 	bl	8005ef4 <HAL_TIM_PWM_Stop>
 8008f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f80:	4803      	ldr	r0, [pc, #12]	; (8008f90 <stimLib_stepup_stopRaw+0x2c>)
 8008f82:	f7fc bab5 	b.w	80054f0 <HAL_TIM_Base_Stop_IT>
 8008f86:	bf00      	nop
 8008f88:	200001e4 	.word	0x200001e4
 8008f8c:	20000438 	.word	0x20000438
 8008f90:	2000027c 	.word	0x2000027c

08008f94 <stimLib_stepup_adcStartRaw>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	4c09      	ldr	r4, [pc, #36]	; (8008fbc <stimLib_stepup_adcStartRaw+0x28>)
 8008f98:	4909      	ldr	r1, [pc, #36]	; (8008fc0 <stimLib_stepup_adcStartRaw+0x2c>)
 8008f9a:	220a      	movs	r2, #10
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f7f8 fdfb 	bl	8001b98 <HAL_ADC_Start_DMA>
 8008fa2:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <stimLib_stepup_adcStartRaw+0x30>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	6813      	ldr	r3, [r2, #0]
 8008fa8:	f023 0306 	bic.w	r3, r3, #6
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	6822      	ldr	r2, [r4, #0]
 8008fb0:	6853      	ldr	r3, [r2, #4]
 8008fb2:	f023 0310 	bic.w	r3, r3, #16
 8008fb6:	6053      	str	r3, [r2, #4]
 8008fb8:	bd10      	pop	{r4, pc}
 8008fba:	bf00      	nop
 8008fbc:	2000008c 	.word	0x2000008c
 8008fc0:	20000424 	.word	0x20000424
 8008fc4:	20000154 	.word	0x20000154

08008fc8 <stimLib_stepup_adcStopRaw>:
 8008fc8:	4801      	ldr	r0, [pc, #4]	; (8008fd0 <stimLib_stepup_adcStopRaw+0x8>)
 8008fca:	f7f8 be99 	b.w	8001d00 <HAL_ADC_Stop_DMA>
 8008fce:	bf00      	nop
 8008fd0:	2000008c 	.word	0x2000008c

08008fd4 <__errno>:
 8008fd4:	4b01      	ldr	r3, [pc, #4]	; (8008fdc <__errno+0x8>)
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	2000000c 	.word	0x2000000c

08008fe0 <__libc_init_array>:
 8008fe0:	b570      	push	{r4, r5, r6, lr}
 8008fe2:	4d0d      	ldr	r5, [pc, #52]	; (8009018 <__libc_init_array+0x38>)
 8008fe4:	4c0d      	ldr	r4, [pc, #52]	; (800901c <__libc_init_array+0x3c>)
 8008fe6:	1b64      	subs	r4, r4, r5
 8008fe8:	10a4      	asrs	r4, r4, #2
 8008fea:	2600      	movs	r6, #0
 8008fec:	42a6      	cmp	r6, r4
 8008fee:	d109      	bne.n	8009004 <__libc_init_array+0x24>
 8008ff0:	4d0b      	ldr	r5, [pc, #44]	; (8009020 <__libc_init_array+0x40>)
 8008ff2:	4c0c      	ldr	r4, [pc, #48]	; (8009024 <__libc_init_array+0x44>)
 8008ff4:	f000 fd1e 	bl	8009a34 <_init>
 8008ff8:	1b64      	subs	r4, r4, r5
 8008ffa:	10a4      	asrs	r4, r4, #2
 8008ffc:	2600      	movs	r6, #0
 8008ffe:	42a6      	cmp	r6, r4
 8009000:	d105      	bne.n	800900e <__libc_init_array+0x2e>
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	f855 3b04 	ldr.w	r3, [r5], #4
 8009008:	4798      	blx	r3
 800900a:	3601      	adds	r6, #1
 800900c:	e7ee      	b.n	8008fec <__libc_init_array+0xc>
 800900e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009012:	4798      	blx	r3
 8009014:	3601      	adds	r6, #1
 8009016:	e7f2      	b.n	8008ffe <__libc_init_array+0x1e>
 8009018:	08009bfc 	.word	0x08009bfc
 800901c:	08009bfc 	.word	0x08009bfc
 8009020:	08009bfc 	.word	0x08009bfc
 8009024:	08009c00 	.word	0x08009c00

08009028 <memset>:
 8009028:	4402      	add	r2, r0
 800902a:	4603      	mov	r3, r0
 800902c:	4293      	cmp	r3, r2
 800902e:	d100      	bne.n	8009032 <memset+0xa>
 8009030:	4770      	bx	lr
 8009032:	f803 1b01 	strb.w	r1, [r3], #1
 8009036:	e7f9      	b.n	800902c <memset+0x4>

08009038 <_puts_r>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	460e      	mov	r6, r1
 800903c:	4605      	mov	r5, r0
 800903e:	b118      	cbz	r0, 8009048 <_puts_r+0x10>
 8009040:	6983      	ldr	r3, [r0, #24]
 8009042:	b90b      	cbnz	r3, 8009048 <_puts_r+0x10>
 8009044:	f000 fa48 	bl	80094d8 <__sinit>
 8009048:	69ab      	ldr	r3, [r5, #24]
 800904a:	68ac      	ldr	r4, [r5, #8]
 800904c:	b913      	cbnz	r3, 8009054 <_puts_r+0x1c>
 800904e:	4628      	mov	r0, r5
 8009050:	f000 fa42 	bl	80094d8 <__sinit>
 8009054:	4b2c      	ldr	r3, [pc, #176]	; (8009108 <_puts_r+0xd0>)
 8009056:	429c      	cmp	r4, r3
 8009058:	d120      	bne.n	800909c <_puts_r+0x64>
 800905a:	686c      	ldr	r4, [r5, #4]
 800905c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800905e:	07db      	lsls	r3, r3, #31
 8009060:	d405      	bmi.n	800906e <_puts_r+0x36>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	0598      	lsls	r0, r3, #22
 8009066:	d402      	bmi.n	800906e <_puts_r+0x36>
 8009068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800906a:	f000 fad3 	bl	8009614 <__retarget_lock_acquire_recursive>
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	0719      	lsls	r1, r3, #28
 8009072:	d51d      	bpl.n	80090b0 <_puts_r+0x78>
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	b1db      	cbz	r3, 80090b0 <_puts_r+0x78>
 8009078:	3e01      	subs	r6, #1
 800907a:	68a3      	ldr	r3, [r4, #8]
 800907c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009080:	3b01      	subs	r3, #1
 8009082:	60a3      	str	r3, [r4, #8]
 8009084:	bb39      	cbnz	r1, 80090d6 <_puts_r+0x9e>
 8009086:	2b00      	cmp	r3, #0
 8009088:	da38      	bge.n	80090fc <_puts_r+0xc4>
 800908a:	4622      	mov	r2, r4
 800908c:	210a      	movs	r1, #10
 800908e:	4628      	mov	r0, r5
 8009090:	f000 f848 	bl	8009124 <__swbuf_r>
 8009094:	3001      	adds	r0, #1
 8009096:	d011      	beq.n	80090bc <_puts_r+0x84>
 8009098:	250a      	movs	r5, #10
 800909a:	e011      	b.n	80090c0 <_puts_r+0x88>
 800909c:	4b1b      	ldr	r3, [pc, #108]	; (800910c <_puts_r+0xd4>)
 800909e:	429c      	cmp	r4, r3
 80090a0:	d101      	bne.n	80090a6 <_puts_r+0x6e>
 80090a2:	68ac      	ldr	r4, [r5, #8]
 80090a4:	e7da      	b.n	800905c <_puts_r+0x24>
 80090a6:	4b1a      	ldr	r3, [pc, #104]	; (8009110 <_puts_r+0xd8>)
 80090a8:	429c      	cmp	r4, r3
 80090aa:	bf08      	it	eq
 80090ac:	68ec      	ldreq	r4, [r5, #12]
 80090ae:	e7d5      	b.n	800905c <_puts_r+0x24>
 80090b0:	4621      	mov	r1, r4
 80090b2:	4628      	mov	r0, r5
 80090b4:	f000 f888 	bl	80091c8 <__swsetup_r>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d0dd      	beq.n	8009078 <_puts_r+0x40>
 80090bc:	f04f 35ff 	mov.w	r5, #4294967295
 80090c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090c2:	07da      	lsls	r2, r3, #31
 80090c4:	d405      	bmi.n	80090d2 <_puts_r+0x9a>
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	059b      	lsls	r3, r3, #22
 80090ca:	d402      	bmi.n	80090d2 <_puts_r+0x9a>
 80090cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ce:	f000 faa2 	bl	8009616 <__retarget_lock_release_recursive>
 80090d2:	4628      	mov	r0, r5
 80090d4:	bd70      	pop	{r4, r5, r6, pc}
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	da04      	bge.n	80090e4 <_puts_r+0xac>
 80090da:	69a2      	ldr	r2, [r4, #24]
 80090dc:	429a      	cmp	r2, r3
 80090de:	dc06      	bgt.n	80090ee <_puts_r+0xb6>
 80090e0:	290a      	cmp	r1, #10
 80090e2:	d004      	beq.n	80090ee <_puts_r+0xb6>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	1c5a      	adds	r2, r3, #1
 80090e8:	6022      	str	r2, [r4, #0]
 80090ea:	7019      	strb	r1, [r3, #0]
 80090ec:	e7c5      	b.n	800907a <_puts_r+0x42>
 80090ee:	4622      	mov	r2, r4
 80090f0:	4628      	mov	r0, r5
 80090f2:	f000 f817 	bl	8009124 <__swbuf_r>
 80090f6:	3001      	adds	r0, #1
 80090f8:	d1bf      	bne.n	800907a <_puts_r+0x42>
 80090fa:	e7df      	b.n	80090bc <_puts_r+0x84>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	250a      	movs	r5, #10
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	6022      	str	r2, [r4, #0]
 8009104:	701d      	strb	r5, [r3, #0]
 8009106:	e7db      	b.n	80090c0 <_puts_r+0x88>
 8009108:	08009bb4 	.word	0x08009bb4
 800910c:	08009bd4 	.word	0x08009bd4
 8009110:	08009b94 	.word	0x08009b94

08009114 <puts>:
 8009114:	4b02      	ldr	r3, [pc, #8]	; (8009120 <puts+0xc>)
 8009116:	4601      	mov	r1, r0
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	f7ff bf8d 	b.w	8009038 <_puts_r>
 800911e:	bf00      	nop
 8009120:	2000000c 	.word	0x2000000c

08009124 <__swbuf_r>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	460e      	mov	r6, r1
 8009128:	4614      	mov	r4, r2
 800912a:	4605      	mov	r5, r0
 800912c:	b118      	cbz	r0, 8009136 <__swbuf_r+0x12>
 800912e:	6983      	ldr	r3, [r0, #24]
 8009130:	b90b      	cbnz	r3, 8009136 <__swbuf_r+0x12>
 8009132:	f000 f9d1 	bl	80094d8 <__sinit>
 8009136:	4b21      	ldr	r3, [pc, #132]	; (80091bc <__swbuf_r+0x98>)
 8009138:	429c      	cmp	r4, r3
 800913a:	d12b      	bne.n	8009194 <__swbuf_r+0x70>
 800913c:	686c      	ldr	r4, [r5, #4]
 800913e:	69a3      	ldr	r3, [r4, #24]
 8009140:	60a3      	str	r3, [r4, #8]
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	071a      	lsls	r2, r3, #28
 8009146:	d52f      	bpl.n	80091a8 <__swbuf_r+0x84>
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	b36b      	cbz	r3, 80091a8 <__swbuf_r+0x84>
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	6820      	ldr	r0, [r4, #0]
 8009150:	1ac0      	subs	r0, r0, r3
 8009152:	6963      	ldr	r3, [r4, #20]
 8009154:	b2f6      	uxtb	r6, r6
 8009156:	4283      	cmp	r3, r0
 8009158:	4637      	mov	r7, r6
 800915a:	dc04      	bgt.n	8009166 <__swbuf_r+0x42>
 800915c:	4621      	mov	r1, r4
 800915e:	4628      	mov	r0, r5
 8009160:	f000 f926 	bl	80093b0 <_fflush_r>
 8009164:	bb30      	cbnz	r0, 80091b4 <__swbuf_r+0x90>
 8009166:	68a3      	ldr	r3, [r4, #8]
 8009168:	3b01      	subs	r3, #1
 800916a:	60a3      	str	r3, [r4, #8]
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	6022      	str	r2, [r4, #0]
 8009172:	701e      	strb	r6, [r3, #0]
 8009174:	6963      	ldr	r3, [r4, #20]
 8009176:	3001      	adds	r0, #1
 8009178:	4283      	cmp	r3, r0
 800917a:	d004      	beq.n	8009186 <__swbuf_r+0x62>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	07db      	lsls	r3, r3, #31
 8009180:	d506      	bpl.n	8009190 <__swbuf_r+0x6c>
 8009182:	2e0a      	cmp	r6, #10
 8009184:	d104      	bne.n	8009190 <__swbuf_r+0x6c>
 8009186:	4621      	mov	r1, r4
 8009188:	4628      	mov	r0, r5
 800918a:	f000 f911 	bl	80093b0 <_fflush_r>
 800918e:	b988      	cbnz	r0, 80091b4 <__swbuf_r+0x90>
 8009190:	4638      	mov	r0, r7
 8009192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009194:	4b0a      	ldr	r3, [pc, #40]	; (80091c0 <__swbuf_r+0x9c>)
 8009196:	429c      	cmp	r4, r3
 8009198:	d101      	bne.n	800919e <__swbuf_r+0x7a>
 800919a:	68ac      	ldr	r4, [r5, #8]
 800919c:	e7cf      	b.n	800913e <__swbuf_r+0x1a>
 800919e:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <__swbuf_r+0xa0>)
 80091a0:	429c      	cmp	r4, r3
 80091a2:	bf08      	it	eq
 80091a4:	68ec      	ldreq	r4, [r5, #12]
 80091a6:	e7ca      	b.n	800913e <__swbuf_r+0x1a>
 80091a8:	4621      	mov	r1, r4
 80091aa:	4628      	mov	r0, r5
 80091ac:	f000 f80c 	bl	80091c8 <__swsetup_r>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d0cb      	beq.n	800914c <__swbuf_r+0x28>
 80091b4:	f04f 37ff 	mov.w	r7, #4294967295
 80091b8:	e7ea      	b.n	8009190 <__swbuf_r+0x6c>
 80091ba:	bf00      	nop
 80091bc:	08009bb4 	.word	0x08009bb4
 80091c0:	08009bd4 	.word	0x08009bd4
 80091c4:	08009b94 	.word	0x08009b94

080091c8 <__swsetup_r>:
 80091c8:	4b32      	ldr	r3, [pc, #200]	; (8009294 <__swsetup_r+0xcc>)
 80091ca:	b570      	push	{r4, r5, r6, lr}
 80091cc:	681d      	ldr	r5, [r3, #0]
 80091ce:	4606      	mov	r6, r0
 80091d0:	460c      	mov	r4, r1
 80091d2:	b125      	cbz	r5, 80091de <__swsetup_r+0x16>
 80091d4:	69ab      	ldr	r3, [r5, #24]
 80091d6:	b913      	cbnz	r3, 80091de <__swsetup_r+0x16>
 80091d8:	4628      	mov	r0, r5
 80091da:	f000 f97d 	bl	80094d8 <__sinit>
 80091de:	4b2e      	ldr	r3, [pc, #184]	; (8009298 <__swsetup_r+0xd0>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	d10f      	bne.n	8009204 <__swsetup_r+0x3c>
 80091e4:	686c      	ldr	r4, [r5, #4]
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091ec:	0719      	lsls	r1, r3, #28
 80091ee:	d42c      	bmi.n	800924a <__swsetup_r+0x82>
 80091f0:	06dd      	lsls	r5, r3, #27
 80091f2:	d411      	bmi.n	8009218 <__swsetup_r+0x50>
 80091f4:	2309      	movs	r3, #9
 80091f6:	6033      	str	r3, [r6, #0]
 80091f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091fc:	81a3      	strh	r3, [r4, #12]
 80091fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009202:	e03e      	b.n	8009282 <__swsetup_r+0xba>
 8009204:	4b25      	ldr	r3, [pc, #148]	; (800929c <__swsetup_r+0xd4>)
 8009206:	429c      	cmp	r4, r3
 8009208:	d101      	bne.n	800920e <__swsetup_r+0x46>
 800920a:	68ac      	ldr	r4, [r5, #8]
 800920c:	e7eb      	b.n	80091e6 <__swsetup_r+0x1e>
 800920e:	4b24      	ldr	r3, [pc, #144]	; (80092a0 <__swsetup_r+0xd8>)
 8009210:	429c      	cmp	r4, r3
 8009212:	bf08      	it	eq
 8009214:	68ec      	ldreq	r4, [r5, #12]
 8009216:	e7e6      	b.n	80091e6 <__swsetup_r+0x1e>
 8009218:	0758      	lsls	r0, r3, #29
 800921a:	d512      	bpl.n	8009242 <__swsetup_r+0x7a>
 800921c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800921e:	b141      	cbz	r1, 8009232 <__swsetup_r+0x6a>
 8009220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009224:	4299      	cmp	r1, r3
 8009226:	d002      	beq.n	800922e <__swsetup_r+0x66>
 8009228:	4630      	mov	r0, r6
 800922a:	f000 fa5b 	bl	80096e4 <_free_r>
 800922e:	2300      	movs	r3, #0
 8009230:	6363      	str	r3, [r4, #52]	; 0x34
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	2300      	movs	r3, #0
 800923c:	6063      	str	r3, [r4, #4]
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	f043 0308 	orr.w	r3, r3, #8
 8009248:	81a3      	strh	r3, [r4, #12]
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	b94b      	cbnz	r3, 8009262 <__swsetup_r+0x9a>
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009258:	d003      	beq.n	8009262 <__swsetup_r+0x9a>
 800925a:	4621      	mov	r1, r4
 800925c:	4630      	mov	r0, r6
 800925e:	f000 fa01 	bl	8009664 <__smakebuf_r>
 8009262:	89a0      	ldrh	r0, [r4, #12]
 8009264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009268:	f010 0301 	ands.w	r3, r0, #1
 800926c:	d00a      	beq.n	8009284 <__swsetup_r+0xbc>
 800926e:	2300      	movs	r3, #0
 8009270:	60a3      	str	r3, [r4, #8]
 8009272:	6963      	ldr	r3, [r4, #20]
 8009274:	425b      	negs	r3, r3
 8009276:	61a3      	str	r3, [r4, #24]
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	b943      	cbnz	r3, 800928e <__swsetup_r+0xc6>
 800927c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009280:	d1ba      	bne.n	80091f8 <__swsetup_r+0x30>
 8009282:	bd70      	pop	{r4, r5, r6, pc}
 8009284:	0781      	lsls	r1, r0, #30
 8009286:	bf58      	it	pl
 8009288:	6963      	ldrpl	r3, [r4, #20]
 800928a:	60a3      	str	r3, [r4, #8]
 800928c:	e7f4      	b.n	8009278 <__swsetup_r+0xb0>
 800928e:	2000      	movs	r0, #0
 8009290:	e7f7      	b.n	8009282 <__swsetup_r+0xba>
 8009292:	bf00      	nop
 8009294:	2000000c 	.word	0x2000000c
 8009298:	08009bb4 	.word	0x08009bb4
 800929c:	08009bd4 	.word	0x08009bd4
 80092a0:	08009b94 	.word	0x08009b94

080092a4 <__sflush_r>:
 80092a4:	898a      	ldrh	r2, [r1, #12]
 80092a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092aa:	4605      	mov	r5, r0
 80092ac:	0710      	lsls	r0, r2, #28
 80092ae:	460c      	mov	r4, r1
 80092b0:	d458      	bmi.n	8009364 <__sflush_r+0xc0>
 80092b2:	684b      	ldr	r3, [r1, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dc05      	bgt.n	80092c4 <__sflush_r+0x20>
 80092b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dc02      	bgt.n	80092c4 <__sflush_r+0x20>
 80092be:	2000      	movs	r0, #0
 80092c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092c6:	2e00      	cmp	r6, #0
 80092c8:	d0f9      	beq.n	80092be <__sflush_r+0x1a>
 80092ca:	2300      	movs	r3, #0
 80092cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092d0:	682f      	ldr	r7, [r5, #0]
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	d032      	beq.n	800933c <__sflush_r+0x98>
 80092d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	075a      	lsls	r2, r3, #29
 80092dc:	d505      	bpl.n	80092ea <__sflush_r+0x46>
 80092de:	6863      	ldr	r3, [r4, #4]
 80092e0:	1ac0      	subs	r0, r0, r3
 80092e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092e4:	b10b      	cbz	r3, 80092ea <__sflush_r+0x46>
 80092e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092e8:	1ac0      	subs	r0, r0, r3
 80092ea:	2300      	movs	r3, #0
 80092ec:	4602      	mov	r2, r0
 80092ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092f0:	6a21      	ldr	r1, [r4, #32]
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b0      	blx	r6
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	d106      	bne.n	800930a <__sflush_r+0x66>
 80092fc:	6829      	ldr	r1, [r5, #0]
 80092fe:	291d      	cmp	r1, #29
 8009300:	d82c      	bhi.n	800935c <__sflush_r+0xb8>
 8009302:	4a2a      	ldr	r2, [pc, #168]	; (80093ac <__sflush_r+0x108>)
 8009304:	40ca      	lsrs	r2, r1
 8009306:	07d6      	lsls	r6, r2, #31
 8009308:	d528      	bpl.n	800935c <__sflush_r+0xb8>
 800930a:	2200      	movs	r2, #0
 800930c:	6062      	str	r2, [r4, #4]
 800930e:	04d9      	lsls	r1, r3, #19
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	6022      	str	r2, [r4, #0]
 8009314:	d504      	bpl.n	8009320 <__sflush_r+0x7c>
 8009316:	1c42      	adds	r2, r0, #1
 8009318:	d101      	bne.n	800931e <__sflush_r+0x7a>
 800931a:	682b      	ldr	r3, [r5, #0]
 800931c:	b903      	cbnz	r3, 8009320 <__sflush_r+0x7c>
 800931e:	6560      	str	r0, [r4, #84]	; 0x54
 8009320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009322:	602f      	str	r7, [r5, #0]
 8009324:	2900      	cmp	r1, #0
 8009326:	d0ca      	beq.n	80092be <__sflush_r+0x1a>
 8009328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800932c:	4299      	cmp	r1, r3
 800932e:	d002      	beq.n	8009336 <__sflush_r+0x92>
 8009330:	4628      	mov	r0, r5
 8009332:	f000 f9d7 	bl	80096e4 <_free_r>
 8009336:	2000      	movs	r0, #0
 8009338:	6360      	str	r0, [r4, #52]	; 0x34
 800933a:	e7c1      	b.n	80092c0 <__sflush_r+0x1c>
 800933c:	6a21      	ldr	r1, [r4, #32]
 800933e:	2301      	movs	r3, #1
 8009340:	4628      	mov	r0, r5
 8009342:	47b0      	blx	r6
 8009344:	1c41      	adds	r1, r0, #1
 8009346:	d1c7      	bne.n	80092d8 <__sflush_r+0x34>
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0c4      	beq.n	80092d8 <__sflush_r+0x34>
 800934e:	2b1d      	cmp	r3, #29
 8009350:	d001      	beq.n	8009356 <__sflush_r+0xb2>
 8009352:	2b16      	cmp	r3, #22
 8009354:	d101      	bne.n	800935a <__sflush_r+0xb6>
 8009356:	602f      	str	r7, [r5, #0]
 8009358:	e7b1      	b.n	80092be <__sflush_r+0x1a>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009360:	81a3      	strh	r3, [r4, #12]
 8009362:	e7ad      	b.n	80092c0 <__sflush_r+0x1c>
 8009364:	690f      	ldr	r7, [r1, #16]
 8009366:	2f00      	cmp	r7, #0
 8009368:	d0a9      	beq.n	80092be <__sflush_r+0x1a>
 800936a:	0793      	lsls	r3, r2, #30
 800936c:	680e      	ldr	r6, [r1, #0]
 800936e:	bf08      	it	eq
 8009370:	694b      	ldreq	r3, [r1, #20]
 8009372:	600f      	str	r7, [r1, #0]
 8009374:	bf18      	it	ne
 8009376:	2300      	movne	r3, #0
 8009378:	eba6 0807 	sub.w	r8, r6, r7
 800937c:	608b      	str	r3, [r1, #8]
 800937e:	f1b8 0f00 	cmp.w	r8, #0
 8009382:	dd9c      	ble.n	80092be <__sflush_r+0x1a>
 8009384:	6a21      	ldr	r1, [r4, #32]
 8009386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009388:	4643      	mov	r3, r8
 800938a:	463a      	mov	r2, r7
 800938c:	4628      	mov	r0, r5
 800938e:	47b0      	blx	r6
 8009390:	2800      	cmp	r0, #0
 8009392:	dc06      	bgt.n	80093a2 <__sflush_r+0xfe>
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	f04f 30ff 	mov.w	r0, #4294967295
 80093a0:	e78e      	b.n	80092c0 <__sflush_r+0x1c>
 80093a2:	4407      	add	r7, r0
 80093a4:	eba8 0800 	sub.w	r8, r8, r0
 80093a8:	e7e9      	b.n	800937e <__sflush_r+0xda>
 80093aa:	bf00      	nop
 80093ac:	20400001 	.word	0x20400001

080093b0 <_fflush_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	690b      	ldr	r3, [r1, #16]
 80093b4:	4605      	mov	r5, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	b913      	cbnz	r3, 80093c0 <_fflush_r+0x10>
 80093ba:	2500      	movs	r5, #0
 80093bc:	4628      	mov	r0, r5
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	b118      	cbz	r0, 80093ca <_fflush_r+0x1a>
 80093c2:	6983      	ldr	r3, [r0, #24]
 80093c4:	b90b      	cbnz	r3, 80093ca <_fflush_r+0x1a>
 80093c6:	f000 f887 	bl	80094d8 <__sinit>
 80093ca:	4b14      	ldr	r3, [pc, #80]	; (800941c <_fflush_r+0x6c>)
 80093cc:	429c      	cmp	r4, r3
 80093ce:	d11b      	bne.n	8009408 <_fflush_r+0x58>
 80093d0:	686c      	ldr	r4, [r5, #4]
 80093d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0ef      	beq.n	80093ba <_fflush_r+0xa>
 80093da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093dc:	07d0      	lsls	r0, r2, #31
 80093de:	d404      	bmi.n	80093ea <_fflush_r+0x3a>
 80093e0:	0599      	lsls	r1, r3, #22
 80093e2:	d402      	bmi.n	80093ea <_fflush_r+0x3a>
 80093e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093e6:	f000 f915 	bl	8009614 <__retarget_lock_acquire_recursive>
 80093ea:	4628      	mov	r0, r5
 80093ec:	4621      	mov	r1, r4
 80093ee:	f7ff ff59 	bl	80092a4 <__sflush_r>
 80093f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093f4:	07da      	lsls	r2, r3, #31
 80093f6:	4605      	mov	r5, r0
 80093f8:	d4e0      	bmi.n	80093bc <_fflush_r+0xc>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	059b      	lsls	r3, r3, #22
 80093fe:	d4dd      	bmi.n	80093bc <_fflush_r+0xc>
 8009400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009402:	f000 f908 	bl	8009616 <__retarget_lock_release_recursive>
 8009406:	e7d9      	b.n	80093bc <_fflush_r+0xc>
 8009408:	4b05      	ldr	r3, [pc, #20]	; (8009420 <_fflush_r+0x70>)
 800940a:	429c      	cmp	r4, r3
 800940c:	d101      	bne.n	8009412 <_fflush_r+0x62>
 800940e:	68ac      	ldr	r4, [r5, #8]
 8009410:	e7df      	b.n	80093d2 <_fflush_r+0x22>
 8009412:	4b04      	ldr	r3, [pc, #16]	; (8009424 <_fflush_r+0x74>)
 8009414:	429c      	cmp	r4, r3
 8009416:	bf08      	it	eq
 8009418:	68ec      	ldreq	r4, [r5, #12]
 800941a:	e7da      	b.n	80093d2 <_fflush_r+0x22>
 800941c:	08009bb4 	.word	0x08009bb4
 8009420:	08009bd4 	.word	0x08009bd4
 8009424:	08009b94 	.word	0x08009b94

08009428 <std>:
 8009428:	2300      	movs	r3, #0
 800942a:	b510      	push	{r4, lr}
 800942c:	4604      	mov	r4, r0
 800942e:	e9c0 3300 	strd	r3, r3, [r0]
 8009432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009436:	6083      	str	r3, [r0, #8]
 8009438:	8181      	strh	r1, [r0, #12]
 800943a:	6643      	str	r3, [r0, #100]	; 0x64
 800943c:	81c2      	strh	r2, [r0, #14]
 800943e:	6183      	str	r3, [r0, #24]
 8009440:	4619      	mov	r1, r3
 8009442:	2208      	movs	r2, #8
 8009444:	305c      	adds	r0, #92	; 0x5c
 8009446:	f7ff fdef 	bl	8009028 <memset>
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <std+0x38>)
 800944c:	6263      	str	r3, [r4, #36]	; 0x24
 800944e:	4b05      	ldr	r3, [pc, #20]	; (8009464 <std+0x3c>)
 8009450:	62a3      	str	r3, [r4, #40]	; 0x28
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <std+0x40>)
 8009454:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009456:	4b05      	ldr	r3, [pc, #20]	; (800946c <std+0x44>)
 8009458:	6224      	str	r4, [r4, #32]
 800945a:	6323      	str	r3, [r4, #48]	; 0x30
 800945c:	bd10      	pop	{r4, pc}
 800945e:	bf00      	nop
 8009460:	080098c5 	.word	0x080098c5
 8009464:	080098e7 	.word	0x080098e7
 8009468:	0800991f 	.word	0x0800991f
 800946c:	08009943 	.word	0x08009943

08009470 <_cleanup_r>:
 8009470:	4901      	ldr	r1, [pc, #4]	; (8009478 <_cleanup_r+0x8>)
 8009472:	f000 b8af 	b.w	80095d4 <_fwalk_reent>
 8009476:	bf00      	nop
 8009478:	080093b1 	.word	0x080093b1

0800947c <__sfmoreglue>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	2268      	movs	r2, #104	; 0x68
 8009480:	1e4d      	subs	r5, r1, #1
 8009482:	4355      	muls	r5, r2
 8009484:	460e      	mov	r6, r1
 8009486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800948a:	f000 f997 	bl	80097bc <_malloc_r>
 800948e:	4604      	mov	r4, r0
 8009490:	b140      	cbz	r0, 80094a4 <__sfmoreglue+0x28>
 8009492:	2100      	movs	r1, #0
 8009494:	e9c0 1600 	strd	r1, r6, [r0]
 8009498:	300c      	adds	r0, #12
 800949a:	60a0      	str	r0, [r4, #8]
 800949c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094a0:	f7ff fdc2 	bl	8009028 <memset>
 80094a4:	4620      	mov	r0, r4
 80094a6:	bd70      	pop	{r4, r5, r6, pc}

080094a8 <__sfp_lock_acquire>:
 80094a8:	4801      	ldr	r0, [pc, #4]	; (80094b0 <__sfp_lock_acquire+0x8>)
 80094aa:	f000 b8b3 	b.w	8009614 <__retarget_lock_acquire_recursive>
 80094ae:	bf00      	nop
 80094b0:	2000043a 	.word	0x2000043a

080094b4 <__sfp_lock_release>:
 80094b4:	4801      	ldr	r0, [pc, #4]	; (80094bc <__sfp_lock_release+0x8>)
 80094b6:	f000 b8ae 	b.w	8009616 <__retarget_lock_release_recursive>
 80094ba:	bf00      	nop
 80094bc:	2000043a 	.word	0x2000043a

080094c0 <__sinit_lock_acquire>:
 80094c0:	4801      	ldr	r0, [pc, #4]	; (80094c8 <__sinit_lock_acquire+0x8>)
 80094c2:	f000 b8a7 	b.w	8009614 <__retarget_lock_acquire_recursive>
 80094c6:	bf00      	nop
 80094c8:	2000043b 	.word	0x2000043b

080094cc <__sinit_lock_release>:
 80094cc:	4801      	ldr	r0, [pc, #4]	; (80094d4 <__sinit_lock_release+0x8>)
 80094ce:	f000 b8a2 	b.w	8009616 <__retarget_lock_release_recursive>
 80094d2:	bf00      	nop
 80094d4:	2000043b 	.word	0x2000043b

080094d8 <__sinit>:
 80094d8:	b510      	push	{r4, lr}
 80094da:	4604      	mov	r4, r0
 80094dc:	f7ff fff0 	bl	80094c0 <__sinit_lock_acquire>
 80094e0:	69a3      	ldr	r3, [r4, #24]
 80094e2:	b11b      	cbz	r3, 80094ec <__sinit+0x14>
 80094e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e8:	f7ff bff0 	b.w	80094cc <__sinit_lock_release>
 80094ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094f0:	6523      	str	r3, [r4, #80]	; 0x50
 80094f2:	4b13      	ldr	r3, [pc, #76]	; (8009540 <__sinit+0x68>)
 80094f4:	4a13      	ldr	r2, [pc, #76]	; (8009544 <__sinit+0x6c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80094fa:	42a3      	cmp	r3, r4
 80094fc:	bf04      	itt	eq
 80094fe:	2301      	moveq	r3, #1
 8009500:	61a3      	streq	r3, [r4, #24]
 8009502:	4620      	mov	r0, r4
 8009504:	f000 f820 	bl	8009548 <__sfp>
 8009508:	6060      	str	r0, [r4, #4]
 800950a:	4620      	mov	r0, r4
 800950c:	f000 f81c 	bl	8009548 <__sfp>
 8009510:	60a0      	str	r0, [r4, #8]
 8009512:	4620      	mov	r0, r4
 8009514:	f000 f818 	bl	8009548 <__sfp>
 8009518:	2200      	movs	r2, #0
 800951a:	60e0      	str	r0, [r4, #12]
 800951c:	2104      	movs	r1, #4
 800951e:	6860      	ldr	r0, [r4, #4]
 8009520:	f7ff ff82 	bl	8009428 <std>
 8009524:	68a0      	ldr	r0, [r4, #8]
 8009526:	2201      	movs	r2, #1
 8009528:	2109      	movs	r1, #9
 800952a:	f7ff ff7d 	bl	8009428 <std>
 800952e:	68e0      	ldr	r0, [r4, #12]
 8009530:	2202      	movs	r2, #2
 8009532:	2112      	movs	r1, #18
 8009534:	f7ff ff78 	bl	8009428 <std>
 8009538:	2301      	movs	r3, #1
 800953a:	61a3      	str	r3, [r4, #24]
 800953c:	e7d2      	b.n	80094e4 <__sinit+0xc>
 800953e:	bf00      	nop
 8009540:	08009b90 	.word	0x08009b90
 8009544:	08009471 	.word	0x08009471

08009548 <__sfp>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	4607      	mov	r7, r0
 800954c:	f7ff ffac 	bl	80094a8 <__sfp_lock_acquire>
 8009550:	4b1e      	ldr	r3, [pc, #120]	; (80095cc <__sfp+0x84>)
 8009552:	681e      	ldr	r6, [r3, #0]
 8009554:	69b3      	ldr	r3, [r6, #24]
 8009556:	b913      	cbnz	r3, 800955e <__sfp+0x16>
 8009558:	4630      	mov	r0, r6
 800955a:	f7ff ffbd 	bl	80094d8 <__sinit>
 800955e:	3648      	adds	r6, #72	; 0x48
 8009560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009564:	3b01      	subs	r3, #1
 8009566:	d503      	bpl.n	8009570 <__sfp+0x28>
 8009568:	6833      	ldr	r3, [r6, #0]
 800956a:	b30b      	cbz	r3, 80095b0 <__sfp+0x68>
 800956c:	6836      	ldr	r6, [r6, #0]
 800956e:	e7f7      	b.n	8009560 <__sfp+0x18>
 8009570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009574:	b9d5      	cbnz	r5, 80095ac <__sfp+0x64>
 8009576:	4b16      	ldr	r3, [pc, #88]	; (80095d0 <__sfp+0x88>)
 8009578:	60e3      	str	r3, [r4, #12]
 800957a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800957e:	6665      	str	r5, [r4, #100]	; 0x64
 8009580:	f000 f847 	bl	8009612 <__retarget_lock_init_recursive>
 8009584:	f7ff ff96 	bl	80094b4 <__sfp_lock_release>
 8009588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800958c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009590:	6025      	str	r5, [r4, #0]
 8009592:	61a5      	str	r5, [r4, #24]
 8009594:	2208      	movs	r2, #8
 8009596:	4629      	mov	r1, r5
 8009598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800959c:	f7ff fd44 	bl	8009028 <memset>
 80095a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095a8:	4620      	mov	r0, r4
 80095aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ac:	3468      	adds	r4, #104	; 0x68
 80095ae:	e7d9      	b.n	8009564 <__sfp+0x1c>
 80095b0:	2104      	movs	r1, #4
 80095b2:	4638      	mov	r0, r7
 80095b4:	f7ff ff62 	bl	800947c <__sfmoreglue>
 80095b8:	4604      	mov	r4, r0
 80095ba:	6030      	str	r0, [r6, #0]
 80095bc:	2800      	cmp	r0, #0
 80095be:	d1d5      	bne.n	800956c <__sfp+0x24>
 80095c0:	f7ff ff78 	bl	80094b4 <__sfp_lock_release>
 80095c4:	230c      	movs	r3, #12
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	e7ee      	b.n	80095a8 <__sfp+0x60>
 80095ca:	bf00      	nop
 80095cc:	08009b90 	.word	0x08009b90
 80095d0:	ffff0001 	.word	0xffff0001

080095d4 <_fwalk_reent>:
 80095d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d8:	4606      	mov	r6, r0
 80095da:	4688      	mov	r8, r1
 80095dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095e0:	2700      	movs	r7, #0
 80095e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095e6:	f1b9 0901 	subs.w	r9, r9, #1
 80095ea:	d505      	bpl.n	80095f8 <_fwalk_reent+0x24>
 80095ec:	6824      	ldr	r4, [r4, #0]
 80095ee:	2c00      	cmp	r4, #0
 80095f0:	d1f7      	bne.n	80095e2 <_fwalk_reent+0xe>
 80095f2:	4638      	mov	r0, r7
 80095f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095f8:	89ab      	ldrh	r3, [r5, #12]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d907      	bls.n	800960e <_fwalk_reent+0x3a>
 80095fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009602:	3301      	adds	r3, #1
 8009604:	d003      	beq.n	800960e <_fwalk_reent+0x3a>
 8009606:	4629      	mov	r1, r5
 8009608:	4630      	mov	r0, r6
 800960a:	47c0      	blx	r8
 800960c:	4307      	orrs	r7, r0
 800960e:	3568      	adds	r5, #104	; 0x68
 8009610:	e7e9      	b.n	80095e6 <_fwalk_reent+0x12>

08009612 <__retarget_lock_init_recursive>:
 8009612:	4770      	bx	lr

08009614 <__retarget_lock_acquire_recursive>:
 8009614:	4770      	bx	lr

08009616 <__retarget_lock_release_recursive>:
 8009616:	4770      	bx	lr

08009618 <__swhatbuf_r>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	460e      	mov	r6, r1
 800961c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009620:	2900      	cmp	r1, #0
 8009622:	b096      	sub	sp, #88	; 0x58
 8009624:	4614      	mov	r4, r2
 8009626:	461d      	mov	r5, r3
 8009628:	da08      	bge.n	800963c <__swhatbuf_r+0x24>
 800962a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	602a      	str	r2, [r5, #0]
 8009632:	061a      	lsls	r2, r3, #24
 8009634:	d410      	bmi.n	8009658 <__swhatbuf_r+0x40>
 8009636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800963a:	e00e      	b.n	800965a <__swhatbuf_r+0x42>
 800963c:	466a      	mov	r2, sp
 800963e:	f000 f9a7 	bl	8009990 <_fstat_r>
 8009642:	2800      	cmp	r0, #0
 8009644:	dbf1      	blt.n	800962a <__swhatbuf_r+0x12>
 8009646:	9a01      	ldr	r2, [sp, #4]
 8009648:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800964c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009650:	425a      	negs	r2, r3
 8009652:	415a      	adcs	r2, r3
 8009654:	602a      	str	r2, [r5, #0]
 8009656:	e7ee      	b.n	8009636 <__swhatbuf_r+0x1e>
 8009658:	2340      	movs	r3, #64	; 0x40
 800965a:	2000      	movs	r0, #0
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	b016      	add	sp, #88	; 0x58
 8009660:	bd70      	pop	{r4, r5, r6, pc}
	...

08009664 <__smakebuf_r>:
 8009664:	898b      	ldrh	r3, [r1, #12]
 8009666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009668:	079d      	lsls	r5, r3, #30
 800966a:	4606      	mov	r6, r0
 800966c:	460c      	mov	r4, r1
 800966e:	d507      	bpl.n	8009680 <__smakebuf_r+0x1c>
 8009670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	6123      	str	r3, [r4, #16]
 8009678:	2301      	movs	r3, #1
 800967a:	6163      	str	r3, [r4, #20]
 800967c:	b002      	add	sp, #8
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	ab01      	add	r3, sp, #4
 8009682:	466a      	mov	r2, sp
 8009684:	f7ff ffc8 	bl	8009618 <__swhatbuf_r>
 8009688:	9900      	ldr	r1, [sp, #0]
 800968a:	4605      	mov	r5, r0
 800968c:	4630      	mov	r0, r6
 800968e:	f000 f895 	bl	80097bc <_malloc_r>
 8009692:	b948      	cbnz	r0, 80096a8 <__smakebuf_r+0x44>
 8009694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009698:	059a      	lsls	r2, r3, #22
 800969a:	d4ef      	bmi.n	800967c <__smakebuf_r+0x18>
 800969c:	f023 0303 	bic.w	r3, r3, #3
 80096a0:	f043 0302 	orr.w	r3, r3, #2
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	e7e3      	b.n	8009670 <__smakebuf_r+0xc>
 80096a8:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <__smakebuf_r+0x7c>)
 80096aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	6020      	str	r0, [r4, #0]
 80096b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b4:	81a3      	strh	r3, [r4, #12]
 80096b6:	9b00      	ldr	r3, [sp, #0]
 80096b8:	6163      	str	r3, [r4, #20]
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	6120      	str	r0, [r4, #16]
 80096be:	b15b      	cbz	r3, 80096d8 <__smakebuf_r+0x74>
 80096c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096c4:	4630      	mov	r0, r6
 80096c6:	f000 f975 	bl	80099b4 <_isatty_r>
 80096ca:	b128      	cbz	r0, 80096d8 <__smakebuf_r+0x74>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f023 0303 	bic.w	r3, r3, #3
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	81a3      	strh	r3, [r4, #12]
 80096d8:	89a0      	ldrh	r0, [r4, #12]
 80096da:	4305      	orrs	r5, r0
 80096dc:	81a5      	strh	r5, [r4, #12]
 80096de:	e7cd      	b.n	800967c <__smakebuf_r+0x18>
 80096e0:	08009471 	.word	0x08009471

080096e4 <_free_r>:
 80096e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096e6:	2900      	cmp	r1, #0
 80096e8:	d044      	beq.n	8009774 <_free_r+0x90>
 80096ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ee:	9001      	str	r0, [sp, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f1a1 0404 	sub.w	r4, r1, #4
 80096f6:	bfb8      	it	lt
 80096f8:	18e4      	addlt	r4, r4, r3
 80096fa:	f000 f97d 	bl	80099f8 <__malloc_lock>
 80096fe:	4a1e      	ldr	r2, [pc, #120]	; (8009778 <_free_r+0x94>)
 8009700:	9801      	ldr	r0, [sp, #4]
 8009702:	6813      	ldr	r3, [r2, #0]
 8009704:	b933      	cbnz	r3, 8009714 <_free_r+0x30>
 8009706:	6063      	str	r3, [r4, #4]
 8009708:	6014      	str	r4, [r2, #0]
 800970a:	b003      	add	sp, #12
 800970c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009710:	f000 b978 	b.w	8009a04 <__malloc_unlock>
 8009714:	42a3      	cmp	r3, r4
 8009716:	d908      	bls.n	800972a <_free_r+0x46>
 8009718:	6825      	ldr	r5, [r4, #0]
 800971a:	1961      	adds	r1, r4, r5
 800971c:	428b      	cmp	r3, r1
 800971e:	bf01      	itttt	eq
 8009720:	6819      	ldreq	r1, [r3, #0]
 8009722:	685b      	ldreq	r3, [r3, #4]
 8009724:	1949      	addeq	r1, r1, r5
 8009726:	6021      	streq	r1, [r4, #0]
 8009728:	e7ed      	b.n	8009706 <_free_r+0x22>
 800972a:	461a      	mov	r2, r3
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	b10b      	cbz	r3, 8009734 <_free_r+0x50>
 8009730:	42a3      	cmp	r3, r4
 8009732:	d9fa      	bls.n	800972a <_free_r+0x46>
 8009734:	6811      	ldr	r1, [r2, #0]
 8009736:	1855      	adds	r5, r2, r1
 8009738:	42a5      	cmp	r5, r4
 800973a:	d10b      	bne.n	8009754 <_free_r+0x70>
 800973c:	6824      	ldr	r4, [r4, #0]
 800973e:	4421      	add	r1, r4
 8009740:	1854      	adds	r4, r2, r1
 8009742:	42a3      	cmp	r3, r4
 8009744:	6011      	str	r1, [r2, #0]
 8009746:	d1e0      	bne.n	800970a <_free_r+0x26>
 8009748:	681c      	ldr	r4, [r3, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	6053      	str	r3, [r2, #4]
 800974e:	4421      	add	r1, r4
 8009750:	6011      	str	r1, [r2, #0]
 8009752:	e7da      	b.n	800970a <_free_r+0x26>
 8009754:	d902      	bls.n	800975c <_free_r+0x78>
 8009756:	230c      	movs	r3, #12
 8009758:	6003      	str	r3, [r0, #0]
 800975a:	e7d6      	b.n	800970a <_free_r+0x26>
 800975c:	6825      	ldr	r5, [r4, #0]
 800975e:	1961      	adds	r1, r4, r5
 8009760:	428b      	cmp	r3, r1
 8009762:	bf04      	itt	eq
 8009764:	6819      	ldreq	r1, [r3, #0]
 8009766:	685b      	ldreq	r3, [r3, #4]
 8009768:	6063      	str	r3, [r4, #4]
 800976a:	bf04      	itt	eq
 800976c:	1949      	addeq	r1, r1, r5
 800976e:	6021      	streq	r1, [r4, #0]
 8009770:	6054      	str	r4, [r2, #4]
 8009772:	e7ca      	b.n	800970a <_free_r+0x26>
 8009774:	b003      	add	sp, #12
 8009776:	bd30      	pop	{r4, r5, pc}
 8009778:	2000043c 	.word	0x2000043c

0800977c <sbrk_aligned>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	4e0e      	ldr	r6, [pc, #56]	; (80097b8 <sbrk_aligned+0x3c>)
 8009780:	460c      	mov	r4, r1
 8009782:	6831      	ldr	r1, [r6, #0]
 8009784:	4605      	mov	r5, r0
 8009786:	b911      	cbnz	r1, 800978e <sbrk_aligned+0x12>
 8009788:	f000 f88c 	bl	80098a4 <_sbrk_r>
 800978c:	6030      	str	r0, [r6, #0]
 800978e:	4621      	mov	r1, r4
 8009790:	4628      	mov	r0, r5
 8009792:	f000 f887 	bl	80098a4 <_sbrk_r>
 8009796:	1c43      	adds	r3, r0, #1
 8009798:	d00a      	beq.n	80097b0 <sbrk_aligned+0x34>
 800979a:	1cc4      	adds	r4, r0, #3
 800979c:	f024 0403 	bic.w	r4, r4, #3
 80097a0:	42a0      	cmp	r0, r4
 80097a2:	d007      	beq.n	80097b4 <sbrk_aligned+0x38>
 80097a4:	1a21      	subs	r1, r4, r0
 80097a6:	4628      	mov	r0, r5
 80097a8:	f000 f87c 	bl	80098a4 <_sbrk_r>
 80097ac:	3001      	adds	r0, #1
 80097ae:	d101      	bne.n	80097b4 <sbrk_aligned+0x38>
 80097b0:	f04f 34ff 	mov.w	r4, #4294967295
 80097b4:	4620      	mov	r0, r4
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	20000440 	.word	0x20000440

080097bc <_malloc_r>:
 80097bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c0:	1ccd      	adds	r5, r1, #3
 80097c2:	f025 0503 	bic.w	r5, r5, #3
 80097c6:	3508      	adds	r5, #8
 80097c8:	2d0c      	cmp	r5, #12
 80097ca:	bf38      	it	cc
 80097cc:	250c      	movcc	r5, #12
 80097ce:	2d00      	cmp	r5, #0
 80097d0:	4607      	mov	r7, r0
 80097d2:	db01      	blt.n	80097d8 <_malloc_r+0x1c>
 80097d4:	42a9      	cmp	r1, r5
 80097d6:	d905      	bls.n	80097e4 <_malloc_r+0x28>
 80097d8:	230c      	movs	r3, #12
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	2600      	movs	r6, #0
 80097de:	4630      	mov	r0, r6
 80097e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e4:	4e2e      	ldr	r6, [pc, #184]	; (80098a0 <_malloc_r+0xe4>)
 80097e6:	f000 f907 	bl	80099f8 <__malloc_lock>
 80097ea:	6833      	ldr	r3, [r6, #0]
 80097ec:	461c      	mov	r4, r3
 80097ee:	bb34      	cbnz	r4, 800983e <_malloc_r+0x82>
 80097f0:	4629      	mov	r1, r5
 80097f2:	4638      	mov	r0, r7
 80097f4:	f7ff ffc2 	bl	800977c <sbrk_aligned>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	4604      	mov	r4, r0
 80097fc:	d14d      	bne.n	800989a <_malloc_r+0xde>
 80097fe:	6834      	ldr	r4, [r6, #0]
 8009800:	4626      	mov	r6, r4
 8009802:	2e00      	cmp	r6, #0
 8009804:	d140      	bne.n	8009888 <_malloc_r+0xcc>
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	4631      	mov	r1, r6
 800980a:	4638      	mov	r0, r7
 800980c:	eb04 0803 	add.w	r8, r4, r3
 8009810:	f000 f848 	bl	80098a4 <_sbrk_r>
 8009814:	4580      	cmp	r8, r0
 8009816:	d13a      	bne.n	800988e <_malloc_r+0xd2>
 8009818:	6821      	ldr	r1, [r4, #0]
 800981a:	3503      	adds	r5, #3
 800981c:	1a6d      	subs	r5, r5, r1
 800981e:	f025 0503 	bic.w	r5, r5, #3
 8009822:	3508      	adds	r5, #8
 8009824:	2d0c      	cmp	r5, #12
 8009826:	bf38      	it	cc
 8009828:	250c      	movcc	r5, #12
 800982a:	4629      	mov	r1, r5
 800982c:	4638      	mov	r0, r7
 800982e:	f7ff ffa5 	bl	800977c <sbrk_aligned>
 8009832:	3001      	adds	r0, #1
 8009834:	d02b      	beq.n	800988e <_malloc_r+0xd2>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	442b      	add	r3, r5
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	e00e      	b.n	800985c <_malloc_r+0xa0>
 800983e:	6822      	ldr	r2, [r4, #0]
 8009840:	1b52      	subs	r2, r2, r5
 8009842:	d41e      	bmi.n	8009882 <_malloc_r+0xc6>
 8009844:	2a0b      	cmp	r2, #11
 8009846:	d916      	bls.n	8009876 <_malloc_r+0xba>
 8009848:	1961      	adds	r1, r4, r5
 800984a:	42a3      	cmp	r3, r4
 800984c:	6025      	str	r5, [r4, #0]
 800984e:	bf18      	it	ne
 8009850:	6059      	strne	r1, [r3, #4]
 8009852:	6863      	ldr	r3, [r4, #4]
 8009854:	bf08      	it	eq
 8009856:	6031      	streq	r1, [r6, #0]
 8009858:	5162      	str	r2, [r4, r5]
 800985a:	604b      	str	r3, [r1, #4]
 800985c:	4638      	mov	r0, r7
 800985e:	f104 060b 	add.w	r6, r4, #11
 8009862:	f000 f8cf 	bl	8009a04 <__malloc_unlock>
 8009866:	f026 0607 	bic.w	r6, r6, #7
 800986a:	1d23      	adds	r3, r4, #4
 800986c:	1af2      	subs	r2, r6, r3
 800986e:	d0b6      	beq.n	80097de <_malloc_r+0x22>
 8009870:	1b9b      	subs	r3, r3, r6
 8009872:	50a3      	str	r3, [r4, r2]
 8009874:	e7b3      	b.n	80097de <_malloc_r+0x22>
 8009876:	6862      	ldr	r2, [r4, #4]
 8009878:	42a3      	cmp	r3, r4
 800987a:	bf0c      	ite	eq
 800987c:	6032      	streq	r2, [r6, #0]
 800987e:	605a      	strne	r2, [r3, #4]
 8009880:	e7ec      	b.n	800985c <_malloc_r+0xa0>
 8009882:	4623      	mov	r3, r4
 8009884:	6864      	ldr	r4, [r4, #4]
 8009886:	e7b2      	b.n	80097ee <_malloc_r+0x32>
 8009888:	4634      	mov	r4, r6
 800988a:	6876      	ldr	r6, [r6, #4]
 800988c:	e7b9      	b.n	8009802 <_malloc_r+0x46>
 800988e:	230c      	movs	r3, #12
 8009890:	603b      	str	r3, [r7, #0]
 8009892:	4638      	mov	r0, r7
 8009894:	f000 f8b6 	bl	8009a04 <__malloc_unlock>
 8009898:	e7a1      	b.n	80097de <_malloc_r+0x22>
 800989a:	6025      	str	r5, [r4, #0]
 800989c:	e7de      	b.n	800985c <_malloc_r+0xa0>
 800989e:	bf00      	nop
 80098a0:	2000043c 	.word	0x2000043c

080098a4 <_sbrk_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	4d06      	ldr	r5, [pc, #24]	; (80098c0 <_sbrk_r+0x1c>)
 80098a8:	2300      	movs	r3, #0
 80098aa:	4604      	mov	r4, r0
 80098ac:	4608      	mov	r0, r1
 80098ae:	602b      	str	r3, [r5, #0]
 80098b0:	f7f7 fa92 	bl	8000dd8 <_sbrk>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	d102      	bne.n	80098be <_sbrk_r+0x1a>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	b103      	cbz	r3, 80098be <_sbrk_r+0x1a>
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	bd38      	pop	{r3, r4, r5, pc}
 80098c0:	20000444 	.word	0x20000444

080098c4 <__sread>:
 80098c4:	b510      	push	{r4, lr}
 80098c6:	460c      	mov	r4, r1
 80098c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098cc:	f000 f8a0 	bl	8009a10 <_read_r>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	bfab      	itete	ge
 80098d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098d6:	89a3      	ldrhlt	r3, [r4, #12]
 80098d8:	181b      	addge	r3, r3, r0
 80098da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098de:	bfac      	ite	ge
 80098e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80098e2:	81a3      	strhlt	r3, [r4, #12]
 80098e4:	bd10      	pop	{r4, pc}

080098e6 <__swrite>:
 80098e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ea:	461f      	mov	r7, r3
 80098ec:	898b      	ldrh	r3, [r1, #12]
 80098ee:	05db      	lsls	r3, r3, #23
 80098f0:	4605      	mov	r5, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	4616      	mov	r6, r2
 80098f6:	d505      	bpl.n	8009904 <__swrite+0x1e>
 80098f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fc:	2302      	movs	r3, #2
 80098fe:	2200      	movs	r2, #0
 8009900:	f000 f868 	bl	80099d4 <_lseek_r>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800990a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	4632      	mov	r2, r6
 8009912:	463b      	mov	r3, r7
 8009914:	4628      	mov	r0, r5
 8009916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800991a:	f000 b817 	b.w	800994c <_write_r>

0800991e <__sseek>:
 800991e:	b510      	push	{r4, lr}
 8009920:	460c      	mov	r4, r1
 8009922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009926:	f000 f855 	bl	80099d4 <_lseek_r>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	bf15      	itete	ne
 8009930:	6560      	strne	r0, [r4, #84]	; 0x54
 8009932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800993a:	81a3      	strheq	r3, [r4, #12]
 800993c:	bf18      	it	ne
 800993e:	81a3      	strhne	r3, [r4, #12]
 8009940:	bd10      	pop	{r4, pc}

08009942 <__sclose>:
 8009942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009946:	f000 b813 	b.w	8009970 <_close_r>
	...

0800994c <_write_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	; (800996c <_write_r+0x20>)
 8009950:	4604      	mov	r4, r0
 8009952:	4608      	mov	r0, r1
 8009954:	4611      	mov	r1, r2
 8009956:	2200      	movs	r2, #0
 8009958:	602a      	str	r2, [r5, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	f7f7 fa84 	bl	8000e68 <_write>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_write_r+0x1e>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_write_r+0x1e>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20000444 	.word	0x20000444

08009970 <_close_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d06      	ldr	r5, [pc, #24]	; (800998c <_close_r+0x1c>)
 8009974:	2300      	movs	r3, #0
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	f7f7 f9f7 	bl	8000d6e <_close>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_close_r+0x1a>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_close_r+0x1a>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	20000444 	.word	0x20000444

08009990 <_fstat_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	; (80099b0 <_fstat_r+0x20>)
 8009994:	2300      	movs	r3, #0
 8009996:	4604      	mov	r4, r0
 8009998:	4608      	mov	r0, r1
 800999a:	4611      	mov	r1, r2
 800999c:	602b      	str	r3, [r5, #0]
 800999e:	f7f7 f9f2 	bl	8000d86 <_fstat>
 80099a2:	1c43      	adds	r3, r0, #1
 80099a4:	d102      	bne.n	80099ac <_fstat_r+0x1c>
 80099a6:	682b      	ldr	r3, [r5, #0]
 80099a8:	b103      	cbz	r3, 80099ac <_fstat_r+0x1c>
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	bd38      	pop	{r3, r4, r5, pc}
 80099ae:	bf00      	nop
 80099b0:	20000444 	.word	0x20000444

080099b4 <_isatty_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4d06      	ldr	r5, [pc, #24]	; (80099d0 <_isatty_r+0x1c>)
 80099b8:	2300      	movs	r3, #0
 80099ba:	4604      	mov	r4, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	f7f7 f9f1 	bl	8000da6 <_isatty>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_isatty_r+0x1a>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_isatty_r+0x1a>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	20000444 	.word	0x20000444

080099d4 <_lseek_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	; (80099f4 <_lseek_r+0x20>)
 80099d8:	4604      	mov	r4, r0
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	602a      	str	r2, [r5, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f7f7 f9ea 	bl	8000dbc <_lseek>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_lseek_r+0x1e>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_lseek_r+0x1e>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20000444 	.word	0x20000444

080099f8 <__malloc_lock>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__malloc_lock+0x8>)
 80099fa:	f7ff be0b 	b.w	8009614 <__retarget_lock_acquire_recursive>
 80099fe:	bf00      	nop
 8009a00:	20000439 	.word	0x20000439

08009a04 <__malloc_unlock>:
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <__malloc_unlock+0x8>)
 8009a06:	f7ff be06 	b.w	8009616 <__retarget_lock_release_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	20000439 	.word	0x20000439

08009a10 <_read_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d07      	ldr	r5, [pc, #28]	; (8009a30 <_read_r+0x20>)
 8009a14:	4604      	mov	r4, r0
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	602a      	str	r2, [r5, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f7f7 f988 	bl	8000d34 <_read>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_read_r+0x1e>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_read_r+0x1e>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	20000444 	.word	0x20000444

08009a34 <_init>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	bf00      	nop
 8009a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3a:	bc08      	pop	{r3}
 8009a3c:	469e      	mov	lr, r3
 8009a3e:	4770      	bx	lr

08009a40 <_fini>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	bf00      	nop
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr
